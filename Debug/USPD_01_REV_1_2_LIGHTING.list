
USPD_01_REV_1_2_LIGHTING.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001bbf4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e0  0801bd88  0801bd88  0002bd88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c468  0801c468  000300dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801c468  0801c468  0002c468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c470  0801c470  000300dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c470  0801c470  0002c470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c474  0801c474  0002c474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  0801c478  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300dc  2**0
                  CONTENTS
 10 .bss          0000a1cc  200000e0  200000e0  000300e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000a2ac  2000a2ac  000300e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00035282  00000000  00000000  0003010c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000061bf  00000000  00000000  0006538e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f58  00000000  00000000  0006b550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001cf8  00000000  00000000  0006d4a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a3ec  00000000  00000000  0006f1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002e5c8  00000000  00000000  0009958c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0005  00000000  00000000  000c7b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001b7b59  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000888c  00000000  00000000  001b7bac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000e0 	.word	0x200000e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801bd6c 	.word	0x0801bd6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000e4 	.word	0x200000e4
 80001cc:	0801bd6c 	.word	0x0801bd6c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6c:	f000 b96e 	b.w	8000e4c <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9d08      	ldr	r5, [sp, #32]
 8000b8e:	4604      	mov	r4, r0
 8000b90:	468c      	mov	ip, r1
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	f040 8083 	bne.w	8000c9e <__udivmoddi4+0x116>
 8000b98:	428a      	cmp	r2, r1
 8000b9a:	4617      	mov	r7, r2
 8000b9c:	d947      	bls.n	8000c2e <__udivmoddi4+0xa6>
 8000b9e:	fab2 f282 	clz	r2, r2
 8000ba2:	b142      	cbz	r2, 8000bb6 <__udivmoddi4+0x2e>
 8000ba4:	f1c2 0020 	rsb	r0, r2, #32
 8000ba8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bac:	4091      	lsls	r1, r2
 8000bae:	4097      	lsls	r7, r2
 8000bb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000bb4:	4094      	lsls	r4, r2
 8000bb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bba:	0c23      	lsrs	r3, r4, #16
 8000bbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000bc0:	fa1f fe87 	uxth.w	lr, r7
 8000bc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000bc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bcc:	fb06 f10e 	mul.w	r1, r6, lr
 8000bd0:	4299      	cmp	r1, r3
 8000bd2:	d909      	bls.n	8000be8 <__udivmoddi4+0x60>
 8000bd4:	18fb      	adds	r3, r7, r3
 8000bd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bda:	f080 8119 	bcs.w	8000e10 <__udivmoddi4+0x288>
 8000bde:	4299      	cmp	r1, r3
 8000be0:	f240 8116 	bls.w	8000e10 <__udivmoddi4+0x288>
 8000be4:	3e02      	subs	r6, #2
 8000be6:	443b      	add	r3, r7
 8000be8:	1a5b      	subs	r3, r3, r1
 8000bea:	b2a4      	uxth	r4, r4
 8000bec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bfc:	45a6      	cmp	lr, r4
 8000bfe:	d909      	bls.n	8000c14 <__udivmoddi4+0x8c>
 8000c00:	193c      	adds	r4, r7, r4
 8000c02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c06:	f080 8105 	bcs.w	8000e14 <__udivmoddi4+0x28c>
 8000c0a:	45a6      	cmp	lr, r4
 8000c0c:	f240 8102 	bls.w	8000e14 <__udivmoddi4+0x28c>
 8000c10:	3802      	subs	r0, #2
 8000c12:	443c      	add	r4, r7
 8000c14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c18:	eba4 040e 	sub.w	r4, r4, lr
 8000c1c:	2600      	movs	r6, #0
 8000c1e:	b11d      	cbz	r5, 8000c28 <__udivmoddi4+0xa0>
 8000c20:	40d4      	lsrs	r4, r2
 8000c22:	2300      	movs	r3, #0
 8000c24:	e9c5 4300 	strd	r4, r3, [r5]
 8000c28:	4631      	mov	r1, r6
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	b902      	cbnz	r2, 8000c32 <__udivmoddi4+0xaa>
 8000c30:	deff      	udf	#255	; 0xff
 8000c32:	fab2 f282 	clz	r2, r2
 8000c36:	2a00      	cmp	r2, #0
 8000c38:	d150      	bne.n	8000cdc <__udivmoddi4+0x154>
 8000c3a:	1bcb      	subs	r3, r1, r7
 8000c3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c40:	fa1f f887 	uxth.w	r8, r7
 8000c44:	2601      	movs	r6, #1
 8000c46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c4a:	0c21      	lsrs	r1, r4, #16
 8000c4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c54:	fb08 f30c 	mul.w	r3, r8, ip
 8000c58:	428b      	cmp	r3, r1
 8000c5a:	d907      	bls.n	8000c6c <__udivmoddi4+0xe4>
 8000c5c:	1879      	adds	r1, r7, r1
 8000c5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c62:	d202      	bcs.n	8000c6a <__udivmoddi4+0xe2>
 8000c64:	428b      	cmp	r3, r1
 8000c66:	f200 80e9 	bhi.w	8000e3c <__udivmoddi4+0x2b4>
 8000c6a:	4684      	mov	ip, r0
 8000c6c:	1ac9      	subs	r1, r1, r3
 8000c6e:	b2a3      	uxth	r3, r4
 8000c70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c7c:	fb08 f800 	mul.w	r8, r8, r0
 8000c80:	45a0      	cmp	r8, r4
 8000c82:	d907      	bls.n	8000c94 <__udivmoddi4+0x10c>
 8000c84:	193c      	adds	r4, r7, r4
 8000c86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8a:	d202      	bcs.n	8000c92 <__udivmoddi4+0x10a>
 8000c8c:	45a0      	cmp	r8, r4
 8000c8e:	f200 80d9 	bhi.w	8000e44 <__udivmoddi4+0x2bc>
 8000c92:	4618      	mov	r0, r3
 8000c94:	eba4 0408 	sub.w	r4, r4, r8
 8000c98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c9c:	e7bf      	b.n	8000c1e <__udivmoddi4+0x96>
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d909      	bls.n	8000cb6 <__udivmoddi4+0x12e>
 8000ca2:	2d00      	cmp	r5, #0
 8000ca4:	f000 80b1 	beq.w	8000e0a <__udivmoddi4+0x282>
 8000ca8:	2600      	movs	r6, #0
 8000caa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cae:	4630      	mov	r0, r6
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	fab3 f683 	clz	r6, r3
 8000cba:	2e00      	cmp	r6, #0
 8000cbc:	d14a      	bne.n	8000d54 <__udivmoddi4+0x1cc>
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d302      	bcc.n	8000cc8 <__udivmoddi4+0x140>
 8000cc2:	4282      	cmp	r2, r0
 8000cc4:	f200 80b8 	bhi.w	8000e38 <__udivmoddi4+0x2b0>
 8000cc8:	1a84      	subs	r4, r0, r2
 8000cca:	eb61 0103 	sbc.w	r1, r1, r3
 8000cce:	2001      	movs	r0, #1
 8000cd0:	468c      	mov	ip, r1
 8000cd2:	2d00      	cmp	r5, #0
 8000cd4:	d0a8      	beq.n	8000c28 <__udivmoddi4+0xa0>
 8000cd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cda:	e7a5      	b.n	8000c28 <__udivmoddi4+0xa0>
 8000cdc:	f1c2 0320 	rsb	r3, r2, #32
 8000ce0:	fa20 f603 	lsr.w	r6, r0, r3
 8000ce4:	4097      	lsls	r7, r2
 8000ce6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cee:	40d9      	lsrs	r1, r3
 8000cf0:	4330      	orrs	r0, r6
 8000cf2:	0c03      	lsrs	r3, r0, #16
 8000cf4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000cf8:	fa1f f887 	uxth.w	r8, r7
 8000cfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d04:	fb06 f108 	mul.w	r1, r6, r8
 8000d08:	4299      	cmp	r1, r3
 8000d0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d0e:	d909      	bls.n	8000d24 <__udivmoddi4+0x19c>
 8000d10:	18fb      	adds	r3, r7, r3
 8000d12:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d16:	f080 808d 	bcs.w	8000e34 <__udivmoddi4+0x2ac>
 8000d1a:	4299      	cmp	r1, r3
 8000d1c:	f240 808a 	bls.w	8000e34 <__udivmoddi4+0x2ac>
 8000d20:	3e02      	subs	r6, #2
 8000d22:	443b      	add	r3, r7
 8000d24:	1a5b      	subs	r3, r3, r1
 8000d26:	b281      	uxth	r1, r0
 8000d28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d34:	fb00 f308 	mul.w	r3, r0, r8
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0x1c4>
 8000d3c:	1879      	adds	r1, r7, r1
 8000d3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d42:	d273      	bcs.n	8000e2c <__udivmoddi4+0x2a4>
 8000d44:	428b      	cmp	r3, r1
 8000d46:	d971      	bls.n	8000e2c <__udivmoddi4+0x2a4>
 8000d48:	3802      	subs	r0, #2
 8000d4a:	4439      	add	r1, r7
 8000d4c:	1acb      	subs	r3, r1, r3
 8000d4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d52:	e778      	b.n	8000c46 <__udivmoddi4+0xbe>
 8000d54:	f1c6 0c20 	rsb	ip, r6, #32
 8000d58:	fa03 f406 	lsl.w	r4, r3, r6
 8000d5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d60:	431c      	orrs	r4, r3
 8000d62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d66:	fa01 f306 	lsl.w	r3, r1, r6
 8000d6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d72:	431f      	orrs	r7, r3
 8000d74:	0c3b      	lsrs	r3, r7, #16
 8000d76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d7a:	fa1f f884 	uxth.w	r8, r4
 8000d7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d86:	fb09 fa08 	mul.w	sl, r9, r8
 8000d8a:	458a      	cmp	sl, r1
 8000d8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000d90:	fa00 f306 	lsl.w	r3, r0, r6
 8000d94:	d908      	bls.n	8000da8 <__udivmoddi4+0x220>
 8000d96:	1861      	adds	r1, r4, r1
 8000d98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d9c:	d248      	bcs.n	8000e30 <__udivmoddi4+0x2a8>
 8000d9e:	458a      	cmp	sl, r1
 8000da0:	d946      	bls.n	8000e30 <__udivmoddi4+0x2a8>
 8000da2:	f1a9 0902 	sub.w	r9, r9, #2
 8000da6:	4421      	add	r1, r4
 8000da8:	eba1 010a 	sub.w	r1, r1, sl
 8000dac:	b2bf      	uxth	r7, r7
 8000dae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000db6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dba:	fb00 f808 	mul.w	r8, r0, r8
 8000dbe:	45b8      	cmp	r8, r7
 8000dc0:	d907      	bls.n	8000dd2 <__udivmoddi4+0x24a>
 8000dc2:	19e7      	adds	r7, r4, r7
 8000dc4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc8:	d22e      	bcs.n	8000e28 <__udivmoddi4+0x2a0>
 8000dca:	45b8      	cmp	r8, r7
 8000dcc:	d92c      	bls.n	8000e28 <__udivmoddi4+0x2a0>
 8000dce:	3802      	subs	r0, #2
 8000dd0:	4427      	add	r7, r4
 8000dd2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dd6:	eba7 0708 	sub.w	r7, r7, r8
 8000dda:	fba0 8902 	umull	r8, r9, r0, r2
 8000dde:	454f      	cmp	r7, r9
 8000de0:	46c6      	mov	lr, r8
 8000de2:	4649      	mov	r1, r9
 8000de4:	d31a      	bcc.n	8000e1c <__udivmoddi4+0x294>
 8000de6:	d017      	beq.n	8000e18 <__udivmoddi4+0x290>
 8000de8:	b15d      	cbz	r5, 8000e02 <__udivmoddi4+0x27a>
 8000dea:	ebb3 020e 	subs.w	r2, r3, lr
 8000dee:	eb67 0701 	sbc.w	r7, r7, r1
 8000df2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000df6:	40f2      	lsrs	r2, r6
 8000df8:	ea4c 0202 	orr.w	r2, ip, r2
 8000dfc:	40f7      	lsrs	r7, r6
 8000dfe:	e9c5 2700 	strd	r2, r7, [r5]
 8000e02:	2600      	movs	r6, #0
 8000e04:	4631      	mov	r1, r6
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	462e      	mov	r6, r5
 8000e0c:	4628      	mov	r0, r5
 8000e0e:	e70b      	b.n	8000c28 <__udivmoddi4+0xa0>
 8000e10:	4606      	mov	r6, r0
 8000e12:	e6e9      	b.n	8000be8 <__udivmoddi4+0x60>
 8000e14:	4618      	mov	r0, r3
 8000e16:	e6fd      	b.n	8000c14 <__udivmoddi4+0x8c>
 8000e18:	4543      	cmp	r3, r8
 8000e1a:	d2e5      	bcs.n	8000de8 <__udivmoddi4+0x260>
 8000e1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e20:	eb69 0104 	sbc.w	r1, r9, r4
 8000e24:	3801      	subs	r0, #1
 8000e26:	e7df      	b.n	8000de8 <__udivmoddi4+0x260>
 8000e28:	4608      	mov	r0, r1
 8000e2a:	e7d2      	b.n	8000dd2 <__udivmoddi4+0x24a>
 8000e2c:	4660      	mov	r0, ip
 8000e2e:	e78d      	b.n	8000d4c <__udivmoddi4+0x1c4>
 8000e30:	4681      	mov	r9, r0
 8000e32:	e7b9      	b.n	8000da8 <__udivmoddi4+0x220>
 8000e34:	4666      	mov	r6, ip
 8000e36:	e775      	b.n	8000d24 <__udivmoddi4+0x19c>
 8000e38:	4630      	mov	r0, r6
 8000e3a:	e74a      	b.n	8000cd2 <__udivmoddi4+0x14a>
 8000e3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e40:	4439      	add	r1, r7
 8000e42:	e713      	b.n	8000c6c <__udivmoddi4+0xe4>
 8000e44:	3802      	subs	r0, #2
 8000e46:	443c      	add	r4, r7
 8000e48:	e724      	b.n	8000c94 <__udivmoddi4+0x10c>
 8000e4a:	bf00      	nop

08000e4c <__aeabi_idiv0>:
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop

08000e50 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	60f8      	str	r0, [r7, #12]
 8000e58:	60b9      	str	r1, [r7, #8]
 8000e5a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	4a07      	ldr	r2, [pc, #28]	; (8000e7c <vApplicationGetIdleTaskMemory+0x2c>)
 8000e60:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	4a06      	ldr	r2, [pc, #24]	; (8000e80 <vApplicationGetIdleTaskMemory+0x30>)
 8000e66:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2280      	movs	r2, #128	; 0x80
 8000e6c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000e6e:	bf00      	nop
 8000e70:	3714      	adds	r7, #20
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	200000fc 	.word	0x200000fc
 8000e80:	200001b0 	.word	0x200001b0

08000e84 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	4a07      	ldr	r2, [pc, #28]	; (8000eb0 <vApplicationGetTimerTaskMemory+0x2c>)
 8000e94:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	4a06      	ldr	r2, [pc, #24]	; (8000eb4 <vApplicationGetTimerTaskMemory+0x30>)
 8000e9a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ea2:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000ea4:	bf00      	nop
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	200003b0 	.word	0x200003b0
 8000eb4:	20000464 	.word	0x20000464

08000eb8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ebc:	f3bf 8f4f 	dsb	sy
}
 8000ec0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <__NVIC_SystemReset+0x24>)
 8000ec4:	68db      	ldr	r3, [r3, #12]
 8000ec6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000eca:	4904      	ldr	r1, [pc, #16]	; (8000edc <__NVIC_SystemReset+0x24>)
 8000ecc:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <__NVIC_SystemReset+0x28>)
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ed2:	f3bf 8f4f 	dsb	sy
}
 8000ed6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <__NVIC_SystemReset+0x20>
 8000edc:	e000ed00 	.word	0xe000ed00
 8000ee0:	05fa0004 	.word	0x05fa0004

08000ee4 <HAL_UART_TxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
	  if (huart->Instance == USART3)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a10      	ldr	r2, [pc, #64]	; (8000f34 <HAL_UART_TxCpltCallback+0x50>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d104      	bne.n	8000f00 <HAL_UART_TxCpltCallback+0x1c>
	  {
		  osSemaphoreRelease(TransmissionStateHandle);
 8000ef6:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <HAL_UART_TxCpltCallback+0x54>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4618      	mov	r0, r3
 8000efc:	f007 fe12 	bl	8008b24 <osSemaphoreRelease>
	  }

	  if (huart->Instance == USART6)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a0d      	ldr	r2, [pc, #52]	; (8000f3c <HAL_UART_TxCpltCallback+0x58>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d10f      	bne.n	8000f2a <HAL_UART_TxCpltCallback+0x46>
	  {
		  //LED8_TOGGLE();
		  osSemaphoreRelease(RS485TransmissionStateHandle);
 8000f0a:	4b0d      	ldr	r3, [pc, #52]	; (8000f40 <HAL_UART_TxCpltCallback+0x5c>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f007 fe08 	bl	8008b24 <osSemaphoreRelease>
		  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_RESET); // устанавливаем микросхему на прием
 8000f14:	2200      	movs	r2, #0
 8000f16:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f1a:	480a      	ldr	r0, [pc, #40]	; (8000f44 <HAL_UART_TxCpltCallback+0x60>)
 8000f1c:	f002 ffa0 	bl	8003e60 <HAL_GPIO_WritePin>
		  HAL_UART_Receive_DMA(&huart6, &meter_data[0], 1); // включаем прием со счетчика
 8000f20:	2201      	movs	r2, #1
 8000f22:	4909      	ldr	r1, [pc, #36]	; (8000f48 <HAL_UART_TxCpltCallback+0x64>)
 8000f24:	4809      	ldr	r0, [pc, #36]	; (8000f4c <HAL_UART_TxCpltCallback+0x68>)
 8000f26:	f006 fb37 	bl	8007598 <HAL_UART_Receive_DMA>

	  }

}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40004800 	.word	0x40004800
 8000f38:	20009d9c 	.word	0x20009d9c
 8000f3c:	40011400 	.word	0x40011400
 8000f40:	20009ad8 	.word	0x20009ad8
 8000f44:	40021800 	.word	0x40021800
 8000f48:	2000978c 	.word	0x2000978c
 8000f4c:	20009d00 	.word	0x20009d00

08000f50 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]

	  if (huart->Instance == USART3)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a21      	ldr	r2, [pc, #132]	; (8000fe4 <HAL_UART_RxCpltCallback+0x94>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d119      	bne.n	8000f96 <HAL_UART_RxCpltCallback+0x46>
	  {
		  //LED_VD5_TOGGLE();
		  modem_rx_buffer[modem_rx_number++] = modem_rx_data[0];
 8000f62:	4b21      	ldr	r3, [pc, #132]	; (8000fe8 <HAL_UART_RxCpltCallback+0x98>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	1c5a      	adds	r2, r3, #1
 8000f68:	b2d1      	uxtb	r1, r2
 8000f6a:	4a1f      	ldr	r2, [pc, #124]	; (8000fe8 <HAL_UART_RxCpltCallback+0x98>)
 8000f6c:	7011      	strb	r1, [r2, #0]
 8000f6e:	461a      	mov	r2, r3
 8000f70:	4b1e      	ldr	r3, [pc, #120]	; (8000fec <HAL_UART_RxCpltCallback+0x9c>)
 8000f72:	7819      	ldrb	r1, [r3, #0]
 8000f74:	4b1e      	ldr	r3, [pc, #120]	; (8000ff0 <HAL_UART_RxCpltCallback+0xa0>)
 8000f76:	5499      	strb	r1, [r3, r2]
		  osMessagePut(ModbusQueueHandle, (uint32_t)modem_rx_data[0], 2000);
 8000f78:	4b1e      	ldr	r3, [pc, #120]	; (8000ff4 <HAL_UART_RxCpltCallback+0xa4>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a1b      	ldr	r2, [pc, #108]	; (8000fec <HAL_UART_RxCpltCallback+0x9c>)
 8000f7e:	7812      	ldrb	r2, [r2, #0]
 8000f80:	4611      	mov	r1, r2
 8000f82:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000f86:	4618      	mov	r0, r3
 8000f88:	f007 fe2a 	bl	8008be0 <osMessagePut>
		  HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	4917      	ldr	r1, [pc, #92]	; (8000fec <HAL_UART_RxCpltCallback+0x9c>)
 8000f90:	4819      	ldr	r0, [pc, #100]	; (8000ff8 <HAL_UART_RxCpltCallback+0xa8>)
 8000f92:	f006 fb01 	bl	8007598 <HAL_UART_Receive_DMA>
	  }

	  if (huart->Instance == USART6)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a18      	ldr	r2, [pc, #96]	; (8000ffc <HAL_UART_RxCpltCallback+0xac>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d11c      	bne.n	8000fda <HAL_UART_RxCpltCallback+0x8a>
	  {
		  //LED7_TOGGLE();
		  meter_data[0] = meter_data[0]&0x7F;
 8000fa0:	4b17      	ldr	r3, [pc, #92]	; (8001000 <HAL_UART_RxCpltCallback+0xb0>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	4b15      	ldr	r3, [pc, #84]	; (8001000 <HAL_UART_RxCpltCallback+0xb0>)
 8000fac:	701a      	strb	r2, [r3, #0]
		  meter_rx_buffer[meter_rx_number++] = meter_data[0];
 8000fae:	4b15      	ldr	r3, [pc, #84]	; (8001004 <HAL_UART_RxCpltCallback+0xb4>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	1c5a      	adds	r2, r3, #1
 8000fb4:	b2d1      	uxtb	r1, r2
 8000fb6:	4a13      	ldr	r2, [pc, #76]	; (8001004 <HAL_UART_RxCpltCallback+0xb4>)
 8000fb8:	7011      	strb	r1, [r2, #0]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	4b10      	ldr	r3, [pc, #64]	; (8001000 <HAL_UART_RxCpltCallback+0xb0>)
 8000fbe:	7819      	ldrb	r1, [r3, #0]
 8000fc0:	4b11      	ldr	r3, [pc, #68]	; (8001008 <HAL_UART_RxCpltCallback+0xb8>)
 8000fc2:	5499      	strb	r1, [r3, r2]
		  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_RESET); // устанавливаем микросхему на прием
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fca:	4810      	ldr	r0, [pc, #64]	; (800100c <HAL_UART_RxCpltCallback+0xbc>)
 8000fcc:	f002 ff48 	bl	8003e60 <HAL_GPIO_WritePin>
		  HAL_UART_Receive_DMA(&huart6, &meter_data[0], 1); // включаем прием со счетчика
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	490b      	ldr	r1, [pc, #44]	; (8001000 <HAL_UART_RxCpltCallback+0xb0>)
 8000fd4:	480e      	ldr	r0, [pc, #56]	; (8001010 <HAL_UART_RxCpltCallback+0xc0>)
 8000fd6:	f006 fadf 	bl	8007598 <HAL_UART_Receive_DMA>

		  //if(meter_rx_number>10){meter_rx_number=0;}

	  }

}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40004800 	.word	0x40004800
 8000fe8:	20000864 	.word	0x20000864
 8000fec:	20009afc 	.word	0x20009afc
 8000ff0:	20009c00 	.word	0x20009c00
 8000ff4:	200082e8 	.word	0x200082e8
 8000ff8:	2000823c 	.word	0x2000823c
 8000ffc:	40011400 	.word	0x40011400
 8001000:	2000978c 	.word	0x2000978c
 8001004:	20000865 	.word	0x20000865
 8001008:	2000994c 	.word	0x2000994c
 800100c:	40021800 	.word	0x40021800
 8001010:	20009d00 	.word	0x20009d00

08001014 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  if(hadc->Instance == ADC1)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a3d      	ldr	r2, [pc, #244]	; (8001118 <HAL_ADC_ConvCpltCallback+0x104>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d171      	bne.n	800110a <HAL_ADC_ConvCpltCallback+0xf6>
  {
	//LED_VD5_TOGGLE();

	cur_data[0] = cur_data[0] + data_in[0];
 8001026:	4b3d      	ldr	r3, [pc, #244]	; (800111c <HAL_ADC_ConvCpltCallback+0x108>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a3d      	ldr	r2, [pc, #244]	; (8001120 <HAL_ADC_ConvCpltCallback+0x10c>)
 800102c:	8812      	ldrh	r2, [r2, #0]
 800102e:	4413      	add	r3, r2
 8001030:	4a3a      	ldr	r2, [pc, #232]	; (800111c <HAL_ADC_ConvCpltCallback+0x108>)
 8001032:	6013      	str	r3, [r2, #0]
	cur_data[1] = cur_data[1] + data_in[1];
 8001034:	4b39      	ldr	r3, [pc, #228]	; (800111c <HAL_ADC_ConvCpltCallback+0x108>)
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	4a39      	ldr	r2, [pc, #228]	; (8001120 <HAL_ADC_ConvCpltCallback+0x10c>)
 800103a:	8852      	ldrh	r2, [r2, #2]
 800103c:	4413      	add	r3, r2
 800103e:	4a37      	ldr	r2, [pc, #220]	; (800111c <HAL_ADC_ConvCpltCallback+0x108>)
 8001040:	6053      	str	r3, [r2, #4]
	cur_data[2] = cur_data[2] + data_in[2];
 8001042:	4b36      	ldr	r3, [pc, #216]	; (800111c <HAL_ADC_ConvCpltCallback+0x108>)
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	4a36      	ldr	r2, [pc, #216]	; (8001120 <HAL_ADC_ConvCpltCallback+0x10c>)
 8001048:	8892      	ldrh	r2, [r2, #4]
 800104a:	4413      	add	r3, r2
 800104c:	4a33      	ldr	r2, [pc, #204]	; (800111c <HAL_ADC_ConvCpltCallback+0x108>)
 800104e:	6093      	str	r3, [r2, #8]

	cur_counter++;
 8001050:	4b34      	ldr	r3, [pc, #208]	; (8001124 <HAL_ADC_ConvCpltCallback+0x110>)
 8001052:	881b      	ldrh	r3, [r3, #0]
 8001054:	b29b      	uxth	r3, r3
 8001056:	3301      	adds	r3, #1
 8001058:	b29a      	uxth	r2, r3
 800105a:	4b32      	ldr	r3, [pc, #200]	; (8001124 <HAL_ADC_ConvCpltCallback+0x110>)
 800105c:	801a      	strh	r2, [r3, #0]

	if(cur_counter>=100)
 800105e:	4b31      	ldr	r3, [pc, #196]	; (8001124 <HAL_ADC_ConvCpltCallback+0x110>)
 8001060:	881b      	ldrh	r3, [r3, #0]
 8001062:	b29b      	uxth	r3, r3
 8001064:	2b63      	cmp	r3, #99	; 0x63
 8001066:	d950      	bls.n	800110a <HAL_ADC_ConvCpltCallback+0xf6>
	{
		cur_counter=0;
 8001068:	4b2e      	ldr	r3, [pc, #184]	; (8001124 <HAL_ADC_ConvCpltCallback+0x110>)
 800106a:	2200      	movs	r2, #0
 800106c:	801a      	strh	r2, [r3, #0]

		cur_a_average = cur_data[0]/100;
 800106e:	4b2b      	ldr	r3, [pc, #172]	; (800111c <HAL_ADC_ConvCpltCallback+0x108>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a2d      	ldr	r2, [pc, #180]	; (8001128 <HAL_ADC_ConvCpltCallback+0x114>)
 8001074:	fba2 2303 	umull	r2, r3, r2, r3
 8001078:	095b      	lsrs	r3, r3, #5
 800107a:	4a2c      	ldr	r2, [pc, #176]	; (800112c <HAL_ADC_ConvCpltCallback+0x118>)
 800107c:	6013      	str	r3, [r2, #0]
		cur_b_average = cur_data[1]/100;
 800107e:	4b27      	ldr	r3, [pc, #156]	; (800111c <HAL_ADC_ConvCpltCallback+0x108>)
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	4a29      	ldr	r2, [pc, #164]	; (8001128 <HAL_ADC_ConvCpltCallback+0x114>)
 8001084:	fba2 2303 	umull	r2, r3, r2, r3
 8001088:	095b      	lsrs	r3, r3, #5
 800108a:	4a29      	ldr	r2, [pc, #164]	; (8001130 <HAL_ADC_ConvCpltCallback+0x11c>)
 800108c:	6013      	str	r3, [r2, #0]
		cur_c_average = cur_data[2]/100;
 800108e:	4b23      	ldr	r3, [pc, #140]	; (800111c <HAL_ADC_ConvCpltCallback+0x108>)
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	4a25      	ldr	r2, [pc, #148]	; (8001128 <HAL_ADC_ConvCpltCallback+0x114>)
 8001094:	fba2 2303 	umull	r2, r3, r2, r3
 8001098:	095b      	lsrs	r3, r3, #5
 800109a:	4a26      	ldr	r2, [pc, #152]	; (8001134 <HAL_ADC_ConvCpltCallback+0x120>)
 800109c:	6013      	str	r3, [r2, #0]

		cur_data[0] = 0;
 800109e:	4b1f      	ldr	r3, [pc, #124]	; (800111c <HAL_ADC_ConvCpltCallback+0x108>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
		cur_data[1] = 0;
 80010a4:	4b1d      	ldr	r3, [pc, #116]	; (800111c <HAL_ADC_ConvCpltCallback+0x108>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	605a      	str	r2, [r3, #4]
		cur_data[2] = 0;
 80010aa:	4b1c      	ldr	r3, [pc, #112]	; (800111c <HAL_ADC_ConvCpltCallback+0x108>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	609a      	str	r2, [r3, #8]

		cur_a = cur_a_average*1300/4095; // 283
 80010b0:	4b1e      	ldr	r3, [pc, #120]	; (800112c <HAL_ADC_ConvCpltCallback+0x118>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f240 5214 	movw	r2, #1300	; 0x514
 80010b8:	fb02 f203 	mul.w	r2, r2, r3
 80010bc:	4b1e      	ldr	r3, [pc, #120]	; (8001138 <HAL_ADC_ConvCpltCallback+0x124>)
 80010be:	fba3 1302 	umull	r1, r3, r3, r2
 80010c2:	1ad2      	subs	r2, r2, r3
 80010c4:	0852      	lsrs	r2, r2, #1
 80010c6:	4413      	add	r3, r2
 80010c8:	0adb      	lsrs	r3, r3, #11
 80010ca:	4a1c      	ldr	r2, [pc, #112]	; (800113c <HAL_ADC_ConvCpltCallback+0x128>)
 80010cc:	6013      	str	r3, [r2, #0]
		cur_b = cur_b_average*1300/4095; // 283
 80010ce:	4b18      	ldr	r3, [pc, #96]	; (8001130 <HAL_ADC_ConvCpltCallback+0x11c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f240 5214 	movw	r2, #1300	; 0x514
 80010d6:	fb02 f203 	mul.w	r2, r2, r3
 80010da:	4b17      	ldr	r3, [pc, #92]	; (8001138 <HAL_ADC_ConvCpltCallback+0x124>)
 80010dc:	fba3 1302 	umull	r1, r3, r3, r2
 80010e0:	1ad2      	subs	r2, r2, r3
 80010e2:	0852      	lsrs	r2, r2, #1
 80010e4:	4413      	add	r3, r2
 80010e6:	0adb      	lsrs	r3, r3, #11
 80010e8:	4a15      	ldr	r2, [pc, #84]	; (8001140 <HAL_ADC_ConvCpltCallback+0x12c>)
 80010ea:	6013      	str	r3, [r2, #0]
		cur_c = cur_c_average*1300/4095; // 283
 80010ec:	4b11      	ldr	r3, [pc, #68]	; (8001134 <HAL_ADC_ConvCpltCallback+0x120>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f240 5214 	movw	r2, #1300	; 0x514
 80010f4:	fb02 f203 	mul.w	r2, r2, r3
 80010f8:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <HAL_ADC_ConvCpltCallback+0x124>)
 80010fa:	fba3 1302 	umull	r1, r3, r3, r2
 80010fe:	1ad2      	subs	r2, r2, r3
 8001100:	0852      	lsrs	r2, r2, #1
 8001102:	4413      	add	r3, r2
 8001104:	0adb      	lsrs	r3, r3, #11
 8001106:	4a0f      	ldr	r2, [pc, #60]	; (8001144 <HAL_ADC_ConvCpltCallback+0x130>)
 8001108:	6013      	str	r3, [r2, #0]
    //for (uint8_t i = 0; i < ADC_CHANNELS_NUM; i++)
    //{
      //adcVoltage[i] = adcData[i] * 3.3 / 4095;
    //}
  }
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	40012000 	.word	0x40012000
 800111c:	20000868 	.word	0x20000868
 8001120:	20009e48 	.word	0x20009e48
 8001124:	20000874 	.word	0x20000874
 8001128:	51eb851f 	.word	0x51eb851f
 800112c:	20009d98 	.word	0x20009d98
 8001130:	20009770 	.word	0x20009770
 8001134:	20009adc 	.word	0x20009adc
 8001138:	00100101 	.word	0x00100101
 800113c:	200096ec 	.word	0x200096ec
 8001140:	20009bfc 	.word	0x20009bfc
 8001144:	20009940 	.word	0x20009940

08001148 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001148:	b5b0      	push	{r4, r5, r7, lr}
 800114a:	b0d8      	sub	sp, #352	; 0x160
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800114e:	f001 fa85 	bl	800265c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001152:	f000 f9bd 	bl	80014d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001156:	f000 fc35 	bl	80019c4 <MX_GPIO_Init>
  MX_IWDG_Init();
 800115a:	f000 fac3 	bl	80016e4 <MX_IWDG_Init>
  MX_DMA_Init();
 800115e:	f000 fbe3 	bl	8001928 <MX_DMA_Init>
  MX_RTC_Init();
 8001162:	f000 fad9 	bl	8001718 <MX_RTC_Init>
  MX_SPI2_Init();
 8001166:	f000 fb09 	bl	800177c <MX_SPI2_Init>
  MX_USART3_UART_Init();
 800116a:	f000 fb89 	bl	8001880 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 800116e:	f000 fbb1 	bl	80018d4 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8001172:	f000 fa1b 	bl	80015ac <MX_ADC1_Init>
  MX_TIM2_Init();
 8001176:	f000 fb37 	bl	80017e8 <MX_TIM2_Init>
  MX_I2C1_Init();
 800117a:	f000 fa85 	bl	8001688 <MX_I2C1_Init>
	{
		PHASE_C_ON(); // включаем фазу А
	}
*/

  BUZ_ON();
 800117e:	f015 fe3d 	bl	8016dfc <BUZ_ON>
  HAL_Delay(50);
 8001182:	2032      	movs	r0, #50	; 0x32
 8001184:	f001 faac 	bl	80026e0 <HAL_Delay>
  BUZ_OFF();
 8001188:	f015 fe44 	bl	8016e14 <BUZ_OFF>

  if( ((RCC->BDCR)&0x02) != 0 ) // Проверяем, запустился ли часовой кварц, если запустился включаем светодиод
 800118c:	4bad      	ldr	r3, [pc, #692]	; (8001444 <main+0x2fc>)
 800118e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001190:	f003 0302 	and.w	r3, r3, #2
 8001194:	2b00      	cmp	r3, #0
 8001196:	d002      	beq.n	800119e <main+0x56>
  {
	  LED_VD4_ON();
 8001198:	f015 fe48 	bl	8016e2c <LED_VD4_ON>
 800119c:	e001      	b.n	80011a2 <main+0x5a>
  }
  else
  {
	  LED_VD4_OFF();
 800119e:	f015 fe51 	bl	8016e44 <LED_VD4_OFF>
  }

  TSL2561_setTiming_ms(gain, time,&ms);
 80011a2:	4ba9      	ldr	r3, [pc, #676]	; (8001448 <main+0x300>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	4aa9      	ldr	r2, [pc, #676]	; (800144c <main+0x304>)
 80011a8:	7811      	ldrb	r1, [r2, #0]
 80011aa:	4aa9      	ldr	r2, [pc, #676]	; (8001450 <main+0x308>)
 80011ac:	4618      	mov	r0, r3
 80011ae:	f018 fed8 	bl	8019f62 <TSL2561_setTiming_ms>
  TSL2561_setPowerUp();
 80011b2:	f018 fe8f 	bl	8019ed4 <TSL2561_setPowerUp>
  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */

  osMutexDef(UartMutex);
 80011b6:	2300      	movs	r3, #0
 80011b8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80011bc:	2300      	movs	r3, #0
 80011be:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  UartMutexHandle = osMutexCreate(osMutex(UartMutex));
 80011c2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80011c6:	4618      	mov	r0, r3
 80011c8:	f007 fb90 	bl	80088ec <osMutexCreate>
 80011cc:	4603      	mov	r3, r0
 80011ce:	4aa1      	ldr	r2, [pc, #644]	; (8001454 <main+0x30c>)
 80011d0:	6013      	str	r3, [r2, #0]

  osMutexDef(Fm25v02Mutex);
 80011d2:	2300      	movs	r3, #0
 80011d4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80011d8:	2300      	movs	r3, #0
 80011da:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
  Fm25v02MutexHandle = osMutexCreate(osMutex(Fm25v02Mutex));
 80011de:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80011e2:	4618      	mov	r0, r3
 80011e4:	f007 fb82 	bl	80088ec <osMutexCreate>
 80011e8:	4603      	mov	r3, r0
 80011ea:	4a9b      	ldr	r2, [pc, #620]	; (8001458 <main+0x310>)
 80011ec:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */

  osSemaphoreDef(TransmissionState);
 80011ee:	2300      	movs	r3, #0
 80011f0:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80011f4:	2300      	movs	r3, #0
 80011f6:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  TransmissionStateHandle = osSemaphoreCreate(osSemaphore(TransmissionState), 1);
 80011fa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80011fe:	2101      	movs	r1, #1
 8001200:	4618      	mov	r0, r3
 8001202:	f007 fc0f 	bl	8008a24 <osSemaphoreCreate>
 8001206:	4603      	mov	r3, r0
 8001208:	4a94      	ldr	r2, [pc, #592]	; (800145c <main+0x314>)
 800120a:	6013      	str	r3, [r2, #0]

  osSemaphoreDef(ReceiveState);
 800120c:	2300      	movs	r3, #0
 800120e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8001212:	2300      	movs	r3, #0
 8001214:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
  ReceiveStateHandle = osSemaphoreCreate(osSemaphore(ReceiveState), 1);
 8001218:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800121c:	2101      	movs	r1, #1
 800121e:	4618      	mov	r0, r3
 8001220:	f007 fc00 	bl	8008a24 <osSemaphoreCreate>
 8001224:	4603      	mov	r3, r0
 8001226:	4a8e      	ldr	r2, [pc, #568]	; (8001460 <main+0x318>)
 8001228:	6013      	str	r3, [r2, #0]

  osSemaphoreDef(RS485TransmissionState);
 800122a:	2300      	movs	r3, #0
 800122c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001230:	2300      	movs	r3, #0
 8001232:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  RS485TransmissionStateHandle = osSemaphoreCreate(osSemaphore(RS485TransmissionState), 1);
 8001236:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800123a:	2101      	movs	r1, #1
 800123c:	4618      	mov	r0, r3
 800123e:	f007 fbf1 	bl	8008a24 <osSemaphoreCreate>
 8001242:	4603      	mov	r3, r0
 8001244:	4a87      	ldr	r2, [pc, #540]	; (8001464 <main+0x31c>)
 8001246:	6013      	str	r3, [r2, #0]

  osSemaphoreDef(ModbusPacketReceive);
 8001248:	2300      	movs	r3, #0
 800124a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800124e:	2300      	movs	r3, #0
 8001250:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  ModbusPacketReceiveHandle = osSemaphoreCreate(osSemaphore(ModbusPacketReceive), 1);
 8001254:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001258:	2101      	movs	r1, #1
 800125a:	4618      	mov	r0, r3
 800125c:	f007 fbe2 	bl	8008a24 <osSemaphoreCreate>
 8001260:	4603      	mov	r3, r0
 8001262:	4a81      	ldr	r2, [pc, #516]	; (8001468 <main+0x320>)
 8001264:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_SEMAPHORES */

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */

  osTimerDef(AT_Timer, Callback_AT_Timer);
 8001266:	4b81      	ldr	r3, [pc, #516]	; (800146c <main+0x324>)
 8001268:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800126c:	2300      	movs	r3, #0
 800126e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  AT_TimerHandle = osTimerCreate(osTimer(AT_Timer), osTimerOnce, NULL);
 8001272:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001276:	2200      	movs	r2, #0
 8001278:	2100      	movs	r1, #0
 800127a:	4618      	mov	r0, r3
 800127c:	f007 fa82 	bl	8008784 <osTimerCreate>
 8001280:	4603      	mov	r3, r0
 8001282:	4a7b      	ldr	r2, [pc, #492]	; (8001470 <main+0x328>)
 8001284:	6013      	str	r3, [r2, #0]

  osTimerDef(Ring_Center_Timer, Callback_Ring_Center_Timer);
 8001286:	4b7b      	ldr	r3, [pc, #492]	; (8001474 <main+0x32c>)
 8001288:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800128c:	2300      	movs	r3, #0
 800128e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  Ring_Center_TimerHandle = osTimerCreate(osTimer(Ring_Center_Timer), osTimerOnce, NULL);
 8001292:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001296:	2200      	movs	r2, #0
 8001298:	2100      	movs	r1, #0
 800129a:	4618      	mov	r0, r3
 800129c:	f007 fa72 	bl	8008784 <osTimerCreate>
 80012a0:	4603      	mov	r3, r0
 80012a2:	4a75      	ldr	r2, [pc, #468]	; (8001478 <main+0x330>)
 80012a4:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

  osMessageQDef(ModbusQueue, 256, uint8_t);
 80012a6:	4b75      	ldr	r3, [pc, #468]	; (800147c <main+0x334>)
 80012a8:	f507 7488 	add.w	r4, r7, #272	; 0x110
 80012ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ModbusQueueHandle = osMessageCreate(osMessageQ(ModbusQueue), NULL);
 80012b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80012b6:	2100      	movs	r1, #0
 80012b8:	4618      	mov	r0, r3
 80012ba:	f007 fc69 	bl	8008b90 <osMessageCreate>
 80012be:	4603      	mov	r3, r0
 80012c0:	4a6f      	ldr	r2, [pc, #444]	; (8001480 <main+0x338>)
 80012c2:	6013      	str	r3, [r2, #0]

  osMessageQDef(MeterQueue, 256, uint8_t);
 80012c4:	4b6d      	ldr	r3, [pc, #436]	; (800147c <main+0x334>)
 80012c6:	f507 7480 	add.w	r4, r7, #256	; 0x100
 80012ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  MeterQueueHandle = osMessageCreate(osMessageQ(MeterQueue), NULL);
 80012d0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80012d4:	2100      	movs	r1, #0
 80012d6:	4618      	mov	r0, r3
 80012d8:	f007 fc5a 	bl	8008b90 <osMessageCreate>
 80012dc:	4603      	mov	r3, r0
 80012de:	4a69      	ldr	r2, [pc, #420]	; (8001484 <main+0x33c>)
 80012e0:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80012e2:	4b69      	ldr	r3, [pc, #420]	; (8001488 <main+0x340>)
 80012e4:	f107 04e4 	add.w	r4, r7, #228	; 0xe4
 80012e8:	461d      	mov	r5, r3
 80012ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80012f6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80012fa:	2100      	movs	r1, #0
 80012fc:	4618      	mov	r0, r3
 80012fe:	f007 f9e0 	bl	80086c2 <osThreadCreate>
 8001302:	4603      	mov	r3, r0
 8001304:	4a61      	ldr	r2, [pc, #388]	; (800148c <main+0x344>)
 8001306:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  osThreadDef(M95Task, ThreadM95Task, osPriorityNormal, 0, 128);
 8001308:	4b61      	ldr	r3, [pc, #388]	; (8001490 <main+0x348>)
 800130a:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 800130e:	461d      	mov	r5, r3
 8001310:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001312:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001314:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001318:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  M95TaskHandle = osThreadCreate(osThread(M95Task), NULL);
 800131c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001320:	2100      	movs	r1, #0
 8001322:	4618      	mov	r0, r3
 8001324:	f007 f9cd 	bl	80086c2 <osThreadCreate>
 8001328:	4603      	mov	r3, r0
 800132a:	4a5a      	ldr	r2, [pc, #360]	; (8001494 <main+0x34c>)
 800132c:	6013      	str	r3, [r2, #0]

  osThreadDef(ModbusTask, ThreadModbusTask, osPriorityNormal, 0, 128);
 800132e:	4b5a      	ldr	r3, [pc, #360]	; (8001498 <main+0x350>)
 8001330:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 8001334:	461d      	mov	r5, r3
 8001336:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001338:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800133a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800133e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ModbusTaskHandle = osThreadCreate(osThread(ModbusTask), NULL);
 8001342:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001346:	2100      	movs	r1, #0
 8001348:	4618      	mov	r0, r3
 800134a:	f007 f9ba 	bl	80086c2 <osThreadCreate>
 800134e:	4603      	mov	r3, r0
 8001350:	4a52      	ldr	r2, [pc, #328]	; (800149c <main+0x354>)
 8001352:	6013      	str	r3, [r2, #0]

  osThreadDef(MainTask, ThreadMainTask, osPriorityNormal, 0, 128);
 8001354:	4b52      	ldr	r3, [pc, #328]	; (80014a0 <main+0x358>)
 8001356:	f107 0490 	add.w	r4, r7, #144	; 0x90
 800135a:	461d      	mov	r5, r3
 800135c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800135e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001360:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001364:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MainTaskHandle = osThreadCreate(osThread(MainTask), NULL);
 8001368:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800136c:	2100      	movs	r1, #0
 800136e:	4618      	mov	r0, r3
 8001370:	f007 f9a7 	bl	80086c2 <osThreadCreate>
 8001374:	4603      	mov	r3, r0
 8001376:	4a4b      	ldr	r2, [pc, #300]	; (80014a4 <main+0x35c>)
 8001378:	6013      	str	r3, [r2, #0]

  osThreadDef(ModbusPacketTask, ThreadModbusPacketTask, osPriorityNormal, 0, 128);
 800137a:	4b4b      	ldr	r3, [pc, #300]	; (80014a8 <main+0x360>)
 800137c:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8001380:	461d      	mov	r5, r3
 8001382:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001384:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001386:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800138a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ModbusPacketTaskHandle = osThreadCreate(osThread(ModbusPacketTask), NULL);
 800138e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001392:	2100      	movs	r1, #0
 8001394:	4618      	mov	r0, r3
 8001396:	f007 f994 	bl	80086c2 <osThreadCreate>
 800139a:	4603      	mov	r3, r0
 800139c:	4a43      	ldr	r2, [pc, #268]	; (80014ac <main+0x364>)
 800139e:	6013      	str	r3, [r2, #0]

  osThreadDef(ReadRegistersTask, ThreadReadRegistersTask, osPriorityNormal, 0, 128);
 80013a0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013a4:	4a42      	ldr	r2, [pc, #264]	; (80014b0 <main+0x368>)
 80013a6:	461c      	mov	r4, r3
 80013a8:	4615      	mov	r5, r2
 80013aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013ae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ReadRegistersTaskHandle = osThreadCreate(osThread(ReadRegistersTask), NULL);
 80013b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013ba:	2100      	movs	r1, #0
 80013bc:	4618      	mov	r0, r3
 80013be:	f007 f980 	bl	80086c2 <osThreadCreate>
 80013c2:	4603      	mov	r3, r0
 80013c4:	4a3b      	ldr	r2, [pc, #236]	; (80014b4 <main+0x36c>)
 80013c6:	6013      	str	r3, [r2, #0]

  osThreadDef(EventWriteTask, ThreadEventWriteTask, osPriorityNormal, 0, 128);
 80013c8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80013cc:	4a3a      	ldr	r2, [pc, #232]	; (80014b8 <main+0x370>)
 80013ce:	461c      	mov	r4, r3
 80013d0:	4615      	mov	r5, r2
 80013d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EventWriteTaskHandle = osThreadCreate(osThread(EventWriteTask), NULL);
 80013de:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80013e2:	2100      	movs	r1, #0
 80013e4:	4618      	mov	r0, r3
 80013e6:	f007 f96c 	bl	80086c2 <osThreadCreate>
 80013ea:	4603      	mov	r3, r0
 80013ec:	4a33      	ldr	r2, [pc, #204]	; (80014bc <main+0x374>)
 80013ee:	6013      	str	r3, [r2, #0]

  osThreadDef(GetCurrentTask, ThreadGetCurrentTask, osPriorityNormal, 0, 128);
 80013f0:	f107 0320 	add.w	r3, r7, #32
 80013f4:	4a32      	ldr	r2, [pc, #200]	; (80014c0 <main+0x378>)
 80013f6:	461c      	mov	r4, r3
 80013f8:	4615      	mov	r5, r2
 80013fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001402:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GetCurrentTaskHandle = osThreadCreate(osThread(GetCurrentTask), NULL);
 8001406:	f107 0320 	add.w	r3, r7, #32
 800140a:	2100      	movs	r1, #0
 800140c:	4618      	mov	r0, r3
 800140e:	f007 f958 	bl	80086c2 <osThreadCreate>
 8001412:	4603      	mov	r3, r0
 8001414:	4a2b      	ldr	r2, [pc, #172]	; (80014c4 <main+0x37c>)
 8001416:	6013      	str	r3, [r2, #0]

  osThreadDef(MeterTask, ThreadMeterTask, osPriorityNormal, 0, 128);
 8001418:	1d3b      	adds	r3, r7, #4
 800141a:	4a2b      	ldr	r2, [pc, #172]	; (80014c8 <main+0x380>)
 800141c:	461c      	mov	r4, r3
 800141e:	4615      	mov	r5, r2
 8001420:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001422:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001424:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001428:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MeterTaskHandle = osThreadCreate(osThread(MeterTask), NULL);
 800142c:	1d3b      	adds	r3, r7, #4
 800142e:	2100      	movs	r1, #0
 8001430:	4618      	mov	r0, r3
 8001432:	f007 f946 	bl	80086c2 <osThreadCreate>
 8001436:	4603      	mov	r3, r0
 8001438:	4a24      	ldr	r2, [pc, #144]	; (80014cc <main+0x384>)
 800143a:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800143c:	f007 f93a 	bl	80086b4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001440:	e7fe      	b.n	8001440 <main+0x2f8>
 8001442:	bf00      	nop
 8001444:	40023800 	.word	0x40023800
 8001448:	20000876 	.word	0x20000876
 800144c:	20000000 	.word	0x20000000
 8001450:	200096fc 	.word	0x200096fc
 8001454:	200096f8 	.word	0x200096f8
 8001458:	20009af8 	.word	0x20009af8
 800145c:	20009d9c 	.word	0x20009d9c
 8001460:	20009db4 	.word	0x20009db4
 8001464:	20009ad8 	.word	0x20009ad8
 8001468:	20009a4c 	.word	0x20009a4c
 800146c:	08001d11 	.word	0x08001d11
 8001470:	200096f0 	.word	0x200096f0
 8001474:	08001d31 	.word	0x08001d31
 8001478:	20009700 	.word	0x20009700
 800147c:	0801be08 	.word	0x0801be08
 8001480:	200082e8 	.word	0x200082e8
 8001484:	200082d8 	.word	0x200082d8
 8001488:	0801be18 	.word	0x0801be18
 800148c:	20008118 	.word	0x20008118
 8001490:	0801be34 	.word	0x0801be34
 8001494:	20009948 	.word	0x20009948
 8001498:	0801be50 	.word	0x0801be50
 800149c:	20009944 	.word	0x20009944
 80014a0:	0801be6c 	.word	0x0801be6c
 80014a4:	20009774 	.word	0x20009774
 80014a8:	0801be88 	.word	0x0801be88
 80014ac:	2000976c 	.word	0x2000976c
 80014b0:	0801bea4 	.word	0x0801bea4
 80014b4:	200082d4 	.word	0x200082d4
 80014b8:	0801bec0 	.word	0x0801bec0
 80014bc:	200096f4 	.word	0x200096f4
 80014c0:	0801bedc 	.word	0x0801bedc
 80014c4:	20009764 	.word	0x20009764
 80014c8:	0801bef8 	.word	0x0801bef8
 80014cc:	200081d4 	.word	0x200081d4

080014d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b094      	sub	sp, #80	; 0x50
 80014d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014d6:	f107 0320 	add.w	r3, r7, #32
 80014da:	2230      	movs	r2, #48	; 0x30
 80014dc:	2100      	movs	r1, #0
 80014de:	4618      	mov	r0, r3
 80014e0:	f018 ffe8 	bl	801a4b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e4:	f107 030c 	add.w	r3, r7, #12
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f4:	2300      	movs	r3, #0
 80014f6:	60bb      	str	r3, [r7, #8]
 80014f8:	4b2a      	ldr	r3, [pc, #168]	; (80015a4 <SystemClock_Config+0xd4>)
 80014fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fc:	4a29      	ldr	r2, [pc, #164]	; (80015a4 <SystemClock_Config+0xd4>)
 80014fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001502:	6413      	str	r3, [r2, #64]	; 0x40
 8001504:	4b27      	ldr	r3, [pc, #156]	; (80015a4 <SystemClock_Config+0xd4>)
 8001506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001510:	2300      	movs	r3, #0
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	4b24      	ldr	r3, [pc, #144]	; (80015a8 <SystemClock_Config+0xd8>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a23      	ldr	r2, [pc, #140]	; (80015a8 <SystemClock_Config+0xd8>)
 800151a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800151e:	6013      	str	r3, [r2, #0]
 8001520:	4b21      	ldr	r3, [pc, #132]	; (80015a8 <SystemClock_Config+0xd8>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001528:	607b      	str	r3, [r7, #4]
 800152a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 800152c:	230d      	movs	r3, #13
 800152e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001530:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001536:	2301      	movs	r3, #1
 8001538:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800153a:	2301      	movs	r3, #1
 800153c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800153e:	2302      	movs	r3, #2
 8001540:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001542:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001546:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001548:	2319      	movs	r3, #25
 800154a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800154c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001550:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001552:	2302      	movs	r3, #2
 8001554:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001556:	2304      	movs	r3, #4
 8001558:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800155a:	f107 0320 	add.w	r3, r7, #32
 800155e:	4618      	mov	r0, r3
 8001560:	f003 fcca 	bl	8004ef8 <HAL_RCC_OscConfig>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800156a:	f000 fc37 	bl	8001ddc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800156e:	230f      	movs	r3, #15
 8001570:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001572:	2302      	movs	r3, #2
 8001574:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001576:	2300      	movs	r3, #0
 8001578:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800157a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800157e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001580:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001584:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001586:	f107 030c 	add.w	r3, r7, #12
 800158a:	2105      	movs	r1, #5
 800158c:	4618      	mov	r0, r3
 800158e:	f003 ff2b 	bl	80053e8 <HAL_RCC_ClockConfig>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001598:	f000 fc20 	bl	8001ddc <Error_Handler>
  }
}
 800159c:	bf00      	nop
 800159e:	3750      	adds	r7, #80	; 0x50
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40007000 	.word	0x40007000

080015ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015b2:	463b      	mov	r3, r7
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80015be:	4b2f      	ldr	r3, [pc, #188]	; (800167c <MX_ADC1_Init+0xd0>)
 80015c0:	4a2f      	ldr	r2, [pc, #188]	; (8001680 <MX_ADC1_Init+0xd4>)
 80015c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015c4:	4b2d      	ldr	r3, [pc, #180]	; (800167c <MX_ADC1_Init+0xd0>)
 80015c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015ca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015cc:	4b2b      	ldr	r3, [pc, #172]	; (800167c <MX_ADC1_Init+0xd0>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80015d2:	4b2a      	ldr	r3, [pc, #168]	; (800167c <MX_ADC1_Init+0xd0>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015d8:	4b28      	ldr	r3, [pc, #160]	; (800167c <MX_ADC1_Init+0xd0>)
 80015da:	2200      	movs	r2, #0
 80015dc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015de:	4b27      	ldr	r3, [pc, #156]	; (800167c <MX_ADC1_Init+0xd0>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015e6:	4b25      	ldr	r3, [pc, #148]	; (800167c <MX_ADC1_Init+0xd0>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015ec:	4b23      	ldr	r3, [pc, #140]	; (800167c <MX_ADC1_Init+0xd0>)
 80015ee:	4a25      	ldr	r2, [pc, #148]	; (8001684 <MX_ADC1_Init+0xd8>)
 80015f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015f2:	4b22      	ldr	r3, [pc, #136]	; (800167c <MX_ADC1_Init+0xd0>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 80015f8:	4b20      	ldr	r3, [pc, #128]	; (800167c <MX_ADC1_Init+0xd0>)
 80015fa:	2203      	movs	r2, #3
 80015fc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80015fe:	4b1f      	ldr	r3, [pc, #124]	; (800167c <MX_ADC1_Init+0xd0>)
 8001600:	2200      	movs	r2, #0
 8001602:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001606:	4b1d      	ldr	r3, [pc, #116]	; (800167c <MX_ADC1_Init+0xd0>)
 8001608:	2201      	movs	r2, #1
 800160a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800160c:	481b      	ldr	r0, [pc, #108]	; (800167c <MX_ADC1_Init+0xd0>)
 800160e:	f001 f88b 	bl	8002728 <HAL_ADC_Init>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001618:	f000 fbe0 	bl	8001ddc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800161c:	230a      	movs	r3, #10
 800161e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001620:	2301      	movs	r3, #1
 8001622:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001624:	2301      	movs	r3, #1
 8001626:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001628:	463b      	mov	r3, r7
 800162a:	4619      	mov	r1, r3
 800162c:	4813      	ldr	r0, [pc, #76]	; (800167c <MX_ADC1_Init+0xd0>)
 800162e:	f001 f9e3 	bl	80029f8 <HAL_ADC_ConfigChannel>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001638:	f000 fbd0 	bl	8001ddc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800163c:	230c      	movs	r3, #12
 800163e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001640:	2302      	movs	r3, #2
 8001642:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001644:	463b      	mov	r3, r7
 8001646:	4619      	mov	r1, r3
 8001648:	480c      	ldr	r0, [pc, #48]	; (800167c <MX_ADC1_Init+0xd0>)
 800164a:	f001 f9d5 	bl	80029f8 <HAL_ADC_ConfigChannel>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001654:	f000 fbc2 	bl	8001ddc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001658:	230d      	movs	r3, #13
 800165a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800165c:	2303      	movs	r3, #3
 800165e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001660:	463b      	mov	r3, r7
 8001662:	4619      	mov	r1, r3
 8001664:	4805      	ldr	r0, [pc, #20]	; (800167c <MX_ADC1_Init+0xd0>)
 8001666:	f001 f9c7 	bl	80029f8 <HAL_ADC_ConfigChannel>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001670:	f000 fbb4 	bl	8001ddc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001674:	bf00      	nop
 8001676:	3710      	adds	r7, #16
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	200098ec 	.word	0x200098ec
 8001680:	40012000 	.word	0x40012000
 8001684:	0f000001 	.word	0x0f000001

08001688 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800168c:	4b13      	ldr	r3, [pc, #76]	; (80016dc <MX_I2C1_Init+0x54>)
 800168e:	4a14      	ldr	r2, [pc, #80]	; (80016e0 <MX_I2C1_Init+0x58>)
 8001690:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 1000;
 8001692:	4b12      	ldr	r3, [pc, #72]	; (80016dc <MX_I2C1_Init+0x54>)
 8001694:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001698:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800169a:	4b10      	ldr	r3, [pc, #64]	; (80016dc <MX_I2C1_Init+0x54>)
 800169c:	2200      	movs	r2, #0
 800169e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016a0:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <MX_I2C1_Init+0x54>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016a6:	4b0d      	ldr	r3, [pc, #52]	; (80016dc <MX_I2C1_Init+0x54>)
 80016a8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016ac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016ae:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <MX_I2C1_Init+0x54>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016b4:	4b09      	ldr	r3, [pc, #36]	; (80016dc <MX_I2C1_Init+0x54>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016ba:	4b08      	ldr	r3, [pc, #32]	; (80016dc <MX_I2C1_Init+0x54>)
 80016bc:	2200      	movs	r2, #0
 80016be:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016c0:	4b06      	ldr	r3, [pc, #24]	; (80016dc <MX_I2C1_Init+0x54>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016c6:	4805      	ldr	r0, [pc, #20]	; (80016dc <MX_I2C1_Init+0x54>)
 80016c8:	f002 fbfe 	bl	8003ec8 <HAL_I2C_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 80016d2:	f000 fb83 	bl	8001ddc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20008280 	.word	0x20008280
 80016e0:	40005400 	.word	0x40005400

080016e4 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80016e8:	4b09      	ldr	r3, [pc, #36]	; (8001710 <MX_IWDG_Init+0x2c>)
 80016ea:	4a0a      	ldr	r2, [pc, #40]	; (8001714 <MX_IWDG_Init+0x30>)
 80016ec:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 80016ee:	4b08      	ldr	r3, [pc, #32]	; (8001710 <MX_IWDG_Init+0x2c>)
 80016f0:	2203      	movs	r2, #3
 80016f2:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4000;
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <MX_IWDG_Init+0x2c>)
 80016f6:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80016fa:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80016fc:	4804      	ldr	r0, [pc, #16]	; (8001710 <MX_IWDG_Init+0x2c>)
 80016fe:	f003 fba8 	bl	8004e52 <HAL_IWDG_Init>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8001708:	f000 fb68 	bl	8001ddc <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800170c:	bf00      	nop
 800170e:	bd80      	pop	{r7, pc}
 8001710:	200082dc 	.word	0x200082dc
 8001714:	40003000 	.word	0x40003000

08001718 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800171e:	1d3b      	adds	r3, r7, #4
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800172c:	2300      	movs	r3, #0
 800172e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001730:	4b10      	ldr	r3, [pc, #64]	; (8001774 <MX_RTC_Init+0x5c>)
 8001732:	4a11      	ldr	r2, [pc, #68]	; (8001778 <MX_RTC_Init+0x60>)
 8001734:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001736:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <MX_RTC_Init+0x5c>)
 8001738:	2200      	movs	r2, #0
 800173a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800173c:	4b0d      	ldr	r3, [pc, #52]	; (8001774 <MX_RTC_Init+0x5c>)
 800173e:	227f      	movs	r2, #127	; 0x7f
 8001740:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001742:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <MX_RTC_Init+0x5c>)
 8001744:	22ff      	movs	r2, #255	; 0xff
 8001746:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001748:	4b0a      	ldr	r3, [pc, #40]	; (8001774 <MX_RTC_Init+0x5c>)
 800174a:	2200      	movs	r2, #0
 800174c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800174e:	4b09      	ldr	r3, [pc, #36]	; (8001774 <MX_RTC_Init+0x5c>)
 8001750:	2200      	movs	r2, #0
 8001752:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001754:	4b07      	ldr	r3, [pc, #28]	; (8001774 <MX_RTC_Init+0x5c>)
 8001756:	2200      	movs	r2, #0
 8001758:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800175a:	4806      	ldr	r0, [pc, #24]	; (8001774 <MX_RTC_Init+0x5c>)
 800175c:	f004 f928 	bl	80059b0 <HAL_RTC_Init>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001766:	f000 fb39 	bl	8001ddc <Error_Handler>
  */
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800176a:	bf00      	nop
 800176c:	3718      	adds	r7, #24
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20009ab4 	.word	0x20009ab4
 8001778:	40002800 	.word	0x40002800

0800177c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001780:	4b17      	ldr	r3, [pc, #92]	; (80017e0 <MX_SPI2_Init+0x64>)
 8001782:	4a18      	ldr	r2, [pc, #96]	; (80017e4 <MX_SPI2_Init+0x68>)
 8001784:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001786:	4b16      	ldr	r3, [pc, #88]	; (80017e0 <MX_SPI2_Init+0x64>)
 8001788:	f44f 7282 	mov.w	r2, #260	; 0x104
 800178c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800178e:	4b14      	ldr	r3, [pc, #80]	; (80017e0 <MX_SPI2_Init+0x64>)
 8001790:	2200      	movs	r2, #0
 8001792:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001794:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <MX_SPI2_Init+0x64>)
 8001796:	2200      	movs	r2, #0
 8001798:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800179a:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <MX_SPI2_Init+0x64>)
 800179c:	2200      	movs	r2, #0
 800179e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017a0:	4b0f      	ldr	r3, [pc, #60]	; (80017e0 <MX_SPI2_Init+0x64>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80017a6:	4b0e      	ldr	r3, [pc, #56]	; (80017e0 <MX_SPI2_Init+0x64>)
 80017a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017ac:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80017ae:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <MX_SPI2_Init+0x64>)
 80017b0:	2220      	movs	r2, #32
 80017b2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017b4:	4b0a      	ldr	r3, [pc, #40]	; (80017e0 <MX_SPI2_Init+0x64>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80017ba:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <MX_SPI2_Init+0x64>)
 80017bc:	2200      	movs	r2, #0
 80017be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017c0:	4b07      	ldr	r3, [pc, #28]	; (80017e0 <MX_SPI2_Init+0x64>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80017c6:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <MX_SPI2_Init+0x64>)
 80017c8:	220a      	movs	r2, #10
 80017ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80017cc:	4804      	ldr	r0, [pc, #16]	; (80017e0 <MX_SPI2_Init+0x64>)
 80017ce:	f004 fbed 	bl	8005fac <HAL_SPI_Init>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80017d8:	f000 fb00 	bl	8001ddc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80017dc:	bf00      	nop
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	2000817c 	.word	0x2000817c
 80017e4:	40003800 	.word	0x40003800

080017e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ee:	f107 0308 	add.w	r3, r7, #8
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	609a      	str	r2, [r3, #8]
 80017fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017fc:	463b      	mov	r3, r7
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001804:	4b1d      	ldr	r3, [pc, #116]	; (800187c <MX_TIM2_Init+0x94>)
 8001806:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800180a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800180c:	4b1b      	ldr	r3, [pc, #108]	; (800187c <MX_TIM2_Init+0x94>)
 800180e:	2200      	movs	r2, #0
 8001810:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001812:	4b1a      	ldr	r3, [pc, #104]	; (800187c <MX_TIM2_Init+0x94>)
 8001814:	2200      	movs	r2, #0
 8001816:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8400;
 8001818:	4b18      	ldr	r3, [pc, #96]	; (800187c <MX_TIM2_Init+0x94>)
 800181a:	f242 02d0 	movw	r2, #8400	; 0x20d0
 800181e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001820:	4b16      	ldr	r3, [pc, #88]	; (800187c <MX_TIM2_Init+0x94>)
 8001822:	2200      	movs	r2, #0
 8001824:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001826:	4b15      	ldr	r3, [pc, #84]	; (800187c <MX_TIM2_Init+0x94>)
 8001828:	2200      	movs	r2, #0
 800182a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800182c:	4813      	ldr	r0, [pc, #76]	; (800187c <MX_TIM2_Init+0x94>)
 800182e:	f005 f965 	bl	8006afc <HAL_TIM_Base_Init>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001838:	f000 fad0 	bl	8001ddc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800183c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001840:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001842:	f107 0308 	add.w	r3, r7, #8
 8001846:	4619      	mov	r1, r3
 8001848:	480c      	ldr	r0, [pc, #48]	; (800187c <MX_TIM2_Init+0x94>)
 800184a:	f005 fb1f 	bl	8006e8c <HAL_TIM_ConfigClockSource>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001854:	f000 fac2 	bl	8001ddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001858:	2300      	movs	r3, #0
 800185a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800185c:	2300      	movs	r3, #0
 800185e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001860:	463b      	mov	r3, r7
 8001862:	4619      	mov	r1, r3
 8001864:	4805      	ldr	r0, [pc, #20]	; (800187c <MX_TIM2_Init+0x94>)
 8001866:	f005 fd3b 	bl	80072e0 <HAL_TIMEx_MasterConfigSynchronization>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001870:	f000 fab4 	bl	8001ddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001874:	bf00      	nop
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20009d44 	.word	0x20009d44

08001880 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001884:	4b11      	ldr	r3, [pc, #68]	; (80018cc <MX_USART3_UART_Init+0x4c>)
 8001886:	4a12      	ldr	r2, [pc, #72]	; (80018d0 <MX_USART3_UART_Init+0x50>)
 8001888:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800188a:	4b10      	ldr	r3, [pc, #64]	; (80018cc <MX_USART3_UART_Init+0x4c>)
 800188c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001890:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001892:	4b0e      	ldr	r3, [pc, #56]	; (80018cc <MX_USART3_UART_Init+0x4c>)
 8001894:	2200      	movs	r2, #0
 8001896:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001898:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <MX_USART3_UART_Init+0x4c>)
 800189a:	2200      	movs	r2, #0
 800189c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800189e:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <MX_USART3_UART_Init+0x4c>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80018a4:	4b09      	ldr	r3, [pc, #36]	; (80018cc <MX_USART3_UART_Init+0x4c>)
 80018a6:	220c      	movs	r2, #12
 80018a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018aa:	4b08      	ldr	r3, [pc, #32]	; (80018cc <MX_USART3_UART_Init+0x4c>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018b0:	4b06      	ldr	r3, [pc, #24]	; (80018cc <MX_USART3_UART_Init+0x4c>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80018b6:	4805      	ldr	r0, [pc, #20]	; (80018cc <MX_USART3_UART_Init+0x4c>)
 80018b8:	f005 fda2 	bl	8007400 <HAL_UART_Init>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80018c2:	f000 fa8b 	bl	8001ddc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	2000823c 	.word	0x2000823c
 80018d0:	40004800 	.word	0x40004800

080018d4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80018d8:	4b11      	ldr	r3, [pc, #68]	; (8001920 <MX_USART6_UART_Init+0x4c>)
 80018da:	4a12      	ldr	r2, [pc, #72]	; (8001924 <MX_USART6_UART_Init+0x50>)
 80018dc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <MX_USART6_UART_Init+0x4c>)
 80018e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80018e4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80018e6:	4b0e      	ldr	r3, [pc, #56]	; (8001920 <MX_USART6_UART_Init+0x4c>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80018ec:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <MX_USART6_UART_Init+0x4c>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_EVEN;
 80018f2:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <MX_USART6_UART_Init+0x4c>)
 80018f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018f8:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80018fa:	4b09      	ldr	r3, [pc, #36]	; (8001920 <MX_USART6_UART_Init+0x4c>)
 80018fc:	220c      	movs	r2, #12
 80018fe:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001900:	4b07      	ldr	r3, [pc, #28]	; (8001920 <MX_USART6_UART_Init+0x4c>)
 8001902:	2200      	movs	r2, #0
 8001904:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001906:	4b06      	ldr	r3, [pc, #24]	; (8001920 <MX_USART6_UART_Init+0x4c>)
 8001908:	2200      	movs	r2, #0
 800190a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800190c:	4804      	ldr	r0, [pc, #16]	; (8001920 <MX_USART6_UART_Init+0x4c>)
 800190e:	f005 fd77 	bl	8007400 <HAL_UART_Init>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_USART6_UART_Init+0x48>
  {
    Error_Handler();
 8001918:	f000 fa60 	bl	8001ddc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800191c:	bf00      	nop
 800191e:	bd80      	pop	{r7, pc}
 8001920:	20009d00 	.word	0x20009d00
 8001924:	40011400 	.word	0x40011400

08001928 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	607b      	str	r3, [r7, #4]
 8001932:	4b23      	ldr	r3, [pc, #140]	; (80019c0 <MX_DMA_Init+0x98>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	4a22      	ldr	r2, [pc, #136]	; (80019c0 <MX_DMA_Init+0x98>)
 8001938:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800193c:	6313      	str	r3, [r2, #48]	; 0x30
 800193e:	4b20      	ldr	r3, [pc, #128]	; (80019c0 <MX_DMA_Init+0x98>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001946:	607b      	str	r3, [r7, #4]
 8001948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	603b      	str	r3, [r7, #0]
 800194e:	4b1c      	ldr	r3, [pc, #112]	; (80019c0 <MX_DMA_Init+0x98>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	4a1b      	ldr	r2, [pc, #108]	; (80019c0 <MX_DMA_Init+0x98>)
 8001954:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001958:	6313      	str	r3, [r2, #48]	; 0x30
 800195a:	4b19      	ldr	r3, [pc, #100]	; (80019c0 <MX_DMA_Init+0x98>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001962:	603b      	str	r3, [r7, #0]
 8001964:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001966:	2200      	movs	r2, #0
 8001968:	2105      	movs	r1, #5
 800196a:	200c      	movs	r0, #12
 800196c:	f001 fb9c 	bl	80030a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001970:	200c      	movs	r0, #12
 8001972:	f001 fbb5 	bl	80030e0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001976:	2200      	movs	r2, #0
 8001978:	2105      	movs	r1, #5
 800197a:	200e      	movs	r0, #14
 800197c:	f001 fb94 	bl	80030a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001980:	200e      	movs	r0, #14
 8001982:	f001 fbad 	bl	80030e0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001986:	2200      	movs	r2, #0
 8001988:	2105      	movs	r1, #5
 800198a:	2038      	movs	r0, #56	; 0x38
 800198c:	f001 fb8c 	bl	80030a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001990:	2038      	movs	r0, #56	; 0x38
 8001992:	f001 fba5 	bl	80030e0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001996:	2200      	movs	r2, #0
 8001998:	2105      	movs	r1, #5
 800199a:	2039      	movs	r0, #57	; 0x39
 800199c:	f001 fb84 	bl	80030a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80019a0:	2039      	movs	r0, #57	; 0x39
 80019a2:	f001 fb9d 	bl	80030e0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2105      	movs	r1, #5
 80019aa:	2045      	movs	r0, #69	; 0x45
 80019ac:	f001 fb7c 	bl	80030a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80019b0:	2045      	movs	r0, #69	; 0x45
 80019b2:	f001 fb95 	bl	80030e0 <HAL_NVIC_EnableIRQ>

}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40023800 	.word	0x40023800

080019c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08e      	sub	sp, #56	; 0x38
 80019c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	605a      	str	r2, [r3, #4]
 80019d4:	609a      	str	r2, [r3, #8]
 80019d6:	60da      	str	r2, [r3, #12]
 80019d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	623b      	str	r3, [r7, #32]
 80019de:	4bb3      	ldr	r3, [pc, #716]	; (8001cac <MX_GPIO_Init+0x2e8>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	4ab2      	ldr	r2, [pc, #712]	; (8001cac <MX_GPIO_Init+0x2e8>)
 80019e4:	f043 0310 	orr.w	r3, r3, #16
 80019e8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ea:	4bb0      	ldr	r3, [pc, #704]	; (8001cac <MX_GPIO_Init+0x2e8>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	f003 0310 	and.w	r3, r3, #16
 80019f2:	623b      	str	r3, [r7, #32]
 80019f4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	61fb      	str	r3, [r7, #28]
 80019fa:	4bac      	ldr	r3, [pc, #688]	; (8001cac <MX_GPIO_Init+0x2e8>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	4aab      	ldr	r2, [pc, #684]	; (8001cac <MX_GPIO_Init+0x2e8>)
 8001a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a04:	6313      	str	r3, [r2, #48]	; 0x30
 8001a06:	4ba9      	ldr	r3, [pc, #676]	; (8001cac <MX_GPIO_Init+0x2e8>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a0e:	61fb      	str	r3, [r7, #28]
 8001a10:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	61bb      	str	r3, [r7, #24]
 8001a16:	4ba5      	ldr	r3, [pc, #660]	; (8001cac <MX_GPIO_Init+0x2e8>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	4aa4      	ldr	r2, [pc, #656]	; (8001cac <MX_GPIO_Init+0x2e8>)
 8001a1c:	f043 0304 	orr.w	r3, r3, #4
 8001a20:	6313      	str	r3, [r2, #48]	; 0x30
 8001a22:	4ba2      	ldr	r3, [pc, #648]	; (8001cac <MX_GPIO_Init+0x2e8>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	f003 0304 	and.w	r3, r3, #4
 8001a2a:	61bb      	str	r3, [r7, #24]
 8001a2c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	617b      	str	r3, [r7, #20]
 8001a32:	4b9e      	ldr	r3, [pc, #632]	; (8001cac <MX_GPIO_Init+0x2e8>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	4a9d      	ldr	r2, [pc, #628]	; (8001cac <MX_GPIO_Init+0x2e8>)
 8001a38:	f043 0320 	orr.w	r3, r3, #32
 8001a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3e:	4b9b      	ldr	r3, [pc, #620]	; (8001cac <MX_GPIO_Init+0x2e8>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	f003 0320 	and.w	r3, r3, #32
 8001a46:	617b      	str	r3, [r7, #20]
 8001a48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	613b      	str	r3, [r7, #16]
 8001a4e:	4b97      	ldr	r3, [pc, #604]	; (8001cac <MX_GPIO_Init+0x2e8>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	4a96      	ldr	r2, [pc, #600]	; (8001cac <MX_GPIO_Init+0x2e8>)
 8001a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a58:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5a:	4b94      	ldr	r3, [pc, #592]	; (8001cac <MX_GPIO_Init+0x2e8>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a62:	613b      	str	r3, [r7, #16]
 8001a64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	4b90      	ldr	r3, [pc, #576]	; (8001cac <MX_GPIO_Init+0x2e8>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	4a8f      	ldr	r2, [pc, #572]	; (8001cac <MX_GPIO_Init+0x2e8>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	6313      	str	r3, [r2, #48]	; 0x30
 8001a76:	4b8d      	ldr	r3, [pc, #564]	; (8001cac <MX_GPIO_Init+0x2e8>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	60fb      	str	r3, [r7, #12]
 8001a80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	4b89      	ldr	r3, [pc, #548]	; (8001cac <MX_GPIO_Init+0x2e8>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	4a88      	ldr	r2, [pc, #544]	; (8001cac <MX_GPIO_Init+0x2e8>)
 8001a8c:	f043 0302 	orr.w	r3, r3, #2
 8001a90:	6313      	str	r3, [r2, #48]	; 0x30
 8001a92:	4b86      	ldr	r3, [pc, #536]	; (8001cac <MX_GPIO_Init+0x2e8>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	f003 0302 	and.w	r3, r3, #2
 8001a9a:	60bb      	str	r3, [r7, #8]
 8001a9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	607b      	str	r3, [r7, #4]
 8001aa2:	4b82      	ldr	r3, [pc, #520]	; (8001cac <MX_GPIO_Init+0x2e8>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa6:	4a81      	ldr	r2, [pc, #516]	; (8001cac <MX_GPIO_Init+0x2e8>)
 8001aa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001aac:	6313      	str	r3, [r2, #48]	; 0x30
 8001aae:	4b7f      	ldr	r3, [pc, #508]	; (8001cac <MX_GPIO_Init+0x2e8>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ab6:	607b      	str	r3, [r7, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	603b      	str	r3, [r7, #0]
 8001abe:	4b7b      	ldr	r3, [pc, #492]	; (8001cac <MX_GPIO_Init+0x2e8>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	4a7a      	ldr	r2, [pc, #488]	; (8001cac <MX_GPIO_Init+0x2e8>)
 8001ac4:	f043 0308 	orr.w	r3, r3, #8
 8001ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aca:	4b78      	ldr	r3, [pc, #480]	; (8001cac <MX_GPIO_Init+0x2e8>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	f003 0308 	and.w	r3, r3, #8
 8001ad2:	603b      	str	r3, [r7, #0]
 8001ad4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2140      	movs	r1, #64	; 0x40
 8001ada:	4875      	ldr	r0, [pc, #468]	; (8001cb0 <MX_GPIO_Init+0x2ec>)
 8001adc:	f002 f9c0 	bl	8003e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_8, GPIO_PIN_RESET);
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ae6:	4873      	ldr	r0, [pc, #460]	; (8001cb4 <MX_GPIO_Init+0x2f0>)
 8001ae8:	f002 f9ba 	bl	8003e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001aec:	2200      	movs	r2, #0
 8001aee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001af2:	4871      	ldr	r0, [pc, #452]	; (8001cb8 <MX_GPIO_Init+0x2f4>)
 8001af4:	f002 f9b4 	bl	8003e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_SET);
 8001af8:	2201      	movs	r2, #1
 8001afa:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001afe:	486d      	ldr	r0, [pc, #436]	; (8001cb4 <MX_GPIO_Init+0x2f0>)
 8001b00:	f002 f9ae 	bl	8003e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_SET);
 8001b04:	2201      	movs	r2, #1
 8001b06:	2138      	movs	r1, #56	; 0x38
 8001b08:	486c      	ldr	r0, [pc, #432]	; (8001cbc <MX_GPIO_Init+0x2f8>)
 8001b0a:	f002 f9a9 	bl	8003e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8001b0e:	2201      	movs	r2, #1
 8001b10:	2101      	movs	r1, #1
 8001b12:	486b      	ldr	r0, [pc, #428]	; (8001cc0 <MX_GPIO_Init+0x2fc>)
 8001b14:	f002 f9a4 	bl	8003e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15, GPIO_PIN_SET);
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f248 010c 	movw	r1, #32780	; 0x800c
 8001b1e:	4869      	ldr	r0, [pc, #420]	; (8001cc4 <MX_GPIO_Init+0x300>)
 8001b20:	f002 f99e 	bl	8003e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001b24:	2200      	movs	r2, #0
 8001b26:	2160      	movs	r1, #96	; 0x60
 8001b28:	4866      	ldr	r0, [pc, #408]	; (8001cc4 <MX_GPIO_Init+0x300>)
 8001b2a:	f002 f999 	bl	8003e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);
 8001b2e:	2200      	movs	r2, #0
 8001b30:	2128      	movs	r1, #40	; 0x28
 8001b32:	4863      	ldr	r0, [pc, #396]	; (8001cc0 <MX_GPIO_Init+0x2fc>)
 8001b34:	f002 f994 	bl	8003e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8001b3e:	4862      	ldr	r0, [pc, #392]	; (8001cc8 <MX_GPIO_Init+0x304>)
 8001b40:	f002 f98e 	bl	8003e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_RESET);
 8001b44:	2200      	movs	r2, #0
 8001b46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b4a:	4860      	ldr	r0, [pc, #384]	; (8001ccc <MX_GPIO_Init+0x308>)
 8001b4c:	f002 f988 	bl	8003e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b50:	2340      	movs	r3, #64	; 0x40
 8001b52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b54:	2301      	movs	r3, #1
 8001b56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b64:	4619      	mov	r1, r3
 8001b66:	4852      	ldr	r0, [pc, #328]	; (8001cb0 <MX_GPIO_Init+0x2ec>)
 8001b68:	f001 feca 	bl	8003900 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI8 PI10 PI11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11;
 8001b6c:	f44f 6350 	mov.w	r3, #3328	; 0xd00
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b72:	2301      	movs	r3, #1
 8001b74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001b7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b82:	4619      	mov	r1, r3
 8001b84:	484b      	ldr	r0, [pc, #300]	; (8001cb4 <MX_GPIO_Init+0x2f0>)
 8001b86:	f001 febb 	bl	8003900 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001b8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b90:	2301      	movs	r3, #1
 8001b92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4845      	ldr	r0, [pc, #276]	; (8001cb8 <MX_GPIO_Init+0x2f4>)
 8001ba4:	f001 feac 	bl	8003900 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF3 PF4 PF5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001ba8:	2338      	movs	r3, #56	; 0x38
 8001baa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bac:	2301      	movs	r3, #1
 8001bae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	483f      	ldr	r0, [pc, #252]	; (8001cbc <MX_GPIO_Init+0x2f8>)
 8001bc0:	f001 fe9e 	bl	8003900 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA3 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_5;
 8001bc4:	2329      	movs	r3, #41	; 0x29
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4839      	ldr	r0, [pc, #228]	; (8001cc0 <MX_GPIO_Init+0x2fc>)
 8001bdc:	f001 fe90 	bl	8003900 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH2 PH3 PH5 PH6
                           PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6
 8001be0:	f248 036c 	movw	r3, #32876	; 0x806c
 8001be4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be6:	2301      	movs	r3, #1
 8001be8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001bf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4832      	ldr	r0, [pc, #200]	; (8001cc4 <MX_GPIO_Init+0x300>)
 8001bfa:	f001 fe81 	bl	8003900 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001bfe:	2310      	movs	r3, #16
 8001c00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c02:	2300      	movs	r3, #0
 8001c04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c0e:	4619      	mov	r1, r3
 8001c10:	482c      	ldr	r0, [pc, #176]	; (8001cc4 <MX_GPIO_Init+0x300>)
 8001c12:	f001 fe75 	bl	8003900 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c16:	2304      	movs	r3, #4
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c26:	4619      	mov	r1, r3
 8001c28:	4829      	ldr	r0, [pc, #164]	; (8001cd0 <MX_GPIO_Init+0x30c>)
 8001c2a:	f001 fe69 	bl	8003900 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF11 PF12 PF13 PF14
                           PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8001c2e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001c32:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c34:	2300      	movs	r3, #0
 8001c36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c40:	4619      	mov	r1, r3
 8001c42:	481e      	ldr	r0, [pc, #120]	; (8001cbc <MX_GPIO_Init+0x2f8>)
 8001c44:	f001 fe5c 	bl	8003900 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c58:	4619      	mov	r1, r3
 8001c5a:	481c      	ldr	r0, [pc, #112]	; (8001ccc <MX_GPIO_Init+0x308>)
 8001c5c:	f001 fe50 	bl	8003900 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001c60:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001c64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c66:	2301      	movs	r3, #1
 8001c68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c76:	4619      	mov	r1, r3
 8001c78:	4813      	ldr	r0, [pc, #76]	; (8001cc8 <MX_GPIO_Init+0x304>)
 8001c7a:	f001 fe41 	bl	8003900 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c84:	2301      	movs	r3, #1
 8001c86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c88:	2302      	movs	r3, #2
 8001c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c94:	4619      	mov	r1, r3
 8001c96:	480d      	ldr	r0, [pc, #52]	; (8001ccc <MX_GPIO_Init+0x308>)
 8001c98:	f001 fe32 	bl	8003900 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c9c:	23c0      	movs	r3, #192	; 0xc0
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e013      	b.n	8001cd4 <MX_GPIO_Init+0x310>
 8001cac:	40023800 	.word	0x40023800
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	40022000 	.word	0x40022000
 8001cb8:	40020800 	.word	0x40020800
 8001cbc:	40021400 	.word	0x40021400
 8001cc0:	40020000 	.word	0x40020000
 8001cc4:	40021c00 	.word	0x40021c00
 8001cc8:	40020c00 	.word	0x40020c00
 8001ccc:	40021800 	.word	0x40021800
 8001cd0:	40020400 	.word	0x40020400
 8001cd4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001cd6:	2307      	movs	r3, #7
 8001cd8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4809      	ldr	r0, [pc, #36]	; (8001d08 <MX_GPIO_Init+0x344>)
 8001ce2:	f001 fe0d 	bl	8003900 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cea:	2300      	movs	r3, #0
 8001cec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4804      	ldr	r0, [pc, #16]	; (8001d0c <MX_GPIO_Init+0x348>)
 8001cfa:	f001 fe01 	bl	8003900 <HAL_GPIO_Init>

}
 8001cfe:	bf00      	nop
 8001d00:	3738      	adds	r7, #56	; 0x38
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40020400 	.word	0x40020400
 8001d0c:	40021000 	.word	0x40021000

08001d10 <Callback_AT_Timer>:

/* USER CODE BEGIN 4 */

void Callback_AT_Timer(void const * argument)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]

	read_rx_state = NOT_ACTIVE;
 8001d18:	4b04      	ldr	r3, [pc, #16]	; (8001d2c <Callback_AT_Timer+0x1c>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	701a      	strb	r2, [r3, #0]

}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	20009a50 	.word	0x20009a50

08001d30 <Callback_Ring_Center_Timer>:

/* Callback_Ring_Center_Timer function */
void Callback_Ring_Center_Timer(void const * argument)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]

	//NVIC_SystemReset();
	m95_power_off();
 8001d38:	f015 f9dc 	bl	80170f4 <m95_power_off>
	osTimerStart(Ring_Center_TimerHandle, 60000);// перезапускаем таймер перезагрузки
 8001d3c:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <Callback_Ring_Center_Timer+0x24>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f64e 2160 	movw	r1, #60000	; 0xea60
 8001d44:	4618      	mov	r0, r3
 8001d46:	f006 fd51 	bl	80087ec <osTimerStart>


}
 8001d4a:	bf00      	nop
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	20009700 	.word	0x20009700

08001d58 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8001d60:	4b0a      	ldr	r3, [pc, #40]	; (8001d8c <StartDefaultTask+0x34>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f04f 31ff 	mov.w	r1, #4294967295
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f006 fdd7 	bl	800891c <osMutexWait>

	HAL_IWDG_Refresh(&hiwdg);
 8001d6e:	4808      	ldr	r0, [pc, #32]	; (8001d90 <StartDefaultTask+0x38>)
 8001d70:	f003 f8b1 	bl	8004ed6 <HAL_IWDG_Refresh>
	LED_VD3_TOGGLE();
 8001d74:	f015 f872 	bl	8016e5c <LED_VD3_TOGGLE>

	osMutexRelease(Fm25v02MutexHandle);
 8001d78:	4b04      	ldr	r3, [pc, #16]	; (8001d8c <StartDefaultTask+0x34>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f006 fe1b 	bl	80089b8 <osMutexRelease>

    osDelay(1000);
 8001d82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d86:	f006 fce8 	bl	800875a <osDelay>
	osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8001d8a:	e7e9      	b.n	8001d60 <StartDefaultTask+0x8>
 8001d8c:	20009af8 	.word	0x20009af8
 8001d90:	200082dc 	.word	0x200082dc

08001d94 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a0a      	ldr	r2, [pc, #40]	; (8001dcc <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d101      	bne.n	8001daa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001da6:	f000 fc7b 	bl	80026a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	if(htim->Instance == TIM2) //check if the interrupt comes from TIM1
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001db2:	d107      	bne.n	8001dc4 <HAL_TIM_PeriodElapsedCallback+0x30>
	{
		HAL_TIM_Base_Start_IT(&htim2);
 8001db4:	4806      	ldr	r0, [pc, #24]	; (8001dd0 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001db6:	f004 fef1 	bl	8006b9c <HAL_TIM_Base_Start_IT>
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*)data_in, 3);
 8001dba:	2203      	movs	r2, #3
 8001dbc:	4905      	ldr	r1, [pc, #20]	; (8001dd4 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001dbe:	4806      	ldr	r0, [pc, #24]	; (8001dd8 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001dc0:	f000 fcf6 	bl	80027b0 <HAL_ADC_Start_DMA>
		//LED_VD5_TOGGLE();

	}

  /* USER CODE END Callback 1 */
}
 8001dc4:	bf00      	nop
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40010000 	.word	0x40010000
 8001dd0:	20009d44 	.word	0x20009d44
 8001dd4:	20009e48 	.word	0x20009e48
 8001dd8:	200098ec 	.word	0x200098ec

08001ddc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */

	NVIC_SystemReset();
 8001de0:	f7ff f86a 	bl	8000eb8 <__NVIC_SystemReset>

08001de4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	607b      	str	r3, [r7, #4]
 8001dee:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <HAL_MspInit+0x54>)
 8001df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df2:	4a11      	ldr	r2, [pc, #68]	; (8001e38 <HAL_MspInit+0x54>)
 8001df4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001df8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dfa:	4b0f      	ldr	r3, [pc, #60]	; (8001e38 <HAL_MspInit+0x54>)
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e02:	607b      	str	r3, [r7, #4]
 8001e04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	603b      	str	r3, [r7, #0]
 8001e0a:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <HAL_MspInit+0x54>)
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	4a0a      	ldr	r2, [pc, #40]	; (8001e38 <HAL_MspInit+0x54>)
 8001e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e14:	6413      	str	r3, [r2, #64]	; 0x40
 8001e16:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <HAL_MspInit+0x54>)
 8001e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1e:	603b      	str	r3, [r7, #0]
 8001e20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e22:	2200      	movs	r2, #0
 8001e24:	210f      	movs	r1, #15
 8001e26:	f06f 0001 	mvn.w	r0, #1
 8001e2a:	f001 f93d 	bl	80030a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40023800 	.word	0x40023800

08001e3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b08a      	sub	sp, #40	; 0x28
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e44:	f107 0314 	add.w	r3, r7, #20
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	60da      	str	r2, [r3, #12]
 8001e52:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a2e      	ldr	r2, [pc, #184]	; (8001f14 <HAL_ADC_MspInit+0xd8>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d156      	bne.n	8001f0c <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	613b      	str	r3, [r7, #16]
 8001e62:	4b2d      	ldr	r3, [pc, #180]	; (8001f18 <HAL_ADC_MspInit+0xdc>)
 8001e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e66:	4a2c      	ldr	r2, [pc, #176]	; (8001f18 <HAL_ADC_MspInit+0xdc>)
 8001e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e6e:	4b2a      	ldr	r3, [pc, #168]	; (8001f18 <HAL_ADC_MspInit+0xdc>)
 8001e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e76:	613b      	str	r3, [r7, #16]
 8001e78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60fb      	str	r3, [r7, #12]
 8001e7e:	4b26      	ldr	r3, [pc, #152]	; (8001f18 <HAL_ADC_MspInit+0xdc>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	4a25      	ldr	r2, [pc, #148]	; (8001f18 <HAL_ADC_MspInit+0xdc>)
 8001e84:	f043 0304 	orr.w	r3, r3, #4
 8001e88:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8a:	4b23      	ldr	r3, [pc, #140]	; (8001f18 <HAL_ADC_MspInit+0xdc>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	f003 0304 	and.w	r3, r3, #4
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8001e96:	230d      	movs	r3, #13
 8001e98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ea2:	f107 0314 	add.w	r3, r7, #20
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	481c      	ldr	r0, [pc, #112]	; (8001f1c <HAL_ADC_MspInit+0xe0>)
 8001eaa:	f001 fd29 	bl	8003900 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001eae:	4b1c      	ldr	r3, [pc, #112]	; (8001f20 <HAL_ADC_MspInit+0xe4>)
 8001eb0:	4a1c      	ldr	r2, [pc, #112]	; (8001f24 <HAL_ADC_MspInit+0xe8>)
 8001eb2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001eb4:	4b1a      	ldr	r3, [pc, #104]	; (8001f20 <HAL_ADC_MspInit+0xe4>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001eba:	4b19      	ldr	r3, [pc, #100]	; (8001f20 <HAL_ADC_MspInit+0xe4>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ec0:	4b17      	ldr	r3, [pc, #92]	; (8001f20 <HAL_ADC_MspInit+0xe4>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ec6:	4b16      	ldr	r3, [pc, #88]	; (8001f20 <HAL_ADC_MspInit+0xe4>)
 8001ec8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ecc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ece:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <HAL_ADC_MspInit+0xe4>)
 8001ed0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ed4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ed6:	4b12      	ldr	r3, [pc, #72]	; (8001f20 <HAL_ADC_MspInit+0xe4>)
 8001ed8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001edc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001ede:	4b10      	ldr	r3, [pc, #64]	; (8001f20 <HAL_ADC_MspInit+0xe4>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001ee4:	4b0e      	ldr	r3, [pc, #56]	; (8001f20 <HAL_ADC_MspInit+0xe4>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001eea:	4b0d      	ldr	r3, [pc, #52]	; (8001f20 <HAL_ADC_MspInit+0xe4>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ef0:	480b      	ldr	r0, [pc, #44]	; (8001f20 <HAL_ADC_MspInit+0xe4>)
 8001ef2:	f001 f903 	bl	80030fc <HAL_DMA_Init>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001efc:	f7ff ff6e 	bl	8001ddc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a07      	ldr	r2, [pc, #28]	; (8001f20 <HAL_ADC_MspInit+0xe4>)
 8001f04:	639a      	str	r2, [r3, #56]	; 0x38
 8001f06:	4a06      	ldr	r2, [pc, #24]	; (8001f20 <HAL_ADC_MspInit+0xe4>)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f0c:	bf00      	nop
 8001f0e:	3728      	adds	r7, #40	; 0x28
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40012000 	.word	0x40012000
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	40020800 	.word	0x40020800
 8001f20:	20009a54 	.word	0x20009a54
 8001f24:	40026410 	.word	0x40026410

08001f28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b08a      	sub	sp, #40	; 0x28
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f30:	f107 0314 	add.w	r3, r7, #20
 8001f34:	2200      	movs	r2, #0
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	605a      	str	r2, [r3, #4]
 8001f3a:	609a      	str	r2, [r3, #8]
 8001f3c:	60da      	str	r2, [r3, #12]
 8001f3e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a19      	ldr	r2, [pc, #100]	; (8001fac <HAL_I2C_MspInit+0x84>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d12c      	bne.n	8001fa4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	613b      	str	r3, [r7, #16]
 8001f4e:	4b18      	ldr	r3, [pc, #96]	; (8001fb0 <HAL_I2C_MspInit+0x88>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	4a17      	ldr	r2, [pc, #92]	; (8001fb0 <HAL_I2C_MspInit+0x88>)
 8001f54:	f043 0302 	orr.w	r3, r3, #2
 8001f58:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5a:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <HAL_I2C_MspInit+0x88>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	613b      	str	r3, [r7, #16]
 8001f64:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f66:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f6c:	2312      	movs	r3, #18
 8001f6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f74:	2303      	movs	r3, #3
 8001f76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f78:	2304      	movs	r3, #4
 8001f7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f7c:	f107 0314 	add.w	r3, r7, #20
 8001f80:	4619      	mov	r1, r3
 8001f82:	480c      	ldr	r0, [pc, #48]	; (8001fb4 <HAL_I2C_MspInit+0x8c>)
 8001f84:	f001 fcbc 	bl	8003900 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f88:	2300      	movs	r3, #0
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	4b08      	ldr	r3, [pc, #32]	; (8001fb0 <HAL_I2C_MspInit+0x88>)
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f90:	4a07      	ldr	r2, [pc, #28]	; (8001fb0 <HAL_I2C_MspInit+0x88>)
 8001f92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f96:	6413      	str	r3, [r2, #64]	; 0x40
 8001f98:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <HAL_I2C_MspInit+0x88>)
 8001f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001fa4:	bf00      	nop
 8001fa6:	3728      	adds	r7, #40	; 0x28
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40005400 	.word	0x40005400
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	40020400 	.word	0x40020400

08001fb8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a0b      	ldr	r2, [pc, #44]	; (8001ff4 <HAL_I2C_MspDeInit+0x3c>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d10f      	bne.n	8001fea <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001fca:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <HAL_I2C_MspDeInit+0x40>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	4a0a      	ldr	r2, [pc, #40]	; (8001ff8 <HAL_I2C_MspDeInit+0x40>)
 8001fd0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001fd4:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8001fd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fda:	4808      	ldr	r0, [pc, #32]	; (8001ffc <HAL_I2C_MspDeInit+0x44>)
 8001fdc:	f001 fe2c 	bl	8003c38 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8001fe0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fe4:	4805      	ldr	r0, [pc, #20]	; (8001ffc <HAL_I2C_MspDeInit+0x44>)
 8001fe6:	f001 fe27 	bl	8003c38 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8001fea:	bf00      	nop
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40005400 	.word	0x40005400
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	40020400 	.word	0x40020400

08002000 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002008:	f107 0308 	add.w	r3, r7, #8
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	605a      	str	r2, [r3, #4]
 8002012:	609a      	str	r2, [r3, #8]
 8002014:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a0c      	ldr	r2, [pc, #48]	; (800204c <HAL_RTC_MspInit+0x4c>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d111      	bne.n	8002044 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002020:	2302      	movs	r3, #2
 8002022:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002024:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002028:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800202a:	f107 0308 	add.w	r3, r7, #8
 800202e:	4618      	mov	r0, r3
 8002030:	f003 fbdc 	bl	80057ec <HAL_RCCEx_PeriphCLKConfig>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800203a:	f7ff fecf 	bl	8001ddc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800203e:	4b04      	ldr	r3, [pc, #16]	; (8002050 <HAL_RTC_MspInit+0x50>)
 8002040:	2201      	movs	r2, #1
 8002042:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002044:	bf00      	nop
 8002046:	3718      	adds	r7, #24
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40002800 	.word	0x40002800
 8002050:	42470e3c 	.word	0x42470e3c

08002054 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b08a      	sub	sp, #40	; 0x28
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205c:	f107 0314 	add.w	r3, r7, #20
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	60da      	str	r2, [r3, #12]
 800206a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a19      	ldr	r2, [pc, #100]	; (80020d8 <HAL_SPI_MspInit+0x84>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d12b      	bne.n	80020ce <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	613b      	str	r3, [r7, #16]
 800207a:	4b18      	ldr	r3, [pc, #96]	; (80020dc <HAL_SPI_MspInit+0x88>)
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	4a17      	ldr	r2, [pc, #92]	; (80020dc <HAL_SPI_MspInit+0x88>)
 8002080:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002084:	6413      	str	r3, [r2, #64]	; 0x40
 8002086:	4b15      	ldr	r3, [pc, #84]	; (80020dc <HAL_SPI_MspInit+0x88>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800208e:	613b      	str	r3, [r7, #16]
 8002090:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	4b11      	ldr	r3, [pc, #68]	; (80020dc <HAL_SPI_MspInit+0x88>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	4a10      	ldr	r2, [pc, #64]	; (80020dc <HAL_SPI_MspInit+0x88>)
 800209c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a0:	6313      	str	r3, [r2, #48]	; 0x30
 80020a2:	4b0e      	ldr	r3, [pc, #56]	; (80020dc <HAL_SPI_MspInit+0x88>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PI2     ------> SPI2_MISO
    PI3     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80020ae:	230e      	movs	r3, #14
 80020b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b2:	2302      	movs	r3, #2
 80020b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ba:	2303      	movs	r3, #3
 80020bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80020be:	2305      	movs	r3, #5
 80020c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80020c2:	f107 0314 	add.w	r3, r7, #20
 80020c6:	4619      	mov	r1, r3
 80020c8:	4805      	ldr	r0, [pc, #20]	; (80020e0 <HAL_SPI_MspInit+0x8c>)
 80020ca:	f001 fc19 	bl	8003900 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80020ce:	bf00      	nop
 80020d0:	3728      	adds	r7, #40	; 0x28
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40003800 	.word	0x40003800
 80020dc:	40023800 	.word	0x40023800
 80020e0:	40022000 	.word	0x40022000

080020e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020f4:	d115      	bne.n	8002122 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	4b0c      	ldr	r3, [pc, #48]	; (800212c <HAL_TIM_Base_MspInit+0x48>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	4a0b      	ldr	r2, [pc, #44]	; (800212c <HAL_TIM_Base_MspInit+0x48>)
 8002100:	f043 0301 	orr.w	r3, r3, #1
 8002104:	6413      	str	r3, [r2, #64]	; 0x40
 8002106:	4b09      	ldr	r3, [pc, #36]	; (800212c <HAL_TIM_Base_MspInit+0x48>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002112:	2200      	movs	r2, #0
 8002114:	2105      	movs	r1, #5
 8002116:	201c      	movs	r0, #28
 8002118:	f000 ffc6 	bl	80030a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800211c:	201c      	movs	r0, #28
 800211e:	f000 ffdf 	bl	80030e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002122:	bf00      	nop
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40023800 	.word	0x40023800

08002130 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b08c      	sub	sp, #48	; 0x30
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002138:	f107 031c 	add.w	r3, r7, #28
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	605a      	str	r2, [r3, #4]
 8002142:	609a      	str	r2, [r3, #8]
 8002144:	60da      	str	r2, [r3, #12]
 8002146:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a98      	ldr	r2, [pc, #608]	; (80023b0 <HAL_UART_MspInit+0x280>)
 800214e:	4293      	cmp	r3, r2
 8002150:	f040 8092 	bne.w	8002278 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002154:	2300      	movs	r3, #0
 8002156:	61bb      	str	r3, [r7, #24]
 8002158:	4b96      	ldr	r3, [pc, #600]	; (80023b4 <HAL_UART_MspInit+0x284>)
 800215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215c:	4a95      	ldr	r2, [pc, #596]	; (80023b4 <HAL_UART_MspInit+0x284>)
 800215e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002162:	6413      	str	r3, [r2, #64]	; 0x40
 8002164:	4b93      	ldr	r3, [pc, #588]	; (80023b4 <HAL_UART_MspInit+0x284>)
 8002166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002168:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800216c:	61bb      	str	r3, [r7, #24]
 800216e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002170:	2300      	movs	r3, #0
 8002172:	617b      	str	r3, [r7, #20]
 8002174:	4b8f      	ldr	r3, [pc, #572]	; (80023b4 <HAL_UART_MspInit+0x284>)
 8002176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002178:	4a8e      	ldr	r2, [pc, #568]	; (80023b4 <HAL_UART_MspInit+0x284>)
 800217a:	f043 0302 	orr.w	r3, r3, #2
 800217e:	6313      	str	r3, [r2, #48]	; 0x30
 8002180:	4b8c      	ldr	r3, [pc, #560]	; (80023b4 <HAL_UART_MspInit+0x284>)
 8002182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	617b      	str	r3, [r7, #20]
 800218a:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800218c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002190:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002192:	2302      	movs	r3, #2
 8002194:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002196:	2300      	movs	r3, #0
 8002198:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800219a:	2303      	movs	r3, #3
 800219c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800219e:	2307      	movs	r3, #7
 80021a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a2:	f107 031c 	add.w	r3, r7, #28
 80021a6:	4619      	mov	r1, r3
 80021a8:	4883      	ldr	r0, [pc, #524]	; (80023b8 <HAL_UART_MspInit+0x288>)
 80021aa:	f001 fba9 	bl	8003900 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80021ae:	4b83      	ldr	r3, [pc, #524]	; (80023bc <HAL_UART_MspInit+0x28c>)
 80021b0:	4a83      	ldr	r2, [pc, #524]	; (80023c0 <HAL_UART_MspInit+0x290>)
 80021b2:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80021b4:	4b81      	ldr	r3, [pc, #516]	; (80023bc <HAL_UART_MspInit+0x28c>)
 80021b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021ba:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021bc:	4b7f      	ldr	r3, [pc, #508]	; (80023bc <HAL_UART_MspInit+0x28c>)
 80021be:	2240      	movs	r2, #64	; 0x40
 80021c0:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021c2:	4b7e      	ldr	r3, [pc, #504]	; (80023bc <HAL_UART_MspInit+0x28c>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021c8:	4b7c      	ldr	r3, [pc, #496]	; (80023bc <HAL_UART_MspInit+0x28c>)
 80021ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021ce:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021d0:	4b7a      	ldr	r3, [pc, #488]	; (80023bc <HAL_UART_MspInit+0x28c>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021d6:	4b79      	ldr	r3, [pc, #484]	; (80023bc <HAL_UART_MspInit+0x28c>)
 80021d8:	2200      	movs	r2, #0
 80021da:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80021dc:	4b77      	ldr	r3, [pc, #476]	; (80023bc <HAL_UART_MspInit+0x28c>)
 80021de:	2200      	movs	r2, #0
 80021e0:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80021e2:	4b76      	ldr	r3, [pc, #472]	; (80023bc <HAL_UART_MspInit+0x28c>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021e8:	4b74      	ldr	r3, [pc, #464]	; (80023bc <HAL_UART_MspInit+0x28c>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80021ee:	4873      	ldr	r0, [pc, #460]	; (80023bc <HAL_UART_MspInit+0x28c>)
 80021f0:	f000 ff84 	bl	80030fc <HAL_DMA_Init>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80021fa:	f7ff fdef 	bl	8001ddc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a6e      	ldr	r2, [pc, #440]	; (80023bc <HAL_UART_MspInit+0x28c>)
 8002202:	635a      	str	r2, [r3, #52]	; 0x34
 8002204:	4a6d      	ldr	r2, [pc, #436]	; (80023bc <HAL_UART_MspInit+0x28c>)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800220a:	4b6e      	ldr	r3, [pc, #440]	; (80023c4 <HAL_UART_MspInit+0x294>)
 800220c:	4a6e      	ldr	r2, [pc, #440]	; (80023c8 <HAL_UART_MspInit+0x298>)
 800220e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002210:	4b6c      	ldr	r3, [pc, #432]	; (80023c4 <HAL_UART_MspInit+0x294>)
 8002212:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002216:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002218:	4b6a      	ldr	r3, [pc, #424]	; (80023c4 <HAL_UART_MspInit+0x294>)
 800221a:	2200      	movs	r2, #0
 800221c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800221e:	4b69      	ldr	r3, [pc, #420]	; (80023c4 <HAL_UART_MspInit+0x294>)
 8002220:	2200      	movs	r2, #0
 8002222:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002224:	4b67      	ldr	r3, [pc, #412]	; (80023c4 <HAL_UART_MspInit+0x294>)
 8002226:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800222a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800222c:	4b65      	ldr	r3, [pc, #404]	; (80023c4 <HAL_UART_MspInit+0x294>)
 800222e:	2200      	movs	r2, #0
 8002230:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002232:	4b64      	ldr	r3, [pc, #400]	; (80023c4 <HAL_UART_MspInit+0x294>)
 8002234:	2200      	movs	r2, #0
 8002236:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002238:	4b62      	ldr	r3, [pc, #392]	; (80023c4 <HAL_UART_MspInit+0x294>)
 800223a:	2200      	movs	r2, #0
 800223c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800223e:	4b61      	ldr	r3, [pc, #388]	; (80023c4 <HAL_UART_MspInit+0x294>)
 8002240:	2200      	movs	r2, #0
 8002242:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002244:	4b5f      	ldr	r3, [pc, #380]	; (80023c4 <HAL_UART_MspInit+0x294>)
 8002246:	2200      	movs	r2, #0
 8002248:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800224a:	485e      	ldr	r0, [pc, #376]	; (80023c4 <HAL_UART_MspInit+0x294>)
 800224c:	f000 ff56 	bl	80030fc <HAL_DMA_Init>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8002256:	f7ff fdc1 	bl	8001ddc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a59      	ldr	r2, [pc, #356]	; (80023c4 <HAL_UART_MspInit+0x294>)
 800225e:	639a      	str	r2, [r3, #56]	; 0x38
 8002260:	4a58      	ldr	r2, [pc, #352]	; (80023c4 <HAL_UART_MspInit+0x294>)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002266:	2200      	movs	r2, #0
 8002268:	2105      	movs	r1, #5
 800226a:	2027      	movs	r0, #39	; 0x27
 800226c:	f000 ff1c 	bl	80030a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002270:	2027      	movs	r0, #39	; 0x27
 8002272:	f000 ff35 	bl	80030e0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002276:	e096      	b.n	80023a6 <HAL_UART_MspInit+0x276>
  else if(huart->Instance==USART6)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a53      	ldr	r2, [pc, #332]	; (80023cc <HAL_UART_MspInit+0x29c>)
 800227e:	4293      	cmp	r3, r2
 8002280:	f040 8091 	bne.w	80023a6 <HAL_UART_MspInit+0x276>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002284:	2300      	movs	r3, #0
 8002286:	613b      	str	r3, [r7, #16]
 8002288:	4b4a      	ldr	r3, [pc, #296]	; (80023b4 <HAL_UART_MspInit+0x284>)
 800228a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228c:	4a49      	ldr	r2, [pc, #292]	; (80023b4 <HAL_UART_MspInit+0x284>)
 800228e:	f043 0320 	orr.w	r3, r3, #32
 8002292:	6453      	str	r3, [r2, #68]	; 0x44
 8002294:	4b47      	ldr	r3, [pc, #284]	; (80023b4 <HAL_UART_MspInit+0x284>)
 8002296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002298:	f003 0320 	and.w	r3, r3, #32
 800229c:	613b      	str	r3, [r7, #16]
 800229e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80022a0:	2300      	movs	r3, #0
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	4b43      	ldr	r3, [pc, #268]	; (80023b4 <HAL_UART_MspInit+0x284>)
 80022a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a8:	4a42      	ldr	r2, [pc, #264]	; (80023b4 <HAL_UART_MspInit+0x284>)
 80022aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022ae:	6313      	str	r3, [r2, #48]	; 0x30
 80022b0:	4b40      	ldr	r3, [pc, #256]	; (80023b4 <HAL_UART_MspInit+0x284>)
 80022b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 80022bc:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80022c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c2:	2302      	movs	r3, #2
 80022c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c6:	2300      	movs	r3, #0
 80022c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ca:	2303      	movs	r3, #3
 80022cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80022ce:	2308      	movs	r3, #8
 80022d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80022d2:	f107 031c 	add.w	r3, r7, #28
 80022d6:	4619      	mov	r1, r3
 80022d8:	483d      	ldr	r0, [pc, #244]	; (80023d0 <HAL_UART_MspInit+0x2a0>)
 80022da:	f001 fb11 	bl	8003900 <HAL_GPIO_Init>
    hdma_usart6_tx.Instance = DMA2_Stream6;
 80022de:	4b3d      	ldr	r3, [pc, #244]	; (80023d4 <HAL_UART_MspInit+0x2a4>)
 80022e0:	4a3d      	ldr	r2, [pc, #244]	; (80023d8 <HAL_UART_MspInit+0x2a8>)
 80022e2:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 80022e4:	4b3b      	ldr	r3, [pc, #236]	; (80023d4 <HAL_UART_MspInit+0x2a4>)
 80022e6:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80022ea:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022ec:	4b39      	ldr	r3, [pc, #228]	; (80023d4 <HAL_UART_MspInit+0x2a4>)
 80022ee:	2240      	movs	r2, #64	; 0x40
 80022f0:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022f2:	4b38      	ldr	r3, [pc, #224]	; (80023d4 <HAL_UART_MspInit+0x2a4>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 80022f8:	4b36      	ldr	r3, [pc, #216]	; (80023d4 <HAL_UART_MspInit+0x2a4>)
 80022fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022fe:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002300:	4b34      	ldr	r3, [pc, #208]	; (80023d4 <HAL_UART_MspInit+0x2a4>)
 8002302:	2200      	movs	r2, #0
 8002304:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002306:	4b33      	ldr	r3, [pc, #204]	; (80023d4 <HAL_UART_MspInit+0x2a4>)
 8002308:	2200      	movs	r2, #0
 800230a:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 800230c:	4b31      	ldr	r3, [pc, #196]	; (80023d4 <HAL_UART_MspInit+0x2a4>)
 800230e:	2200      	movs	r2, #0
 8002310:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002312:	4b30      	ldr	r3, [pc, #192]	; (80023d4 <HAL_UART_MspInit+0x2a4>)
 8002314:	2200      	movs	r2, #0
 8002316:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002318:	4b2e      	ldr	r3, [pc, #184]	; (80023d4 <HAL_UART_MspInit+0x2a4>)
 800231a:	2200      	movs	r2, #0
 800231c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 800231e:	482d      	ldr	r0, [pc, #180]	; (80023d4 <HAL_UART_MspInit+0x2a4>)
 8002320:	f000 feec 	bl	80030fc <HAL_DMA_Init>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <HAL_UART_MspInit+0x1fe>
      Error_Handler();
 800232a:	f7ff fd57 	bl	8001ddc <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a28      	ldr	r2, [pc, #160]	; (80023d4 <HAL_UART_MspInit+0x2a4>)
 8002332:	635a      	str	r2, [r3, #52]	; 0x34
 8002334:	4a27      	ldr	r2, [pc, #156]	; (80023d4 <HAL_UART_MspInit+0x2a4>)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800233a:	4b28      	ldr	r3, [pc, #160]	; (80023dc <HAL_UART_MspInit+0x2ac>)
 800233c:	4a28      	ldr	r2, [pc, #160]	; (80023e0 <HAL_UART_MspInit+0x2b0>)
 800233e:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002340:	4b26      	ldr	r3, [pc, #152]	; (80023dc <HAL_UART_MspInit+0x2ac>)
 8002342:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002346:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002348:	4b24      	ldr	r3, [pc, #144]	; (80023dc <HAL_UART_MspInit+0x2ac>)
 800234a:	2200      	movs	r2, #0
 800234c:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800234e:	4b23      	ldr	r3, [pc, #140]	; (80023dc <HAL_UART_MspInit+0x2ac>)
 8002350:	2200      	movs	r2, #0
 8002352:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002354:	4b21      	ldr	r3, [pc, #132]	; (80023dc <HAL_UART_MspInit+0x2ac>)
 8002356:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800235a:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800235c:	4b1f      	ldr	r3, [pc, #124]	; (80023dc <HAL_UART_MspInit+0x2ac>)
 800235e:	2200      	movs	r2, #0
 8002360:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002362:	4b1e      	ldr	r3, [pc, #120]	; (80023dc <HAL_UART_MspInit+0x2ac>)
 8002364:	2200      	movs	r2, #0
 8002366:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8002368:	4b1c      	ldr	r3, [pc, #112]	; (80023dc <HAL_UART_MspInit+0x2ac>)
 800236a:	2200      	movs	r2, #0
 800236c:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 800236e:	4b1b      	ldr	r3, [pc, #108]	; (80023dc <HAL_UART_MspInit+0x2ac>)
 8002370:	2200      	movs	r2, #0
 8002372:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002374:	4b19      	ldr	r3, [pc, #100]	; (80023dc <HAL_UART_MspInit+0x2ac>)
 8002376:	2200      	movs	r2, #0
 8002378:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800237a:	4818      	ldr	r0, [pc, #96]	; (80023dc <HAL_UART_MspInit+0x2ac>)
 800237c:	f000 febe 	bl	80030fc <HAL_DMA_Init>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <HAL_UART_MspInit+0x25a>
      Error_Handler();
 8002386:	f7ff fd29 	bl	8001ddc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a13      	ldr	r2, [pc, #76]	; (80023dc <HAL_UART_MspInit+0x2ac>)
 800238e:	639a      	str	r2, [r3, #56]	; 0x38
 8002390:	4a12      	ldr	r2, [pc, #72]	; (80023dc <HAL_UART_MspInit+0x2ac>)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8002396:	2200      	movs	r2, #0
 8002398:	2105      	movs	r1, #5
 800239a:	2047      	movs	r0, #71	; 0x47
 800239c:	f000 fe84 	bl	80030a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80023a0:	2047      	movs	r0, #71	; 0x47
 80023a2:	f000 fe9d 	bl	80030e0 <HAL_NVIC_EnableIRQ>
}
 80023a6:	bf00      	nop
 80023a8:	3730      	adds	r7, #48	; 0x30
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40004800 	.word	0x40004800
 80023b4:	40023800 	.word	0x40023800
 80023b8:	40020400 	.word	0x40020400
 80023bc:	20009704 	.word	0x20009704
 80023c0:	40026058 	.word	0x40026058
 80023c4:	200081d8 	.word	0x200081d8
 80023c8:	40026028 	.word	0x40026028
 80023cc:	40011400 	.word	0x40011400
 80023d0:	40021800 	.word	0x40021800
 80023d4:	2000988c 	.word	0x2000988c
 80023d8:	400264a0 	.word	0x400264a0
 80023dc:	2000811c 	.word	0x2000811c
 80023e0:	40026428 	.word	0x40026428

080023e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b08c      	sub	sp, #48	; 0x30
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80023ec:	2300      	movs	r3, #0
 80023ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80023f0:	2300      	movs	r3, #0
 80023f2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80023f4:	2200      	movs	r2, #0
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	2019      	movs	r0, #25
 80023fa:	f000 fe55 	bl	80030a8 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80023fe:	2019      	movs	r0, #25
 8002400:	f000 fe6e 	bl	80030e0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002404:	2300      	movs	r3, #0
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	4b1f      	ldr	r3, [pc, #124]	; (8002488 <HAL_InitTick+0xa4>)
 800240a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240c:	4a1e      	ldr	r2, [pc, #120]	; (8002488 <HAL_InitTick+0xa4>)
 800240e:	f043 0301 	orr.w	r3, r3, #1
 8002412:	6453      	str	r3, [r2, #68]	; 0x44
 8002414:	4b1c      	ldr	r3, [pc, #112]	; (8002488 <HAL_InitTick+0xa4>)
 8002416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002418:	f003 0301 	and.w	r3, r3, #1
 800241c:	60fb      	str	r3, [r7, #12]
 800241e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002420:	f107 0210 	add.w	r2, r7, #16
 8002424:	f107 0314 	add.w	r3, r7, #20
 8002428:	4611      	mov	r1, r2
 800242a:	4618      	mov	r0, r3
 800242c:	f003 f9ac 	bl	8005788 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002430:	f003 f996 	bl	8005760 <HAL_RCC_GetPCLK2Freq>
 8002434:	4603      	mov	r3, r0
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800243a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800243c:	4a13      	ldr	r2, [pc, #76]	; (800248c <HAL_InitTick+0xa8>)
 800243e:	fba2 2303 	umull	r2, r3, r2, r3
 8002442:	0c9b      	lsrs	r3, r3, #18
 8002444:	3b01      	subs	r3, #1
 8002446:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002448:	4b11      	ldr	r3, [pc, #68]	; (8002490 <HAL_InitTick+0xac>)
 800244a:	4a12      	ldr	r2, [pc, #72]	; (8002494 <HAL_InitTick+0xb0>)
 800244c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800244e:	4b10      	ldr	r3, [pc, #64]	; (8002490 <HAL_InitTick+0xac>)
 8002450:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002454:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002456:	4a0e      	ldr	r2, [pc, #56]	; (8002490 <HAL_InitTick+0xac>)
 8002458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800245a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800245c:	4b0c      	ldr	r3, [pc, #48]	; (8002490 <HAL_InitTick+0xac>)
 800245e:	2200      	movs	r2, #0
 8002460:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002462:	4b0b      	ldr	r3, [pc, #44]	; (8002490 <HAL_InitTick+0xac>)
 8002464:	2200      	movs	r2, #0
 8002466:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002468:	4809      	ldr	r0, [pc, #36]	; (8002490 <HAL_InitTick+0xac>)
 800246a:	f004 fb47 	bl	8006afc <HAL_TIM_Base_Init>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d104      	bne.n	800247e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002474:	4806      	ldr	r0, [pc, #24]	; (8002490 <HAL_InitTick+0xac>)
 8002476:	f004 fb91 	bl	8006b9c <HAL_TIM_Base_Start_IT>
 800247a:	4603      	mov	r3, r0
 800247c:	e000      	b.n	8002480 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
}
 8002480:	4618      	mov	r0, r3
 8002482:	3730      	adds	r7, #48	; 0x30
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40023800 	.word	0x40023800
 800248c:	431bde83 	.word	0x431bde83
 8002490:	20009db8 	.word	0x20009db8
 8002494:	40010000 	.word	0x40010000

08002498 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800249c:	e7fe      	b.n	800249c <NMI_Handler+0x4>

0800249e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800249e:	b480      	push	{r7}
 80024a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024a2:	e7fe      	b.n	80024a2 <HardFault_Handler+0x4>

080024a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024a8:	e7fe      	b.n	80024a8 <MemManage_Handler+0x4>

080024aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024aa:	b480      	push	{r7}
 80024ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024ae:	e7fe      	b.n	80024ae <BusFault_Handler+0x4>

080024b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024b4:	e7fe      	b.n	80024b4 <UsageFault_Handler+0x4>

080024b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024b6:	b480      	push	{r7}
 80024b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024ba:	bf00      	nop
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80024c8:	4802      	ldr	r0, [pc, #8]	; (80024d4 <DMA1_Stream1_IRQHandler+0x10>)
 80024ca:	f000 ffaf 	bl	800342c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80024ce:	bf00      	nop
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	200081d8 	.word	0x200081d8

080024d8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80024dc:	4802      	ldr	r0, [pc, #8]	; (80024e8 <DMA1_Stream3_IRQHandler+0x10>)
 80024de:	f000 ffa5 	bl	800342c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80024e2:	bf00      	nop
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	20009704 	.word	0x20009704

080024ec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80024f0:	4802      	ldr	r0, [pc, #8]	; (80024fc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80024f2:	f004 fbc3 	bl	8006c7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80024f6:	bf00      	nop
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20009db8 	.word	0x20009db8

08002500 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002504:	4802      	ldr	r0, [pc, #8]	; (8002510 <TIM2_IRQHandler+0x10>)
 8002506:	f004 fbb9 	bl	8006c7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800250a:	bf00      	nop
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	20009d44 	.word	0x20009d44

08002514 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002518:	4802      	ldr	r0, [pc, #8]	; (8002524 <USART3_IRQHandler+0x10>)
 800251a:	f005 f86d 	bl	80075f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800251e:	bf00      	nop
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	2000823c 	.word	0x2000823c

08002528 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800252c:	4802      	ldr	r0, [pc, #8]	; (8002538 <DMA2_Stream0_IRQHandler+0x10>)
 800252e:	f000 ff7d 	bl	800342c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002532:	bf00      	nop
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	20009a54 	.word	0x20009a54

0800253c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002540:	4802      	ldr	r0, [pc, #8]	; (800254c <DMA2_Stream1_IRQHandler+0x10>)
 8002542:	f000 ff73 	bl	800342c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002546:	bf00      	nop
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	2000811c 	.word	0x2000811c

08002550 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8002554:	4802      	ldr	r0, [pc, #8]	; (8002560 <DMA2_Stream6_IRQHandler+0x10>)
 8002556:	f000 ff69 	bl	800342c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	2000988c 	.word	0x2000988c

08002564 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002568:	4802      	ldr	r0, [pc, #8]	; (8002574 <USART6_IRQHandler+0x10>)
 800256a:	f005 f845 	bl	80075f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	20009d00 	.word	0x20009d00

08002578 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002580:	4a14      	ldr	r2, [pc, #80]	; (80025d4 <_sbrk+0x5c>)
 8002582:	4b15      	ldr	r3, [pc, #84]	; (80025d8 <_sbrk+0x60>)
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800258c:	4b13      	ldr	r3, [pc, #76]	; (80025dc <_sbrk+0x64>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d102      	bne.n	800259a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002594:	4b11      	ldr	r3, [pc, #68]	; (80025dc <_sbrk+0x64>)
 8002596:	4a12      	ldr	r2, [pc, #72]	; (80025e0 <_sbrk+0x68>)
 8002598:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800259a:	4b10      	ldr	r3, [pc, #64]	; (80025dc <_sbrk+0x64>)
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4413      	add	r3, r2
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d207      	bcs.n	80025b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025a8:	f017 ff4a 	bl	801a440 <__errno>
 80025ac:	4603      	mov	r3, r0
 80025ae:	220c      	movs	r2, #12
 80025b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025b2:	f04f 33ff 	mov.w	r3, #4294967295
 80025b6:	e009      	b.n	80025cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025b8:	4b08      	ldr	r3, [pc, #32]	; (80025dc <_sbrk+0x64>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025be:	4b07      	ldr	r3, [pc, #28]	; (80025dc <_sbrk+0x64>)
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4413      	add	r3, r2
 80025c6:	4a05      	ldr	r2, [pc, #20]	; (80025dc <_sbrk+0x64>)
 80025c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025ca:	68fb      	ldr	r3, [r7, #12]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3718      	adds	r7, #24
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	20020000 	.word	0x20020000
 80025d8:	00000400 	.word	0x00000400
 80025dc:	20000878 	.word	0x20000878
 80025e0:	2000a2b0 	.word	0x2000a2b0

080025e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025e8:	4b06      	ldr	r3, [pc, #24]	; (8002604 <SystemInit+0x20>)
 80025ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ee:	4a05      	ldr	r2, [pc, #20]	; (8002604 <SystemInit+0x20>)
 80025f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025f8:	bf00      	nop
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	e000ed00 	.word	0xe000ed00

08002608 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002608:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002640 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800260c:	480d      	ldr	r0, [pc, #52]	; (8002644 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800260e:	490e      	ldr	r1, [pc, #56]	; (8002648 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002610:	4a0e      	ldr	r2, [pc, #56]	; (800264c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002612:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002614:	e002      	b.n	800261c <LoopCopyDataInit>

08002616 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002616:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002618:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800261a:	3304      	adds	r3, #4

0800261c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800261c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800261e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002620:	d3f9      	bcc.n	8002616 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002622:	4a0b      	ldr	r2, [pc, #44]	; (8002650 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002624:	4c0b      	ldr	r4, [pc, #44]	; (8002654 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002626:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002628:	e001      	b.n	800262e <LoopFillZerobss>

0800262a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800262a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800262c:	3204      	adds	r2, #4

0800262e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800262e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002630:	d3fb      	bcc.n	800262a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002632:	f7ff ffd7 	bl	80025e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002636:	f017 ff09 	bl	801a44c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800263a:	f7fe fd85 	bl	8001148 <main>
  bx  lr    
 800263e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002640:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002648:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 800264c:	0801c478 	.word	0x0801c478
  ldr r2, =_sbss
 8002650:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 8002654:	2000a2ac 	.word	0x2000a2ac

08002658 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002658:	e7fe      	b.n	8002658 <ADC_IRQHandler>
	...

0800265c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002660:	4b0e      	ldr	r3, [pc, #56]	; (800269c <HAL_Init+0x40>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a0d      	ldr	r2, [pc, #52]	; (800269c <HAL_Init+0x40>)
 8002666:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800266a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800266c:	4b0b      	ldr	r3, [pc, #44]	; (800269c <HAL_Init+0x40>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a0a      	ldr	r2, [pc, #40]	; (800269c <HAL_Init+0x40>)
 8002672:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002676:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002678:	4b08      	ldr	r3, [pc, #32]	; (800269c <HAL_Init+0x40>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a07      	ldr	r2, [pc, #28]	; (800269c <HAL_Init+0x40>)
 800267e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002682:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002684:	2003      	movs	r0, #3
 8002686:	f000 fd04 	bl	8003092 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800268a:	200f      	movs	r0, #15
 800268c:	f7ff feaa 	bl	80023e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002690:	f7ff fba8 	bl	8001de4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	40023c00 	.word	0x40023c00

080026a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026a4:	4b06      	ldr	r3, [pc, #24]	; (80026c0 <HAL_IncTick+0x20>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	461a      	mov	r2, r3
 80026aa:	4b06      	ldr	r3, [pc, #24]	; (80026c4 <HAL_IncTick+0x24>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4413      	add	r3, r2
 80026b0:	4a04      	ldr	r2, [pc, #16]	; (80026c4 <HAL_IncTick+0x24>)
 80026b2:	6013      	str	r3, [r2, #0]
}
 80026b4:	bf00      	nop
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	2000000c 	.word	0x2000000c
 80026c4:	20009e00 	.word	0x20009e00

080026c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  return uwTick;
 80026cc:	4b03      	ldr	r3, [pc, #12]	; (80026dc <HAL_GetTick+0x14>)
 80026ce:	681b      	ldr	r3, [r3, #0]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	20009e00 	.word	0x20009e00

080026e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026e8:	f7ff ffee 	bl	80026c8 <HAL_GetTick>
 80026ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f8:	d005      	beq.n	8002706 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026fa:	4b0a      	ldr	r3, [pc, #40]	; (8002724 <HAL_Delay+0x44>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	461a      	mov	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4413      	add	r3, r2
 8002704:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002706:	bf00      	nop
 8002708:	f7ff ffde 	bl	80026c8 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	429a      	cmp	r2, r3
 8002716:	d8f7      	bhi.n	8002708 <HAL_Delay+0x28>
  {
  }
}
 8002718:	bf00      	nop
 800271a:	bf00      	nop
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	2000000c 	.word	0x2000000c

08002728 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002730:	2300      	movs	r3, #0
 8002732:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e033      	b.n	80027a6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	2b00      	cmp	r3, #0
 8002744:	d109      	bne.n	800275a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7ff fb78 	bl	8001e3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275e:	f003 0310 	and.w	r3, r3, #16
 8002762:	2b00      	cmp	r3, #0
 8002764:	d118      	bne.n	8002798 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800276e:	f023 0302 	bic.w	r3, r3, #2
 8002772:	f043 0202 	orr.w	r2, r3, #2
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f000 fa5e 	bl	8002c3c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	f023 0303 	bic.w	r3, r3, #3
 800278e:	f043 0201 	orr.w	r2, r3, #1
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	641a      	str	r2, [r3, #64]	; 0x40
 8002796:	e001      	b.n	800279c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80027a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
	...

080027b0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80027bc:	2300      	movs	r3, #0
 80027be:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d101      	bne.n	80027ce <HAL_ADC_Start_DMA+0x1e>
 80027ca:	2302      	movs	r3, #2
 80027cc:	e0e9      	b.n	80029a2 <HAL_ADC_Start_DMA+0x1f2>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d018      	beq.n	8002816 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	689a      	ldr	r2, [r3, #8]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f042 0201 	orr.w	r2, r2, #1
 80027f2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80027f4:	4b6d      	ldr	r3, [pc, #436]	; (80029ac <HAL_ADC_Start_DMA+0x1fc>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a6d      	ldr	r2, [pc, #436]	; (80029b0 <HAL_ADC_Start_DMA+0x200>)
 80027fa:	fba2 2303 	umull	r2, r3, r2, r3
 80027fe:	0c9a      	lsrs	r2, r3, #18
 8002800:	4613      	mov	r3, r2
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	4413      	add	r3, r2
 8002806:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002808:	e002      	b.n	8002810 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	3b01      	subs	r3, #1
 800280e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d1f9      	bne.n	800280a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002820:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002824:	d107      	bne.n	8002836 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002834:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	2b01      	cmp	r3, #1
 8002842:	f040 80a1 	bne.w	8002988 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800284e:	f023 0301 	bic.w	r3, r3, #1
 8002852:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002864:	2b00      	cmp	r3, #0
 8002866:	d007      	beq.n	8002878 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002870:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002880:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002884:	d106      	bne.n	8002894 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288a:	f023 0206 	bic.w	r2, r3, #6
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	645a      	str	r2, [r3, #68]	; 0x44
 8002892:	e002      	b.n	800289a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2200      	movs	r2, #0
 8002898:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028a2:	4b44      	ldr	r3, [pc, #272]	; (80029b4 <HAL_ADC_Start_DMA+0x204>)
 80028a4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028aa:	4a43      	ldr	r2, [pc, #268]	; (80029b8 <HAL_ADC_Start_DMA+0x208>)
 80028ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b2:	4a42      	ldr	r2, [pc, #264]	; (80029bc <HAL_ADC_Start_DMA+0x20c>)
 80028b4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ba:	4a41      	ldr	r2, [pc, #260]	; (80029c0 <HAL_ADC_Start_DMA+0x210>)
 80028bc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80028c6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	685a      	ldr	r2, [r3, #4]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80028d6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689a      	ldr	r2, [r3, #8]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028e6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	334c      	adds	r3, #76	; 0x4c
 80028f2:	4619      	mov	r1, r3
 80028f4:	68ba      	ldr	r2, [r7, #8]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f000 fcae 	bl	8003258 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f003 031f 	and.w	r3, r3, #31
 8002904:	2b00      	cmp	r3, #0
 8002906:	d12a      	bne.n	800295e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a2d      	ldr	r2, [pc, #180]	; (80029c4 <HAL_ADC_Start_DMA+0x214>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d015      	beq.n	800293e <HAL_ADC_Start_DMA+0x18e>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a2c      	ldr	r2, [pc, #176]	; (80029c8 <HAL_ADC_Start_DMA+0x218>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d105      	bne.n	8002928 <HAL_ADC_Start_DMA+0x178>
 800291c:	4b25      	ldr	r3, [pc, #148]	; (80029b4 <HAL_ADC_Start_DMA+0x204>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f003 031f 	and.w	r3, r3, #31
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00a      	beq.n	800293e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a27      	ldr	r2, [pc, #156]	; (80029cc <HAL_ADC_Start_DMA+0x21c>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d136      	bne.n	80029a0 <HAL_ADC_Start_DMA+0x1f0>
 8002932:	4b20      	ldr	r3, [pc, #128]	; (80029b4 <HAL_ADC_Start_DMA+0x204>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f003 0310 	and.w	r3, r3, #16
 800293a:	2b00      	cmp	r3, #0
 800293c:	d130      	bne.n	80029a0 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d129      	bne.n	80029a0 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689a      	ldr	r2, [r3, #8]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800295a:	609a      	str	r2, [r3, #8]
 800295c:	e020      	b.n	80029a0 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a18      	ldr	r2, [pc, #96]	; (80029c4 <HAL_ADC_Start_DMA+0x214>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d11b      	bne.n	80029a0 <HAL_ADC_Start_DMA+0x1f0>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d114      	bne.n	80029a0 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689a      	ldr	r2, [r3, #8]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002984:	609a      	str	r2, [r3, #8]
 8002986:	e00b      	b.n	80029a0 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298c:	f043 0210 	orr.w	r2, r3, #16
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002998:	f043 0201 	orr.w	r2, r3, #1
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3718      	adds	r7, #24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	20000004 	.word	0x20000004
 80029b0:	431bde83 	.word	0x431bde83
 80029b4:	40012300 	.word	0x40012300
 80029b8:	08002e35 	.word	0x08002e35
 80029bc:	08002eef 	.word	0x08002eef
 80029c0:	08002f0b 	.word	0x08002f0b
 80029c4:	40012000 	.word	0x40012000
 80029c8:	40012100 	.word	0x40012100
 80029cc:	40012200 	.word	0x40012200

080029d0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d101      	bne.n	8002a14 <HAL_ADC_ConfigChannel+0x1c>
 8002a10:	2302      	movs	r3, #2
 8002a12:	e105      	b.n	8002c20 <HAL_ADC_ConfigChannel+0x228>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2b09      	cmp	r3, #9
 8002a22:	d925      	bls.n	8002a70 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68d9      	ldr	r1, [r3, #12]
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	b29b      	uxth	r3, r3
 8002a30:	461a      	mov	r2, r3
 8002a32:	4613      	mov	r3, r2
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	4413      	add	r3, r2
 8002a38:	3b1e      	subs	r3, #30
 8002a3a:	2207      	movs	r2, #7
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	43da      	mvns	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	400a      	ands	r2, r1
 8002a48:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68d9      	ldr	r1, [r3, #12]
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	689a      	ldr	r2, [r3, #8]
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	4403      	add	r3, r0
 8002a62:	3b1e      	subs	r3, #30
 8002a64:	409a      	lsls	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	60da      	str	r2, [r3, #12]
 8002a6e:	e022      	b.n	8002ab6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6919      	ldr	r1, [r3, #16]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	4613      	mov	r3, r2
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	4413      	add	r3, r2
 8002a84:	2207      	movs	r2, #7
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	43da      	mvns	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	400a      	ands	r2, r1
 8002a92:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6919      	ldr	r1, [r3, #16]
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	689a      	ldr	r2, [r3, #8]
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	4403      	add	r3, r0
 8002aac:	409a      	lsls	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2b06      	cmp	r3, #6
 8002abc:	d824      	bhi.n	8002b08 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685a      	ldr	r2, [r3, #4]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	4413      	add	r3, r2
 8002ace:	3b05      	subs	r3, #5
 8002ad0:	221f      	movs	r2, #31
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	43da      	mvns	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	400a      	ands	r2, r1
 8002ade:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	4618      	mov	r0, r3
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685a      	ldr	r2, [r3, #4]
 8002af2:	4613      	mov	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	3b05      	subs	r3, #5
 8002afa:	fa00 f203 	lsl.w	r2, r0, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	635a      	str	r2, [r3, #52]	; 0x34
 8002b06:	e04c      	b.n	8002ba2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	2b0c      	cmp	r3, #12
 8002b0e:	d824      	bhi.n	8002b5a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685a      	ldr	r2, [r3, #4]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	3b23      	subs	r3, #35	; 0x23
 8002b22:	221f      	movs	r2, #31
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	43da      	mvns	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	400a      	ands	r2, r1
 8002b30:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	4618      	mov	r0, r3
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685a      	ldr	r2, [r3, #4]
 8002b44:	4613      	mov	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4413      	add	r3, r2
 8002b4a:	3b23      	subs	r3, #35	; 0x23
 8002b4c:	fa00 f203 	lsl.w	r2, r0, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	430a      	orrs	r2, r1
 8002b56:	631a      	str	r2, [r3, #48]	; 0x30
 8002b58:	e023      	b.n	8002ba2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685a      	ldr	r2, [r3, #4]
 8002b64:	4613      	mov	r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	4413      	add	r3, r2
 8002b6a:	3b41      	subs	r3, #65	; 0x41
 8002b6c:	221f      	movs	r2, #31
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	43da      	mvns	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	400a      	ands	r2, r1
 8002b7a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	4618      	mov	r0, r3
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	4413      	add	r3, r2
 8002b94:	3b41      	subs	r3, #65	; 0x41
 8002b96:	fa00 f203 	lsl.w	r2, r0, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ba2:	4b22      	ldr	r3, [pc, #136]	; (8002c2c <HAL_ADC_ConfigChannel+0x234>)
 8002ba4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a21      	ldr	r2, [pc, #132]	; (8002c30 <HAL_ADC_ConfigChannel+0x238>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d109      	bne.n	8002bc4 <HAL_ADC_ConfigChannel+0x1cc>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2b12      	cmp	r3, #18
 8002bb6:	d105      	bne.n	8002bc4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a19      	ldr	r2, [pc, #100]	; (8002c30 <HAL_ADC_ConfigChannel+0x238>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d123      	bne.n	8002c16 <HAL_ADC_ConfigChannel+0x21e>
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2b10      	cmp	r3, #16
 8002bd4:	d003      	beq.n	8002bde <HAL_ADC_ConfigChannel+0x1e6>
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2b11      	cmp	r3, #17
 8002bdc:	d11b      	bne.n	8002c16 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2b10      	cmp	r3, #16
 8002bf0:	d111      	bne.n	8002c16 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002bf2:	4b10      	ldr	r3, [pc, #64]	; (8002c34 <HAL_ADC_ConfigChannel+0x23c>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a10      	ldr	r2, [pc, #64]	; (8002c38 <HAL_ADC_ConfigChannel+0x240>)
 8002bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfc:	0c9a      	lsrs	r2, r3, #18
 8002bfe:	4613      	mov	r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	4413      	add	r3, r2
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c08:	e002      	b.n	8002c10 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1f9      	bne.n	8002c0a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3714      	adds	r7, #20
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	40012300 	.word	0x40012300
 8002c30:	40012000 	.word	0x40012000
 8002c34:	20000004 	.word	0x20000004
 8002c38:	431bde83 	.word	0x431bde83

08002c3c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c44:	4b79      	ldr	r3, [pc, #484]	; (8002e2c <ADC_Init+0x1f0>)
 8002c46:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	685a      	ldr	r2, [r3, #4]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	685a      	ldr	r2, [r3, #4]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	6859      	ldr	r1, [r3, #4]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	021a      	lsls	r2, r3, #8
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	430a      	orrs	r2, r1
 8002c84:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	685a      	ldr	r2, [r3, #4]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002c94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	6859      	ldr	r1, [r3, #4]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689a      	ldr	r2, [r3, #8]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	689a      	ldr	r2, [r3, #8]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cb6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	6899      	ldr	r1, [r3, #8]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68da      	ldr	r2, [r3, #12]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cce:	4a58      	ldr	r2, [pc, #352]	; (8002e30 <ADC_Init+0x1f4>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d022      	beq.n	8002d1a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	689a      	ldr	r2, [r3, #8]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ce2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	6899      	ldr	r1, [r3, #8]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	689a      	ldr	r2, [r3, #8]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6899      	ldr	r1, [r3, #8]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	430a      	orrs	r2, r1
 8002d16:	609a      	str	r2, [r3, #8]
 8002d18:	e00f      	b.n	8002d3a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	689a      	ldr	r2, [r3, #8]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d38:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f022 0202 	bic.w	r2, r2, #2
 8002d48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6899      	ldr	r1, [r3, #8]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	7e1b      	ldrb	r3, [r3, #24]
 8002d54:	005a      	lsls	r2, r3, #1
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d01b      	beq.n	8002da0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	685a      	ldr	r2, [r3, #4]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d76:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	685a      	ldr	r2, [r3, #4]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002d86:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	6859      	ldr	r1, [r3, #4]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d92:	3b01      	subs	r3, #1
 8002d94:	035a      	lsls	r2, r3, #13
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	605a      	str	r2, [r3, #4]
 8002d9e:	e007      	b.n	8002db0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	685a      	ldr	r2, [r3, #4]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002dbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	051a      	lsls	r2, r3, #20
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002de4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	6899      	ldr	r1, [r3, #8]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002df2:	025a      	lsls	r2, r3, #9
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689a      	ldr	r2, [r3, #8]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	6899      	ldr	r1, [r3, #8]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	029a      	lsls	r2, r3, #10
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	609a      	str	r2, [r3, #8]
}
 8002e20:	bf00      	nop
 8002e22:	3714      	adds	r7, #20
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr
 8002e2c:	40012300 	.word	0x40012300
 8002e30:	0f000001 	.word	0x0f000001

08002e34 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e40:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d13c      	bne.n	8002ec8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d12b      	bne.n	8002ec0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d127      	bne.n	8002ec0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e76:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d006      	beq.n	8002e8c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d119      	bne.n	8002ec0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	685a      	ldr	r2, [r3, #4]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 0220 	bic.w	r2, r2, #32
 8002e9a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d105      	bne.n	8002ec0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb8:	f043 0201 	orr.w	r2, r3, #1
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ec0:	68f8      	ldr	r0, [r7, #12]
 8002ec2:	f7fe f8a7 	bl	8001014 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002ec6:	e00e      	b.n	8002ee6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ecc:	f003 0310 	and.w	r3, r3, #16
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d003      	beq.n	8002edc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002ed4:	68f8      	ldr	r0, [r7, #12]
 8002ed6:	f7ff fd85 	bl	80029e4 <HAL_ADC_ErrorCallback>
}
 8002eda:	e004      	b.n	8002ee6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	4798      	blx	r3
}
 8002ee6:	bf00      	nop
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b084      	sub	sp, #16
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efa:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f7ff fd67 	bl	80029d0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f02:	bf00      	nop
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b084      	sub	sp, #16
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f16:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2240      	movs	r2, #64	; 0x40
 8002f1c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f22:	f043 0204 	orr.w	r2, r3, #4
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f7ff fd5a 	bl	80029e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f30:	bf00      	nop
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <__NVIC_SetPriorityGrouping>:
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f003 0307 	and.w	r3, r3, #7
 8002f46:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f48:	4b0c      	ldr	r3, [pc, #48]	; (8002f7c <__NVIC_SetPriorityGrouping+0x44>)
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f4e:	68ba      	ldr	r2, [r7, #8]
 8002f50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f54:	4013      	ands	r3, r2
 8002f56:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f6a:	4a04      	ldr	r2, [pc, #16]	; (8002f7c <__NVIC_SetPriorityGrouping+0x44>)
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	60d3      	str	r3, [r2, #12]
}
 8002f70:	bf00      	nop
 8002f72:	3714      	adds	r7, #20
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr
 8002f7c:	e000ed00 	.word	0xe000ed00

08002f80 <__NVIC_GetPriorityGrouping>:
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f84:	4b04      	ldr	r3, [pc, #16]	; (8002f98 <__NVIC_GetPriorityGrouping+0x18>)
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	0a1b      	lsrs	r3, r3, #8
 8002f8a:	f003 0307 	and.w	r3, r3, #7
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr
 8002f98:	e000ed00 	.word	0xe000ed00

08002f9c <__NVIC_EnableIRQ>:
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	db0b      	blt.n	8002fc6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fae:	79fb      	ldrb	r3, [r7, #7]
 8002fb0:	f003 021f 	and.w	r2, r3, #31
 8002fb4:	4907      	ldr	r1, [pc, #28]	; (8002fd4 <__NVIC_EnableIRQ+0x38>)
 8002fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fba:	095b      	lsrs	r3, r3, #5
 8002fbc:	2001      	movs	r0, #1
 8002fbe:	fa00 f202 	lsl.w	r2, r0, r2
 8002fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002fc6:	bf00      	nop
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	e000e100 	.word	0xe000e100

08002fd8 <__NVIC_SetPriority>:
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	4603      	mov	r3, r0
 8002fe0:	6039      	str	r1, [r7, #0]
 8002fe2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	db0a      	blt.n	8003002 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	b2da      	uxtb	r2, r3
 8002ff0:	490c      	ldr	r1, [pc, #48]	; (8003024 <__NVIC_SetPriority+0x4c>)
 8002ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff6:	0112      	lsls	r2, r2, #4
 8002ff8:	b2d2      	uxtb	r2, r2
 8002ffa:	440b      	add	r3, r1
 8002ffc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003000:	e00a      	b.n	8003018 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	b2da      	uxtb	r2, r3
 8003006:	4908      	ldr	r1, [pc, #32]	; (8003028 <__NVIC_SetPriority+0x50>)
 8003008:	79fb      	ldrb	r3, [r7, #7]
 800300a:	f003 030f 	and.w	r3, r3, #15
 800300e:	3b04      	subs	r3, #4
 8003010:	0112      	lsls	r2, r2, #4
 8003012:	b2d2      	uxtb	r2, r2
 8003014:	440b      	add	r3, r1
 8003016:	761a      	strb	r2, [r3, #24]
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	e000e100 	.word	0xe000e100
 8003028:	e000ed00 	.word	0xe000ed00

0800302c <NVIC_EncodePriority>:
{
 800302c:	b480      	push	{r7}
 800302e:	b089      	sub	sp, #36	; 0x24
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f003 0307 	and.w	r3, r3, #7
 800303e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	f1c3 0307 	rsb	r3, r3, #7
 8003046:	2b04      	cmp	r3, #4
 8003048:	bf28      	it	cs
 800304a:	2304      	movcs	r3, #4
 800304c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	3304      	adds	r3, #4
 8003052:	2b06      	cmp	r3, #6
 8003054:	d902      	bls.n	800305c <NVIC_EncodePriority+0x30>
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	3b03      	subs	r3, #3
 800305a:	e000      	b.n	800305e <NVIC_EncodePriority+0x32>
 800305c:	2300      	movs	r3, #0
 800305e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003060:	f04f 32ff 	mov.w	r2, #4294967295
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	fa02 f303 	lsl.w	r3, r2, r3
 800306a:	43da      	mvns	r2, r3
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	401a      	ands	r2, r3
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003074:	f04f 31ff 	mov.w	r1, #4294967295
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	fa01 f303 	lsl.w	r3, r1, r3
 800307e:	43d9      	mvns	r1, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003084:	4313      	orrs	r3, r2
}
 8003086:	4618      	mov	r0, r3
 8003088:	3724      	adds	r7, #36	; 0x24
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr

08003092 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003092:	b580      	push	{r7, lr}
 8003094:	b082      	sub	sp, #8
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f7ff ff4c 	bl	8002f38 <__NVIC_SetPriorityGrouping>
}
 80030a0:	bf00      	nop
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	4603      	mov	r3, r0
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
 80030b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030b6:	2300      	movs	r3, #0
 80030b8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030ba:	f7ff ff61 	bl	8002f80 <__NVIC_GetPriorityGrouping>
 80030be:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	68b9      	ldr	r1, [r7, #8]
 80030c4:	6978      	ldr	r0, [r7, #20]
 80030c6:	f7ff ffb1 	bl	800302c <NVIC_EncodePriority>
 80030ca:	4602      	mov	r2, r0
 80030cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030d0:	4611      	mov	r1, r2
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7ff ff80 	bl	8002fd8 <__NVIC_SetPriority>
}
 80030d8:	bf00      	nop
 80030da:	3718      	adds	r7, #24
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	4603      	mov	r3, r0
 80030e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7ff ff54 	bl	8002f9c <__NVIC_EnableIRQ>
}
 80030f4:	bf00      	nop
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003104:	2300      	movs	r3, #0
 8003106:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003108:	f7ff fade 	bl	80026c8 <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d101      	bne.n	8003118 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e099      	b.n	800324c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2202      	movs	r2, #2
 800311c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f022 0201 	bic.w	r2, r2, #1
 8003136:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003138:	e00f      	b.n	800315a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800313a:	f7ff fac5 	bl	80026c8 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b05      	cmp	r3, #5
 8003146:	d908      	bls.n	800315a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2220      	movs	r2, #32
 800314c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2203      	movs	r2, #3
 8003152:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e078      	b.n	800324c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 0301 	and.w	r3, r3, #1
 8003164:	2b00      	cmp	r3, #0
 8003166:	d1e8      	bne.n	800313a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	4b38      	ldr	r3, [pc, #224]	; (8003254 <HAL_DMA_Init+0x158>)
 8003174:	4013      	ands	r3, r2
 8003176:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685a      	ldr	r2, [r3, #4]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003186:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003192:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800319e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b0:	2b04      	cmp	r3, #4
 80031b2:	d107      	bne.n	80031c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031bc:	4313      	orrs	r3, r2
 80031be:	697a      	ldr	r2, [r7, #20]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	f023 0307 	bic.w	r3, r3, #7
 80031da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	697a      	ldr	r2, [r7, #20]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ea:	2b04      	cmp	r3, #4
 80031ec:	d117      	bne.n	800321e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00e      	beq.n	800321e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 fb01 	bl	8003808 <DMA_CheckFifoParam>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d008      	beq.n	800321e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2240      	movs	r2, #64	; 0x40
 8003210:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800321a:	2301      	movs	r3, #1
 800321c:	e016      	b.n	800324c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	697a      	ldr	r2, [r7, #20]
 8003224:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 fab8 	bl	800379c <DMA_CalcBaseAndBitshift>
 800322c:	4603      	mov	r3, r0
 800322e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003234:	223f      	movs	r2, #63	; 0x3f
 8003236:	409a      	lsls	r2, r3
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2201      	movs	r2, #1
 8003246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3718      	adds	r7, #24
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	f010803f 	.word	0xf010803f

08003258 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
 8003264:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003266:	2300      	movs	r3, #0
 8003268:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800326e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003276:	2b01      	cmp	r3, #1
 8003278:	d101      	bne.n	800327e <HAL_DMA_Start_IT+0x26>
 800327a:	2302      	movs	r3, #2
 800327c:	e040      	b.n	8003300 <HAL_DMA_Start_IT+0xa8>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b01      	cmp	r3, #1
 8003290:	d12f      	bne.n	80032f2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2202      	movs	r2, #2
 8003296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2200      	movs	r2, #0
 800329e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	68b9      	ldr	r1, [r7, #8]
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f000 fa4a 	bl	8003740 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032b0:	223f      	movs	r2, #63	; 0x3f
 80032b2:	409a      	lsls	r2, r3
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f042 0216 	orr.w	r2, r2, #22
 80032c6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d007      	beq.n	80032e0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f042 0208 	orr.w	r2, r2, #8
 80032de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f042 0201 	orr.w	r2, r2, #1
 80032ee:	601a      	str	r2, [r3, #0]
 80032f0:	e005      	b.n	80032fe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80032fa:	2302      	movs	r3, #2
 80032fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80032fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003300:	4618      	mov	r0, r3
 8003302:	3718      	adds	r7, #24
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003314:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003316:	f7ff f9d7 	bl	80026c8 <HAL_GetTick>
 800331a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b02      	cmp	r3, #2
 8003326:	d008      	beq.n	800333a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2280      	movs	r2, #128	; 0x80
 800332c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e052      	b.n	80033e0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0216 	bic.w	r2, r2, #22
 8003348:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	695a      	ldr	r2, [r3, #20]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003358:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	2b00      	cmp	r3, #0
 8003360:	d103      	bne.n	800336a <HAL_DMA_Abort+0x62>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003366:	2b00      	cmp	r3, #0
 8003368:	d007      	beq.n	800337a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f022 0208 	bic.w	r2, r2, #8
 8003378:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 0201 	bic.w	r2, r2, #1
 8003388:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800338a:	e013      	b.n	80033b4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800338c:	f7ff f99c 	bl	80026c8 <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	2b05      	cmp	r3, #5
 8003398:	d90c      	bls.n	80033b4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2220      	movs	r2, #32
 800339e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2203      	movs	r2, #3
 80033a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e015      	b.n	80033e0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1e4      	bne.n	800338c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c6:	223f      	movs	r2, #63	; 0x3f
 80033c8:	409a      	lsls	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2201      	movs	r2, #1
 80033d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d004      	beq.n	8003406 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2280      	movs	r2, #128	; 0x80
 8003400:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e00c      	b.n	8003420 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2205      	movs	r2, #5
 800340a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f022 0201 	bic.w	r2, r2, #1
 800341c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003434:	2300      	movs	r3, #0
 8003436:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003438:	4b92      	ldr	r3, [pc, #584]	; (8003684 <HAL_DMA_IRQHandler+0x258>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a92      	ldr	r2, [pc, #584]	; (8003688 <HAL_DMA_IRQHandler+0x25c>)
 800343e:	fba2 2303 	umull	r2, r3, r2, r3
 8003442:	0a9b      	lsrs	r3, r3, #10
 8003444:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800344a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003456:	2208      	movs	r2, #8
 8003458:	409a      	lsls	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	4013      	ands	r3, r2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d01a      	beq.n	8003498 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0304 	and.w	r3, r3, #4
 800346c:	2b00      	cmp	r3, #0
 800346e:	d013      	beq.n	8003498 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f022 0204 	bic.w	r2, r2, #4
 800347e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003484:	2208      	movs	r2, #8
 8003486:	409a      	lsls	r2, r3
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003490:	f043 0201 	orr.w	r2, r3, #1
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800349c:	2201      	movs	r2, #1
 800349e:	409a      	lsls	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	4013      	ands	r3, r2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d012      	beq.n	80034ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00b      	beq.n	80034ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ba:	2201      	movs	r2, #1
 80034bc:	409a      	lsls	r2, r3
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c6:	f043 0202 	orr.w	r2, r3, #2
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034d2:	2204      	movs	r2, #4
 80034d4:	409a      	lsls	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	4013      	ands	r3, r2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d012      	beq.n	8003504 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0302 	and.w	r3, r3, #2
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00b      	beq.n	8003504 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f0:	2204      	movs	r2, #4
 80034f2:	409a      	lsls	r2, r3
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034fc:	f043 0204 	orr.w	r2, r3, #4
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003508:	2210      	movs	r2, #16
 800350a:	409a      	lsls	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	4013      	ands	r3, r2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d043      	beq.n	800359c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0308 	and.w	r3, r3, #8
 800351e:	2b00      	cmp	r3, #0
 8003520:	d03c      	beq.n	800359c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003526:	2210      	movs	r2, #16
 8003528:	409a      	lsls	r2, r3
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d018      	beq.n	800356e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d108      	bne.n	800355c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354e:	2b00      	cmp	r3, #0
 8003550:	d024      	beq.n	800359c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	4798      	blx	r3
 800355a:	e01f      	b.n	800359c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003560:	2b00      	cmp	r3, #0
 8003562:	d01b      	beq.n	800359c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	4798      	blx	r3
 800356c:	e016      	b.n	800359c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003578:	2b00      	cmp	r3, #0
 800357a:	d107      	bne.n	800358c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f022 0208 	bic.w	r2, r2, #8
 800358a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003590:	2b00      	cmp	r3, #0
 8003592:	d003      	beq.n	800359c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a0:	2220      	movs	r2, #32
 80035a2:	409a      	lsls	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	4013      	ands	r3, r2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 808e 	beq.w	80036ca <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0310 	and.w	r3, r3, #16
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	f000 8086 	beq.w	80036ca <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c2:	2220      	movs	r2, #32
 80035c4:	409a      	lsls	r2, r3
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b05      	cmp	r3, #5
 80035d4:	d136      	bne.n	8003644 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 0216 	bic.w	r2, r2, #22
 80035e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	695a      	ldr	r2, [r3, #20]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d103      	bne.n	8003606 <HAL_DMA_IRQHandler+0x1da>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003602:	2b00      	cmp	r3, #0
 8003604:	d007      	beq.n	8003616 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 0208 	bic.w	r2, r2, #8
 8003614:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800361a:	223f      	movs	r2, #63	; 0x3f
 800361c:	409a      	lsls	r2, r3
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003636:	2b00      	cmp	r3, #0
 8003638:	d07d      	beq.n	8003736 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	4798      	blx	r3
        }
        return;
 8003642:	e078      	b.n	8003736 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d01c      	beq.n	800368c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d108      	bne.n	8003672 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003664:	2b00      	cmp	r3, #0
 8003666:	d030      	beq.n	80036ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	4798      	blx	r3
 8003670:	e02b      	b.n	80036ca <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003676:	2b00      	cmp	r3, #0
 8003678:	d027      	beq.n	80036ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	4798      	blx	r3
 8003682:	e022      	b.n	80036ca <HAL_DMA_IRQHandler+0x29e>
 8003684:	20000004 	.word	0x20000004
 8003688:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003696:	2b00      	cmp	r3, #0
 8003698:	d10f      	bne.n	80036ba <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0210 	bic.w	r2, r2, #16
 80036a8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d003      	beq.n	80036ca <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d032      	beq.n	8003738 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d022      	beq.n	8003724 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2205      	movs	r2, #5
 80036e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 0201 	bic.w	r2, r2, #1
 80036f4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	3301      	adds	r3, #1
 80036fa:	60bb      	str	r3, [r7, #8]
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d307      	bcc.n	8003712 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1f2      	bne.n	80036f6 <HAL_DMA_IRQHandler+0x2ca>
 8003710:	e000      	b.n	8003714 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003712:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003728:	2b00      	cmp	r3, #0
 800372a:	d005      	beq.n	8003738 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	4798      	blx	r3
 8003734:	e000      	b.n	8003738 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003736:	bf00      	nop
    }
  }
}
 8003738:	3718      	adds	r7, #24
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop

08003740 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
 800374c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800375c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	2b40      	cmp	r3, #64	; 0x40
 800376c:	d108      	bne.n	8003780 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68ba      	ldr	r2, [r7, #8]
 800377c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800377e:	e007      	b.n	8003790 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68ba      	ldr	r2, [r7, #8]
 8003786:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	60da      	str	r2, [r3, #12]
}
 8003790:	bf00      	nop
 8003792:	3714      	adds	r7, #20
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	3b10      	subs	r3, #16
 80037ac:	4a14      	ldr	r2, [pc, #80]	; (8003800 <DMA_CalcBaseAndBitshift+0x64>)
 80037ae:	fba2 2303 	umull	r2, r3, r2, r3
 80037b2:	091b      	lsrs	r3, r3, #4
 80037b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80037b6:	4a13      	ldr	r2, [pc, #76]	; (8003804 <DMA_CalcBaseAndBitshift+0x68>)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	4413      	add	r3, r2
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	461a      	mov	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2b03      	cmp	r3, #3
 80037c8:	d909      	bls.n	80037de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80037d2:	f023 0303 	bic.w	r3, r3, #3
 80037d6:	1d1a      	adds	r2, r3, #4
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	659a      	str	r2, [r3, #88]	; 0x58
 80037dc:	e007      	b.n	80037ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80037e6:	f023 0303 	bic.w	r3, r3, #3
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3714      	adds	r7, #20
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	aaaaaaab 	.word	0xaaaaaaab
 8003804:	0801c18c 	.word	0x0801c18c

08003808 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003808:	b480      	push	{r7}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003810:	2300      	movs	r3, #0
 8003812:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003818:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d11f      	bne.n	8003862 <DMA_CheckFifoParam+0x5a>
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	2b03      	cmp	r3, #3
 8003826:	d856      	bhi.n	80038d6 <DMA_CheckFifoParam+0xce>
 8003828:	a201      	add	r2, pc, #4	; (adr r2, 8003830 <DMA_CheckFifoParam+0x28>)
 800382a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800382e:	bf00      	nop
 8003830:	08003841 	.word	0x08003841
 8003834:	08003853 	.word	0x08003853
 8003838:	08003841 	.word	0x08003841
 800383c:	080038d7 	.word	0x080038d7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003844:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d046      	beq.n	80038da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003850:	e043      	b.n	80038da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003856:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800385a:	d140      	bne.n	80038de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003860:	e03d      	b.n	80038de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800386a:	d121      	bne.n	80038b0 <DMA_CheckFifoParam+0xa8>
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	2b03      	cmp	r3, #3
 8003870:	d837      	bhi.n	80038e2 <DMA_CheckFifoParam+0xda>
 8003872:	a201      	add	r2, pc, #4	; (adr r2, 8003878 <DMA_CheckFifoParam+0x70>)
 8003874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003878:	08003889 	.word	0x08003889
 800387c:	0800388f 	.word	0x0800388f
 8003880:	08003889 	.word	0x08003889
 8003884:	080038a1 	.word	0x080038a1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	73fb      	strb	r3, [r7, #15]
      break;
 800388c:	e030      	b.n	80038f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003892:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d025      	beq.n	80038e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800389e:	e022      	b.n	80038e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038a8:	d11f      	bne.n	80038ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80038ae:	e01c      	b.n	80038ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d903      	bls.n	80038be <DMA_CheckFifoParam+0xb6>
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	2b03      	cmp	r3, #3
 80038ba:	d003      	beq.n	80038c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80038bc:	e018      	b.n	80038f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	73fb      	strb	r3, [r7, #15]
      break;
 80038c2:	e015      	b.n	80038f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00e      	beq.n	80038ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	73fb      	strb	r3, [r7, #15]
      break;
 80038d4:	e00b      	b.n	80038ee <DMA_CheckFifoParam+0xe6>
      break;
 80038d6:	bf00      	nop
 80038d8:	e00a      	b.n	80038f0 <DMA_CheckFifoParam+0xe8>
      break;
 80038da:	bf00      	nop
 80038dc:	e008      	b.n	80038f0 <DMA_CheckFifoParam+0xe8>
      break;
 80038de:	bf00      	nop
 80038e0:	e006      	b.n	80038f0 <DMA_CheckFifoParam+0xe8>
      break;
 80038e2:	bf00      	nop
 80038e4:	e004      	b.n	80038f0 <DMA_CheckFifoParam+0xe8>
      break;
 80038e6:	bf00      	nop
 80038e8:	e002      	b.n	80038f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80038ea:	bf00      	nop
 80038ec:	e000      	b.n	80038f0 <DMA_CheckFifoParam+0xe8>
      break;
 80038ee:	bf00      	nop
    }
  } 
  
  return status; 
 80038f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop

08003900 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003900:	b480      	push	{r7}
 8003902:	b089      	sub	sp, #36	; 0x24
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800390a:	2300      	movs	r3, #0
 800390c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800390e:	2300      	movs	r3, #0
 8003910:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003912:	2300      	movs	r3, #0
 8003914:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003916:	2300      	movs	r3, #0
 8003918:	61fb      	str	r3, [r7, #28]
 800391a:	e16b      	b.n	8003bf4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800391c:	2201      	movs	r2, #1
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	fa02 f303 	lsl.w	r3, r2, r3
 8003924:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	697a      	ldr	r2, [r7, #20]
 800392c:	4013      	ands	r3, r2
 800392e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	429a      	cmp	r2, r3
 8003936:	f040 815a 	bne.w	8003bee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f003 0303 	and.w	r3, r3, #3
 8003942:	2b01      	cmp	r3, #1
 8003944:	d005      	beq.n	8003952 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800394e:	2b02      	cmp	r3, #2
 8003950:	d130      	bne.n	80039b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	005b      	lsls	r3, r3, #1
 800395c:	2203      	movs	r2, #3
 800395e:	fa02 f303 	lsl.w	r3, r2, r3
 8003962:	43db      	mvns	r3, r3
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	4013      	ands	r3, r2
 8003968:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	68da      	ldr	r2, [r3, #12]
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	005b      	lsls	r3, r3, #1
 8003972:	fa02 f303 	lsl.w	r3, r2, r3
 8003976:	69ba      	ldr	r2, [r7, #24]
 8003978:	4313      	orrs	r3, r2
 800397a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003988:	2201      	movs	r2, #1
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	fa02 f303 	lsl.w	r3, r2, r3
 8003990:	43db      	mvns	r3, r3
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	4013      	ands	r3, r2
 8003996:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	091b      	lsrs	r3, r3, #4
 800399e:	f003 0201 	and.w	r2, r3, #1
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	fa02 f303 	lsl.w	r3, r2, r3
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f003 0303 	and.w	r3, r3, #3
 80039bc:	2b03      	cmp	r3, #3
 80039be:	d017      	beq.n	80039f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	2203      	movs	r2, #3
 80039cc:	fa02 f303 	lsl.w	r3, r2, r3
 80039d0:	43db      	mvns	r3, r3
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	4013      	ands	r3, r2
 80039d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	689a      	ldr	r2, [r3, #8]
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	005b      	lsls	r3, r3, #1
 80039e0:	fa02 f303 	lsl.w	r3, r2, r3
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f003 0303 	and.w	r3, r3, #3
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d123      	bne.n	8003a44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	08da      	lsrs	r2, r3, #3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	3208      	adds	r2, #8
 8003a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	f003 0307 	and.w	r3, r3, #7
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	220f      	movs	r2, #15
 8003a14:	fa02 f303 	lsl.w	r3, r2, r3
 8003a18:	43db      	mvns	r3, r3
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	691a      	ldr	r2, [r3, #16]
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	f003 0307 	and.w	r3, r3, #7
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	08da      	lsrs	r2, r3, #3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	3208      	adds	r2, #8
 8003a3e:	69b9      	ldr	r1, [r7, #24]
 8003a40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	005b      	lsls	r3, r3, #1
 8003a4e:	2203      	movs	r2, #3
 8003a50:	fa02 f303 	lsl.w	r3, r2, r3
 8003a54:	43db      	mvns	r3, r3
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	4013      	ands	r3, r2
 8003a5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f003 0203 	and.w	r2, r3, #3
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f000 80b4 	beq.w	8003bee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a86:	2300      	movs	r3, #0
 8003a88:	60fb      	str	r3, [r7, #12]
 8003a8a:	4b60      	ldr	r3, [pc, #384]	; (8003c0c <HAL_GPIO_Init+0x30c>)
 8003a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8e:	4a5f      	ldr	r2, [pc, #380]	; (8003c0c <HAL_GPIO_Init+0x30c>)
 8003a90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a94:	6453      	str	r3, [r2, #68]	; 0x44
 8003a96:	4b5d      	ldr	r3, [pc, #372]	; (8003c0c <HAL_GPIO_Init+0x30c>)
 8003a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a9e:	60fb      	str	r3, [r7, #12]
 8003aa0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003aa2:	4a5b      	ldr	r2, [pc, #364]	; (8003c10 <HAL_GPIO_Init+0x310>)
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	089b      	lsrs	r3, r3, #2
 8003aa8:	3302      	adds	r3, #2
 8003aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	f003 0303 	and.w	r3, r3, #3
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	220f      	movs	r2, #15
 8003aba:	fa02 f303 	lsl.w	r3, r2, r3
 8003abe:	43db      	mvns	r3, r3
 8003ac0:	69ba      	ldr	r2, [r7, #24]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a52      	ldr	r2, [pc, #328]	; (8003c14 <HAL_GPIO_Init+0x314>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d02b      	beq.n	8003b26 <HAL_GPIO_Init+0x226>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a51      	ldr	r2, [pc, #324]	; (8003c18 <HAL_GPIO_Init+0x318>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d025      	beq.n	8003b22 <HAL_GPIO_Init+0x222>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a50      	ldr	r2, [pc, #320]	; (8003c1c <HAL_GPIO_Init+0x31c>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d01f      	beq.n	8003b1e <HAL_GPIO_Init+0x21e>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a4f      	ldr	r2, [pc, #316]	; (8003c20 <HAL_GPIO_Init+0x320>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d019      	beq.n	8003b1a <HAL_GPIO_Init+0x21a>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a4e      	ldr	r2, [pc, #312]	; (8003c24 <HAL_GPIO_Init+0x324>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d013      	beq.n	8003b16 <HAL_GPIO_Init+0x216>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a4d      	ldr	r2, [pc, #308]	; (8003c28 <HAL_GPIO_Init+0x328>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d00d      	beq.n	8003b12 <HAL_GPIO_Init+0x212>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a4c      	ldr	r2, [pc, #304]	; (8003c2c <HAL_GPIO_Init+0x32c>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d007      	beq.n	8003b0e <HAL_GPIO_Init+0x20e>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a4b      	ldr	r2, [pc, #300]	; (8003c30 <HAL_GPIO_Init+0x330>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d101      	bne.n	8003b0a <HAL_GPIO_Init+0x20a>
 8003b06:	2307      	movs	r3, #7
 8003b08:	e00e      	b.n	8003b28 <HAL_GPIO_Init+0x228>
 8003b0a:	2308      	movs	r3, #8
 8003b0c:	e00c      	b.n	8003b28 <HAL_GPIO_Init+0x228>
 8003b0e:	2306      	movs	r3, #6
 8003b10:	e00a      	b.n	8003b28 <HAL_GPIO_Init+0x228>
 8003b12:	2305      	movs	r3, #5
 8003b14:	e008      	b.n	8003b28 <HAL_GPIO_Init+0x228>
 8003b16:	2304      	movs	r3, #4
 8003b18:	e006      	b.n	8003b28 <HAL_GPIO_Init+0x228>
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e004      	b.n	8003b28 <HAL_GPIO_Init+0x228>
 8003b1e:	2302      	movs	r3, #2
 8003b20:	e002      	b.n	8003b28 <HAL_GPIO_Init+0x228>
 8003b22:	2301      	movs	r3, #1
 8003b24:	e000      	b.n	8003b28 <HAL_GPIO_Init+0x228>
 8003b26:	2300      	movs	r3, #0
 8003b28:	69fa      	ldr	r2, [r7, #28]
 8003b2a:	f002 0203 	and.w	r2, r2, #3
 8003b2e:	0092      	lsls	r2, r2, #2
 8003b30:	4093      	lsls	r3, r2
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b38:	4935      	ldr	r1, [pc, #212]	; (8003c10 <HAL_GPIO_Init+0x310>)
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	089b      	lsrs	r3, r3, #2
 8003b3e:	3302      	adds	r3, #2
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b46:	4b3b      	ldr	r3, [pc, #236]	; (8003c34 <HAL_GPIO_Init+0x334>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	43db      	mvns	r3, r3
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	4013      	ands	r3, r2
 8003b54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d003      	beq.n	8003b6a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b6a:	4a32      	ldr	r2, [pc, #200]	; (8003c34 <HAL_GPIO_Init+0x334>)
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b70:	4b30      	ldr	r3, [pc, #192]	; (8003c34 <HAL_GPIO_Init+0x334>)
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	43db      	mvns	r3, r3
 8003b7a:	69ba      	ldr	r2, [r7, #24]
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d003      	beq.n	8003b94 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b94:	4a27      	ldr	r2, [pc, #156]	; (8003c34 <HAL_GPIO_Init+0x334>)
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b9a:	4b26      	ldr	r3, [pc, #152]	; (8003c34 <HAL_GPIO_Init+0x334>)
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	43db      	mvns	r3, r3
 8003ba4:	69ba      	ldr	r2, [r7, #24]
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d003      	beq.n	8003bbe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003bbe:	4a1d      	ldr	r2, [pc, #116]	; (8003c34 <HAL_GPIO_Init+0x334>)
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003bc4:	4b1b      	ldr	r3, [pc, #108]	; (8003c34 <HAL_GPIO_Init+0x334>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	43db      	mvns	r3, r3
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d003      	beq.n	8003be8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003be8:	4a12      	ldr	r2, [pc, #72]	; (8003c34 <HAL_GPIO_Init+0x334>)
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	61fb      	str	r3, [r7, #28]
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	2b0f      	cmp	r3, #15
 8003bf8:	f67f ae90 	bls.w	800391c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003bfc:	bf00      	nop
 8003bfe:	bf00      	nop
 8003c00:	3724      	adds	r7, #36	; 0x24
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	40023800 	.word	0x40023800
 8003c10:	40013800 	.word	0x40013800
 8003c14:	40020000 	.word	0x40020000
 8003c18:	40020400 	.word	0x40020400
 8003c1c:	40020800 	.word	0x40020800
 8003c20:	40020c00 	.word	0x40020c00
 8003c24:	40021000 	.word	0x40021000
 8003c28:	40021400 	.word	0x40021400
 8003c2c:	40021800 	.word	0x40021800
 8003c30:	40021c00 	.word	0x40021c00
 8003c34:	40013c00 	.word	0x40013c00

08003c38 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b087      	sub	sp, #28
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c42:	2300      	movs	r3, #0
 8003c44:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003c46:	2300      	movs	r3, #0
 8003c48:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c4e:	2300      	movs	r3, #0
 8003c50:	617b      	str	r3, [r7, #20]
 8003c52:	e0cd      	b.n	8003df0 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c54:	2201      	movs	r2, #1
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	4013      	ands	r3, r2
 8003c64:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	f040 80bd 	bne.w	8003dea <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003c70:	4a65      	ldr	r2, [pc, #404]	; (8003e08 <HAL_GPIO_DeInit+0x1d0>)
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	089b      	lsrs	r3, r3, #2
 8003c76:	3302      	adds	r3, #2
 8003c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c7c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	f003 0303 	and.w	r3, r3, #3
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	220f      	movs	r2, #15
 8003c88:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8c:	68ba      	ldr	r2, [r7, #8]
 8003c8e:	4013      	ands	r3, r2
 8003c90:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a5d      	ldr	r2, [pc, #372]	; (8003e0c <HAL_GPIO_DeInit+0x1d4>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d02b      	beq.n	8003cf2 <HAL_GPIO_DeInit+0xba>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a5c      	ldr	r2, [pc, #368]	; (8003e10 <HAL_GPIO_DeInit+0x1d8>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d025      	beq.n	8003cee <HAL_GPIO_DeInit+0xb6>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a5b      	ldr	r2, [pc, #364]	; (8003e14 <HAL_GPIO_DeInit+0x1dc>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d01f      	beq.n	8003cea <HAL_GPIO_DeInit+0xb2>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a5a      	ldr	r2, [pc, #360]	; (8003e18 <HAL_GPIO_DeInit+0x1e0>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d019      	beq.n	8003ce6 <HAL_GPIO_DeInit+0xae>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a59      	ldr	r2, [pc, #356]	; (8003e1c <HAL_GPIO_DeInit+0x1e4>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d013      	beq.n	8003ce2 <HAL_GPIO_DeInit+0xaa>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a58      	ldr	r2, [pc, #352]	; (8003e20 <HAL_GPIO_DeInit+0x1e8>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d00d      	beq.n	8003cde <HAL_GPIO_DeInit+0xa6>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a57      	ldr	r2, [pc, #348]	; (8003e24 <HAL_GPIO_DeInit+0x1ec>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d007      	beq.n	8003cda <HAL_GPIO_DeInit+0xa2>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a56      	ldr	r2, [pc, #344]	; (8003e28 <HAL_GPIO_DeInit+0x1f0>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d101      	bne.n	8003cd6 <HAL_GPIO_DeInit+0x9e>
 8003cd2:	2307      	movs	r3, #7
 8003cd4:	e00e      	b.n	8003cf4 <HAL_GPIO_DeInit+0xbc>
 8003cd6:	2308      	movs	r3, #8
 8003cd8:	e00c      	b.n	8003cf4 <HAL_GPIO_DeInit+0xbc>
 8003cda:	2306      	movs	r3, #6
 8003cdc:	e00a      	b.n	8003cf4 <HAL_GPIO_DeInit+0xbc>
 8003cde:	2305      	movs	r3, #5
 8003ce0:	e008      	b.n	8003cf4 <HAL_GPIO_DeInit+0xbc>
 8003ce2:	2304      	movs	r3, #4
 8003ce4:	e006      	b.n	8003cf4 <HAL_GPIO_DeInit+0xbc>
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e004      	b.n	8003cf4 <HAL_GPIO_DeInit+0xbc>
 8003cea:	2302      	movs	r3, #2
 8003cec:	e002      	b.n	8003cf4 <HAL_GPIO_DeInit+0xbc>
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e000      	b.n	8003cf4 <HAL_GPIO_DeInit+0xbc>
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	f002 0203 	and.w	r2, r2, #3
 8003cfa:	0092      	lsls	r2, r2, #2
 8003cfc:	4093      	lsls	r3, r2
 8003cfe:	68ba      	ldr	r2, [r7, #8]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d132      	bne.n	8003d6a <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003d04:	4b49      	ldr	r3, [pc, #292]	; (8003e2c <HAL_GPIO_DeInit+0x1f4>)
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	43db      	mvns	r3, r3
 8003d0c:	4947      	ldr	r1, [pc, #284]	; (8003e2c <HAL_GPIO_DeInit+0x1f4>)
 8003d0e:	4013      	ands	r3, r2
 8003d10:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003d12:	4b46      	ldr	r3, [pc, #280]	; (8003e2c <HAL_GPIO_DeInit+0x1f4>)
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	43db      	mvns	r3, r3
 8003d1a:	4944      	ldr	r1, [pc, #272]	; (8003e2c <HAL_GPIO_DeInit+0x1f4>)
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003d20:	4b42      	ldr	r3, [pc, #264]	; (8003e2c <HAL_GPIO_DeInit+0x1f4>)
 8003d22:	68da      	ldr	r2, [r3, #12]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	43db      	mvns	r3, r3
 8003d28:	4940      	ldr	r1, [pc, #256]	; (8003e2c <HAL_GPIO_DeInit+0x1f4>)
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003d2e:	4b3f      	ldr	r3, [pc, #252]	; (8003e2c <HAL_GPIO_DeInit+0x1f4>)
 8003d30:	689a      	ldr	r2, [r3, #8]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	43db      	mvns	r3, r3
 8003d36:	493d      	ldr	r1, [pc, #244]	; (8003e2c <HAL_GPIO_DeInit+0x1f4>)
 8003d38:	4013      	ands	r3, r2
 8003d3a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	f003 0303 	and.w	r3, r3, #3
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	220f      	movs	r2, #15
 8003d46:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003d4c:	4a2e      	ldr	r2, [pc, #184]	; (8003e08 <HAL_GPIO_DeInit+0x1d0>)
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	089b      	lsrs	r3, r3, #2
 8003d52:	3302      	adds	r3, #2
 8003d54:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	43da      	mvns	r2, r3
 8003d5c:	482a      	ldr	r0, [pc, #168]	; (8003e08 <HAL_GPIO_DeInit+0x1d0>)
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	089b      	lsrs	r3, r3, #2
 8003d62:	400a      	ands	r2, r1
 8003d64:	3302      	adds	r3, #2
 8003d66:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	005b      	lsls	r3, r3, #1
 8003d72:	2103      	movs	r1, #3
 8003d74:	fa01 f303 	lsl.w	r3, r1, r3
 8003d78:	43db      	mvns	r3, r3
 8003d7a:	401a      	ands	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	08da      	lsrs	r2, r3, #3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	3208      	adds	r2, #8
 8003d88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	f003 0307 	and.w	r3, r3, #7
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	220f      	movs	r2, #15
 8003d96:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9a:	43db      	mvns	r3, r3
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	08d2      	lsrs	r2, r2, #3
 8003da0:	4019      	ands	r1, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	3208      	adds	r2, #8
 8003da6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	68da      	ldr	r2, [r3, #12]
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	2103      	movs	r1, #3
 8003db4:	fa01 f303 	lsl.w	r3, r1, r3
 8003db8:	43db      	mvns	r3, r3
 8003dba:	401a      	ands	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	2101      	movs	r1, #1
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dcc:	43db      	mvns	r3, r3
 8003dce:	401a      	ands	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689a      	ldr	r2, [r3, #8]
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	005b      	lsls	r3, r3, #1
 8003ddc:	2103      	movs	r1, #3
 8003dde:	fa01 f303 	lsl.w	r3, r1, r3
 8003de2:	43db      	mvns	r3, r3
 8003de4:	401a      	ands	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	3301      	adds	r3, #1
 8003dee:	617b      	str	r3, [r7, #20]
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	2b0f      	cmp	r3, #15
 8003df4:	f67f af2e 	bls.w	8003c54 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003df8:	bf00      	nop
 8003dfa:	bf00      	nop
 8003dfc:	371c      	adds	r7, #28
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	40013800 	.word	0x40013800
 8003e0c:	40020000 	.word	0x40020000
 8003e10:	40020400 	.word	0x40020400
 8003e14:	40020800 	.word	0x40020800
 8003e18:	40020c00 	.word	0x40020c00
 8003e1c:	40021000 	.word	0x40021000
 8003e20:	40021400 	.word	0x40021400
 8003e24:	40021800 	.word	0x40021800
 8003e28:	40021c00 	.word	0x40021c00
 8003e2c:	40013c00 	.word	0x40013c00

08003e30 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	460b      	mov	r3, r1
 8003e3a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	691a      	ldr	r2, [r3, #16]
 8003e40:	887b      	ldrh	r3, [r7, #2]
 8003e42:	4013      	ands	r3, r2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d002      	beq.n	8003e4e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	73fb      	strb	r3, [r7, #15]
 8003e4c:	e001      	b.n	8003e52 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3714      	adds	r7, #20
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	460b      	mov	r3, r1
 8003e6a:	807b      	strh	r3, [r7, #2]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e70:	787b      	ldrb	r3, [r7, #1]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d003      	beq.n	8003e7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e76:	887a      	ldrh	r2, [r7, #2]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e7c:	e003      	b.n	8003e86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e7e:	887b      	ldrh	r3, [r7, #2]
 8003e80:	041a      	lsls	r2, r3, #16
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	619a      	str	r2, [r3, #24]
}
 8003e86:	bf00      	nop
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr

08003e92 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e92:	b480      	push	{r7}
 8003e94:	b085      	sub	sp, #20
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	695b      	ldr	r3, [r3, #20]
 8003ea2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ea4:	887a      	ldrh	r2, [r7, #2]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	041a      	lsls	r2, r3, #16
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	43d9      	mvns	r1, r3
 8003eb0:	887b      	ldrh	r3, [r7, #2]
 8003eb2:	400b      	ands	r3, r1
 8003eb4:	431a      	orrs	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	619a      	str	r2, [r3, #24]
}
 8003eba:	bf00      	nop
 8003ebc:	3714      	adds	r7, #20
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
	...

08003ec8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e12b      	b.n	8004132 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d106      	bne.n	8003ef4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f7fe f81a 	bl	8001f28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2224      	movs	r2, #36	; 0x24
 8003ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f022 0201 	bic.w	r2, r2, #1
 8003f0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f2c:	f001 fc04 	bl	8005738 <HAL_RCC_GetPCLK1Freq>
 8003f30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	4a81      	ldr	r2, [pc, #516]	; (800413c <HAL_I2C_Init+0x274>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d807      	bhi.n	8003f4c <HAL_I2C_Init+0x84>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	4a80      	ldr	r2, [pc, #512]	; (8004140 <HAL_I2C_Init+0x278>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	bf94      	ite	ls
 8003f44:	2301      	movls	r3, #1
 8003f46:	2300      	movhi	r3, #0
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	e006      	b.n	8003f5a <HAL_I2C_Init+0x92>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	4a7d      	ldr	r2, [pc, #500]	; (8004144 <HAL_I2C_Init+0x27c>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	bf94      	ite	ls
 8003f54:	2301      	movls	r3, #1
 8003f56:	2300      	movhi	r3, #0
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e0e7      	b.n	8004132 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	4a78      	ldr	r2, [pc, #480]	; (8004148 <HAL_I2C_Init+0x280>)
 8003f66:	fba2 2303 	umull	r2, r3, r2, r3
 8003f6a:	0c9b      	lsrs	r3, r3, #18
 8003f6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68ba      	ldr	r2, [r7, #8]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	6a1b      	ldr	r3, [r3, #32]
 8003f88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	4a6a      	ldr	r2, [pc, #424]	; (800413c <HAL_I2C_Init+0x274>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d802      	bhi.n	8003f9c <HAL_I2C_Init+0xd4>
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	3301      	adds	r3, #1
 8003f9a:	e009      	b.n	8003fb0 <HAL_I2C_Init+0xe8>
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003fa2:	fb02 f303 	mul.w	r3, r2, r3
 8003fa6:	4a69      	ldr	r2, [pc, #420]	; (800414c <HAL_I2C_Init+0x284>)
 8003fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fac:	099b      	lsrs	r3, r3, #6
 8003fae:	3301      	adds	r3, #1
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	6812      	ldr	r2, [r2, #0]
 8003fb4:	430b      	orrs	r3, r1
 8003fb6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	69db      	ldr	r3, [r3, #28]
 8003fbe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003fc2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	495c      	ldr	r1, [pc, #368]	; (800413c <HAL_I2C_Init+0x274>)
 8003fcc:	428b      	cmp	r3, r1
 8003fce:	d819      	bhi.n	8004004 <HAL_I2C_Init+0x13c>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	1e59      	subs	r1, r3, #1
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fde:	1c59      	adds	r1, r3, #1
 8003fe0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003fe4:	400b      	ands	r3, r1
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00a      	beq.n	8004000 <HAL_I2C_Init+0x138>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	1e59      	subs	r1, r3, #1
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	005b      	lsls	r3, r3, #1
 8003ff4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ffe:	e051      	b.n	80040a4 <HAL_I2C_Init+0x1dc>
 8004000:	2304      	movs	r3, #4
 8004002:	e04f      	b.n	80040a4 <HAL_I2C_Init+0x1dc>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d111      	bne.n	8004030 <HAL_I2C_Init+0x168>
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	1e58      	subs	r0, r3, #1
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6859      	ldr	r1, [r3, #4]
 8004014:	460b      	mov	r3, r1
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	440b      	add	r3, r1
 800401a:	fbb0 f3f3 	udiv	r3, r0, r3
 800401e:	3301      	adds	r3, #1
 8004020:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004024:	2b00      	cmp	r3, #0
 8004026:	bf0c      	ite	eq
 8004028:	2301      	moveq	r3, #1
 800402a:	2300      	movne	r3, #0
 800402c:	b2db      	uxtb	r3, r3
 800402e:	e012      	b.n	8004056 <HAL_I2C_Init+0x18e>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	1e58      	subs	r0, r3, #1
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6859      	ldr	r1, [r3, #4]
 8004038:	460b      	mov	r3, r1
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	440b      	add	r3, r1
 800403e:	0099      	lsls	r1, r3, #2
 8004040:	440b      	add	r3, r1
 8004042:	fbb0 f3f3 	udiv	r3, r0, r3
 8004046:	3301      	adds	r3, #1
 8004048:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800404c:	2b00      	cmp	r3, #0
 800404e:	bf0c      	ite	eq
 8004050:	2301      	moveq	r3, #1
 8004052:	2300      	movne	r3, #0
 8004054:	b2db      	uxtb	r3, r3
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <HAL_I2C_Init+0x196>
 800405a:	2301      	movs	r3, #1
 800405c:	e022      	b.n	80040a4 <HAL_I2C_Init+0x1dc>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10e      	bne.n	8004084 <HAL_I2C_Init+0x1bc>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	1e58      	subs	r0, r3, #1
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6859      	ldr	r1, [r3, #4]
 800406e:	460b      	mov	r3, r1
 8004070:	005b      	lsls	r3, r3, #1
 8004072:	440b      	add	r3, r1
 8004074:	fbb0 f3f3 	udiv	r3, r0, r3
 8004078:	3301      	adds	r3, #1
 800407a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800407e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004082:	e00f      	b.n	80040a4 <HAL_I2C_Init+0x1dc>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	1e58      	subs	r0, r3, #1
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6859      	ldr	r1, [r3, #4]
 800408c:	460b      	mov	r3, r1
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	440b      	add	r3, r1
 8004092:	0099      	lsls	r1, r3, #2
 8004094:	440b      	add	r3, r1
 8004096:	fbb0 f3f3 	udiv	r3, r0, r3
 800409a:	3301      	adds	r3, #1
 800409c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040a4:	6879      	ldr	r1, [r7, #4]
 80040a6:	6809      	ldr	r1, [r1, #0]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	69da      	ldr	r2, [r3, #28]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	431a      	orrs	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	430a      	orrs	r2, r1
 80040c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80040d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	6911      	ldr	r1, [r2, #16]
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	68d2      	ldr	r2, [r2, #12]
 80040de:	4311      	orrs	r1, r2
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	6812      	ldr	r2, [r2, #0]
 80040e4:	430b      	orrs	r3, r1
 80040e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	695a      	ldr	r2, [r3, #20]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	431a      	orrs	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	430a      	orrs	r2, r1
 8004102:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f042 0201 	orr.w	r2, r2, #1
 8004112:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2220      	movs	r2, #32
 800411e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3710      	adds	r7, #16
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	000186a0 	.word	0x000186a0
 8004140:	001e847f 	.word	0x001e847f
 8004144:	003d08ff 	.word	0x003d08ff
 8004148:	431bde83 	.word	0x431bde83
 800414c:	10624dd3 	.word	0x10624dd3

08004150 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b082      	sub	sp, #8
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d101      	bne.n	8004162 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e021      	b.n	80041a6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2224      	movs	r2, #36	; 0x24
 8004166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f022 0201 	bic.w	r2, r2, #1
 8004178:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f7fd ff1c 	bl	8001fb8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2200      	movs	r2, #0
 8004192:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3708      	adds	r7, #8
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
	...

080041b0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b088      	sub	sp, #32
 80041b4:	af02      	add	r7, sp, #8
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	607a      	str	r2, [r7, #4]
 80041ba:	461a      	mov	r2, r3
 80041bc:	460b      	mov	r3, r1
 80041be:	817b      	strh	r3, [r7, #10]
 80041c0:	4613      	mov	r3, r2
 80041c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041c4:	f7fe fa80 	bl	80026c8 <HAL_GetTick>
 80041c8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	2b20      	cmp	r3, #32
 80041d4:	f040 80e0 	bne.w	8004398 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	9300      	str	r3, [sp, #0]
 80041dc:	2319      	movs	r3, #25
 80041de:	2201      	movs	r2, #1
 80041e0:	4970      	ldr	r1, [pc, #448]	; (80043a4 <HAL_I2C_Master_Transmit+0x1f4>)
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f000 fc58 	bl	8004a98 <I2C_WaitOnFlagUntilTimeout>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80041ee:	2302      	movs	r3, #2
 80041f0:	e0d3      	b.n	800439a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d101      	bne.n	8004200 <HAL_I2C_Master_Transmit+0x50>
 80041fc:	2302      	movs	r3, #2
 80041fe:	e0cc      	b.n	800439a <HAL_I2C_Master_Transmit+0x1ea>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	2b01      	cmp	r3, #1
 8004214:	d007      	beq.n	8004226 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f042 0201 	orr.w	r2, r2, #1
 8004224:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004234:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2221      	movs	r2, #33	; 0x21
 800423a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2210      	movs	r2, #16
 8004242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	893a      	ldrh	r2, [r7, #8]
 8004256:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800425c:	b29a      	uxth	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	4a50      	ldr	r2, [pc, #320]	; (80043a8 <HAL_I2C_Master_Transmit+0x1f8>)
 8004266:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004268:	8979      	ldrh	r1, [r7, #10]
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	6a3a      	ldr	r2, [r7, #32]
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f000 fac2 	bl	80047f8 <I2C_MasterRequestWrite>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d001      	beq.n	800427e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e08d      	b.n	800439a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800427e:	2300      	movs	r3, #0
 8004280:	613b      	str	r3, [r7, #16]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	613b      	str	r3, [r7, #16]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	613b      	str	r3, [r7, #16]
 8004292:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004294:	e066      	b.n	8004364 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	6a39      	ldr	r1, [r7, #32]
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f000 fcd2 	bl	8004c44 <I2C_WaitOnTXEFlagUntilTimeout>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00d      	beq.n	80042c2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042aa:	2b04      	cmp	r3, #4
 80042ac:	d107      	bne.n	80042be <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e06b      	b.n	800439a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c6:	781a      	ldrb	r2, [r3, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d2:	1c5a      	adds	r2, r3, #1
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042dc:	b29b      	uxth	r3, r3
 80042de:	3b01      	subs	r3, #1
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ea:	3b01      	subs	r3, #1
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	695b      	ldr	r3, [r3, #20]
 80042f8:	f003 0304 	and.w	r3, r3, #4
 80042fc:	2b04      	cmp	r3, #4
 80042fe:	d11b      	bne.n	8004338 <HAL_I2C_Master_Transmit+0x188>
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004304:	2b00      	cmp	r3, #0
 8004306:	d017      	beq.n	8004338 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430c:	781a      	ldrb	r2, [r3, #0]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004318:	1c5a      	adds	r2, r3, #1
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004322:	b29b      	uxth	r3, r3
 8004324:	3b01      	subs	r3, #1
 8004326:	b29a      	uxth	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004330:	3b01      	subs	r3, #1
 8004332:	b29a      	uxth	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004338:	697a      	ldr	r2, [r7, #20]
 800433a:	6a39      	ldr	r1, [r7, #32]
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f000 fcc2 	bl	8004cc6 <I2C_WaitOnBTFFlagUntilTimeout>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00d      	beq.n	8004364 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434c:	2b04      	cmp	r3, #4
 800434e:	d107      	bne.n	8004360 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800435e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e01a      	b.n	800439a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004368:	2b00      	cmp	r3, #0
 800436a:	d194      	bne.n	8004296 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800437a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2220      	movs	r2, #32
 8004380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004394:	2300      	movs	r3, #0
 8004396:	e000      	b.n	800439a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004398:	2302      	movs	r3, #2
  }
}
 800439a:	4618      	mov	r0, r3
 800439c:	3718      	adds	r7, #24
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	00100002 	.word	0x00100002
 80043a8:	ffff0000 	.word	0xffff0000

080043ac <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b08c      	sub	sp, #48	; 0x30
 80043b0:	af02      	add	r7, sp, #8
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	607a      	str	r2, [r7, #4]
 80043b6:	461a      	mov	r2, r3
 80043b8:	460b      	mov	r3, r1
 80043ba:	817b      	strh	r3, [r7, #10]
 80043bc:	4613      	mov	r3, r2
 80043be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80043c0:	f7fe f982 	bl	80026c8 <HAL_GetTick>
 80043c4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	2b20      	cmp	r3, #32
 80043d0:	f040 820b 	bne.w	80047ea <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d6:	9300      	str	r3, [sp, #0]
 80043d8:	2319      	movs	r3, #25
 80043da:	2201      	movs	r2, #1
 80043dc:	497c      	ldr	r1, [pc, #496]	; (80045d0 <HAL_I2C_Master_Receive+0x224>)
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	f000 fb5a 	bl	8004a98 <I2C_WaitOnFlagUntilTimeout>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d001      	beq.n	80043ee <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80043ea:	2302      	movs	r3, #2
 80043ec:	e1fe      	b.n	80047ec <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d101      	bne.n	80043fc <HAL_I2C_Master_Receive+0x50>
 80043f8:	2302      	movs	r3, #2
 80043fa:	e1f7      	b.n	80047ec <HAL_I2C_Master_Receive+0x440>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	2b01      	cmp	r3, #1
 8004410:	d007      	beq.n	8004422 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f042 0201 	orr.w	r2, r2, #1
 8004420:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004430:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2222      	movs	r2, #34	; 0x22
 8004436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2210      	movs	r2, #16
 800443e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	893a      	ldrh	r2, [r7, #8]
 8004452:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004458:	b29a      	uxth	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	4a5c      	ldr	r2, [pc, #368]	; (80045d4 <HAL_I2C_Master_Receive+0x228>)
 8004462:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004464:	8979      	ldrh	r1, [r7, #10]
 8004466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 fa46 	bl	80048fc <I2C_MasterRequestRead>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e1b8      	b.n	80047ec <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800447e:	2b00      	cmp	r3, #0
 8004480:	d113      	bne.n	80044aa <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004482:	2300      	movs	r3, #0
 8004484:	623b      	str	r3, [r7, #32]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	623b      	str	r3, [r7, #32]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	623b      	str	r3, [r7, #32]
 8004496:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044a6:	601a      	str	r2, [r3, #0]
 80044a8:	e18c      	b.n	80047c4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d11b      	bne.n	80044ea <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044c2:	2300      	movs	r3, #0
 80044c4:	61fb      	str	r3, [r7, #28]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	61fb      	str	r3, [r7, #28]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	61fb      	str	r3, [r7, #28]
 80044d6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044e6:	601a      	str	r2, [r3, #0]
 80044e8:	e16c      	b.n	80047c4 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d11b      	bne.n	800452a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004500:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004510:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004512:	2300      	movs	r3, #0
 8004514:	61bb      	str	r3, [r7, #24]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	695b      	ldr	r3, [r3, #20]
 800451c:	61bb      	str	r3, [r7, #24]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	61bb      	str	r3, [r7, #24]
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	e14c      	b.n	80047c4 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004538:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800453a:	2300      	movs	r3, #0
 800453c:	617b      	str	r3, [r7, #20]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	695b      	ldr	r3, [r3, #20]
 8004544:	617b      	str	r3, [r7, #20]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	617b      	str	r3, [r7, #20]
 800454e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004550:	e138      	b.n	80047c4 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004556:	2b03      	cmp	r3, #3
 8004558:	f200 80f1 	bhi.w	800473e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004560:	2b01      	cmp	r3, #1
 8004562:	d123      	bne.n	80045ac <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004566:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f000 fbed 	bl	8004d48 <I2C_WaitOnRXNEFlagUntilTimeout>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d001      	beq.n	8004578 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e139      	b.n	80047ec <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	691a      	ldr	r2, [r3, #16]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004582:	b2d2      	uxtb	r2, r2
 8004584:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458a:	1c5a      	adds	r2, r3, #1
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004594:	3b01      	subs	r3, #1
 8004596:	b29a      	uxth	r2, r3
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	3b01      	subs	r3, #1
 80045a4:	b29a      	uxth	r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045aa:	e10b      	b.n	80047c4 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d14e      	bne.n	8004652 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b6:	9300      	str	r3, [sp, #0]
 80045b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ba:	2200      	movs	r2, #0
 80045bc:	4906      	ldr	r1, [pc, #24]	; (80045d8 <HAL_I2C_Master_Receive+0x22c>)
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f000 fa6a 	bl	8004a98 <I2C_WaitOnFlagUntilTimeout>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d008      	beq.n	80045dc <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e10e      	b.n	80047ec <HAL_I2C_Master_Receive+0x440>
 80045ce:	bf00      	nop
 80045d0:	00100002 	.word	0x00100002
 80045d4:	ffff0000 	.word	0xffff0000
 80045d8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	691a      	ldr	r2, [r3, #16]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f6:	b2d2      	uxtb	r2, r2
 80045f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fe:	1c5a      	adds	r2, r3, #1
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004608:	3b01      	subs	r3, #1
 800460a:	b29a      	uxth	r2, r3
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004614:	b29b      	uxth	r3, r3
 8004616:	3b01      	subs	r3, #1
 8004618:	b29a      	uxth	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	691a      	ldr	r2, [r3, #16]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004628:	b2d2      	uxtb	r2, r2
 800462a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004630:	1c5a      	adds	r2, r3, #1
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800463a:	3b01      	subs	r3, #1
 800463c:	b29a      	uxth	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004646:	b29b      	uxth	r3, r3
 8004648:	3b01      	subs	r3, #1
 800464a:	b29a      	uxth	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004650:	e0b8      	b.n	80047c4 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004658:	2200      	movs	r2, #0
 800465a:	4966      	ldr	r1, [pc, #408]	; (80047f4 <HAL_I2C_Master_Receive+0x448>)
 800465c:	68f8      	ldr	r0, [r7, #12]
 800465e:	f000 fa1b 	bl	8004a98 <I2C_WaitOnFlagUntilTimeout>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d001      	beq.n	800466c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e0bf      	b.n	80047ec <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800467a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	691a      	ldr	r2, [r3, #16]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004686:	b2d2      	uxtb	r2, r2
 8004688:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468e:	1c5a      	adds	r2, r3, #1
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004698:	3b01      	subs	r3, #1
 800469a:	b29a      	uxth	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	3b01      	subs	r3, #1
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b0:	9300      	str	r3, [sp, #0]
 80046b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b4:	2200      	movs	r2, #0
 80046b6:	494f      	ldr	r1, [pc, #316]	; (80047f4 <HAL_I2C_Master_Receive+0x448>)
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f000 f9ed 	bl	8004a98 <I2C_WaitOnFlagUntilTimeout>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d001      	beq.n	80046c8 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e091      	b.n	80047ec <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	691a      	ldr	r2, [r3, #16]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e2:	b2d2      	uxtb	r2, r2
 80046e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ea:	1c5a      	adds	r2, r3, #1
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046f4:	3b01      	subs	r3, #1
 80046f6:	b29a      	uxth	r2, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004700:	b29b      	uxth	r3, r3
 8004702:	3b01      	subs	r3, #1
 8004704:	b29a      	uxth	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	691a      	ldr	r2, [r3, #16]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004714:	b2d2      	uxtb	r2, r2
 8004716:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471c:	1c5a      	adds	r2, r3, #1
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004726:	3b01      	subs	r3, #1
 8004728:	b29a      	uxth	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004732:	b29b      	uxth	r3, r3
 8004734:	3b01      	subs	r3, #1
 8004736:	b29a      	uxth	r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800473c:	e042      	b.n	80047c4 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800473e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004740:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	f000 fb00 	bl	8004d48 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d001      	beq.n	8004752 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e04c      	b.n	80047ec <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	691a      	ldr	r2, [r3, #16]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475c:	b2d2      	uxtb	r2, r2
 800475e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004764:	1c5a      	adds	r2, r3, #1
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800476e:	3b01      	subs	r3, #1
 8004770:	b29a      	uxth	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800477a:	b29b      	uxth	r3, r3
 800477c:	3b01      	subs	r3, #1
 800477e:	b29a      	uxth	r2, r3
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	f003 0304 	and.w	r3, r3, #4
 800478e:	2b04      	cmp	r3, #4
 8004790:	d118      	bne.n	80047c4 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	691a      	ldr	r2, [r3, #16]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479c:	b2d2      	uxtb	r2, r2
 800479e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a4:	1c5a      	adds	r2, r3, #1
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ae:	3b01      	subs	r3, #1
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	3b01      	subs	r3, #1
 80047be:	b29a      	uxth	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f47f aec2 	bne.w	8004552 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2220      	movs	r2, #32
 80047d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80047e6:	2300      	movs	r3, #0
 80047e8:	e000      	b.n	80047ec <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80047ea:	2302      	movs	r3, #2
  }
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3728      	adds	r7, #40	; 0x28
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	00010004 	.word	0x00010004

080047f8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b088      	sub	sp, #32
 80047fc:	af02      	add	r7, sp, #8
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	607a      	str	r2, [r7, #4]
 8004802:	603b      	str	r3, [r7, #0]
 8004804:	460b      	mov	r3, r1
 8004806:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	2b08      	cmp	r3, #8
 8004812:	d006      	beq.n	8004822 <I2C_MasterRequestWrite+0x2a>
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d003      	beq.n	8004822 <I2C_MasterRequestWrite+0x2a>
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004820:	d108      	bne.n	8004834 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004830:	601a      	str	r2, [r3, #0]
 8004832:	e00b      	b.n	800484c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004838:	2b12      	cmp	r3, #18
 800483a:	d107      	bne.n	800484c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800484a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	9300      	str	r3, [sp, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f000 f91d 	bl	8004a98 <I2C_WaitOnFlagUntilTimeout>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00d      	beq.n	8004880 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800486e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004872:	d103      	bne.n	800487c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f44f 7200 	mov.w	r2, #512	; 0x200
 800487a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800487c:	2303      	movs	r3, #3
 800487e:	e035      	b.n	80048ec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004888:	d108      	bne.n	800489c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800488a:	897b      	ldrh	r3, [r7, #10]
 800488c:	b2db      	uxtb	r3, r3
 800488e:	461a      	mov	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004898:	611a      	str	r2, [r3, #16]
 800489a:	e01b      	b.n	80048d4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800489c:	897b      	ldrh	r3, [r7, #10]
 800489e:	11db      	asrs	r3, r3, #7
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	f003 0306 	and.w	r3, r3, #6
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	f063 030f 	orn	r3, r3, #15
 80048ac:	b2da      	uxtb	r2, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	490e      	ldr	r1, [pc, #56]	; (80048f4 <I2C_MasterRequestWrite+0xfc>)
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	f000 f943 	bl	8004b46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d001      	beq.n	80048ca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e010      	b.n	80048ec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80048ca:	897b      	ldrh	r3, [r7, #10]
 80048cc:	b2da      	uxtb	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	4907      	ldr	r1, [pc, #28]	; (80048f8 <I2C_MasterRequestWrite+0x100>)
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f000 f933 	bl	8004b46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d001      	beq.n	80048ea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	e000      	b.n	80048ec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3718      	adds	r7, #24
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	00010008 	.word	0x00010008
 80048f8:	00010002 	.word	0x00010002

080048fc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b088      	sub	sp, #32
 8004900:	af02      	add	r7, sp, #8
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	607a      	str	r2, [r7, #4]
 8004906:	603b      	str	r3, [r7, #0]
 8004908:	460b      	mov	r3, r1
 800490a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004910:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004920:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	2b08      	cmp	r3, #8
 8004926:	d006      	beq.n	8004936 <I2C_MasterRequestRead+0x3a>
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	2b01      	cmp	r3, #1
 800492c:	d003      	beq.n	8004936 <I2C_MasterRequestRead+0x3a>
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004934:	d108      	bne.n	8004948 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004944:	601a      	str	r2, [r3, #0]
 8004946:	e00b      	b.n	8004960 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494c:	2b11      	cmp	r3, #17
 800494e:	d107      	bne.n	8004960 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800495e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	9300      	str	r3, [sp, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f000 f893 	bl	8004a98 <I2C_WaitOnFlagUntilTimeout>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00d      	beq.n	8004994 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004982:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004986:	d103      	bne.n	8004990 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800498e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e079      	b.n	8004a88 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800499c:	d108      	bne.n	80049b0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800499e:	897b      	ldrh	r3, [r7, #10]
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	f043 0301 	orr.w	r3, r3, #1
 80049a6:	b2da      	uxtb	r2, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	611a      	str	r2, [r3, #16]
 80049ae:	e05f      	b.n	8004a70 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80049b0:	897b      	ldrh	r3, [r7, #10]
 80049b2:	11db      	asrs	r3, r3, #7
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	f003 0306 	and.w	r3, r3, #6
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	f063 030f 	orn	r3, r3, #15
 80049c0:	b2da      	uxtb	r2, r3
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	4930      	ldr	r1, [pc, #192]	; (8004a90 <I2C_MasterRequestRead+0x194>)
 80049ce:	68f8      	ldr	r0, [r7, #12]
 80049d0:	f000 f8b9 	bl	8004b46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d001      	beq.n	80049de <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e054      	b.n	8004a88 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80049de:	897b      	ldrh	r3, [r7, #10]
 80049e0:	b2da      	uxtb	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	4929      	ldr	r1, [pc, #164]	; (8004a94 <I2C_MasterRequestRead+0x198>)
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f000 f8a9 	bl	8004b46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d001      	beq.n	80049fe <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e044      	b.n	8004a88 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049fe:	2300      	movs	r3, #0
 8004a00:	613b      	str	r3, [r7, #16]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	695b      	ldr	r3, [r3, #20]
 8004a08:	613b      	str	r3, [r7, #16]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	613b      	str	r3, [r7, #16]
 8004a12:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a22:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	9300      	str	r3, [sp, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f000 f831 	bl	8004a98 <I2C_WaitOnFlagUntilTimeout>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00d      	beq.n	8004a58 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a4a:	d103      	bne.n	8004a54 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a52:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e017      	b.n	8004a88 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004a58:	897b      	ldrh	r3, [r7, #10]
 8004a5a:	11db      	asrs	r3, r3, #7
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	f003 0306 	and.w	r3, r3, #6
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	f063 030e 	orn	r3, r3, #14
 8004a68:	b2da      	uxtb	r2, r3
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	687a      	ldr	r2, [r7, #4]
 8004a74:	4907      	ldr	r1, [pc, #28]	; (8004a94 <I2C_MasterRequestRead+0x198>)
 8004a76:	68f8      	ldr	r0, [r7, #12]
 8004a78:	f000 f865 	bl	8004b46 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d001      	beq.n	8004a86 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e000      	b.n	8004a88 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3718      	adds	r7, #24
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	00010008 	.word	0x00010008
 8004a94:	00010002 	.word	0x00010002

08004a98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	603b      	str	r3, [r7, #0]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004aa8:	e025      	b.n	8004af6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab0:	d021      	beq.n	8004af6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ab2:	f7fd fe09 	bl	80026c8 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	683a      	ldr	r2, [r7, #0]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d302      	bcc.n	8004ac8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d116      	bne.n	8004af6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2220      	movs	r2, #32
 8004ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae2:	f043 0220 	orr.w	r2, r3, #32
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e023      	b.n	8004b3e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	0c1b      	lsrs	r3, r3, #16
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d10d      	bne.n	8004b1c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	43da      	mvns	r2, r3
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	bf0c      	ite	eq
 8004b12:	2301      	moveq	r3, #1
 8004b14:	2300      	movne	r3, #0
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	461a      	mov	r2, r3
 8004b1a:	e00c      	b.n	8004b36 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	43da      	mvns	r2, r3
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	4013      	ands	r3, r2
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	bf0c      	ite	eq
 8004b2e:	2301      	moveq	r3, #1
 8004b30:	2300      	movne	r3, #0
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	461a      	mov	r2, r3
 8004b36:	79fb      	ldrb	r3, [r7, #7]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d0b6      	beq.n	8004aaa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b084      	sub	sp, #16
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	60f8      	str	r0, [r7, #12]
 8004b4e:	60b9      	str	r1, [r7, #8]
 8004b50:	607a      	str	r2, [r7, #4]
 8004b52:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b54:	e051      	b.n	8004bfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	695b      	ldr	r3, [r3, #20]
 8004b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b64:	d123      	bne.n	8004bae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b74:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b7e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2220      	movs	r2, #32
 8004b8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9a:	f043 0204 	orr.w	r2, r3, #4
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e046      	b.n	8004c3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb4:	d021      	beq.n	8004bfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bb6:	f7fd fd87 	bl	80026c8 <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d302      	bcc.n	8004bcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d116      	bne.n	8004bfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2220      	movs	r2, #32
 8004bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be6:	f043 0220 	orr.w	r2, r3, #32
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e020      	b.n	8004c3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	0c1b      	lsrs	r3, r3, #16
 8004bfe:	b2db      	uxtb	r3, r3
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d10c      	bne.n	8004c1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	43da      	mvns	r2, r3
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	4013      	ands	r3, r2
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	bf14      	ite	ne
 8004c16:	2301      	movne	r3, #1
 8004c18:	2300      	moveq	r3, #0
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	e00b      	b.n	8004c36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	43da      	mvns	r2, r3
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	4013      	ands	r3, r2
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	bf14      	ite	ne
 8004c30:	2301      	movne	r3, #1
 8004c32:	2300      	moveq	r3, #0
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d18d      	bne.n	8004b56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c50:	e02d      	b.n	8004cae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f000 f8ce 	bl	8004df4 <I2C_IsAcknowledgeFailed>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d001      	beq.n	8004c62 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e02d      	b.n	8004cbe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c68:	d021      	beq.n	8004cae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c6a:	f7fd fd2d 	bl	80026c8 <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	68ba      	ldr	r2, [r7, #8]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d302      	bcc.n	8004c80 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d116      	bne.n	8004cae <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2200      	movs	r2, #0
 8004c84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2220      	movs	r2, #32
 8004c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	f043 0220 	orr.w	r2, r3, #32
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e007      	b.n	8004cbe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cb8:	2b80      	cmp	r3, #128	; 0x80
 8004cba:	d1ca      	bne.n	8004c52 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3710      	adds	r7, #16
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b084      	sub	sp, #16
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	60f8      	str	r0, [r7, #12]
 8004cce:	60b9      	str	r1, [r7, #8]
 8004cd0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004cd2:	e02d      	b.n	8004d30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f000 f88d 	bl	8004df4 <I2C_IsAcknowledgeFailed>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d001      	beq.n	8004ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e02d      	b.n	8004d40 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cea:	d021      	beq.n	8004d30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cec:	f7fd fcec 	bl	80026c8 <HAL_GetTick>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	68ba      	ldr	r2, [r7, #8]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d302      	bcc.n	8004d02 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d116      	bne.n	8004d30 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2200      	movs	r2, #0
 8004d06:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2220      	movs	r2, #32
 8004d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1c:	f043 0220 	orr.w	r2, r3, #32
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e007      	b.n	8004d40 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	f003 0304 	and.w	r3, r3, #4
 8004d3a:	2b04      	cmp	r3, #4
 8004d3c:	d1ca      	bne.n	8004cd4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d3e:	2300      	movs	r3, #0
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3710      	adds	r7, #16
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d54:	e042      	b.n	8004ddc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	695b      	ldr	r3, [r3, #20]
 8004d5c:	f003 0310 	and.w	r3, r3, #16
 8004d60:	2b10      	cmp	r3, #16
 8004d62:	d119      	bne.n	8004d98 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f06f 0210 	mvn.w	r2, #16
 8004d6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2200      	movs	r2, #0
 8004d72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2220      	movs	r2, #32
 8004d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e029      	b.n	8004dec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d98:	f7fd fc96 	bl	80026c8 <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d302      	bcc.n	8004dae <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d116      	bne.n	8004ddc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2220      	movs	r2, #32
 8004db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc8:	f043 0220 	orr.w	r2, r3, #32
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e007      	b.n	8004dec <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de6:	2b40      	cmp	r3, #64	; 0x40
 8004de8:	d1b5      	bne.n	8004d56 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3710      	adds	r7, #16
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e0a:	d11b      	bne.n	8004e44 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e14:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2220      	movs	r2, #32
 8004e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e30:	f043 0204 	orr.w	r2, r3, #4
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e000      	b.n	8004e46 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr

08004e52 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b084      	sub	sp, #16
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d101      	bne.n	8004e64 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e034      	b.n	8004ece <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8004e6c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f245 5255 	movw	r2, #21845	; 0x5555
 8004e76:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	6852      	ldr	r2, [r2, #4]
 8004e80:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	6892      	ldr	r2, [r2, #8]
 8004e8a:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8004e8c:	f7fd fc1c 	bl	80026c8 <HAL_GetTick>
 8004e90:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004e92:	e00f      	b.n	8004eb4 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8004e94:	f7fd fc18 	bl	80026c8 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	2b31      	cmp	r3, #49	; 0x31
 8004ea0:	d908      	bls.n	8004eb4 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	f003 0303 	and.w	r3, r3, #3
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d001      	beq.n	8004eb4 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e00c      	b.n	8004ece <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	f003 0303 	and.w	r3, r3, #3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1e8      	bne.n	8004e94 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004eca:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3710      	adds	r7, #16
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8004ed6:	b480      	push	{r7}
 8004ed8:	b083      	sub	sp, #12
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8004ee6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	370c      	adds	r7, #12
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
	...

08004ef8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b086      	sub	sp, #24
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d101      	bne.n	8004f0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e264      	b.n	80053d4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d075      	beq.n	8005002 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f16:	4ba3      	ldr	r3, [pc, #652]	; (80051a4 <HAL_RCC_OscConfig+0x2ac>)
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f003 030c 	and.w	r3, r3, #12
 8004f1e:	2b04      	cmp	r3, #4
 8004f20:	d00c      	beq.n	8004f3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f22:	4ba0      	ldr	r3, [pc, #640]	; (80051a4 <HAL_RCC_OscConfig+0x2ac>)
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f2a:	2b08      	cmp	r3, #8
 8004f2c:	d112      	bne.n	8004f54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f2e:	4b9d      	ldr	r3, [pc, #628]	; (80051a4 <HAL_RCC_OscConfig+0x2ac>)
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f3a:	d10b      	bne.n	8004f54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f3c:	4b99      	ldr	r3, [pc, #612]	; (80051a4 <HAL_RCC_OscConfig+0x2ac>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d05b      	beq.n	8005000 <HAL_RCC_OscConfig+0x108>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d157      	bne.n	8005000 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e23f      	b.n	80053d4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f5c:	d106      	bne.n	8004f6c <HAL_RCC_OscConfig+0x74>
 8004f5e:	4b91      	ldr	r3, [pc, #580]	; (80051a4 <HAL_RCC_OscConfig+0x2ac>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a90      	ldr	r2, [pc, #576]	; (80051a4 <HAL_RCC_OscConfig+0x2ac>)
 8004f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f68:	6013      	str	r3, [r2, #0]
 8004f6a:	e01d      	b.n	8004fa8 <HAL_RCC_OscConfig+0xb0>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f74:	d10c      	bne.n	8004f90 <HAL_RCC_OscConfig+0x98>
 8004f76:	4b8b      	ldr	r3, [pc, #556]	; (80051a4 <HAL_RCC_OscConfig+0x2ac>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a8a      	ldr	r2, [pc, #552]	; (80051a4 <HAL_RCC_OscConfig+0x2ac>)
 8004f7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f80:	6013      	str	r3, [r2, #0]
 8004f82:	4b88      	ldr	r3, [pc, #544]	; (80051a4 <HAL_RCC_OscConfig+0x2ac>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a87      	ldr	r2, [pc, #540]	; (80051a4 <HAL_RCC_OscConfig+0x2ac>)
 8004f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f8c:	6013      	str	r3, [r2, #0]
 8004f8e:	e00b      	b.n	8004fa8 <HAL_RCC_OscConfig+0xb0>
 8004f90:	4b84      	ldr	r3, [pc, #528]	; (80051a4 <HAL_RCC_OscConfig+0x2ac>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a83      	ldr	r2, [pc, #524]	; (80051a4 <HAL_RCC_OscConfig+0x2ac>)
 8004f96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f9a:	6013      	str	r3, [r2, #0]
 8004f9c:	4b81      	ldr	r3, [pc, #516]	; (80051a4 <HAL_RCC_OscConfig+0x2ac>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a80      	ldr	r2, [pc, #512]	; (80051a4 <HAL_RCC_OscConfig+0x2ac>)
 8004fa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d013      	beq.n	8004fd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fb0:	f7fd fb8a 	bl	80026c8 <HAL_GetTick>
 8004fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fb6:	e008      	b.n	8004fca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fb8:	f7fd fb86 	bl	80026c8 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	2b64      	cmp	r3, #100	; 0x64
 8004fc4:	d901      	bls.n	8004fca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e204      	b.n	80053d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fca:	4b76      	ldr	r3, [pc, #472]	; (80051a4 <HAL_RCC_OscConfig+0x2ac>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d0f0      	beq.n	8004fb8 <HAL_RCC_OscConfig+0xc0>
 8004fd6:	e014      	b.n	8005002 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fd8:	f7fd fb76 	bl	80026c8 <HAL_GetTick>
 8004fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fde:	e008      	b.n	8004ff2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fe0:	f7fd fb72 	bl	80026c8 <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	2b64      	cmp	r3, #100	; 0x64
 8004fec:	d901      	bls.n	8004ff2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e1f0      	b.n	80053d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ff2:	4b6c      	ldr	r3, [pc, #432]	; (80051a4 <HAL_RCC_OscConfig+0x2ac>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d1f0      	bne.n	8004fe0 <HAL_RCC_OscConfig+0xe8>
 8004ffe:	e000      	b.n	8005002 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005000:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0302 	and.w	r3, r3, #2
 800500a:	2b00      	cmp	r3, #0
 800500c:	d063      	beq.n	80050d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800500e:	4b65      	ldr	r3, [pc, #404]	; (80051a4 <HAL_RCC_OscConfig+0x2ac>)
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f003 030c 	and.w	r3, r3, #12
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00b      	beq.n	8005032 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800501a:	4b62      	ldr	r3, [pc, #392]	; (80051a4 <HAL_RCC_OscConfig+0x2ac>)
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005022:	2b08      	cmp	r3, #8
 8005024:	d11c      	bne.n	8005060 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005026:	4b5f      	ldr	r3, [pc, #380]	; (80051a4 <HAL_RCC_OscConfig+0x2ac>)
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d116      	bne.n	8005060 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005032:	4b5c      	ldr	r3, [pc, #368]	; (80051a4 <HAL_RCC_OscConfig+0x2ac>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b00      	cmp	r3, #0
 800503c:	d005      	beq.n	800504a <HAL_RCC_OscConfig+0x152>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	2b01      	cmp	r3, #1
 8005044:	d001      	beq.n	800504a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e1c4      	b.n	80053d4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800504a:	4b56      	ldr	r3, [pc, #344]	; (80051a4 <HAL_RCC_OscConfig+0x2ac>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	00db      	lsls	r3, r3, #3
 8005058:	4952      	ldr	r1, [pc, #328]	; (80051a4 <HAL_RCC_OscConfig+0x2ac>)
 800505a:	4313      	orrs	r3, r2
 800505c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800505e:	e03a      	b.n	80050d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d020      	beq.n	80050aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005068:	4b4f      	ldr	r3, [pc, #316]	; (80051a8 <HAL_RCC_OscConfig+0x2b0>)
 800506a:	2201      	movs	r2, #1
 800506c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800506e:	f7fd fb2b 	bl	80026c8 <HAL_GetTick>
 8005072:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005074:	e008      	b.n	8005088 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005076:	f7fd fb27 	bl	80026c8 <HAL_GetTick>
 800507a:	4602      	mov	r2, r0
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	2b02      	cmp	r3, #2
 8005082:	d901      	bls.n	8005088 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e1a5      	b.n	80053d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005088:	4b46      	ldr	r3, [pc, #280]	; (80051a4 <HAL_RCC_OscConfig+0x2ac>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0302 	and.w	r3, r3, #2
 8005090:	2b00      	cmp	r3, #0
 8005092:	d0f0      	beq.n	8005076 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005094:	4b43      	ldr	r3, [pc, #268]	; (80051a4 <HAL_RCC_OscConfig+0x2ac>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	00db      	lsls	r3, r3, #3
 80050a2:	4940      	ldr	r1, [pc, #256]	; (80051a4 <HAL_RCC_OscConfig+0x2ac>)
 80050a4:	4313      	orrs	r3, r2
 80050a6:	600b      	str	r3, [r1, #0]
 80050a8:	e015      	b.n	80050d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050aa:	4b3f      	ldr	r3, [pc, #252]	; (80051a8 <HAL_RCC_OscConfig+0x2b0>)
 80050ac:	2200      	movs	r2, #0
 80050ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050b0:	f7fd fb0a 	bl	80026c8 <HAL_GetTick>
 80050b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050b6:	e008      	b.n	80050ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050b8:	f7fd fb06 	bl	80026c8 <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d901      	bls.n	80050ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e184      	b.n	80053d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050ca:	4b36      	ldr	r3, [pc, #216]	; (80051a4 <HAL_RCC_OscConfig+0x2ac>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d1f0      	bne.n	80050b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0308 	and.w	r3, r3, #8
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d030      	beq.n	8005144 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	695b      	ldr	r3, [r3, #20]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d016      	beq.n	8005118 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050ea:	4b30      	ldr	r3, [pc, #192]	; (80051ac <HAL_RCC_OscConfig+0x2b4>)
 80050ec:	2201      	movs	r2, #1
 80050ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050f0:	f7fd faea 	bl	80026c8 <HAL_GetTick>
 80050f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050f6:	e008      	b.n	800510a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050f8:	f7fd fae6 	bl	80026c8 <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	2b02      	cmp	r3, #2
 8005104:	d901      	bls.n	800510a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e164      	b.n	80053d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800510a:	4b26      	ldr	r3, [pc, #152]	; (80051a4 <HAL_RCC_OscConfig+0x2ac>)
 800510c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800510e:	f003 0302 	and.w	r3, r3, #2
 8005112:	2b00      	cmp	r3, #0
 8005114:	d0f0      	beq.n	80050f8 <HAL_RCC_OscConfig+0x200>
 8005116:	e015      	b.n	8005144 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005118:	4b24      	ldr	r3, [pc, #144]	; (80051ac <HAL_RCC_OscConfig+0x2b4>)
 800511a:	2200      	movs	r2, #0
 800511c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800511e:	f7fd fad3 	bl	80026c8 <HAL_GetTick>
 8005122:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005124:	e008      	b.n	8005138 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005126:	f7fd facf 	bl	80026c8 <HAL_GetTick>
 800512a:	4602      	mov	r2, r0
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	2b02      	cmp	r3, #2
 8005132:	d901      	bls.n	8005138 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	e14d      	b.n	80053d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005138:	4b1a      	ldr	r3, [pc, #104]	; (80051a4 <HAL_RCC_OscConfig+0x2ac>)
 800513a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800513c:	f003 0302 	and.w	r3, r3, #2
 8005140:	2b00      	cmp	r3, #0
 8005142:	d1f0      	bne.n	8005126 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0304 	and.w	r3, r3, #4
 800514c:	2b00      	cmp	r3, #0
 800514e:	f000 80a0 	beq.w	8005292 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005152:	2300      	movs	r3, #0
 8005154:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005156:	4b13      	ldr	r3, [pc, #76]	; (80051a4 <HAL_RCC_OscConfig+0x2ac>)
 8005158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d10f      	bne.n	8005182 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005162:	2300      	movs	r3, #0
 8005164:	60bb      	str	r3, [r7, #8]
 8005166:	4b0f      	ldr	r3, [pc, #60]	; (80051a4 <HAL_RCC_OscConfig+0x2ac>)
 8005168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516a:	4a0e      	ldr	r2, [pc, #56]	; (80051a4 <HAL_RCC_OscConfig+0x2ac>)
 800516c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005170:	6413      	str	r3, [r2, #64]	; 0x40
 8005172:	4b0c      	ldr	r3, [pc, #48]	; (80051a4 <HAL_RCC_OscConfig+0x2ac>)
 8005174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800517a:	60bb      	str	r3, [r7, #8]
 800517c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800517e:	2301      	movs	r3, #1
 8005180:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005182:	4b0b      	ldr	r3, [pc, #44]	; (80051b0 <HAL_RCC_OscConfig+0x2b8>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800518a:	2b00      	cmp	r3, #0
 800518c:	d121      	bne.n	80051d2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800518e:	4b08      	ldr	r3, [pc, #32]	; (80051b0 <HAL_RCC_OscConfig+0x2b8>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a07      	ldr	r2, [pc, #28]	; (80051b0 <HAL_RCC_OscConfig+0x2b8>)
 8005194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005198:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800519a:	f7fd fa95 	bl	80026c8 <HAL_GetTick>
 800519e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051a0:	e011      	b.n	80051c6 <HAL_RCC_OscConfig+0x2ce>
 80051a2:	bf00      	nop
 80051a4:	40023800 	.word	0x40023800
 80051a8:	42470000 	.word	0x42470000
 80051ac:	42470e80 	.word	0x42470e80
 80051b0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051b4:	f7fd fa88 	bl	80026c8 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d901      	bls.n	80051c6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e106      	b.n	80053d4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051c6:	4b85      	ldr	r3, [pc, #532]	; (80053dc <HAL_RCC_OscConfig+0x4e4>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d0f0      	beq.n	80051b4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d106      	bne.n	80051e8 <HAL_RCC_OscConfig+0x2f0>
 80051da:	4b81      	ldr	r3, [pc, #516]	; (80053e0 <HAL_RCC_OscConfig+0x4e8>)
 80051dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051de:	4a80      	ldr	r2, [pc, #512]	; (80053e0 <HAL_RCC_OscConfig+0x4e8>)
 80051e0:	f043 0301 	orr.w	r3, r3, #1
 80051e4:	6713      	str	r3, [r2, #112]	; 0x70
 80051e6:	e01c      	b.n	8005222 <HAL_RCC_OscConfig+0x32a>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	2b05      	cmp	r3, #5
 80051ee:	d10c      	bne.n	800520a <HAL_RCC_OscConfig+0x312>
 80051f0:	4b7b      	ldr	r3, [pc, #492]	; (80053e0 <HAL_RCC_OscConfig+0x4e8>)
 80051f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051f4:	4a7a      	ldr	r2, [pc, #488]	; (80053e0 <HAL_RCC_OscConfig+0x4e8>)
 80051f6:	f043 0304 	orr.w	r3, r3, #4
 80051fa:	6713      	str	r3, [r2, #112]	; 0x70
 80051fc:	4b78      	ldr	r3, [pc, #480]	; (80053e0 <HAL_RCC_OscConfig+0x4e8>)
 80051fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005200:	4a77      	ldr	r2, [pc, #476]	; (80053e0 <HAL_RCC_OscConfig+0x4e8>)
 8005202:	f043 0301 	orr.w	r3, r3, #1
 8005206:	6713      	str	r3, [r2, #112]	; 0x70
 8005208:	e00b      	b.n	8005222 <HAL_RCC_OscConfig+0x32a>
 800520a:	4b75      	ldr	r3, [pc, #468]	; (80053e0 <HAL_RCC_OscConfig+0x4e8>)
 800520c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800520e:	4a74      	ldr	r2, [pc, #464]	; (80053e0 <HAL_RCC_OscConfig+0x4e8>)
 8005210:	f023 0301 	bic.w	r3, r3, #1
 8005214:	6713      	str	r3, [r2, #112]	; 0x70
 8005216:	4b72      	ldr	r3, [pc, #456]	; (80053e0 <HAL_RCC_OscConfig+0x4e8>)
 8005218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800521a:	4a71      	ldr	r2, [pc, #452]	; (80053e0 <HAL_RCC_OscConfig+0x4e8>)
 800521c:	f023 0304 	bic.w	r3, r3, #4
 8005220:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d015      	beq.n	8005256 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800522a:	f7fd fa4d 	bl	80026c8 <HAL_GetTick>
 800522e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005230:	e00a      	b.n	8005248 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005232:	f7fd fa49 	bl	80026c8 <HAL_GetTick>
 8005236:	4602      	mov	r2, r0
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005240:	4293      	cmp	r3, r2
 8005242:	d901      	bls.n	8005248 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005244:	2303      	movs	r3, #3
 8005246:	e0c5      	b.n	80053d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005248:	4b65      	ldr	r3, [pc, #404]	; (80053e0 <HAL_RCC_OscConfig+0x4e8>)
 800524a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800524c:	f003 0302 	and.w	r3, r3, #2
 8005250:	2b00      	cmp	r3, #0
 8005252:	d0ee      	beq.n	8005232 <HAL_RCC_OscConfig+0x33a>
 8005254:	e014      	b.n	8005280 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005256:	f7fd fa37 	bl	80026c8 <HAL_GetTick>
 800525a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800525c:	e00a      	b.n	8005274 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800525e:	f7fd fa33 	bl	80026c8 <HAL_GetTick>
 8005262:	4602      	mov	r2, r0
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	f241 3288 	movw	r2, #5000	; 0x1388
 800526c:	4293      	cmp	r3, r2
 800526e:	d901      	bls.n	8005274 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	e0af      	b.n	80053d4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005274:	4b5a      	ldr	r3, [pc, #360]	; (80053e0 <HAL_RCC_OscConfig+0x4e8>)
 8005276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005278:	f003 0302 	and.w	r3, r3, #2
 800527c:	2b00      	cmp	r3, #0
 800527e:	d1ee      	bne.n	800525e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005280:	7dfb      	ldrb	r3, [r7, #23]
 8005282:	2b01      	cmp	r3, #1
 8005284:	d105      	bne.n	8005292 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005286:	4b56      	ldr	r3, [pc, #344]	; (80053e0 <HAL_RCC_OscConfig+0x4e8>)
 8005288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800528a:	4a55      	ldr	r2, [pc, #340]	; (80053e0 <HAL_RCC_OscConfig+0x4e8>)
 800528c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005290:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	2b00      	cmp	r3, #0
 8005298:	f000 809b 	beq.w	80053d2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800529c:	4b50      	ldr	r3, [pc, #320]	; (80053e0 <HAL_RCC_OscConfig+0x4e8>)
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f003 030c 	and.w	r3, r3, #12
 80052a4:	2b08      	cmp	r3, #8
 80052a6:	d05c      	beq.n	8005362 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	699b      	ldr	r3, [r3, #24]
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	d141      	bne.n	8005334 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052b0:	4b4c      	ldr	r3, [pc, #304]	; (80053e4 <HAL_RCC_OscConfig+0x4ec>)
 80052b2:	2200      	movs	r2, #0
 80052b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052b6:	f7fd fa07 	bl	80026c8 <HAL_GetTick>
 80052ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052bc:	e008      	b.n	80052d0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052be:	f7fd fa03 	bl	80026c8 <HAL_GetTick>
 80052c2:	4602      	mov	r2, r0
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d901      	bls.n	80052d0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80052cc:	2303      	movs	r3, #3
 80052ce:	e081      	b.n	80053d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052d0:	4b43      	ldr	r3, [pc, #268]	; (80053e0 <HAL_RCC_OscConfig+0x4e8>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d1f0      	bne.n	80052be <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	69da      	ldr	r2, [r3, #28]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a1b      	ldr	r3, [r3, #32]
 80052e4:	431a      	orrs	r2, r3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ea:	019b      	lsls	r3, r3, #6
 80052ec:	431a      	orrs	r2, r3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f2:	085b      	lsrs	r3, r3, #1
 80052f4:	3b01      	subs	r3, #1
 80052f6:	041b      	lsls	r3, r3, #16
 80052f8:	431a      	orrs	r2, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052fe:	061b      	lsls	r3, r3, #24
 8005300:	4937      	ldr	r1, [pc, #220]	; (80053e0 <HAL_RCC_OscConfig+0x4e8>)
 8005302:	4313      	orrs	r3, r2
 8005304:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005306:	4b37      	ldr	r3, [pc, #220]	; (80053e4 <HAL_RCC_OscConfig+0x4ec>)
 8005308:	2201      	movs	r2, #1
 800530a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800530c:	f7fd f9dc 	bl	80026c8 <HAL_GetTick>
 8005310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005312:	e008      	b.n	8005326 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005314:	f7fd f9d8 	bl	80026c8 <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	2b02      	cmp	r3, #2
 8005320:	d901      	bls.n	8005326 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e056      	b.n	80053d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005326:	4b2e      	ldr	r3, [pc, #184]	; (80053e0 <HAL_RCC_OscConfig+0x4e8>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d0f0      	beq.n	8005314 <HAL_RCC_OscConfig+0x41c>
 8005332:	e04e      	b.n	80053d2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005334:	4b2b      	ldr	r3, [pc, #172]	; (80053e4 <HAL_RCC_OscConfig+0x4ec>)
 8005336:	2200      	movs	r2, #0
 8005338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800533a:	f7fd f9c5 	bl	80026c8 <HAL_GetTick>
 800533e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005340:	e008      	b.n	8005354 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005342:	f7fd f9c1 	bl	80026c8 <HAL_GetTick>
 8005346:	4602      	mov	r2, r0
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	2b02      	cmp	r3, #2
 800534e:	d901      	bls.n	8005354 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005350:	2303      	movs	r3, #3
 8005352:	e03f      	b.n	80053d4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005354:	4b22      	ldr	r3, [pc, #136]	; (80053e0 <HAL_RCC_OscConfig+0x4e8>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d1f0      	bne.n	8005342 <HAL_RCC_OscConfig+0x44a>
 8005360:	e037      	b.n	80053d2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	2b01      	cmp	r3, #1
 8005368:	d101      	bne.n	800536e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e032      	b.n	80053d4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800536e:	4b1c      	ldr	r3, [pc, #112]	; (80053e0 <HAL_RCC_OscConfig+0x4e8>)
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	699b      	ldr	r3, [r3, #24]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d028      	beq.n	80053ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005386:	429a      	cmp	r2, r3
 8005388:	d121      	bne.n	80053ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005394:	429a      	cmp	r2, r3
 8005396:	d11a      	bne.n	80053ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800539e:	4013      	ands	r3, r2
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80053a4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d111      	bne.n	80053ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b4:	085b      	lsrs	r3, r3, #1
 80053b6:	3b01      	subs	r3, #1
 80053b8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d107      	bne.n	80053ce <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d001      	beq.n	80053d2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e000      	b.n	80053d4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3718      	adds	r7, #24
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	40007000 	.word	0x40007000
 80053e0:	40023800 	.word	0x40023800
 80053e4:	42470060 	.word	0x42470060

080053e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d101      	bne.n	80053fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e0cc      	b.n	8005596 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80053fc:	4b68      	ldr	r3, [pc, #416]	; (80055a0 <HAL_RCC_ClockConfig+0x1b8>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0307 	and.w	r3, r3, #7
 8005404:	683a      	ldr	r2, [r7, #0]
 8005406:	429a      	cmp	r2, r3
 8005408:	d90c      	bls.n	8005424 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800540a:	4b65      	ldr	r3, [pc, #404]	; (80055a0 <HAL_RCC_ClockConfig+0x1b8>)
 800540c:	683a      	ldr	r2, [r7, #0]
 800540e:	b2d2      	uxtb	r2, r2
 8005410:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005412:	4b63      	ldr	r3, [pc, #396]	; (80055a0 <HAL_RCC_ClockConfig+0x1b8>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0307 	and.w	r3, r3, #7
 800541a:	683a      	ldr	r2, [r7, #0]
 800541c:	429a      	cmp	r2, r3
 800541e:	d001      	beq.n	8005424 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e0b8      	b.n	8005596 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0302 	and.w	r3, r3, #2
 800542c:	2b00      	cmp	r3, #0
 800542e:	d020      	beq.n	8005472 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0304 	and.w	r3, r3, #4
 8005438:	2b00      	cmp	r3, #0
 800543a:	d005      	beq.n	8005448 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800543c:	4b59      	ldr	r3, [pc, #356]	; (80055a4 <HAL_RCC_ClockConfig+0x1bc>)
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	4a58      	ldr	r2, [pc, #352]	; (80055a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005442:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005446:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 0308 	and.w	r3, r3, #8
 8005450:	2b00      	cmp	r3, #0
 8005452:	d005      	beq.n	8005460 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005454:	4b53      	ldr	r3, [pc, #332]	; (80055a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	4a52      	ldr	r2, [pc, #328]	; (80055a4 <HAL_RCC_ClockConfig+0x1bc>)
 800545a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800545e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005460:	4b50      	ldr	r3, [pc, #320]	; (80055a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	494d      	ldr	r1, [pc, #308]	; (80055a4 <HAL_RCC_ClockConfig+0x1bc>)
 800546e:	4313      	orrs	r3, r2
 8005470:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0301 	and.w	r3, r3, #1
 800547a:	2b00      	cmp	r3, #0
 800547c:	d044      	beq.n	8005508 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d107      	bne.n	8005496 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005486:	4b47      	ldr	r3, [pc, #284]	; (80055a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800548e:	2b00      	cmp	r3, #0
 8005490:	d119      	bne.n	80054c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e07f      	b.n	8005596 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	2b02      	cmp	r3, #2
 800549c:	d003      	beq.n	80054a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80054a2:	2b03      	cmp	r3, #3
 80054a4:	d107      	bne.n	80054b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054a6:	4b3f      	ldr	r3, [pc, #252]	; (80055a4 <HAL_RCC_ClockConfig+0x1bc>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d109      	bne.n	80054c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	e06f      	b.n	8005596 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054b6:	4b3b      	ldr	r3, [pc, #236]	; (80055a4 <HAL_RCC_ClockConfig+0x1bc>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0302 	and.w	r3, r3, #2
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d101      	bne.n	80054c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e067      	b.n	8005596 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054c6:	4b37      	ldr	r3, [pc, #220]	; (80055a4 <HAL_RCC_ClockConfig+0x1bc>)
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f023 0203 	bic.w	r2, r3, #3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	4934      	ldr	r1, [pc, #208]	; (80055a4 <HAL_RCC_ClockConfig+0x1bc>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80054d8:	f7fd f8f6 	bl	80026c8 <HAL_GetTick>
 80054dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054de:	e00a      	b.n	80054f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054e0:	f7fd f8f2 	bl	80026c8 <HAL_GetTick>
 80054e4:	4602      	mov	r2, r0
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d901      	bls.n	80054f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e04f      	b.n	8005596 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054f6:	4b2b      	ldr	r3, [pc, #172]	; (80055a4 <HAL_RCC_ClockConfig+0x1bc>)
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f003 020c 	and.w	r2, r3, #12
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	429a      	cmp	r2, r3
 8005506:	d1eb      	bne.n	80054e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005508:	4b25      	ldr	r3, [pc, #148]	; (80055a0 <HAL_RCC_ClockConfig+0x1b8>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 0307 	and.w	r3, r3, #7
 8005510:	683a      	ldr	r2, [r7, #0]
 8005512:	429a      	cmp	r2, r3
 8005514:	d20c      	bcs.n	8005530 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005516:	4b22      	ldr	r3, [pc, #136]	; (80055a0 <HAL_RCC_ClockConfig+0x1b8>)
 8005518:	683a      	ldr	r2, [r7, #0]
 800551a:	b2d2      	uxtb	r2, r2
 800551c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800551e:	4b20      	ldr	r3, [pc, #128]	; (80055a0 <HAL_RCC_ClockConfig+0x1b8>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0307 	and.w	r3, r3, #7
 8005526:	683a      	ldr	r2, [r7, #0]
 8005528:	429a      	cmp	r2, r3
 800552a:	d001      	beq.n	8005530 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e032      	b.n	8005596 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0304 	and.w	r3, r3, #4
 8005538:	2b00      	cmp	r3, #0
 800553a:	d008      	beq.n	800554e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800553c:	4b19      	ldr	r3, [pc, #100]	; (80055a4 <HAL_RCC_ClockConfig+0x1bc>)
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	4916      	ldr	r1, [pc, #88]	; (80055a4 <HAL_RCC_ClockConfig+0x1bc>)
 800554a:	4313      	orrs	r3, r2
 800554c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0308 	and.w	r3, r3, #8
 8005556:	2b00      	cmp	r3, #0
 8005558:	d009      	beq.n	800556e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800555a:	4b12      	ldr	r3, [pc, #72]	; (80055a4 <HAL_RCC_ClockConfig+0x1bc>)
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	00db      	lsls	r3, r3, #3
 8005568:	490e      	ldr	r1, [pc, #56]	; (80055a4 <HAL_RCC_ClockConfig+0x1bc>)
 800556a:	4313      	orrs	r3, r2
 800556c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800556e:	f000 f821 	bl	80055b4 <HAL_RCC_GetSysClockFreq>
 8005572:	4602      	mov	r2, r0
 8005574:	4b0b      	ldr	r3, [pc, #44]	; (80055a4 <HAL_RCC_ClockConfig+0x1bc>)
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	091b      	lsrs	r3, r3, #4
 800557a:	f003 030f 	and.w	r3, r3, #15
 800557e:	490a      	ldr	r1, [pc, #40]	; (80055a8 <HAL_RCC_ClockConfig+0x1c0>)
 8005580:	5ccb      	ldrb	r3, [r1, r3]
 8005582:	fa22 f303 	lsr.w	r3, r2, r3
 8005586:	4a09      	ldr	r2, [pc, #36]	; (80055ac <HAL_RCC_ClockConfig+0x1c4>)
 8005588:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800558a:	4b09      	ldr	r3, [pc, #36]	; (80055b0 <HAL_RCC_ClockConfig+0x1c8>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4618      	mov	r0, r3
 8005590:	f7fc ff28 	bl	80023e4 <HAL_InitTick>

  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3710      	adds	r7, #16
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	40023c00 	.word	0x40023c00
 80055a4:	40023800 	.word	0x40023800
 80055a8:	0801c174 	.word	0x0801c174
 80055ac:	20000004 	.word	0x20000004
 80055b0:	20000008 	.word	0x20000008

080055b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055b4:	b5b0      	push	{r4, r5, r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80055ba:	2100      	movs	r1, #0
 80055bc:	6079      	str	r1, [r7, #4]
 80055be:	2100      	movs	r1, #0
 80055c0:	60f9      	str	r1, [r7, #12]
 80055c2:	2100      	movs	r1, #0
 80055c4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80055c6:	2100      	movs	r1, #0
 80055c8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055ca:	4952      	ldr	r1, [pc, #328]	; (8005714 <HAL_RCC_GetSysClockFreq+0x160>)
 80055cc:	6889      	ldr	r1, [r1, #8]
 80055ce:	f001 010c 	and.w	r1, r1, #12
 80055d2:	2908      	cmp	r1, #8
 80055d4:	d00d      	beq.n	80055f2 <HAL_RCC_GetSysClockFreq+0x3e>
 80055d6:	2908      	cmp	r1, #8
 80055d8:	f200 8094 	bhi.w	8005704 <HAL_RCC_GetSysClockFreq+0x150>
 80055dc:	2900      	cmp	r1, #0
 80055de:	d002      	beq.n	80055e6 <HAL_RCC_GetSysClockFreq+0x32>
 80055e0:	2904      	cmp	r1, #4
 80055e2:	d003      	beq.n	80055ec <HAL_RCC_GetSysClockFreq+0x38>
 80055e4:	e08e      	b.n	8005704 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80055e6:	4b4c      	ldr	r3, [pc, #304]	; (8005718 <HAL_RCC_GetSysClockFreq+0x164>)
 80055e8:	60bb      	str	r3, [r7, #8]
       break;
 80055ea:	e08e      	b.n	800570a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80055ec:	4b4b      	ldr	r3, [pc, #300]	; (800571c <HAL_RCC_GetSysClockFreq+0x168>)
 80055ee:	60bb      	str	r3, [r7, #8]
      break;
 80055f0:	e08b      	b.n	800570a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80055f2:	4948      	ldr	r1, [pc, #288]	; (8005714 <HAL_RCC_GetSysClockFreq+0x160>)
 80055f4:	6849      	ldr	r1, [r1, #4]
 80055f6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80055fa:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80055fc:	4945      	ldr	r1, [pc, #276]	; (8005714 <HAL_RCC_GetSysClockFreq+0x160>)
 80055fe:	6849      	ldr	r1, [r1, #4]
 8005600:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005604:	2900      	cmp	r1, #0
 8005606:	d024      	beq.n	8005652 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005608:	4942      	ldr	r1, [pc, #264]	; (8005714 <HAL_RCC_GetSysClockFreq+0x160>)
 800560a:	6849      	ldr	r1, [r1, #4]
 800560c:	0989      	lsrs	r1, r1, #6
 800560e:	4608      	mov	r0, r1
 8005610:	f04f 0100 	mov.w	r1, #0
 8005614:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005618:	f04f 0500 	mov.w	r5, #0
 800561c:	ea00 0204 	and.w	r2, r0, r4
 8005620:	ea01 0305 	and.w	r3, r1, r5
 8005624:	493d      	ldr	r1, [pc, #244]	; (800571c <HAL_RCC_GetSysClockFreq+0x168>)
 8005626:	fb01 f003 	mul.w	r0, r1, r3
 800562a:	2100      	movs	r1, #0
 800562c:	fb01 f102 	mul.w	r1, r1, r2
 8005630:	1844      	adds	r4, r0, r1
 8005632:	493a      	ldr	r1, [pc, #232]	; (800571c <HAL_RCC_GetSysClockFreq+0x168>)
 8005634:	fba2 0101 	umull	r0, r1, r2, r1
 8005638:	1863      	adds	r3, r4, r1
 800563a:	4619      	mov	r1, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	461a      	mov	r2, r3
 8005640:	f04f 0300 	mov.w	r3, #0
 8005644:	f7fb fa88 	bl	8000b58 <__aeabi_uldivmod>
 8005648:	4602      	mov	r2, r0
 800564a:	460b      	mov	r3, r1
 800564c:	4613      	mov	r3, r2
 800564e:	60fb      	str	r3, [r7, #12]
 8005650:	e04a      	b.n	80056e8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005652:	4b30      	ldr	r3, [pc, #192]	; (8005714 <HAL_RCC_GetSysClockFreq+0x160>)
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	099b      	lsrs	r3, r3, #6
 8005658:	461a      	mov	r2, r3
 800565a:	f04f 0300 	mov.w	r3, #0
 800565e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005662:	f04f 0100 	mov.w	r1, #0
 8005666:	ea02 0400 	and.w	r4, r2, r0
 800566a:	ea03 0501 	and.w	r5, r3, r1
 800566e:	4620      	mov	r0, r4
 8005670:	4629      	mov	r1, r5
 8005672:	f04f 0200 	mov.w	r2, #0
 8005676:	f04f 0300 	mov.w	r3, #0
 800567a:	014b      	lsls	r3, r1, #5
 800567c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005680:	0142      	lsls	r2, r0, #5
 8005682:	4610      	mov	r0, r2
 8005684:	4619      	mov	r1, r3
 8005686:	1b00      	subs	r0, r0, r4
 8005688:	eb61 0105 	sbc.w	r1, r1, r5
 800568c:	f04f 0200 	mov.w	r2, #0
 8005690:	f04f 0300 	mov.w	r3, #0
 8005694:	018b      	lsls	r3, r1, #6
 8005696:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800569a:	0182      	lsls	r2, r0, #6
 800569c:	1a12      	subs	r2, r2, r0
 800569e:	eb63 0301 	sbc.w	r3, r3, r1
 80056a2:	f04f 0000 	mov.w	r0, #0
 80056a6:	f04f 0100 	mov.w	r1, #0
 80056aa:	00d9      	lsls	r1, r3, #3
 80056ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80056b0:	00d0      	lsls	r0, r2, #3
 80056b2:	4602      	mov	r2, r0
 80056b4:	460b      	mov	r3, r1
 80056b6:	1912      	adds	r2, r2, r4
 80056b8:	eb45 0303 	adc.w	r3, r5, r3
 80056bc:	f04f 0000 	mov.w	r0, #0
 80056c0:	f04f 0100 	mov.w	r1, #0
 80056c4:	0299      	lsls	r1, r3, #10
 80056c6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80056ca:	0290      	lsls	r0, r2, #10
 80056cc:	4602      	mov	r2, r0
 80056ce:	460b      	mov	r3, r1
 80056d0:	4610      	mov	r0, r2
 80056d2:	4619      	mov	r1, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	461a      	mov	r2, r3
 80056d8:	f04f 0300 	mov.w	r3, #0
 80056dc:	f7fb fa3c 	bl	8000b58 <__aeabi_uldivmod>
 80056e0:	4602      	mov	r2, r0
 80056e2:	460b      	mov	r3, r1
 80056e4:	4613      	mov	r3, r2
 80056e6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80056e8:	4b0a      	ldr	r3, [pc, #40]	; (8005714 <HAL_RCC_GetSysClockFreq+0x160>)
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	0c1b      	lsrs	r3, r3, #16
 80056ee:	f003 0303 	and.w	r3, r3, #3
 80056f2:	3301      	adds	r3, #1
 80056f4:	005b      	lsls	r3, r3, #1
 80056f6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005700:	60bb      	str	r3, [r7, #8]
      break;
 8005702:	e002      	b.n	800570a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005704:	4b04      	ldr	r3, [pc, #16]	; (8005718 <HAL_RCC_GetSysClockFreq+0x164>)
 8005706:	60bb      	str	r3, [r7, #8]
      break;
 8005708:	bf00      	nop
    }
  }
  return sysclockfreq;
 800570a:	68bb      	ldr	r3, [r7, #8]
}
 800570c:	4618      	mov	r0, r3
 800570e:	3710      	adds	r7, #16
 8005710:	46bd      	mov	sp, r7
 8005712:	bdb0      	pop	{r4, r5, r7, pc}
 8005714:	40023800 	.word	0x40023800
 8005718:	00f42400 	.word	0x00f42400
 800571c:	017d7840 	.word	0x017d7840

08005720 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005720:	b480      	push	{r7}
 8005722:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005724:	4b03      	ldr	r3, [pc, #12]	; (8005734 <HAL_RCC_GetHCLKFreq+0x14>)
 8005726:	681b      	ldr	r3, [r3, #0]
}
 8005728:	4618      	mov	r0, r3
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop
 8005734:	20000004 	.word	0x20000004

08005738 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800573c:	f7ff fff0 	bl	8005720 <HAL_RCC_GetHCLKFreq>
 8005740:	4602      	mov	r2, r0
 8005742:	4b05      	ldr	r3, [pc, #20]	; (8005758 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	0a9b      	lsrs	r3, r3, #10
 8005748:	f003 0307 	and.w	r3, r3, #7
 800574c:	4903      	ldr	r1, [pc, #12]	; (800575c <HAL_RCC_GetPCLK1Freq+0x24>)
 800574e:	5ccb      	ldrb	r3, [r1, r3]
 8005750:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005754:	4618      	mov	r0, r3
 8005756:	bd80      	pop	{r7, pc}
 8005758:	40023800 	.word	0x40023800
 800575c:	0801c184 	.word	0x0801c184

08005760 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005764:	f7ff ffdc 	bl	8005720 <HAL_RCC_GetHCLKFreq>
 8005768:	4602      	mov	r2, r0
 800576a:	4b05      	ldr	r3, [pc, #20]	; (8005780 <HAL_RCC_GetPCLK2Freq+0x20>)
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	0b5b      	lsrs	r3, r3, #13
 8005770:	f003 0307 	and.w	r3, r3, #7
 8005774:	4903      	ldr	r1, [pc, #12]	; (8005784 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005776:	5ccb      	ldrb	r3, [r1, r3]
 8005778:	fa22 f303 	lsr.w	r3, r2, r3
}
 800577c:	4618      	mov	r0, r3
 800577e:	bd80      	pop	{r7, pc}
 8005780:	40023800 	.word	0x40023800
 8005784:	0801c184 	.word	0x0801c184

08005788 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	220f      	movs	r2, #15
 8005796:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005798:	4b12      	ldr	r3, [pc, #72]	; (80057e4 <HAL_RCC_GetClockConfig+0x5c>)
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f003 0203 	and.w	r2, r3, #3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80057a4:	4b0f      	ldr	r3, [pc, #60]	; (80057e4 <HAL_RCC_GetClockConfig+0x5c>)
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80057b0:	4b0c      	ldr	r3, [pc, #48]	; (80057e4 <HAL_RCC_GetClockConfig+0x5c>)
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80057bc:	4b09      	ldr	r3, [pc, #36]	; (80057e4 <HAL_RCC_GetClockConfig+0x5c>)
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	08db      	lsrs	r3, r3, #3
 80057c2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80057ca:	4b07      	ldr	r3, [pc, #28]	; (80057e8 <HAL_RCC_GetClockConfig+0x60>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 0207 	and.w	r2, r3, #7
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	601a      	str	r2, [r3, #0]
}
 80057d6:	bf00      	nop
 80057d8:	370c      	adds	r7, #12
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	40023800 	.word	0x40023800
 80057e8:	40023c00 	.word	0x40023c00

080057ec <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b086      	sub	sp, #24
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80057f4:	2300      	movs	r3, #0
 80057f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80057f8:	2300      	movs	r3, #0
 80057fa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 0301 	and.w	r3, r3, #1
 8005804:	2b00      	cmp	r3, #0
 8005806:	d105      	bne.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005810:	2b00      	cmp	r3, #0
 8005812:	d035      	beq.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005814:	4b62      	ldr	r3, [pc, #392]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005816:	2200      	movs	r2, #0
 8005818:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800581a:	f7fc ff55 	bl	80026c8 <HAL_GetTick>
 800581e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005820:	e008      	b.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005822:	f7fc ff51 	bl	80026c8 <HAL_GetTick>
 8005826:	4602      	mov	r2, r0
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	2b02      	cmp	r3, #2
 800582e:	d901      	bls.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e0b0      	b.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005834:	4b5b      	ldr	r3, [pc, #364]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800583c:	2b00      	cmp	r3, #0
 800583e:	d1f0      	bne.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	019a      	lsls	r2, r3, #6
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	071b      	lsls	r3, r3, #28
 800584c:	4955      	ldr	r1, [pc, #340]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800584e:	4313      	orrs	r3, r2
 8005850:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005854:	4b52      	ldr	r3, [pc, #328]	; (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005856:	2201      	movs	r2, #1
 8005858:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800585a:	f7fc ff35 	bl	80026c8 <HAL_GetTick>
 800585e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005860:	e008      	b.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005862:	f7fc ff31 	bl	80026c8 <HAL_GetTick>
 8005866:	4602      	mov	r2, r0
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	2b02      	cmp	r3, #2
 800586e:	d901      	bls.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005870:	2303      	movs	r3, #3
 8005872:	e090      	b.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005874:	4b4b      	ldr	r3, [pc, #300]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d0f0      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0302 	and.w	r3, r3, #2
 8005888:	2b00      	cmp	r3, #0
 800588a:	f000 8083 	beq.w	8005994 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800588e:	2300      	movs	r3, #0
 8005890:	60fb      	str	r3, [r7, #12]
 8005892:	4b44      	ldr	r3, [pc, #272]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005896:	4a43      	ldr	r2, [pc, #268]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800589c:	6413      	str	r3, [r2, #64]	; 0x40
 800589e:	4b41      	ldr	r3, [pc, #260]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058a6:	60fb      	str	r3, [r7, #12]
 80058a8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80058aa:	4b3f      	ldr	r3, [pc, #252]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a3e      	ldr	r2, [pc, #248]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80058b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058b4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80058b6:	f7fc ff07 	bl	80026c8 <HAL_GetTick>
 80058ba:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80058bc:	e008      	b.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80058be:	f7fc ff03 	bl	80026c8 <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d901      	bls.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e062      	b.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80058d0:	4b35      	ldr	r3, [pc, #212]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d0f0      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80058dc:	4b31      	ldr	r3, [pc, #196]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058e4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d02f      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058f4:	693a      	ldr	r2, [r7, #16]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d028      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058fa:	4b2a      	ldr	r3, [pc, #168]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80058fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005902:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005904:	4b29      	ldr	r3, [pc, #164]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005906:	2201      	movs	r2, #1
 8005908:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800590a:	4b28      	ldr	r3, [pc, #160]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800590c:	2200      	movs	r2, #0
 800590e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005910:	4a24      	ldr	r2, [pc, #144]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005916:	4b23      	ldr	r3, [pc, #140]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	2b01      	cmp	r3, #1
 8005920:	d114      	bne.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005922:	f7fc fed1 	bl	80026c8 <HAL_GetTick>
 8005926:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005928:	e00a      	b.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800592a:	f7fc fecd 	bl	80026c8 <HAL_GetTick>
 800592e:	4602      	mov	r2, r0
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	1ad3      	subs	r3, r2, r3
 8005934:	f241 3288 	movw	r2, #5000	; 0x1388
 8005938:	4293      	cmp	r3, r2
 800593a:	d901      	bls.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e02a      	b.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005940:	4b18      	ldr	r3, [pc, #96]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005944:	f003 0302 	and.w	r3, r3, #2
 8005948:	2b00      	cmp	r3, #0
 800594a:	d0ee      	beq.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005954:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005958:	d10d      	bne.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800595a:	4b12      	ldr	r3, [pc, #72]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800596a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800596e:	490d      	ldr	r1, [pc, #52]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005970:	4313      	orrs	r3, r2
 8005972:	608b      	str	r3, [r1, #8]
 8005974:	e005      	b.n	8005982 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005976:	4b0b      	ldr	r3, [pc, #44]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	4a0a      	ldr	r2, [pc, #40]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800597c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005980:	6093      	str	r3, [r2, #8]
 8005982:	4b08      	ldr	r3, [pc, #32]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005984:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800598e:	4905      	ldr	r1, [pc, #20]	; (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005990:	4313      	orrs	r3, r2
 8005992:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3718      	adds	r7, #24
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	42470068 	.word	0x42470068
 80059a4:	40023800 	.word	0x40023800
 80059a8:	40007000 	.word	0x40007000
 80059ac:	42470e40 	.word	0x42470e40

080059b0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d101      	bne.n	80059c6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e066      	b.n	8005a94 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	7f5b      	ldrb	r3, [r3, #29]
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d105      	bne.n	80059dc <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f7fc fb12 	bl	8002000 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2202      	movs	r2, #2
 80059e0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	22ca      	movs	r2, #202	; 0xca
 80059e8:	625a      	str	r2, [r3, #36]	; 0x24
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	2253      	movs	r2, #83	; 0x53
 80059f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 fa45 	bl	8005e82 <RTC_EnterInitMode>
 80059f8:	4603      	mov	r3, r0
 80059fa:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80059fc:	7bfb      	ldrb	r3, [r7, #15]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d12c      	bne.n	8005a5c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	6812      	ldr	r2, [r2, #0]
 8005a0c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005a10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a14:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	6899      	ldr	r1, [r3, #8]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685a      	ldr	r2, [r3, #4]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	431a      	orrs	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	431a      	orrs	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	430a      	orrs	r2, r1
 8005a32:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	68d2      	ldr	r2, [r2, #12]
 8005a3c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	6919      	ldr	r1, [r3, #16]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	041a      	lsls	r2, r3, #16
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	430a      	orrs	r2, r1
 8005a50:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 fa4c 	bl	8005ef0 <RTC_ExitInitMode>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005a5c:	7bfb      	ldrb	r3, [r7, #15]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d113      	bne.n	8005a8a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005a70:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	699a      	ldr	r2, [r3, #24]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	430a      	orrs	r2, r1
 8005a82:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	22ff      	movs	r2, #255	; 0xff
 8005a90:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8005a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3710      	adds	r7, #16
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005a9c:	b590      	push	{r4, r7, lr}
 8005a9e:	b087      	sub	sp, #28
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	7f1b      	ldrb	r3, [r3, #28]
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d101      	bne.n	8005ab8 <HAL_RTC_SetTime+0x1c>
 8005ab4:	2302      	movs	r3, #2
 8005ab6:	e087      	b.n	8005bc8 <HAL_RTC_SetTime+0x12c>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2201      	movs	r2, #1
 8005abc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2202      	movs	r2, #2
 8005ac2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d126      	bne.n	8005b18 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d102      	bne.n	8005ade <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	2200      	movs	r2, #0
 8005adc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f000 fa29 	bl	8005f3a <RTC_ByteToBcd2>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	785b      	ldrb	r3, [r3, #1]
 8005af0:	4618      	mov	r0, r3
 8005af2:	f000 fa22 	bl	8005f3a <RTC_ByteToBcd2>
 8005af6:	4603      	mov	r3, r0
 8005af8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005afa:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	789b      	ldrb	r3, [r3, #2]
 8005b00:	4618      	mov	r0, r3
 8005b02:	f000 fa1a 	bl	8005f3a <RTC_ByteToBcd2>
 8005b06:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005b08:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	78db      	ldrb	r3, [r3, #3]
 8005b10:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8005b12:	4313      	orrs	r3, r2
 8005b14:	617b      	str	r3, [r7, #20]
 8005b16:	e018      	b.n	8005b4a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d102      	bne.n	8005b2c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	785b      	ldrb	r3, [r3, #1]
 8005b36:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005b38:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005b3a:	68ba      	ldr	r2, [r7, #8]
 8005b3c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005b3e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	78db      	ldrb	r3, [r3, #3]
 8005b44:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005b46:	4313      	orrs	r3, r2
 8005b48:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	22ca      	movs	r2, #202	; 0xca
 8005b50:	625a      	str	r2, [r3, #36]	; 0x24
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2253      	movs	r2, #83	; 0x53
 8005b58:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005b5a:	68f8      	ldr	r0, [r7, #12]
 8005b5c:	f000 f991 	bl	8005e82 <RTC_EnterInitMode>
 8005b60:	4603      	mov	r3, r0
 8005b62:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005b64:	7cfb      	ldrb	r3, [r7, #19]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d120      	bne.n	8005bac <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005b74:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005b78:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	689a      	ldr	r2, [r3, #8]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b88:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	6899      	ldr	r1, [r3, #8]
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	68da      	ldr	r2, [r3, #12]
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	431a      	orrs	r2, r3
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005ba2:	68f8      	ldr	r0, [r7, #12]
 8005ba4:	f000 f9a4 	bl	8005ef0 <RTC_ExitInitMode>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005bac:	7cfb      	ldrb	r3, [r7, #19]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d102      	bne.n	8005bb8 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	22ff      	movs	r2, #255	; 0xff
 8005bbe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	771a      	strb	r2, [r3, #28]

  return status;
 8005bc6:	7cfb      	ldrb	r3, [r7, #19]
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	371c      	adds	r7, #28
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd90      	pop	{r4, r7, pc}

08005bd0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b086      	sub	sp, #24
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005c02:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005c06:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	0c1b      	lsrs	r3, r3, #16
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c12:	b2da      	uxtb	r2, r3
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	0a1b      	lsrs	r3, r3, #8
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c22:	b2da      	uxtb	r2, r3
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c30:	b2da      	uxtb	r2, r3
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	0d9b      	lsrs	r3, r3, #22
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	f003 0301 	and.w	r3, r3, #1
 8005c40:	b2da      	uxtb	r2, r3
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d11a      	bne.n	8005c82 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	4618      	mov	r0, r3
 8005c52:	f000 f98f 	bl	8005f74 <RTC_Bcd2ToByte>
 8005c56:	4603      	mov	r3, r0
 8005c58:	461a      	mov	r2, r3
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	785b      	ldrb	r3, [r3, #1]
 8005c62:	4618      	mov	r0, r3
 8005c64:	f000 f986 	bl	8005f74 <RTC_Bcd2ToByte>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	789b      	ldrb	r3, [r3, #2]
 8005c74:	4618      	mov	r0, r3
 8005c76:	f000 f97d 	bl	8005f74 <RTC_Bcd2ToByte>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3718      	adds	r7, #24
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005c8c:	b590      	push	{r4, r7, lr}
 8005c8e:	b087      	sub	sp, #28
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	7f1b      	ldrb	r3, [r3, #28]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d101      	bne.n	8005ca8 <HAL_RTC_SetDate+0x1c>
 8005ca4:	2302      	movs	r3, #2
 8005ca6:	e071      	b.n	8005d8c <HAL_RTC_SetDate+0x100>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2201      	movs	r2, #1
 8005cac:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2202      	movs	r2, #2
 8005cb2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d10e      	bne.n	8005cd8 <HAL_RTC_SetDate+0x4c>
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	785b      	ldrb	r3, [r3, #1]
 8005cbe:	f003 0310 	and.w	r3, r3, #16
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d008      	beq.n	8005cd8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	785b      	ldrb	r3, [r3, #1]
 8005cca:	f023 0310 	bic.w	r3, r3, #16
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	330a      	adds	r3, #10
 8005cd2:	b2da      	uxtb	r2, r3
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d11c      	bne.n	8005d18 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	78db      	ldrb	r3, [r3, #3]
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f000 f929 	bl	8005f3a <RTC_ByteToBcd2>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	785b      	ldrb	r3, [r3, #1]
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f000 f922 	bl	8005f3a <RTC_ByteToBcd2>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005cfa:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	789b      	ldrb	r3, [r3, #2]
 8005d00:	4618      	mov	r0, r3
 8005d02:	f000 f91a 	bl	8005f3a <RTC_ByteToBcd2>
 8005d06:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005d08:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005d12:	4313      	orrs	r3, r2
 8005d14:	617b      	str	r3, [r7, #20]
 8005d16:	e00e      	b.n	8005d36 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	78db      	ldrb	r3, [r3, #3]
 8005d1c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	785b      	ldrb	r3, [r3, #1]
 8005d22:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005d24:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005d26:	68ba      	ldr	r2, [r7, #8]
 8005d28:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005d2a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005d32:	4313      	orrs	r3, r2
 8005d34:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	22ca      	movs	r2, #202	; 0xca
 8005d3c:	625a      	str	r2, [r3, #36]	; 0x24
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2253      	movs	r2, #83	; 0x53
 8005d44:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f000 f89b 	bl	8005e82 <RTC_EnterInitMode>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005d50:	7cfb      	ldrb	r3, [r7, #19]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d10c      	bne.n	8005d70 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005d60:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005d64:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005d66:	68f8      	ldr	r0, [r7, #12]
 8005d68:	f000 f8c2 	bl	8005ef0 <RTC_ExitInitMode>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8005d70:	7cfb      	ldrb	r3, [r7, #19]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d102      	bne.n	8005d7c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	22ff      	movs	r2, #255	; 0xff
 8005d82:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2200      	movs	r2, #0
 8005d88:	771a      	strb	r2, [r3, #28]

  return status;
 8005d8a:	7cfb      	ldrb	r3, [r7, #19]
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	371c      	adds	r7, #28
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd90      	pop	{r4, r7, pc}

08005d94 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b086      	sub	sp, #24
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005da0:	2300      	movs	r3, #0
 8005da2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005dae:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005db2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	0c1b      	lsrs	r3, r3, #16
 8005db8:	b2da      	uxtb	r2, r3
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	0a1b      	lsrs	r3, r3, #8
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	f003 031f 	and.w	r3, r3, #31
 8005dc8:	b2da      	uxtb	r2, r3
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005dd6:	b2da      	uxtb	r2, r3
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	0b5b      	lsrs	r3, r3, #13
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	f003 0307 	and.w	r3, r3, #7
 8005de6:	b2da      	uxtb	r2, r3
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d11a      	bne.n	8005e28 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	78db      	ldrb	r3, [r3, #3]
 8005df6:	4618      	mov	r0, r3
 8005df8:	f000 f8bc 	bl	8005f74 <RTC_Bcd2ToByte>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	461a      	mov	r2, r3
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	785b      	ldrb	r3, [r3, #1]
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f000 f8b3 	bl	8005f74 <RTC_Bcd2ToByte>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	461a      	mov	r2, r3
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	789b      	ldrb	r3, [r3, #2]
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f000 f8aa 	bl	8005f74 <RTC_Bcd2ToByte>
 8005e20:	4603      	mov	r3, r0
 8005e22:	461a      	mov	r2, r3
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005e28:	2300      	movs	r3, #0
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3718      	adds	r7, #24
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}

08005e32 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005e32:	b580      	push	{r7, lr}
 8005e34:	b084      	sub	sp, #16
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	68da      	ldr	r2, [r3, #12]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e4c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005e4e:	f7fc fc3b 	bl	80026c8 <HAL_GetTick>
 8005e52:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005e54:	e009      	b.n	8005e6a <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005e56:	f7fc fc37 	bl	80026c8 <HAL_GetTick>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	1ad3      	subs	r3, r2, r3
 8005e60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e64:	d901      	bls.n	8005e6a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	e007      	b.n	8005e7a <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	f003 0320 	and.w	r3, r3, #32
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d0ee      	beq.n	8005e56 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3710      	adds	r7, #16
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}

08005e82 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005e82:	b580      	push	{r7, lr}
 8005e84:	b084      	sub	sp, #16
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d122      	bne.n	8005ee6 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68da      	ldr	r2, [r3, #12]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005eae:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005eb0:	f7fc fc0a 	bl	80026c8 <HAL_GetTick>
 8005eb4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005eb6:	e00c      	b.n	8005ed2 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005eb8:	f7fc fc06 	bl	80026c8 <HAL_GetTick>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ec6:	d904      	bls.n	8005ed2 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2204      	movs	r2, #4
 8005ecc:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d102      	bne.n	8005ee6 <RTC_EnterInitMode+0x64>
 8005ee0:	7bfb      	ldrb	r3, [r7, #15]
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d1e8      	bne.n	8005eb8 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3710      	adds	r7, #16
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68da      	ldr	r2, [r3, #12]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f0a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	f003 0320 	and.w	r3, r3, #32
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d10a      	bne.n	8005f30 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f7ff ff89 	bl	8005e32 <HAL_RTC_WaitForSynchro>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d004      	beq.n	8005f30 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2204      	movs	r2, #4
 8005f2a:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3710      	adds	r7, #16
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}

08005f3a <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005f3a:	b480      	push	{r7}
 8005f3c:	b085      	sub	sp, #20
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	4603      	mov	r3, r0
 8005f42:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8005f44:	2300      	movs	r3, #0
 8005f46:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8005f48:	e005      	b.n	8005f56 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005f4a:	7bfb      	ldrb	r3, [r7, #15]
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8005f50:	79fb      	ldrb	r3, [r7, #7]
 8005f52:	3b0a      	subs	r3, #10
 8005f54:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005f56:	79fb      	ldrb	r3, [r7, #7]
 8005f58:	2b09      	cmp	r3, #9
 8005f5a:	d8f6      	bhi.n	8005f4a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005f5c:	7bfb      	ldrb	r3, [r7, #15]
 8005f5e:	011b      	lsls	r3, r3, #4
 8005f60:	b2da      	uxtb	r2, r3
 8005f62:	79fb      	ldrb	r3, [r7, #7]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	b2db      	uxtb	r3, r3
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3714      	adds	r7, #20
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b085      	sub	sp, #20
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8005f82:	79fb      	ldrb	r3, [r7, #7]
 8005f84:	091b      	lsrs	r3, r3, #4
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	461a      	mov	r2, r3
 8005f8a:	0092      	lsls	r2, r2, #2
 8005f8c:	4413      	add	r3, r2
 8005f8e:	005b      	lsls	r3, r3, #1
 8005f90:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8005f92:	79fb      	ldrb	r3, [r7, #7]
 8005f94:	f003 030f 	and.w	r3, r3, #15
 8005f98:	b2da      	uxtb	r2, r3
 8005f9a:	7bfb      	ldrb	r3, [r7, #15]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	b2db      	uxtb	r3, r3
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3714      	adds	r7, #20
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d101      	bne.n	8005fbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e07b      	b.n	80060b6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d108      	bne.n	8005fd8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fce:	d009      	beq.n	8005fe4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	61da      	str	r2, [r3, #28]
 8005fd6:	e005      	b.n	8005fe4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d106      	bne.n	8006004 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f7fc f828 	bl	8002054 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2202      	movs	r2, #2
 8006008:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800601a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800602c:	431a      	orrs	r2, r3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006036:	431a      	orrs	r2, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	f003 0302 	and.w	r3, r3, #2
 8006040:	431a      	orrs	r2, r3
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	695b      	ldr	r3, [r3, #20]
 8006046:	f003 0301 	and.w	r3, r3, #1
 800604a:	431a      	orrs	r2, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	699b      	ldr	r3, [r3, #24]
 8006050:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006054:	431a      	orrs	r2, r3
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	69db      	ldr	r3, [r3, #28]
 800605a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800605e:	431a      	orrs	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6a1b      	ldr	r3, [r3, #32]
 8006064:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006068:	ea42 0103 	orr.w	r1, r2, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006070:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	430a      	orrs	r2, r1
 800607a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	699b      	ldr	r3, [r3, #24]
 8006080:	0c1b      	lsrs	r3, r3, #16
 8006082:	f003 0104 	and.w	r1, r3, #4
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608a:	f003 0210 	and.w	r2, r3, #16
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	430a      	orrs	r2, r1
 8006094:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	69da      	ldr	r2, [r3, #28]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3708      	adds	r7, #8
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}

080060be <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060be:	b580      	push	{r7, lr}
 80060c0:	b088      	sub	sp, #32
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	60f8      	str	r0, [r7, #12]
 80060c6:	60b9      	str	r1, [r7, #8]
 80060c8:	603b      	str	r3, [r7, #0]
 80060ca:	4613      	mov	r3, r2
 80060cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80060ce:	2300      	movs	r3, #0
 80060d0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d101      	bne.n	80060e0 <HAL_SPI_Transmit+0x22>
 80060dc:	2302      	movs	r3, #2
 80060de:	e126      	b.n	800632e <HAL_SPI_Transmit+0x270>
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060e8:	f7fc faee 	bl	80026c8 <HAL_GetTick>
 80060ec:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80060ee:	88fb      	ldrh	r3, [r7, #6]
 80060f0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d002      	beq.n	8006104 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80060fe:	2302      	movs	r3, #2
 8006100:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006102:	e10b      	b.n	800631c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d002      	beq.n	8006110 <HAL_SPI_Transmit+0x52>
 800610a:	88fb      	ldrh	r3, [r7, #6]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d102      	bne.n	8006116 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006114:	e102      	b.n	800631c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2203      	movs	r2, #3
 800611a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2200      	movs	r2, #0
 8006122:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	68ba      	ldr	r2, [r7, #8]
 8006128:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	88fa      	ldrh	r2, [r7, #6]
 800612e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	88fa      	ldrh	r2, [r7, #6]
 8006134:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2200      	movs	r2, #0
 800613a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2200      	movs	r2, #0
 8006140:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2200      	movs	r2, #0
 8006146:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2200      	movs	r2, #0
 800614c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800615c:	d10f      	bne.n	800617e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800616c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800617c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006188:	2b40      	cmp	r3, #64	; 0x40
 800618a:	d007      	beq.n	800619c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800619a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061a4:	d14b      	bne.n	800623e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d002      	beq.n	80061b4 <HAL_SPI_Transmit+0xf6>
 80061ae:	8afb      	ldrh	r3, [r7, #22]
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d13e      	bne.n	8006232 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b8:	881a      	ldrh	r2, [r3, #0]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061c4:	1c9a      	adds	r2, r3, #2
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	3b01      	subs	r3, #1
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80061d8:	e02b      	b.n	8006232 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	f003 0302 	and.w	r3, r3, #2
 80061e4:	2b02      	cmp	r3, #2
 80061e6:	d112      	bne.n	800620e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ec:	881a      	ldrh	r2, [r3, #0]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f8:	1c9a      	adds	r2, r3, #2
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006202:	b29b      	uxth	r3, r3
 8006204:	3b01      	subs	r3, #1
 8006206:	b29a      	uxth	r2, r3
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	86da      	strh	r2, [r3, #54]	; 0x36
 800620c:	e011      	b.n	8006232 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800620e:	f7fc fa5b 	bl	80026c8 <HAL_GetTick>
 8006212:	4602      	mov	r2, r0
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	1ad3      	subs	r3, r2, r3
 8006218:	683a      	ldr	r2, [r7, #0]
 800621a:	429a      	cmp	r2, r3
 800621c:	d803      	bhi.n	8006226 <HAL_SPI_Transmit+0x168>
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006224:	d102      	bne.n	800622c <HAL_SPI_Transmit+0x16e>
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d102      	bne.n	8006232 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800622c:	2303      	movs	r3, #3
 800622e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006230:	e074      	b.n	800631c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006236:	b29b      	uxth	r3, r3
 8006238:	2b00      	cmp	r3, #0
 800623a:	d1ce      	bne.n	80061da <HAL_SPI_Transmit+0x11c>
 800623c:	e04c      	b.n	80062d8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d002      	beq.n	800624c <HAL_SPI_Transmit+0x18e>
 8006246:	8afb      	ldrh	r3, [r7, #22]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d140      	bne.n	80062ce <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	330c      	adds	r3, #12
 8006256:	7812      	ldrb	r2, [r2, #0]
 8006258:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800625e:	1c5a      	adds	r2, r3, #1
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006268:	b29b      	uxth	r3, r3
 800626a:	3b01      	subs	r3, #1
 800626c:	b29a      	uxth	r2, r3
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006272:	e02c      	b.n	80062ce <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	f003 0302 	and.w	r3, r3, #2
 800627e:	2b02      	cmp	r3, #2
 8006280:	d113      	bne.n	80062aa <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	330c      	adds	r3, #12
 800628c:	7812      	ldrb	r2, [r2, #0]
 800628e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006294:	1c5a      	adds	r2, r3, #1
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800629e:	b29b      	uxth	r3, r3
 80062a0:	3b01      	subs	r3, #1
 80062a2:	b29a      	uxth	r2, r3
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	86da      	strh	r2, [r3, #54]	; 0x36
 80062a8:	e011      	b.n	80062ce <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062aa:	f7fc fa0d 	bl	80026c8 <HAL_GetTick>
 80062ae:	4602      	mov	r2, r0
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	1ad3      	subs	r3, r2, r3
 80062b4:	683a      	ldr	r2, [r7, #0]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d803      	bhi.n	80062c2 <HAL_SPI_Transmit+0x204>
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c0:	d102      	bne.n	80062c8 <HAL_SPI_Transmit+0x20a>
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d102      	bne.n	80062ce <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80062c8:	2303      	movs	r3, #3
 80062ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 80062cc:	e026      	b.n	800631c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d1cd      	bne.n	8006274 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80062d8:	69ba      	ldr	r2, [r7, #24]
 80062da:	6839      	ldr	r1, [r7, #0]
 80062dc:	68f8      	ldr	r0, [r7, #12]
 80062de:	f000 fbcb 	bl	8006a78 <SPI_EndRxTxTransaction>
 80062e2:	4603      	mov	r3, r0
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d002      	beq.n	80062ee <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2220      	movs	r2, #32
 80062ec:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d10a      	bne.n	800630c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062f6:	2300      	movs	r3, #0
 80062f8:	613b      	str	r3, [r7, #16]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	613b      	str	r3, [r7, #16]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	613b      	str	r3, [r7, #16]
 800630a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006310:	2b00      	cmp	r3, #0
 8006312:	d002      	beq.n	800631a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	77fb      	strb	r3, [r7, #31]
 8006318:	e000      	b.n	800631c <HAL_SPI_Transmit+0x25e>
  }

error:
 800631a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2200      	movs	r2, #0
 8006328:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800632c:	7ffb      	ldrb	r3, [r7, #31]
}
 800632e:	4618      	mov	r0, r3
 8006330:	3720      	adds	r7, #32
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}

08006336 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006336:	b580      	push	{r7, lr}
 8006338:	b088      	sub	sp, #32
 800633a:	af02      	add	r7, sp, #8
 800633c:	60f8      	str	r0, [r7, #12]
 800633e:	60b9      	str	r1, [r7, #8]
 8006340:	603b      	str	r3, [r7, #0]
 8006342:	4613      	mov	r3, r2
 8006344:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006346:	2300      	movs	r3, #0
 8006348:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006352:	d112      	bne.n	800637a <HAL_SPI_Receive+0x44>
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	689b      	ldr	r3, [r3, #8]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d10e      	bne.n	800637a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2204      	movs	r2, #4
 8006360:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006364:	88fa      	ldrh	r2, [r7, #6]
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	9300      	str	r3, [sp, #0]
 800636a:	4613      	mov	r3, r2
 800636c:	68ba      	ldr	r2, [r7, #8]
 800636e:	68b9      	ldr	r1, [r7, #8]
 8006370:	68f8      	ldr	r0, [r7, #12]
 8006372:	f000 f8f1 	bl	8006558 <HAL_SPI_TransmitReceive>
 8006376:	4603      	mov	r3, r0
 8006378:	e0ea      	b.n	8006550 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006380:	2b01      	cmp	r3, #1
 8006382:	d101      	bne.n	8006388 <HAL_SPI_Receive+0x52>
 8006384:	2302      	movs	r3, #2
 8006386:	e0e3      	b.n	8006550 <HAL_SPI_Receive+0x21a>
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006390:	f7fc f99a 	bl	80026c8 <HAL_GetTick>
 8006394:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800639c:	b2db      	uxtb	r3, r3
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d002      	beq.n	80063a8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80063a2:	2302      	movs	r3, #2
 80063a4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80063a6:	e0ca      	b.n	800653e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d002      	beq.n	80063b4 <HAL_SPI_Receive+0x7e>
 80063ae:	88fb      	ldrh	r3, [r7, #6]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d102      	bne.n	80063ba <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80063b8:	e0c1      	b.n	800653e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2204      	movs	r2, #4
 80063be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2200      	movs	r2, #0
 80063c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	68ba      	ldr	r2, [r7, #8]
 80063cc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	88fa      	ldrh	r2, [r7, #6]
 80063d2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	88fa      	ldrh	r2, [r7, #6]
 80063d8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2200      	movs	r2, #0
 80063de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2200      	movs	r2, #0
 80063f0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2200      	movs	r2, #0
 80063f6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006400:	d10f      	bne.n	8006422 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006410:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006420:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800642c:	2b40      	cmp	r3, #64	; 0x40
 800642e:	d007      	beq.n	8006440 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800643e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d162      	bne.n	800650e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006448:	e02e      	b.n	80064a8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	f003 0301 	and.w	r3, r3, #1
 8006454:	2b01      	cmp	r3, #1
 8006456:	d115      	bne.n	8006484 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f103 020c 	add.w	r2, r3, #12
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006464:	7812      	ldrb	r2, [r2, #0]
 8006466:	b2d2      	uxtb	r2, r2
 8006468:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800646e:	1c5a      	adds	r2, r3, #1
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006478:	b29b      	uxth	r3, r3
 800647a:	3b01      	subs	r3, #1
 800647c:	b29a      	uxth	r2, r3
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006482:	e011      	b.n	80064a8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006484:	f7fc f920 	bl	80026c8 <HAL_GetTick>
 8006488:	4602      	mov	r2, r0
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	683a      	ldr	r2, [r7, #0]
 8006490:	429a      	cmp	r2, r3
 8006492:	d803      	bhi.n	800649c <HAL_SPI_Receive+0x166>
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800649a:	d102      	bne.n	80064a2 <HAL_SPI_Receive+0x16c>
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d102      	bne.n	80064a8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80064a2:	2303      	movs	r3, #3
 80064a4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80064a6:	e04a      	b.n	800653e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d1cb      	bne.n	800644a <HAL_SPI_Receive+0x114>
 80064b2:	e031      	b.n	8006518 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	f003 0301 	and.w	r3, r3, #1
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d113      	bne.n	80064ea <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68da      	ldr	r2, [r3, #12]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064cc:	b292      	uxth	r2, r2
 80064ce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d4:	1c9a      	adds	r2, r3, #2
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064de:	b29b      	uxth	r3, r3
 80064e0:	3b01      	subs	r3, #1
 80064e2:	b29a      	uxth	r2, r3
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80064e8:	e011      	b.n	800650e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80064ea:	f7fc f8ed 	bl	80026c8 <HAL_GetTick>
 80064ee:	4602      	mov	r2, r0
 80064f0:	693b      	ldr	r3, [r7, #16]
 80064f2:	1ad3      	subs	r3, r2, r3
 80064f4:	683a      	ldr	r2, [r7, #0]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d803      	bhi.n	8006502 <HAL_SPI_Receive+0x1cc>
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006500:	d102      	bne.n	8006508 <HAL_SPI_Receive+0x1d2>
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d102      	bne.n	800650e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006508:	2303      	movs	r3, #3
 800650a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800650c:	e017      	b.n	800653e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006512:	b29b      	uxth	r3, r3
 8006514:	2b00      	cmp	r3, #0
 8006516:	d1cd      	bne.n	80064b4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006518:	693a      	ldr	r2, [r7, #16]
 800651a:	6839      	ldr	r1, [r7, #0]
 800651c:	68f8      	ldr	r0, [r7, #12]
 800651e:	f000 fa45 	bl	80069ac <SPI_EndRxTransaction>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d002      	beq.n	800652e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2220      	movs	r2, #32
 800652c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006532:	2b00      	cmp	r3, #0
 8006534:	d002      	beq.n	800653c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	75fb      	strb	r3, [r7, #23]
 800653a:	e000      	b.n	800653e <HAL_SPI_Receive+0x208>
  }

error :
 800653c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2201      	movs	r2, #1
 8006542:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2200      	movs	r2, #0
 800654a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800654e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006550:	4618      	mov	r0, r3
 8006552:	3718      	adds	r7, #24
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b08c      	sub	sp, #48	; 0x30
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	607a      	str	r2, [r7, #4]
 8006564:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006566:	2301      	movs	r3, #1
 8006568:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800656a:	2300      	movs	r3, #0
 800656c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006576:	2b01      	cmp	r3, #1
 8006578:	d101      	bne.n	800657e <HAL_SPI_TransmitReceive+0x26>
 800657a:	2302      	movs	r3, #2
 800657c:	e18a      	b.n	8006894 <HAL_SPI_TransmitReceive+0x33c>
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2201      	movs	r2, #1
 8006582:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006586:	f7fc f89f 	bl	80026c8 <HAL_GetTick>
 800658a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006592:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800659c:	887b      	ldrh	r3, [r7, #2]
 800659e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80065a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80065a4:	2b01      	cmp	r3, #1
 80065a6:	d00f      	beq.n	80065c8 <HAL_SPI_TransmitReceive+0x70>
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065ae:	d107      	bne.n	80065c0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d103      	bne.n	80065c0 <HAL_SPI_TransmitReceive+0x68>
 80065b8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80065bc:	2b04      	cmp	r3, #4
 80065be:	d003      	beq.n	80065c8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80065c0:	2302      	movs	r3, #2
 80065c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80065c6:	e15b      	b.n	8006880 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d005      	beq.n	80065da <HAL_SPI_TransmitReceive+0x82>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d002      	beq.n	80065da <HAL_SPI_TransmitReceive+0x82>
 80065d4:	887b      	ldrh	r3, [r7, #2]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d103      	bne.n	80065e2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80065e0:	e14e      	b.n	8006880 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	2b04      	cmp	r3, #4
 80065ec:	d003      	beq.n	80065f6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2205      	movs	r2, #5
 80065f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2200      	movs	r2, #0
 80065fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	887a      	ldrh	r2, [r7, #2]
 8006606:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	887a      	ldrh	r2, [r7, #2]
 800660c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	68ba      	ldr	r2, [r7, #8]
 8006612:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	887a      	ldrh	r2, [r7, #2]
 8006618:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	887a      	ldrh	r2, [r7, #2]
 800661e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2200      	movs	r2, #0
 8006624:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2200      	movs	r2, #0
 800662a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006636:	2b40      	cmp	r3, #64	; 0x40
 8006638:	d007      	beq.n	800664a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006648:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006652:	d178      	bne.n	8006746 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d002      	beq.n	8006662 <HAL_SPI_TransmitReceive+0x10a>
 800665c:	8b7b      	ldrh	r3, [r7, #26]
 800665e:	2b01      	cmp	r3, #1
 8006660:	d166      	bne.n	8006730 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006666:	881a      	ldrh	r2, [r3, #0]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006672:	1c9a      	adds	r2, r3, #2
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800667c:	b29b      	uxth	r3, r3
 800667e:	3b01      	subs	r3, #1
 8006680:	b29a      	uxth	r2, r3
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006686:	e053      	b.n	8006730 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	f003 0302 	and.w	r3, r3, #2
 8006692:	2b02      	cmp	r3, #2
 8006694:	d11b      	bne.n	80066ce <HAL_SPI_TransmitReceive+0x176>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800669a:	b29b      	uxth	r3, r3
 800669c:	2b00      	cmp	r3, #0
 800669e:	d016      	beq.n	80066ce <HAL_SPI_TransmitReceive+0x176>
 80066a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d113      	bne.n	80066ce <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066aa:	881a      	ldrh	r2, [r3, #0]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b6:	1c9a      	adds	r2, r3, #2
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	3b01      	subs	r3, #1
 80066c4:	b29a      	uxth	r2, r3
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80066ca:	2300      	movs	r3, #0
 80066cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	f003 0301 	and.w	r3, r3, #1
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d119      	bne.n	8006710 <HAL_SPI_TransmitReceive+0x1b8>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d014      	beq.n	8006710 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	68da      	ldr	r2, [r3, #12]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f0:	b292      	uxth	r2, r2
 80066f2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f8:	1c9a      	adds	r2, r3, #2
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006702:	b29b      	uxth	r3, r3
 8006704:	3b01      	subs	r3, #1
 8006706:	b29a      	uxth	r2, r3
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800670c:	2301      	movs	r3, #1
 800670e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006710:	f7fb ffda 	bl	80026c8 <HAL_GetTick>
 8006714:	4602      	mov	r2, r0
 8006716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800671c:	429a      	cmp	r2, r3
 800671e:	d807      	bhi.n	8006730 <HAL_SPI_TransmitReceive+0x1d8>
 8006720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006726:	d003      	beq.n	8006730 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006728:	2303      	movs	r3, #3
 800672a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800672e:	e0a7      	b.n	8006880 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006734:	b29b      	uxth	r3, r3
 8006736:	2b00      	cmp	r3, #0
 8006738:	d1a6      	bne.n	8006688 <HAL_SPI_TransmitReceive+0x130>
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800673e:	b29b      	uxth	r3, r3
 8006740:	2b00      	cmp	r3, #0
 8006742:	d1a1      	bne.n	8006688 <HAL_SPI_TransmitReceive+0x130>
 8006744:	e07c      	b.n	8006840 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d002      	beq.n	8006754 <HAL_SPI_TransmitReceive+0x1fc>
 800674e:	8b7b      	ldrh	r3, [r7, #26]
 8006750:	2b01      	cmp	r3, #1
 8006752:	d16b      	bne.n	800682c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	330c      	adds	r3, #12
 800675e:	7812      	ldrb	r2, [r2, #0]
 8006760:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006766:	1c5a      	adds	r2, r3, #1
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006770:	b29b      	uxth	r3, r3
 8006772:	3b01      	subs	r3, #1
 8006774:	b29a      	uxth	r2, r3
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800677a:	e057      	b.n	800682c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	f003 0302 	and.w	r3, r3, #2
 8006786:	2b02      	cmp	r3, #2
 8006788:	d11c      	bne.n	80067c4 <HAL_SPI_TransmitReceive+0x26c>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800678e:	b29b      	uxth	r3, r3
 8006790:	2b00      	cmp	r3, #0
 8006792:	d017      	beq.n	80067c4 <HAL_SPI_TransmitReceive+0x26c>
 8006794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006796:	2b01      	cmp	r3, #1
 8006798:	d114      	bne.n	80067c4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	330c      	adds	r3, #12
 80067a4:	7812      	ldrb	r2, [r2, #0]
 80067a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ac:	1c5a      	adds	r2, r3, #1
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	3b01      	subs	r3, #1
 80067ba:	b29a      	uxth	r2, r3
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80067c0:	2300      	movs	r3, #0
 80067c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	f003 0301 	and.w	r3, r3, #1
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d119      	bne.n	8006806 <HAL_SPI_TransmitReceive+0x2ae>
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d014      	beq.n	8006806 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68da      	ldr	r2, [r3, #12]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067e6:	b2d2      	uxtb	r2, r2
 80067e8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ee:	1c5a      	adds	r2, r3, #1
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	3b01      	subs	r3, #1
 80067fc:	b29a      	uxth	r2, r3
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006802:	2301      	movs	r3, #1
 8006804:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006806:	f7fb ff5f 	bl	80026c8 <HAL_GetTick>
 800680a:	4602      	mov	r2, r0
 800680c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680e:	1ad3      	subs	r3, r2, r3
 8006810:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006812:	429a      	cmp	r2, r3
 8006814:	d803      	bhi.n	800681e <HAL_SPI_TransmitReceive+0x2c6>
 8006816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800681c:	d102      	bne.n	8006824 <HAL_SPI_TransmitReceive+0x2cc>
 800681e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006820:	2b00      	cmp	r3, #0
 8006822:	d103      	bne.n	800682c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006824:	2303      	movs	r3, #3
 8006826:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800682a:	e029      	b.n	8006880 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006830:	b29b      	uxth	r3, r3
 8006832:	2b00      	cmp	r3, #0
 8006834:	d1a2      	bne.n	800677c <HAL_SPI_TransmitReceive+0x224>
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800683a:	b29b      	uxth	r3, r3
 800683c:	2b00      	cmp	r3, #0
 800683e:	d19d      	bne.n	800677c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006842:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006844:	68f8      	ldr	r0, [r7, #12]
 8006846:	f000 f917 	bl	8006a78 <SPI_EndRxTxTransaction>
 800684a:	4603      	mov	r3, r0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d006      	beq.n	800685e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2220      	movs	r2, #32
 800685a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800685c:	e010      	b.n	8006880 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d10b      	bne.n	800687e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006866:	2300      	movs	r3, #0
 8006868:	617b      	str	r3, [r7, #20]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	617b      	str	r3, [r7, #20]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	617b      	str	r3, [r7, #20]
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	e000      	b.n	8006880 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800687e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2201      	movs	r2, #1
 8006884:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2200      	movs	r2, #0
 800688c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006890:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006894:	4618      	mov	r0, r3
 8006896:	3730      	adds	r7, #48	; 0x30
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b088      	sub	sp, #32
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	60f8      	str	r0, [r7, #12]
 80068a4:	60b9      	str	r1, [r7, #8]
 80068a6:	603b      	str	r3, [r7, #0]
 80068a8:	4613      	mov	r3, r2
 80068aa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80068ac:	f7fb ff0c 	bl	80026c8 <HAL_GetTick>
 80068b0:	4602      	mov	r2, r0
 80068b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068b4:	1a9b      	subs	r3, r3, r2
 80068b6:	683a      	ldr	r2, [r7, #0]
 80068b8:	4413      	add	r3, r2
 80068ba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80068bc:	f7fb ff04 	bl	80026c8 <HAL_GetTick>
 80068c0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80068c2:	4b39      	ldr	r3, [pc, #228]	; (80069a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	015b      	lsls	r3, r3, #5
 80068c8:	0d1b      	lsrs	r3, r3, #20
 80068ca:	69fa      	ldr	r2, [r7, #28]
 80068cc:	fb02 f303 	mul.w	r3, r2, r3
 80068d0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80068d2:	e054      	b.n	800697e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068da:	d050      	beq.n	800697e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80068dc:	f7fb fef4 	bl	80026c8 <HAL_GetTick>
 80068e0:	4602      	mov	r2, r0
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	69fa      	ldr	r2, [r7, #28]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d902      	bls.n	80068f2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d13d      	bne.n	800696e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	685a      	ldr	r2, [r3, #4]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006900:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800690a:	d111      	bne.n	8006930 <SPI_WaitFlagStateUntilTimeout+0x94>
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006914:	d004      	beq.n	8006920 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800691e:	d107      	bne.n	8006930 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800692e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006934:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006938:	d10f      	bne.n	800695a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006948:	601a      	str	r2, [r3, #0]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006958:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2201      	movs	r2, #1
 800695e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2200      	movs	r2, #0
 8006966:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800696a:	2303      	movs	r3, #3
 800696c:	e017      	b.n	800699e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d101      	bne.n	8006978 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006974:	2300      	movs	r3, #0
 8006976:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	3b01      	subs	r3, #1
 800697c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	689a      	ldr	r2, [r3, #8]
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	4013      	ands	r3, r2
 8006988:	68ba      	ldr	r2, [r7, #8]
 800698a:	429a      	cmp	r2, r3
 800698c:	bf0c      	ite	eq
 800698e:	2301      	moveq	r3, #1
 8006990:	2300      	movne	r3, #0
 8006992:	b2db      	uxtb	r3, r3
 8006994:	461a      	mov	r2, r3
 8006996:	79fb      	ldrb	r3, [r7, #7]
 8006998:	429a      	cmp	r2, r3
 800699a:	d19b      	bne.n	80068d4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800699c:	2300      	movs	r3, #0
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3720      	adds	r7, #32
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	20000004 	.word	0x20000004

080069ac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b086      	sub	sp, #24
 80069b0:	af02      	add	r7, sp, #8
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	60b9      	str	r1, [r7, #8]
 80069b6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069c0:	d111      	bne.n	80069e6 <SPI_EndRxTransaction+0x3a>
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069ca:	d004      	beq.n	80069d6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069d4:	d107      	bne.n	80069e6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069e4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069ee:	d12a      	bne.n	8006a46 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069f8:	d012      	beq.n	8006a20 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	9300      	str	r3, [sp, #0]
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	2200      	movs	r2, #0
 8006a02:	2180      	movs	r1, #128	; 0x80
 8006a04:	68f8      	ldr	r0, [r7, #12]
 8006a06:	f7ff ff49 	bl	800689c <SPI_WaitFlagStateUntilTimeout>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d02d      	beq.n	8006a6c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a14:	f043 0220 	orr.w	r2, r3, #32
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	e026      	b.n	8006a6e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	9300      	str	r3, [sp, #0]
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	2200      	movs	r2, #0
 8006a28:	2101      	movs	r1, #1
 8006a2a:	68f8      	ldr	r0, [r7, #12]
 8006a2c:	f7ff ff36 	bl	800689c <SPI_WaitFlagStateUntilTimeout>
 8006a30:	4603      	mov	r3, r0
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d01a      	beq.n	8006a6c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a3a:	f043 0220 	orr.w	r2, r3, #32
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	e013      	b.n	8006a6e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	9300      	str	r3, [sp, #0]
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	2101      	movs	r1, #1
 8006a50:	68f8      	ldr	r0, [r7, #12]
 8006a52:	f7ff ff23 	bl	800689c <SPI_WaitFlagStateUntilTimeout>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d007      	beq.n	8006a6c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a60:	f043 0220 	orr.w	r2, r3, #32
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006a68:	2303      	movs	r3, #3
 8006a6a:	e000      	b.n	8006a6e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3710      	adds	r7, #16
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
	...

08006a78 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b088      	sub	sp, #32
 8006a7c:	af02      	add	r7, sp, #8
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006a84:	4b1b      	ldr	r3, [pc, #108]	; (8006af4 <SPI_EndRxTxTransaction+0x7c>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a1b      	ldr	r2, [pc, #108]	; (8006af8 <SPI_EndRxTxTransaction+0x80>)
 8006a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a8e:	0d5b      	lsrs	r3, r3, #21
 8006a90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a94:	fb02 f303 	mul.w	r3, r2, r3
 8006a98:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006aa2:	d112      	bne.n	8006aca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	9300      	str	r3, [sp, #0]
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	2180      	movs	r1, #128	; 0x80
 8006aae:	68f8      	ldr	r0, [r7, #12]
 8006ab0:	f7ff fef4 	bl	800689c <SPI_WaitFlagStateUntilTimeout>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d016      	beq.n	8006ae8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006abe:	f043 0220 	orr.w	r2, r3, #32
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	e00f      	b.n	8006aea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d00a      	beq.n	8006ae6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	3b01      	subs	r3, #1
 8006ad4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ae0:	2b80      	cmp	r3, #128	; 0x80
 8006ae2:	d0f2      	beq.n	8006aca <SPI_EndRxTxTransaction+0x52>
 8006ae4:	e000      	b.n	8006ae8 <SPI_EndRxTxTransaction+0x70>
        break;
 8006ae6:	bf00      	nop
  }

  return HAL_OK;
 8006ae8:	2300      	movs	r3, #0
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3718      	adds	r7, #24
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	20000004 	.word	0x20000004
 8006af8:	165e9f81 	.word	0x165e9f81

08006afc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b082      	sub	sp, #8
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d101      	bne.n	8006b0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e041      	b.n	8006b92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d106      	bne.n	8006b28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f7fb fade 	bl	80020e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2202      	movs	r2, #2
 8006b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	3304      	adds	r3, #4
 8006b38:	4619      	mov	r1, r3
 8006b3a:	4610      	mov	r0, r2
 8006b3c:	f000 fa96 	bl	800706c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b90:	2300      	movs	r3, #0
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3708      	adds	r7, #8
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
	...

08006b9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	b085      	sub	sp, #20
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	d001      	beq.n	8006bb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e04e      	b.n	8006c52 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2202      	movs	r2, #2
 8006bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	68da      	ldr	r2, [r3, #12]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f042 0201 	orr.w	r2, r2, #1
 8006bca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a23      	ldr	r2, [pc, #140]	; (8006c60 <HAL_TIM_Base_Start_IT+0xc4>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d022      	beq.n	8006c1c <HAL_TIM_Base_Start_IT+0x80>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bde:	d01d      	beq.n	8006c1c <HAL_TIM_Base_Start_IT+0x80>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a1f      	ldr	r2, [pc, #124]	; (8006c64 <HAL_TIM_Base_Start_IT+0xc8>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d018      	beq.n	8006c1c <HAL_TIM_Base_Start_IT+0x80>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a1e      	ldr	r2, [pc, #120]	; (8006c68 <HAL_TIM_Base_Start_IT+0xcc>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d013      	beq.n	8006c1c <HAL_TIM_Base_Start_IT+0x80>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a1c      	ldr	r2, [pc, #112]	; (8006c6c <HAL_TIM_Base_Start_IT+0xd0>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d00e      	beq.n	8006c1c <HAL_TIM_Base_Start_IT+0x80>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a1b      	ldr	r2, [pc, #108]	; (8006c70 <HAL_TIM_Base_Start_IT+0xd4>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d009      	beq.n	8006c1c <HAL_TIM_Base_Start_IT+0x80>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a19      	ldr	r2, [pc, #100]	; (8006c74 <HAL_TIM_Base_Start_IT+0xd8>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d004      	beq.n	8006c1c <HAL_TIM_Base_Start_IT+0x80>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a18      	ldr	r2, [pc, #96]	; (8006c78 <HAL_TIM_Base_Start_IT+0xdc>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d111      	bne.n	8006c40 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	f003 0307 	and.w	r3, r3, #7
 8006c26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2b06      	cmp	r3, #6
 8006c2c:	d010      	beq.n	8006c50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f042 0201 	orr.w	r2, r2, #1
 8006c3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c3e:	e007      	b.n	8006c50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f042 0201 	orr.w	r2, r2, #1
 8006c4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3714      	adds	r7, #20
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	40010000 	.word	0x40010000
 8006c64:	40000400 	.word	0x40000400
 8006c68:	40000800 	.word	0x40000800
 8006c6c:	40000c00 	.word	0x40000c00
 8006c70:	40010400 	.word	0x40010400
 8006c74:	40014000 	.word	0x40014000
 8006c78:	40001800 	.word	0x40001800

08006c7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b082      	sub	sp, #8
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	f003 0302 	and.w	r3, r3, #2
 8006c8e:	2b02      	cmp	r3, #2
 8006c90:	d122      	bne.n	8006cd8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	68db      	ldr	r3, [r3, #12]
 8006c98:	f003 0302 	and.w	r3, r3, #2
 8006c9c:	2b02      	cmp	r3, #2
 8006c9e:	d11b      	bne.n	8006cd8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f06f 0202 	mvn.w	r2, #2
 8006ca8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2201      	movs	r2, #1
 8006cae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	699b      	ldr	r3, [r3, #24]
 8006cb6:	f003 0303 	and.w	r3, r3, #3
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d003      	beq.n	8006cc6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 f9b5 	bl	800702e <HAL_TIM_IC_CaptureCallback>
 8006cc4:	e005      	b.n	8006cd2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 f9a7 	bl	800701a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f000 f9b8 	bl	8007042 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	691b      	ldr	r3, [r3, #16]
 8006cde:	f003 0304 	and.w	r3, r3, #4
 8006ce2:	2b04      	cmp	r3, #4
 8006ce4:	d122      	bne.n	8006d2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	f003 0304 	and.w	r3, r3, #4
 8006cf0:	2b04      	cmp	r3, #4
 8006cf2:	d11b      	bne.n	8006d2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f06f 0204 	mvn.w	r2, #4
 8006cfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2202      	movs	r2, #2
 8006d02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	699b      	ldr	r3, [r3, #24]
 8006d0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d003      	beq.n	8006d1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 f98b 	bl	800702e <HAL_TIM_IC_CaptureCallback>
 8006d18:	e005      	b.n	8006d26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 f97d 	bl	800701a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 f98e 	bl	8007042 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	691b      	ldr	r3, [r3, #16]
 8006d32:	f003 0308 	and.w	r3, r3, #8
 8006d36:	2b08      	cmp	r3, #8
 8006d38:	d122      	bne.n	8006d80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	f003 0308 	and.w	r3, r3, #8
 8006d44:	2b08      	cmp	r3, #8
 8006d46:	d11b      	bne.n	8006d80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f06f 0208 	mvn.w	r2, #8
 8006d50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2204      	movs	r2, #4
 8006d56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	69db      	ldr	r3, [r3, #28]
 8006d5e:	f003 0303 	and.w	r3, r3, #3
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d003      	beq.n	8006d6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 f961 	bl	800702e <HAL_TIM_IC_CaptureCallback>
 8006d6c:	e005      	b.n	8006d7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f000 f953 	bl	800701a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 f964 	bl	8007042 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	691b      	ldr	r3, [r3, #16]
 8006d86:	f003 0310 	and.w	r3, r3, #16
 8006d8a:	2b10      	cmp	r3, #16
 8006d8c:	d122      	bne.n	8006dd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	f003 0310 	and.w	r3, r3, #16
 8006d98:	2b10      	cmp	r3, #16
 8006d9a:	d11b      	bne.n	8006dd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f06f 0210 	mvn.w	r2, #16
 8006da4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2208      	movs	r2, #8
 8006daa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	69db      	ldr	r3, [r3, #28]
 8006db2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d003      	beq.n	8006dc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 f937 	bl	800702e <HAL_TIM_IC_CaptureCallback>
 8006dc0:	e005      	b.n	8006dce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 f929 	bl	800701a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 f93a 	bl	8007042 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	f003 0301 	and.w	r3, r3, #1
 8006dde:	2b01      	cmp	r3, #1
 8006de0:	d10e      	bne.n	8006e00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	f003 0301 	and.w	r3, r3, #1
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d107      	bne.n	8006e00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f06f 0201 	mvn.w	r2, #1
 8006df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f7fa ffca 	bl	8001d94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e0a:	2b80      	cmp	r3, #128	; 0x80
 8006e0c:	d10e      	bne.n	8006e2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e18:	2b80      	cmp	r3, #128	; 0x80
 8006e1a:	d107      	bne.n	8006e2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006e24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 fae0 	bl	80073ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e36:	2b40      	cmp	r3, #64	; 0x40
 8006e38:	d10e      	bne.n	8006e58 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e44:	2b40      	cmp	r3, #64	; 0x40
 8006e46:	d107      	bne.n	8006e58 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 f8ff 	bl	8007056 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	691b      	ldr	r3, [r3, #16]
 8006e5e:	f003 0320 	and.w	r3, r3, #32
 8006e62:	2b20      	cmp	r3, #32
 8006e64:	d10e      	bne.n	8006e84 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	f003 0320 	and.w	r3, r3, #32
 8006e70:	2b20      	cmp	r3, #32
 8006e72:	d107      	bne.n	8006e84 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f06f 0220 	mvn.w	r2, #32
 8006e7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 faaa 	bl	80073d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e84:	bf00      	nop
 8006e86:	3708      	adds	r7, #8
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e96:	2300      	movs	r3, #0
 8006e98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d101      	bne.n	8006ea8 <HAL_TIM_ConfigClockSource+0x1c>
 8006ea4:	2302      	movs	r3, #2
 8006ea6:	e0b4      	b.n	8007012 <HAL_TIM_ConfigClockSource+0x186>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2202      	movs	r2, #2
 8006eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006ec6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ece:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	68ba      	ldr	r2, [r7, #8]
 8006ed6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ee0:	d03e      	beq.n	8006f60 <HAL_TIM_ConfigClockSource+0xd4>
 8006ee2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ee6:	f200 8087 	bhi.w	8006ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8006eea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eee:	f000 8086 	beq.w	8006ffe <HAL_TIM_ConfigClockSource+0x172>
 8006ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ef6:	d87f      	bhi.n	8006ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8006ef8:	2b70      	cmp	r3, #112	; 0x70
 8006efa:	d01a      	beq.n	8006f32 <HAL_TIM_ConfigClockSource+0xa6>
 8006efc:	2b70      	cmp	r3, #112	; 0x70
 8006efe:	d87b      	bhi.n	8006ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8006f00:	2b60      	cmp	r3, #96	; 0x60
 8006f02:	d050      	beq.n	8006fa6 <HAL_TIM_ConfigClockSource+0x11a>
 8006f04:	2b60      	cmp	r3, #96	; 0x60
 8006f06:	d877      	bhi.n	8006ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8006f08:	2b50      	cmp	r3, #80	; 0x50
 8006f0a:	d03c      	beq.n	8006f86 <HAL_TIM_ConfigClockSource+0xfa>
 8006f0c:	2b50      	cmp	r3, #80	; 0x50
 8006f0e:	d873      	bhi.n	8006ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8006f10:	2b40      	cmp	r3, #64	; 0x40
 8006f12:	d058      	beq.n	8006fc6 <HAL_TIM_ConfigClockSource+0x13a>
 8006f14:	2b40      	cmp	r3, #64	; 0x40
 8006f16:	d86f      	bhi.n	8006ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8006f18:	2b30      	cmp	r3, #48	; 0x30
 8006f1a:	d064      	beq.n	8006fe6 <HAL_TIM_ConfigClockSource+0x15a>
 8006f1c:	2b30      	cmp	r3, #48	; 0x30
 8006f1e:	d86b      	bhi.n	8006ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8006f20:	2b20      	cmp	r3, #32
 8006f22:	d060      	beq.n	8006fe6 <HAL_TIM_ConfigClockSource+0x15a>
 8006f24:	2b20      	cmp	r3, #32
 8006f26:	d867      	bhi.n	8006ff8 <HAL_TIM_ConfigClockSource+0x16c>
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d05c      	beq.n	8006fe6 <HAL_TIM_ConfigClockSource+0x15a>
 8006f2c:	2b10      	cmp	r3, #16
 8006f2e:	d05a      	beq.n	8006fe6 <HAL_TIM_ConfigClockSource+0x15a>
 8006f30:	e062      	b.n	8006ff8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6818      	ldr	r0, [r3, #0]
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	6899      	ldr	r1, [r3, #8]
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	685a      	ldr	r2, [r3, #4]
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	f000 f9ad 	bl	80072a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f54:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68ba      	ldr	r2, [r7, #8]
 8006f5c:	609a      	str	r2, [r3, #8]
      break;
 8006f5e:	e04f      	b.n	8007000 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6818      	ldr	r0, [r3, #0]
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	6899      	ldr	r1, [r3, #8]
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	685a      	ldr	r2, [r3, #4]
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	f000 f996 	bl	80072a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	689a      	ldr	r2, [r3, #8]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f82:	609a      	str	r2, [r3, #8]
      break;
 8006f84:	e03c      	b.n	8007000 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6818      	ldr	r0, [r3, #0]
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	6859      	ldr	r1, [r3, #4]
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	461a      	mov	r2, r3
 8006f94:	f000 f90a 	bl	80071ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	2150      	movs	r1, #80	; 0x50
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f000 f963 	bl	800726a <TIM_ITRx_SetConfig>
      break;
 8006fa4:	e02c      	b.n	8007000 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6818      	ldr	r0, [r3, #0]
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	6859      	ldr	r1, [r3, #4]
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	461a      	mov	r2, r3
 8006fb4:	f000 f929 	bl	800720a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	2160      	movs	r1, #96	; 0x60
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f000 f953 	bl	800726a <TIM_ITRx_SetConfig>
      break;
 8006fc4:	e01c      	b.n	8007000 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6818      	ldr	r0, [r3, #0]
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	6859      	ldr	r1, [r3, #4]
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	f000 f8ea 	bl	80071ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	2140      	movs	r1, #64	; 0x40
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f000 f943 	bl	800726a <TIM_ITRx_SetConfig>
      break;
 8006fe4:	e00c      	b.n	8007000 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681a      	ldr	r2, [r3, #0]
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4619      	mov	r1, r3
 8006ff0:	4610      	mov	r0, r2
 8006ff2:	f000 f93a 	bl	800726a <TIM_ITRx_SetConfig>
      break;
 8006ff6:	e003      	b.n	8007000 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	73fb      	strb	r3, [r7, #15]
      break;
 8006ffc:	e000      	b.n	8007000 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006ffe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2201      	movs	r2, #1
 8007004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2200      	movs	r2, #0
 800700c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007010:	7bfb      	ldrb	r3, [r7, #15]
}
 8007012:	4618      	mov	r0, r3
 8007014:	3710      	adds	r7, #16
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}

0800701a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800701a:	b480      	push	{r7}
 800701c:	b083      	sub	sp, #12
 800701e:	af00      	add	r7, sp, #0
 8007020:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007022:	bf00      	nop
 8007024:	370c      	adds	r7, #12
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr

0800702e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800702e:	b480      	push	{r7}
 8007030:	b083      	sub	sp, #12
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007036:	bf00      	nop
 8007038:	370c      	adds	r7, #12
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr

08007042 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007042:	b480      	push	{r7}
 8007044:	b083      	sub	sp, #12
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800704a:	bf00      	nop
 800704c:	370c      	adds	r7, #12
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr

08007056 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007056:	b480      	push	{r7}
 8007058:	b083      	sub	sp, #12
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800705e:	bf00      	nop
 8007060:	370c      	adds	r7, #12
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr
	...

0800706c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800706c:	b480      	push	{r7}
 800706e:	b085      	sub	sp, #20
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	4a40      	ldr	r2, [pc, #256]	; (8007180 <TIM_Base_SetConfig+0x114>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d013      	beq.n	80070ac <TIM_Base_SetConfig+0x40>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800708a:	d00f      	beq.n	80070ac <TIM_Base_SetConfig+0x40>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	4a3d      	ldr	r2, [pc, #244]	; (8007184 <TIM_Base_SetConfig+0x118>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d00b      	beq.n	80070ac <TIM_Base_SetConfig+0x40>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	4a3c      	ldr	r2, [pc, #240]	; (8007188 <TIM_Base_SetConfig+0x11c>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d007      	beq.n	80070ac <TIM_Base_SetConfig+0x40>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	4a3b      	ldr	r2, [pc, #236]	; (800718c <TIM_Base_SetConfig+0x120>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d003      	beq.n	80070ac <TIM_Base_SetConfig+0x40>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	4a3a      	ldr	r2, [pc, #232]	; (8007190 <TIM_Base_SetConfig+0x124>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d108      	bne.n	80070be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	68fa      	ldr	r2, [r7, #12]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	4a2f      	ldr	r2, [pc, #188]	; (8007180 <TIM_Base_SetConfig+0x114>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d02b      	beq.n	800711e <TIM_Base_SetConfig+0xb2>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070cc:	d027      	beq.n	800711e <TIM_Base_SetConfig+0xb2>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4a2c      	ldr	r2, [pc, #176]	; (8007184 <TIM_Base_SetConfig+0x118>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d023      	beq.n	800711e <TIM_Base_SetConfig+0xb2>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	4a2b      	ldr	r2, [pc, #172]	; (8007188 <TIM_Base_SetConfig+0x11c>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d01f      	beq.n	800711e <TIM_Base_SetConfig+0xb2>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4a2a      	ldr	r2, [pc, #168]	; (800718c <TIM_Base_SetConfig+0x120>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d01b      	beq.n	800711e <TIM_Base_SetConfig+0xb2>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4a29      	ldr	r2, [pc, #164]	; (8007190 <TIM_Base_SetConfig+0x124>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d017      	beq.n	800711e <TIM_Base_SetConfig+0xb2>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4a28      	ldr	r2, [pc, #160]	; (8007194 <TIM_Base_SetConfig+0x128>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d013      	beq.n	800711e <TIM_Base_SetConfig+0xb2>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a27      	ldr	r2, [pc, #156]	; (8007198 <TIM_Base_SetConfig+0x12c>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d00f      	beq.n	800711e <TIM_Base_SetConfig+0xb2>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4a26      	ldr	r2, [pc, #152]	; (800719c <TIM_Base_SetConfig+0x130>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d00b      	beq.n	800711e <TIM_Base_SetConfig+0xb2>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4a25      	ldr	r2, [pc, #148]	; (80071a0 <TIM_Base_SetConfig+0x134>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d007      	beq.n	800711e <TIM_Base_SetConfig+0xb2>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4a24      	ldr	r2, [pc, #144]	; (80071a4 <TIM_Base_SetConfig+0x138>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d003      	beq.n	800711e <TIM_Base_SetConfig+0xb2>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	4a23      	ldr	r2, [pc, #140]	; (80071a8 <TIM_Base_SetConfig+0x13c>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d108      	bne.n	8007130 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007124:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	68db      	ldr	r3, [r3, #12]
 800712a:	68fa      	ldr	r2, [r7, #12]
 800712c:	4313      	orrs	r3, r2
 800712e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	695b      	ldr	r3, [r3, #20]
 800713a:	4313      	orrs	r3, r2
 800713c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	68fa      	ldr	r2, [r7, #12]
 8007142:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	689a      	ldr	r2, [r3, #8]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4a0a      	ldr	r2, [pc, #40]	; (8007180 <TIM_Base_SetConfig+0x114>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d003      	beq.n	8007164 <TIM_Base_SetConfig+0xf8>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	4a0c      	ldr	r2, [pc, #48]	; (8007190 <TIM_Base_SetConfig+0x124>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d103      	bne.n	800716c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	691a      	ldr	r2, [r3, #16]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	615a      	str	r2, [r3, #20]
}
 8007172:	bf00      	nop
 8007174:	3714      	adds	r7, #20
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop
 8007180:	40010000 	.word	0x40010000
 8007184:	40000400 	.word	0x40000400
 8007188:	40000800 	.word	0x40000800
 800718c:	40000c00 	.word	0x40000c00
 8007190:	40010400 	.word	0x40010400
 8007194:	40014000 	.word	0x40014000
 8007198:	40014400 	.word	0x40014400
 800719c:	40014800 	.word	0x40014800
 80071a0:	40001800 	.word	0x40001800
 80071a4:	40001c00 	.word	0x40001c00
 80071a8:	40002000 	.word	0x40002000

080071ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b087      	sub	sp, #28
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6a1b      	ldr	r3, [r3, #32]
 80071bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	6a1b      	ldr	r3, [r3, #32]
 80071c2:	f023 0201 	bic.w	r2, r3, #1
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	699b      	ldr	r3, [r3, #24]
 80071ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	011b      	lsls	r3, r3, #4
 80071dc:	693a      	ldr	r2, [r7, #16]
 80071de:	4313      	orrs	r3, r2
 80071e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	f023 030a 	bic.w	r3, r3, #10
 80071e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80071ea:	697a      	ldr	r2, [r7, #20]
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	4313      	orrs	r3, r2
 80071f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	693a      	ldr	r2, [r7, #16]
 80071f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	697a      	ldr	r2, [r7, #20]
 80071fc:	621a      	str	r2, [r3, #32]
}
 80071fe:	bf00      	nop
 8007200:	371c      	adds	r7, #28
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr

0800720a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800720a:	b480      	push	{r7}
 800720c:	b087      	sub	sp, #28
 800720e:	af00      	add	r7, sp, #0
 8007210:	60f8      	str	r0, [r7, #12]
 8007212:	60b9      	str	r1, [r7, #8]
 8007214:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	6a1b      	ldr	r3, [r3, #32]
 800721a:	f023 0210 	bic.w	r2, r3, #16
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	699b      	ldr	r3, [r3, #24]
 8007226:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	6a1b      	ldr	r3, [r3, #32]
 800722c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007234:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	031b      	lsls	r3, r3, #12
 800723a:	697a      	ldr	r2, [r7, #20]
 800723c:	4313      	orrs	r3, r2
 800723e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007246:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	011b      	lsls	r3, r3, #4
 800724c:	693a      	ldr	r2, [r7, #16]
 800724e:	4313      	orrs	r3, r2
 8007250:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	697a      	ldr	r2, [r7, #20]
 8007256:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	693a      	ldr	r2, [r7, #16]
 800725c:	621a      	str	r2, [r3, #32]
}
 800725e:	bf00      	nop
 8007260:	371c      	adds	r7, #28
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr

0800726a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800726a:	b480      	push	{r7}
 800726c:	b085      	sub	sp, #20
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
 8007272:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007280:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007282:	683a      	ldr	r2, [r7, #0]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	4313      	orrs	r3, r2
 8007288:	f043 0307 	orr.w	r3, r3, #7
 800728c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	68fa      	ldr	r2, [r7, #12]
 8007292:	609a      	str	r2, [r3, #8]
}
 8007294:	bf00      	nop
 8007296:	3714      	adds	r7, #20
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr

080072a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b087      	sub	sp, #28
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	607a      	str	r2, [r7, #4]
 80072ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	021a      	lsls	r2, r3, #8
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	431a      	orrs	r2, r3
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	4313      	orrs	r3, r2
 80072c8:	697a      	ldr	r2, [r7, #20]
 80072ca:	4313      	orrs	r3, r2
 80072cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	697a      	ldr	r2, [r7, #20]
 80072d2:	609a      	str	r2, [r3, #8]
}
 80072d4:	bf00      	nop
 80072d6:	371c      	adds	r7, #28
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b085      	sub	sp, #20
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d101      	bne.n	80072f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072f4:	2302      	movs	r3, #2
 80072f6:	e05a      	b.n	80073ae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2202      	movs	r2, #2
 8007304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800731e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	4313      	orrs	r3, r2
 8007328:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	68fa      	ldr	r2, [r7, #12]
 8007330:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4a21      	ldr	r2, [pc, #132]	; (80073bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d022      	beq.n	8007382 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007344:	d01d      	beq.n	8007382 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a1d      	ldr	r2, [pc, #116]	; (80073c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d018      	beq.n	8007382 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a1b      	ldr	r2, [pc, #108]	; (80073c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d013      	beq.n	8007382 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a1a      	ldr	r2, [pc, #104]	; (80073c8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d00e      	beq.n	8007382 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a18      	ldr	r2, [pc, #96]	; (80073cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d009      	beq.n	8007382 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a17      	ldr	r2, [pc, #92]	; (80073d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d004      	beq.n	8007382 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a15      	ldr	r2, [pc, #84]	; (80073d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d10c      	bne.n	800739c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007388:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	68ba      	ldr	r2, [r7, #8]
 8007390:	4313      	orrs	r3, r2
 8007392:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	68ba      	ldr	r2, [r7, #8]
 800739a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2201      	movs	r2, #1
 80073a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073ac:	2300      	movs	r3, #0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3714      	adds	r7, #20
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop
 80073bc:	40010000 	.word	0x40010000
 80073c0:	40000400 	.word	0x40000400
 80073c4:	40000800 	.word	0x40000800
 80073c8:	40000c00 	.word	0x40000c00
 80073cc:	40010400 	.word	0x40010400
 80073d0:	40014000 	.word	0x40014000
 80073d4:	40001800 	.word	0x40001800

080073d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80073d8:	b480      	push	{r7}
 80073da:	b083      	sub	sp, #12
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80073e0:	bf00      	nop
 80073e2:	370c      	adds	r7, #12
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr

080073ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80073f4:	bf00      	nop
 80073f6:	370c      	adds	r7, #12
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b082      	sub	sp, #8
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d101      	bne.n	8007412 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	e03f      	b.n	8007492 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007418:	b2db      	uxtb	r3, r3
 800741a:	2b00      	cmp	r3, #0
 800741c:	d106      	bne.n	800742c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f7fa fe82 	bl	8002130 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2224      	movs	r2, #36	; 0x24
 8007430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	68da      	ldr	r2, [r3, #12]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007442:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 ff43 	bl	80082d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	691a      	ldr	r2, [r3, #16]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007458:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	695a      	ldr	r2, [r3, #20]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007468:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	68da      	ldr	r2, [r3, #12]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007478:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2220      	movs	r2, #32
 8007484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2220      	movs	r2, #32
 800748c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007490:	2300      	movs	r3, #0
}
 8007492:	4618      	mov	r0, r3
 8007494:	3708      	adds	r7, #8
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}
	...

0800749c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b08c      	sub	sp, #48	; 0x30
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	4613      	mov	r3, r2
 80074a8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	2b20      	cmp	r3, #32
 80074b4:	d165      	bne.n	8007582 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d002      	beq.n	80074c2 <HAL_UART_Transmit_DMA+0x26>
 80074bc:	88fb      	ldrh	r3, [r7, #6]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d101      	bne.n	80074c6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	e05e      	b.n	8007584 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d101      	bne.n	80074d4 <HAL_UART_Transmit_DMA+0x38>
 80074d0:	2302      	movs	r3, #2
 80074d2:	e057      	b.n	8007584 <HAL_UART_Transmit_DMA+0xe8>
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80074dc:	68ba      	ldr	r2, [r7, #8]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	88fa      	ldrh	r2, [r7, #6]
 80074e6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	88fa      	ldrh	r2, [r7, #6]
 80074ec:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2200      	movs	r2, #0
 80074f2:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2221      	movs	r2, #33	; 0x21
 80074f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007500:	4a22      	ldr	r2, [pc, #136]	; (800758c <HAL_UART_Transmit_DMA+0xf0>)
 8007502:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007508:	4a21      	ldr	r2, [pc, #132]	; (8007590 <HAL_UART_Transmit_DMA+0xf4>)
 800750a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007510:	4a20      	ldr	r2, [pc, #128]	; (8007594 <HAL_UART_Transmit_DMA+0xf8>)
 8007512:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007518:	2200      	movs	r2, #0
 800751a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800751c:	f107 0308 	add.w	r3, r7, #8
 8007520:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007528:	6819      	ldr	r1, [r3, #0]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	3304      	adds	r3, #4
 8007530:	461a      	mov	r2, r3
 8007532:	88fb      	ldrh	r3, [r7, #6]
 8007534:	f7fb fe90 	bl	8003258 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007540:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2200      	movs	r2, #0
 8007546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	3314      	adds	r3, #20
 8007550:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	e853 3f00 	ldrex	r3, [r3]
 8007558:	617b      	str	r3, [r7, #20]
   return(result);
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007560:	62bb      	str	r3, [r7, #40]	; 0x28
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	3314      	adds	r3, #20
 8007568:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800756a:	627a      	str	r2, [r7, #36]	; 0x24
 800756c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800756e:	6a39      	ldr	r1, [r7, #32]
 8007570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007572:	e841 2300 	strex	r3, r2, [r1]
 8007576:	61fb      	str	r3, [r7, #28]
   return(result);
 8007578:	69fb      	ldr	r3, [r7, #28]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d1e5      	bne.n	800754a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800757e:	2300      	movs	r3, #0
 8007580:	e000      	b.n	8007584 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8007582:	2302      	movs	r3, #2
  }
}
 8007584:	4618      	mov	r0, r3
 8007586:	3730      	adds	r7, #48	; 0x30
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}
 800758c:	08007b69 	.word	0x08007b69
 8007590:	08007c03 	.word	0x08007c03
 8007594:	08007d7b 	.word	0x08007d7b

08007598 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	4613      	mov	r3, r2
 80075a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	2b20      	cmp	r3, #32
 80075b0:	d11d      	bne.n	80075ee <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d002      	beq.n	80075be <HAL_UART_Receive_DMA+0x26>
 80075b8:	88fb      	ldrh	r3, [r7, #6]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d101      	bne.n	80075c2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80075be:	2301      	movs	r3, #1
 80075c0:	e016      	b.n	80075f0 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d101      	bne.n	80075d0 <HAL_UART_Receive_DMA+0x38>
 80075cc:	2302      	movs	r3, #2
 80075ce:	e00f      	b.n	80075f0 <HAL_UART_Receive_DMA+0x58>
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2201      	movs	r2, #1
 80075d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	2200      	movs	r2, #0
 80075dc:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80075de:	88fb      	ldrh	r3, [r7, #6]
 80075e0:	461a      	mov	r2, r3
 80075e2:	68b9      	ldr	r1, [r7, #8]
 80075e4:	68f8      	ldr	r0, [r7, #12]
 80075e6:	f000 fc13 	bl	8007e10 <UART_Start_Receive_DMA>
 80075ea:	4603      	mov	r3, r0
 80075ec:	e000      	b.n	80075f0 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80075ee:	2302      	movs	r3, #2
  }
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3710      	adds	r7, #16
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b0ba      	sub	sp, #232	; 0xe8
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	695b      	ldr	r3, [r3, #20]
 800761a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800761e:	2300      	movs	r3, #0
 8007620:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007624:	2300      	movs	r3, #0
 8007626:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800762a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800762e:	f003 030f 	and.w	r3, r3, #15
 8007632:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007636:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800763a:	2b00      	cmp	r3, #0
 800763c:	d10f      	bne.n	800765e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800763e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007642:	f003 0320 	and.w	r3, r3, #32
 8007646:	2b00      	cmp	r3, #0
 8007648:	d009      	beq.n	800765e <HAL_UART_IRQHandler+0x66>
 800764a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800764e:	f003 0320 	and.w	r3, r3, #32
 8007652:	2b00      	cmp	r3, #0
 8007654:	d003      	beq.n	800765e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 fd7f 	bl	800815a <UART_Receive_IT>
      return;
 800765c:	e256      	b.n	8007b0c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800765e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007662:	2b00      	cmp	r3, #0
 8007664:	f000 80de 	beq.w	8007824 <HAL_UART_IRQHandler+0x22c>
 8007668:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800766c:	f003 0301 	and.w	r3, r3, #1
 8007670:	2b00      	cmp	r3, #0
 8007672:	d106      	bne.n	8007682 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007678:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800767c:	2b00      	cmp	r3, #0
 800767e:	f000 80d1 	beq.w	8007824 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007686:	f003 0301 	and.w	r3, r3, #1
 800768a:	2b00      	cmp	r3, #0
 800768c:	d00b      	beq.n	80076a6 <HAL_UART_IRQHandler+0xae>
 800768e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007696:	2b00      	cmp	r3, #0
 8007698:	d005      	beq.n	80076a6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800769e:	f043 0201 	orr.w	r2, r3, #1
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80076a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076aa:	f003 0304 	and.w	r3, r3, #4
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d00b      	beq.n	80076ca <HAL_UART_IRQHandler+0xd2>
 80076b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076b6:	f003 0301 	and.w	r3, r3, #1
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d005      	beq.n	80076ca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076c2:	f043 0202 	orr.w	r2, r3, #2
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80076ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076ce:	f003 0302 	and.w	r3, r3, #2
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d00b      	beq.n	80076ee <HAL_UART_IRQHandler+0xf6>
 80076d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076da:	f003 0301 	and.w	r3, r3, #1
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d005      	beq.n	80076ee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e6:	f043 0204 	orr.w	r2, r3, #4
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80076ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076f2:	f003 0308 	and.w	r3, r3, #8
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d011      	beq.n	800771e <HAL_UART_IRQHandler+0x126>
 80076fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076fe:	f003 0320 	and.w	r3, r3, #32
 8007702:	2b00      	cmp	r3, #0
 8007704:	d105      	bne.n	8007712 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007706:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800770a:	f003 0301 	and.w	r3, r3, #1
 800770e:	2b00      	cmp	r3, #0
 8007710:	d005      	beq.n	800771e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007716:	f043 0208 	orr.w	r2, r3, #8
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007722:	2b00      	cmp	r3, #0
 8007724:	f000 81ed 	beq.w	8007b02 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800772c:	f003 0320 	and.w	r3, r3, #32
 8007730:	2b00      	cmp	r3, #0
 8007732:	d008      	beq.n	8007746 <HAL_UART_IRQHandler+0x14e>
 8007734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007738:	f003 0320 	and.w	r3, r3, #32
 800773c:	2b00      	cmp	r3, #0
 800773e:	d002      	beq.n	8007746 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 fd0a 	bl	800815a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	695b      	ldr	r3, [r3, #20]
 800774c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007750:	2b40      	cmp	r3, #64	; 0x40
 8007752:	bf0c      	ite	eq
 8007754:	2301      	moveq	r3, #1
 8007756:	2300      	movne	r3, #0
 8007758:	b2db      	uxtb	r3, r3
 800775a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007762:	f003 0308 	and.w	r3, r3, #8
 8007766:	2b00      	cmp	r3, #0
 8007768:	d103      	bne.n	8007772 <HAL_UART_IRQHandler+0x17a>
 800776a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800776e:	2b00      	cmp	r3, #0
 8007770:	d04f      	beq.n	8007812 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f000 fc12 	bl	8007f9c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	695b      	ldr	r3, [r3, #20]
 800777e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007782:	2b40      	cmp	r3, #64	; 0x40
 8007784:	d141      	bne.n	800780a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	3314      	adds	r3, #20
 800778c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007790:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007794:	e853 3f00 	ldrex	r3, [r3]
 8007798:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800779c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80077a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	3314      	adds	r3, #20
 80077ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80077b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80077b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80077be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80077c2:	e841 2300 	strex	r3, r2, [r1]
 80077c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80077ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d1d9      	bne.n	8007786 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d013      	beq.n	8007802 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077de:	4a7d      	ldr	r2, [pc, #500]	; (80079d4 <HAL_UART_IRQHandler+0x3dc>)
 80077e0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e6:	4618      	mov	r0, r3
 80077e8:	f7fb fdfe 	bl	80033e8 <HAL_DMA_Abort_IT>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d016      	beq.n	8007820 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077f8:	687a      	ldr	r2, [r7, #4]
 80077fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80077fc:	4610      	mov	r0, r2
 80077fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007800:	e00e      	b.n	8007820 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 f99a 	bl	8007b3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007808:	e00a      	b.n	8007820 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 f996 	bl	8007b3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007810:	e006      	b.n	8007820 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007812:	6878      	ldr	r0, [r7, #4]
 8007814:	f000 f992 	bl	8007b3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2200      	movs	r2, #0
 800781c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800781e:	e170      	b.n	8007b02 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007820:	bf00      	nop
    return;
 8007822:	e16e      	b.n	8007b02 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007828:	2b01      	cmp	r3, #1
 800782a:	f040 814a 	bne.w	8007ac2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800782e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007832:	f003 0310 	and.w	r3, r3, #16
 8007836:	2b00      	cmp	r3, #0
 8007838:	f000 8143 	beq.w	8007ac2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800783c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007840:	f003 0310 	and.w	r3, r3, #16
 8007844:	2b00      	cmp	r3, #0
 8007846:	f000 813c 	beq.w	8007ac2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800784a:	2300      	movs	r3, #0
 800784c:	60bb      	str	r3, [r7, #8]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	60bb      	str	r3, [r7, #8]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	685b      	ldr	r3, [r3, #4]
 800785c:	60bb      	str	r3, [r7, #8]
 800785e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	695b      	ldr	r3, [r3, #20]
 8007866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800786a:	2b40      	cmp	r3, #64	; 0x40
 800786c:	f040 80b4 	bne.w	80079d8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800787c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007880:	2b00      	cmp	r3, #0
 8007882:	f000 8140 	beq.w	8007b06 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800788a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800788e:	429a      	cmp	r2, r3
 8007890:	f080 8139 	bcs.w	8007b06 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800789a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a0:	69db      	ldr	r3, [r3, #28]
 80078a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078a6:	f000 8088 	beq.w	80079ba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	330c      	adds	r3, #12
 80078b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80078b8:	e853 3f00 	ldrex	r3, [r3]
 80078bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80078c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80078c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	330c      	adds	r3, #12
 80078d2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80078d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80078da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078de:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80078e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80078e6:	e841 2300 	strex	r3, r2, [r1]
 80078ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80078ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d1d9      	bne.n	80078aa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	3314      	adds	r3, #20
 80078fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007900:	e853 3f00 	ldrex	r3, [r3]
 8007904:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007906:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007908:	f023 0301 	bic.w	r3, r3, #1
 800790c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	3314      	adds	r3, #20
 8007916:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800791a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800791e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007920:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007922:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007926:	e841 2300 	strex	r3, r2, [r1]
 800792a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800792c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800792e:	2b00      	cmp	r3, #0
 8007930:	d1e1      	bne.n	80078f6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	3314      	adds	r3, #20
 8007938:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800793c:	e853 3f00 	ldrex	r3, [r3]
 8007940:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007942:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007944:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007948:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	3314      	adds	r3, #20
 8007952:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007956:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007958:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800795a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800795c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800795e:	e841 2300 	strex	r3, r2, [r1]
 8007962:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007964:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007966:	2b00      	cmp	r3, #0
 8007968:	d1e3      	bne.n	8007932 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2220      	movs	r2, #32
 800796e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	330c      	adds	r3, #12
 800797e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007982:	e853 3f00 	ldrex	r3, [r3]
 8007986:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007988:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800798a:	f023 0310 	bic.w	r3, r3, #16
 800798e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	330c      	adds	r3, #12
 8007998:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800799c:	65ba      	str	r2, [r7, #88]	; 0x58
 800799e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80079a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80079a4:	e841 2300 	strex	r3, r2, [r1]
 80079a8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80079aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d1e3      	bne.n	8007978 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079b4:	4618      	mov	r0, r3
 80079b6:	f7fb fca7 	bl	8003308 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	1ad3      	subs	r3, r2, r3
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	4619      	mov	r1, r3
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 f8c0 	bl	8007b50 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80079d0:	e099      	b.n	8007b06 <HAL_UART_IRQHandler+0x50e>
 80079d2:	bf00      	nop
 80079d4:	08008063 	.word	0x08008063
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	1ad3      	subs	r3, r2, r3
 80079e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	f000 808b 	beq.w	8007b0a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80079f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	f000 8086 	beq.w	8007b0a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	330c      	adds	r3, #12
 8007a04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a08:	e853 3f00 	ldrex	r3, [r3]
 8007a0c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	330c      	adds	r3, #12
 8007a1e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007a22:	647a      	str	r2, [r7, #68]	; 0x44
 8007a24:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a2a:	e841 2300 	strex	r3, r2, [r1]
 8007a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d1e3      	bne.n	80079fe <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	3314      	adds	r3, #20
 8007a3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a40:	e853 3f00 	ldrex	r3, [r3]
 8007a44:	623b      	str	r3, [r7, #32]
   return(result);
 8007a46:	6a3b      	ldr	r3, [r7, #32]
 8007a48:	f023 0301 	bic.w	r3, r3, #1
 8007a4c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	3314      	adds	r3, #20
 8007a56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007a5a:	633a      	str	r2, [r7, #48]	; 0x30
 8007a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a62:	e841 2300 	strex	r3, r2, [r1]
 8007a66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d1e3      	bne.n	8007a36 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2220      	movs	r2, #32
 8007a72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	330c      	adds	r3, #12
 8007a82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	e853 3f00 	ldrex	r3, [r3]
 8007a8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f023 0310 	bic.w	r3, r3, #16
 8007a92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	330c      	adds	r3, #12
 8007a9c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007aa0:	61fa      	str	r2, [r7, #28]
 8007aa2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa4:	69b9      	ldr	r1, [r7, #24]
 8007aa6:	69fa      	ldr	r2, [r7, #28]
 8007aa8:	e841 2300 	strex	r3, r2, [r1]
 8007aac:	617b      	str	r3, [r7, #20]
   return(result);
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d1e3      	bne.n	8007a7c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ab4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ab8:	4619      	mov	r1, r3
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f000 f848 	bl	8007b50 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007ac0:	e023      	b.n	8007b0a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d009      	beq.n	8007ae2 <HAL_UART_IRQHandler+0x4ea>
 8007ace:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d003      	beq.n	8007ae2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 fad5 	bl	800808a <UART_Transmit_IT>
    return;
 8007ae0:	e014      	b.n	8007b0c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d00e      	beq.n	8007b0c <HAL_UART_IRQHandler+0x514>
 8007aee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d008      	beq.n	8007b0c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 fb15 	bl	800812a <UART_EndTransmit_IT>
    return;
 8007b00:	e004      	b.n	8007b0c <HAL_UART_IRQHandler+0x514>
    return;
 8007b02:	bf00      	nop
 8007b04:	e002      	b.n	8007b0c <HAL_UART_IRQHandler+0x514>
      return;
 8007b06:	bf00      	nop
 8007b08:	e000      	b.n	8007b0c <HAL_UART_IRQHandler+0x514>
      return;
 8007b0a:	bf00      	nop
  }
}
 8007b0c:	37e8      	adds	r7, #232	; 0xe8
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop

08007b14 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007b1c:	bf00      	nop
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b083      	sub	sp, #12
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007b30:	bf00      	nop
 8007b32:	370c      	adds	r7, #12
 8007b34:	46bd      	mov	sp, r7
 8007b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3a:	4770      	bx	lr

08007b3c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b083      	sub	sp, #12
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007b44:	bf00      	nop
 8007b46:	370c      	adds	r7, #12
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b083      	sub	sp, #12
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	460b      	mov	r3, r1
 8007b5a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007b5c:	bf00      	nop
 8007b5e:	370c      	adds	r7, #12
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b090      	sub	sp, #64	; 0x40
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b74:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d137      	bne.n	8007bf4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b86:	2200      	movs	r2, #0
 8007b88:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007b8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	3314      	adds	r3, #20
 8007b90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b94:	e853 3f00 	ldrex	r3, [r3]
 8007b98:	623b      	str	r3, [r7, #32]
   return(result);
 8007b9a:	6a3b      	ldr	r3, [r7, #32]
 8007b9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ba0:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	3314      	adds	r3, #20
 8007ba8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007baa:	633a      	str	r2, [r7, #48]	; 0x30
 8007bac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007bb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007bb2:	e841 2300 	strex	r3, r2, [r1]
 8007bb6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d1e5      	bne.n	8007b8a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	330c      	adds	r3, #12
 8007bc4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	e853 3f00 	ldrex	r3, [r3]
 8007bcc:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bd4:	637b      	str	r3, [r7, #52]	; 0x34
 8007bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	330c      	adds	r3, #12
 8007bdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007bde:	61fa      	str	r2, [r7, #28]
 8007be0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be2:	69b9      	ldr	r1, [r7, #24]
 8007be4:	69fa      	ldr	r2, [r7, #28]
 8007be6:	e841 2300 	strex	r3, r2, [r1]
 8007bea:	617b      	str	r3, [r7, #20]
   return(result);
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d1e5      	bne.n	8007bbe <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007bf2:	e002      	b.n	8007bfa <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007bf4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007bf6:	f7f9 f975 	bl	8000ee4 <HAL_UART_TxCpltCallback>
}
 8007bfa:	bf00      	nop
 8007bfc:	3740      	adds	r7, #64	; 0x40
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}

08007c02 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007c02:	b580      	push	{r7, lr}
 8007c04:	b084      	sub	sp, #16
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c0e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007c10:	68f8      	ldr	r0, [r7, #12]
 8007c12:	f7ff ff7f 	bl	8007b14 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c16:	bf00      	nop
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b09c      	sub	sp, #112	; 0x70
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c2a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d172      	bne.n	8007d20 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007c3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	330c      	adds	r3, #12
 8007c46:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c4a:	e853 3f00 	ldrex	r3, [r3]
 8007c4e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007c50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c56:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	330c      	adds	r3, #12
 8007c5e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007c60:	65ba      	str	r2, [r7, #88]	; 0x58
 8007c62:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c64:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007c66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007c68:	e841 2300 	strex	r3, r2, [r1]
 8007c6c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007c6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d1e5      	bne.n	8007c40 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	3314      	adds	r3, #20
 8007c7a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c7e:	e853 3f00 	ldrex	r3, [r3]
 8007c82:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c86:	f023 0301 	bic.w	r3, r3, #1
 8007c8a:	667b      	str	r3, [r7, #100]	; 0x64
 8007c8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	3314      	adds	r3, #20
 8007c92:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007c94:	647a      	str	r2, [r7, #68]	; 0x44
 8007c96:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c98:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c9c:	e841 2300 	strex	r3, r2, [r1]
 8007ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d1e5      	bne.n	8007c74 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	3314      	adds	r3, #20
 8007cae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb2:	e853 3f00 	ldrex	r3, [r3]
 8007cb6:	623b      	str	r3, [r7, #32]
   return(result);
 8007cb8:	6a3b      	ldr	r3, [r7, #32]
 8007cba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cbe:	663b      	str	r3, [r7, #96]	; 0x60
 8007cc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	3314      	adds	r3, #20
 8007cc6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007cc8:	633a      	str	r2, [r7, #48]	; 0x30
 8007cca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ccc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007cce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cd0:	e841 2300 	strex	r3, r2, [r1]
 8007cd4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d1e5      	bne.n	8007ca8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007cdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cde:	2220      	movs	r2, #32
 8007ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d119      	bne.n	8007d20 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	330c      	adds	r3, #12
 8007cf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	e853 3f00 	ldrex	r3, [r3]
 8007cfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f023 0310 	bic.w	r3, r3, #16
 8007d02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	330c      	adds	r3, #12
 8007d0a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007d0c:	61fa      	str	r2, [r7, #28]
 8007d0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d10:	69b9      	ldr	r1, [r7, #24]
 8007d12:	69fa      	ldr	r2, [r7, #28]
 8007d14:	e841 2300 	strex	r3, r2, [r1]
 8007d18:	617b      	str	r3, [r7, #20]
   return(result);
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d1e5      	bne.n	8007cec <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d106      	bne.n	8007d36 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d2a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007d2c:	4619      	mov	r1, r3
 8007d2e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007d30:	f7ff ff0e 	bl	8007b50 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007d34:	e002      	b.n	8007d3c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007d36:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007d38:	f7f9 f90a 	bl	8000f50 <HAL_UART_RxCpltCallback>
}
 8007d3c:	bf00      	nop
 8007d3e:	3770      	adds	r7, #112	; 0x70
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d50:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d108      	bne.n	8007d6c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007d5e:	085b      	lsrs	r3, r3, #1
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	4619      	mov	r1, r3
 8007d64:	68f8      	ldr	r0, [r7, #12]
 8007d66:	f7ff fef3 	bl	8007b50 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007d6a:	e002      	b.n	8007d72 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007d6c:	68f8      	ldr	r0, [r7, #12]
 8007d6e:	f7ff fedb 	bl	8007b28 <HAL_UART_RxHalfCpltCallback>
}
 8007d72:	bf00      	nop
 8007d74:	3710      	adds	r7, #16
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}

08007d7a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007d7a:	b580      	push	{r7, lr}
 8007d7c:	b084      	sub	sp, #16
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007d82:	2300      	movs	r3, #0
 8007d84:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d8a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	695b      	ldr	r3, [r3, #20]
 8007d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d96:	2b80      	cmp	r3, #128	; 0x80
 8007d98:	bf0c      	ite	eq
 8007d9a:	2301      	moveq	r3, #1
 8007d9c:	2300      	movne	r3, #0
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	2b21      	cmp	r3, #33	; 0x21
 8007dac:	d108      	bne.n	8007dc0 <UART_DMAError+0x46>
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d005      	beq.n	8007dc0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	2200      	movs	r2, #0
 8007db8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007dba:	68b8      	ldr	r0, [r7, #8]
 8007dbc:	f000 f8c6 	bl	8007f4c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	695b      	ldr	r3, [r3, #20]
 8007dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dca:	2b40      	cmp	r3, #64	; 0x40
 8007dcc:	bf0c      	ite	eq
 8007dce:	2301      	moveq	r3, #1
 8007dd0:	2300      	movne	r3, #0
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	2b22      	cmp	r3, #34	; 0x22
 8007de0:	d108      	bne.n	8007df4 <UART_DMAError+0x7a>
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d005      	beq.n	8007df4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	2200      	movs	r2, #0
 8007dec:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007dee:	68b8      	ldr	r0, [r7, #8]
 8007df0:	f000 f8d4 	bl	8007f9c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df8:	f043 0210 	orr.w	r2, r3, #16
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e00:	68b8      	ldr	r0, [r7, #8]
 8007e02:	f7ff fe9b 	bl	8007b3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e06:	bf00      	nop
 8007e08:	3710      	adds	r7, #16
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}
	...

08007e10 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b098      	sub	sp, #96	; 0x60
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	60f8      	str	r0, [r7, #12]
 8007e18:	60b9      	str	r1, [r7, #8]
 8007e1a:	4613      	mov	r3, r2
 8007e1c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007e1e:	68ba      	ldr	r2, [r7, #8]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	88fa      	ldrh	r2, [r7, #6]
 8007e28:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2222      	movs	r2, #34	; 0x22
 8007e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e3c:	4a40      	ldr	r2, [pc, #256]	; (8007f40 <UART_Start_Receive_DMA+0x130>)
 8007e3e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e44:	4a3f      	ldr	r2, [pc, #252]	; (8007f44 <UART_Start_Receive_DMA+0x134>)
 8007e46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e4c:	4a3e      	ldr	r2, [pc, #248]	; (8007f48 <UART_Start_Receive_DMA+0x138>)
 8007e4e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e54:	2200      	movs	r2, #0
 8007e56:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007e58:	f107 0308 	add.w	r3, r7, #8
 8007e5c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	3304      	adds	r3, #4
 8007e68:	4619      	mov	r1, r3
 8007e6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e6c:	681a      	ldr	r2, [r3, #0]
 8007e6e:	88fb      	ldrh	r3, [r7, #6]
 8007e70:	f7fb f9f2 	bl	8003258 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007e74:	2300      	movs	r3, #0
 8007e76:	613b      	str	r3, [r7, #16]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	613b      	str	r3, [r7, #16]
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	613b      	str	r3, [r7, #16]
 8007e88:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	691b      	ldr	r3, [r3, #16]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d019      	beq.n	8007ece <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	330c      	adds	r3, #12
 8007ea0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ea4:	e853 3f00 	ldrex	r3, [r3]
 8007ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007eaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007eb0:	65bb      	str	r3, [r7, #88]	; 0x58
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	330c      	adds	r3, #12
 8007eb8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007eba:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007ebc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ebe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007ec0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007ec2:	e841 2300 	strex	r3, r2, [r1]
 8007ec6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007ec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d1e5      	bne.n	8007e9a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	3314      	adds	r3, #20
 8007ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed8:	e853 3f00 	ldrex	r3, [r3]
 8007edc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ee0:	f043 0301 	orr.w	r3, r3, #1
 8007ee4:	657b      	str	r3, [r7, #84]	; 0x54
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	3314      	adds	r3, #20
 8007eec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007eee:	63ba      	str	r2, [r7, #56]	; 0x38
 8007ef0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007ef4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ef6:	e841 2300 	strex	r3, r2, [r1]
 8007efa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d1e5      	bne.n	8007ece <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	3314      	adds	r3, #20
 8007f08:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f0a:	69bb      	ldr	r3, [r7, #24]
 8007f0c:	e853 3f00 	ldrex	r3, [r3]
 8007f10:	617b      	str	r3, [r7, #20]
   return(result);
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f18:	653b      	str	r3, [r7, #80]	; 0x50
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	3314      	adds	r3, #20
 8007f20:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007f22:	627a      	str	r2, [r7, #36]	; 0x24
 8007f24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f26:	6a39      	ldr	r1, [r7, #32]
 8007f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f2a:	e841 2300 	strex	r3, r2, [r1]
 8007f2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f30:	69fb      	ldr	r3, [r7, #28]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d1e5      	bne.n	8007f02 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8007f36:	2300      	movs	r3, #0
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3760      	adds	r7, #96	; 0x60
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}
 8007f40:	08007c1f 	.word	0x08007c1f
 8007f44:	08007d45 	.word	0x08007d45
 8007f48:	08007d7b 	.word	0x08007d7b

08007f4c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b089      	sub	sp, #36	; 0x24
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	330c      	adds	r3, #12
 8007f5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	e853 3f00 	ldrex	r3, [r3]
 8007f62:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007f6a:	61fb      	str	r3, [r7, #28]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	330c      	adds	r3, #12
 8007f72:	69fa      	ldr	r2, [r7, #28]
 8007f74:	61ba      	str	r2, [r7, #24]
 8007f76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f78:	6979      	ldr	r1, [r7, #20]
 8007f7a:	69ba      	ldr	r2, [r7, #24]
 8007f7c:	e841 2300 	strex	r3, r2, [r1]
 8007f80:	613b      	str	r3, [r7, #16]
   return(result);
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d1e5      	bne.n	8007f54 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2220      	movs	r2, #32
 8007f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007f90:	bf00      	nop
 8007f92:	3724      	adds	r7, #36	; 0x24
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr

08007f9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b095      	sub	sp, #84	; 0x54
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	330c      	adds	r3, #12
 8007faa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fae:	e853 3f00 	ldrex	r3, [r3]
 8007fb2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007fba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	330c      	adds	r3, #12
 8007fc2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007fc4:	643a      	str	r2, [r7, #64]	; 0x40
 8007fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007fca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007fcc:	e841 2300 	strex	r3, r2, [r1]
 8007fd0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d1e5      	bne.n	8007fa4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	3314      	adds	r3, #20
 8007fde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe0:	6a3b      	ldr	r3, [r7, #32]
 8007fe2:	e853 3f00 	ldrex	r3, [r3]
 8007fe6:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	f023 0301 	bic.w	r3, r3, #1
 8007fee:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	3314      	adds	r3, #20
 8007ff6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ff8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ffa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ffc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ffe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008000:	e841 2300 	strex	r3, r2, [r1]
 8008004:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008008:	2b00      	cmp	r3, #0
 800800a:	d1e5      	bne.n	8007fd8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008010:	2b01      	cmp	r3, #1
 8008012:	d119      	bne.n	8008048 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	330c      	adds	r3, #12
 800801a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	e853 3f00 	ldrex	r3, [r3]
 8008022:	60bb      	str	r3, [r7, #8]
   return(result);
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	f023 0310 	bic.w	r3, r3, #16
 800802a:	647b      	str	r3, [r7, #68]	; 0x44
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	330c      	adds	r3, #12
 8008032:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008034:	61ba      	str	r2, [r7, #24]
 8008036:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008038:	6979      	ldr	r1, [r7, #20]
 800803a:	69ba      	ldr	r2, [r7, #24]
 800803c:	e841 2300 	strex	r3, r2, [r1]
 8008040:	613b      	str	r3, [r7, #16]
   return(result);
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d1e5      	bne.n	8008014 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2220      	movs	r2, #32
 800804c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2200      	movs	r2, #0
 8008054:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008056:	bf00      	nop
 8008058:	3754      	adds	r7, #84	; 0x54
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr

08008062 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008062:	b580      	push	{r7, lr}
 8008064:	b084      	sub	sp, #16
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800806e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2200      	movs	r2, #0
 8008074:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2200      	movs	r2, #0
 800807a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800807c:	68f8      	ldr	r0, [r7, #12]
 800807e:	f7ff fd5d 	bl	8007b3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008082:	bf00      	nop
 8008084:	3710      	adds	r7, #16
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}

0800808a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800808a:	b480      	push	{r7}
 800808c:	b085      	sub	sp, #20
 800808e:	af00      	add	r7, sp, #0
 8008090:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008098:	b2db      	uxtb	r3, r3
 800809a:	2b21      	cmp	r3, #33	; 0x21
 800809c:	d13e      	bne.n	800811c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080a6:	d114      	bne.n	80080d2 <UART_Transmit_IT+0x48>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	691b      	ldr	r3, [r3, #16]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d110      	bne.n	80080d2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6a1b      	ldr	r3, [r3, #32]
 80080b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	881b      	ldrh	r3, [r3, #0]
 80080ba:	461a      	mov	r2, r3
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80080c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6a1b      	ldr	r3, [r3, #32]
 80080ca:	1c9a      	adds	r2, r3, #2
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	621a      	str	r2, [r3, #32]
 80080d0:	e008      	b.n	80080e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6a1b      	ldr	r3, [r3, #32]
 80080d6:	1c59      	adds	r1, r3, #1
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	6211      	str	r1, [r2, #32]
 80080dc:	781a      	ldrb	r2, [r3, #0]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	3b01      	subs	r3, #1
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	4619      	mov	r1, r3
 80080f2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d10f      	bne.n	8008118 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	68da      	ldr	r2, [r3, #12]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008106:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	68da      	ldr	r2, [r3, #12]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008116:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008118:	2300      	movs	r3, #0
 800811a:	e000      	b.n	800811e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800811c:	2302      	movs	r3, #2
  }
}
 800811e:	4618      	mov	r0, r3
 8008120:	3714      	adds	r7, #20
 8008122:	46bd      	mov	sp, r7
 8008124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008128:	4770      	bx	lr

0800812a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800812a:	b580      	push	{r7, lr}
 800812c:	b082      	sub	sp, #8
 800812e:	af00      	add	r7, sp, #0
 8008130:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	68da      	ldr	r2, [r3, #12]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008140:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2220      	movs	r2, #32
 8008146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f7f8 feca 	bl	8000ee4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008150:	2300      	movs	r3, #0
}
 8008152:	4618      	mov	r0, r3
 8008154:	3708      	adds	r7, #8
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}

0800815a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800815a:	b580      	push	{r7, lr}
 800815c:	b08c      	sub	sp, #48	; 0x30
 800815e:	af00      	add	r7, sp, #0
 8008160:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008168:	b2db      	uxtb	r3, r3
 800816a:	2b22      	cmp	r3, #34	; 0x22
 800816c:	f040 80ab 	bne.w	80082c6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008178:	d117      	bne.n	80081aa <UART_Receive_IT+0x50>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	691b      	ldr	r3, [r3, #16]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d113      	bne.n	80081aa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008182:	2300      	movs	r3, #0
 8008184:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800818a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	b29b      	uxth	r3, r3
 8008194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008198:	b29a      	uxth	r2, r3
 800819a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800819c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081a2:	1c9a      	adds	r2, r3, #2
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	629a      	str	r2, [r3, #40]	; 0x28
 80081a8:	e026      	b.n	80081f8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80081b0:	2300      	movs	r3, #0
 80081b2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	689b      	ldr	r3, [r3, #8]
 80081b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081bc:	d007      	beq.n	80081ce <UART_Receive_IT+0x74>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d10a      	bne.n	80081dc <UART_Receive_IT+0x82>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	691b      	ldr	r3, [r3, #16]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d106      	bne.n	80081dc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	b2da      	uxtb	r2, r3
 80081d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081d8:	701a      	strb	r2, [r3, #0]
 80081da:	e008      	b.n	80081ee <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081e8:	b2da      	uxtb	r2, r3
 80081ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ec:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f2:	1c5a      	adds	r2, r3, #1
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	3b01      	subs	r3, #1
 8008200:	b29b      	uxth	r3, r3
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	4619      	mov	r1, r3
 8008206:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008208:	2b00      	cmp	r3, #0
 800820a:	d15a      	bne.n	80082c2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	68da      	ldr	r2, [r3, #12]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f022 0220 	bic.w	r2, r2, #32
 800821a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	68da      	ldr	r2, [r3, #12]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800822a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	695a      	ldr	r2, [r3, #20]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f022 0201 	bic.w	r2, r2, #1
 800823a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2220      	movs	r2, #32
 8008240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008248:	2b01      	cmp	r3, #1
 800824a:	d135      	bne.n	80082b8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	330c      	adds	r3, #12
 8008258:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	e853 3f00 	ldrex	r3, [r3]
 8008260:	613b      	str	r3, [r7, #16]
   return(result);
 8008262:	693b      	ldr	r3, [r7, #16]
 8008264:	f023 0310 	bic.w	r3, r3, #16
 8008268:	627b      	str	r3, [r7, #36]	; 0x24
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	330c      	adds	r3, #12
 8008270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008272:	623a      	str	r2, [r7, #32]
 8008274:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008276:	69f9      	ldr	r1, [r7, #28]
 8008278:	6a3a      	ldr	r2, [r7, #32]
 800827a:	e841 2300 	strex	r3, r2, [r1]
 800827e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008280:	69bb      	ldr	r3, [r7, #24]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d1e5      	bne.n	8008252 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f003 0310 	and.w	r3, r3, #16
 8008290:	2b10      	cmp	r3, #16
 8008292:	d10a      	bne.n	80082aa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008294:	2300      	movs	r3, #0
 8008296:	60fb      	str	r3, [r7, #12]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	60fb      	str	r3, [r7, #12]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	60fb      	str	r3, [r7, #12]
 80082a8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80082ae:	4619      	mov	r1, r3
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f7ff fc4d 	bl	8007b50 <HAL_UARTEx_RxEventCallback>
 80082b6:	e002      	b.n	80082be <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f7f8 fe49 	bl	8000f50 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80082be:	2300      	movs	r3, #0
 80082c0:	e002      	b.n	80082c8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80082c2:	2300      	movs	r3, #0
 80082c4:	e000      	b.n	80082c8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80082c6:	2302      	movs	r3, #2
  }
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3730      	adds	r7, #48	; 0x30
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}

080082d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082d4:	b09f      	sub	sp, #124	; 0x7c
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	691b      	ldr	r3, [r3, #16]
 80082e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80082e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082e6:	68d9      	ldr	r1, [r3, #12]
 80082e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	ea40 0301 	orr.w	r3, r0, r1
 80082f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80082f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082f4:	689a      	ldr	r2, [r3, #8]
 80082f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082f8:	691b      	ldr	r3, [r3, #16]
 80082fa:	431a      	orrs	r2, r3
 80082fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082fe:	695b      	ldr	r3, [r3, #20]
 8008300:	431a      	orrs	r2, r3
 8008302:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008304:	69db      	ldr	r3, [r3, #28]
 8008306:	4313      	orrs	r3, r2
 8008308:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800830a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	68db      	ldr	r3, [r3, #12]
 8008310:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008314:	f021 010c 	bic.w	r1, r1, #12
 8008318:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800831e:	430b      	orrs	r3, r1
 8008320:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	695b      	ldr	r3, [r3, #20]
 8008328:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800832c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800832e:	6999      	ldr	r1, [r3, #24]
 8008330:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	ea40 0301 	orr.w	r3, r0, r1
 8008338:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800833a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800833c:	681a      	ldr	r2, [r3, #0]
 800833e:	4bc5      	ldr	r3, [pc, #788]	; (8008654 <UART_SetConfig+0x384>)
 8008340:	429a      	cmp	r2, r3
 8008342:	d004      	beq.n	800834e <UART_SetConfig+0x7e>
 8008344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008346:	681a      	ldr	r2, [r3, #0]
 8008348:	4bc3      	ldr	r3, [pc, #780]	; (8008658 <UART_SetConfig+0x388>)
 800834a:	429a      	cmp	r2, r3
 800834c:	d103      	bne.n	8008356 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800834e:	f7fd fa07 	bl	8005760 <HAL_RCC_GetPCLK2Freq>
 8008352:	6778      	str	r0, [r7, #116]	; 0x74
 8008354:	e002      	b.n	800835c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008356:	f7fd f9ef 	bl	8005738 <HAL_RCC_GetPCLK1Freq>
 800835a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800835c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800835e:	69db      	ldr	r3, [r3, #28]
 8008360:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008364:	f040 80b6 	bne.w	80084d4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008368:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800836a:	461c      	mov	r4, r3
 800836c:	f04f 0500 	mov.w	r5, #0
 8008370:	4622      	mov	r2, r4
 8008372:	462b      	mov	r3, r5
 8008374:	1891      	adds	r1, r2, r2
 8008376:	6439      	str	r1, [r7, #64]	; 0x40
 8008378:	415b      	adcs	r3, r3
 800837a:	647b      	str	r3, [r7, #68]	; 0x44
 800837c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008380:	1912      	adds	r2, r2, r4
 8008382:	eb45 0303 	adc.w	r3, r5, r3
 8008386:	f04f 0000 	mov.w	r0, #0
 800838a:	f04f 0100 	mov.w	r1, #0
 800838e:	00d9      	lsls	r1, r3, #3
 8008390:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008394:	00d0      	lsls	r0, r2, #3
 8008396:	4602      	mov	r2, r0
 8008398:	460b      	mov	r3, r1
 800839a:	1911      	adds	r1, r2, r4
 800839c:	6639      	str	r1, [r7, #96]	; 0x60
 800839e:	416b      	adcs	r3, r5
 80083a0:	667b      	str	r3, [r7, #100]	; 0x64
 80083a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	461a      	mov	r2, r3
 80083a8:	f04f 0300 	mov.w	r3, #0
 80083ac:	1891      	adds	r1, r2, r2
 80083ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80083b0:	415b      	adcs	r3, r3
 80083b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80083b8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80083bc:	f7f8 fbcc 	bl	8000b58 <__aeabi_uldivmod>
 80083c0:	4602      	mov	r2, r0
 80083c2:	460b      	mov	r3, r1
 80083c4:	4ba5      	ldr	r3, [pc, #660]	; (800865c <UART_SetConfig+0x38c>)
 80083c6:	fba3 2302 	umull	r2, r3, r3, r2
 80083ca:	095b      	lsrs	r3, r3, #5
 80083cc:	011e      	lsls	r6, r3, #4
 80083ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083d0:	461c      	mov	r4, r3
 80083d2:	f04f 0500 	mov.w	r5, #0
 80083d6:	4622      	mov	r2, r4
 80083d8:	462b      	mov	r3, r5
 80083da:	1891      	adds	r1, r2, r2
 80083dc:	6339      	str	r1, [r7, #48]	; 0x30
 80083de:	415b      	adcs	r3, r3
 80083e0:	637b      	str	r3, [r7, #52]	; 0x34
 80083e2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80083e6:	1912      	adds	r2, r2, r4
 80083e8:	eb45 0303 	adc.w	r3, r5, r3
 80083ec:	f04f 0000 	mov.w	r0, #0
 80083f0:	f04f 0100 	mov.w	r1, #0
 80083f4:	00d9      	lsls	r1, r3, #3
 80083f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80083fa:	00d0      	lsls	r0, r2, #3
 80083fc:	4602      	mov	r2, r0
 80083fe:	460b      	mov	r3, r1
 8008400:	1911      	adds	r1, r2, r4
 8008402:	65b9      	str	r1, [r7, #88]	; 0x58
 8008404:	416b      	adcs	r3, r5
 8008406:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008408:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	461a      	mov	r2, r3
 800840e:	f04f 0300 	mov.w	r3, #0
 8008412:	1891      	adds	r1, r2, r2
 8008414:	62b9      	str	r1, [r7, #40]	; 0x28
 8008416:	415b      	adcs	r3, r3
 8008418:	62fb      	str	r3, [r7, #44]	; 0x2c
 800841a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800841e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008422:	f7f8 fb99 	bl	8000b58 <__aeabi_uldivmod>
 8008426:	4602      	mov	r2, r0
 8008428:	460b      	mov	r3, r1
 800842a:	4b8c      	ldr	r3, [pc, #560]	; (800865c <UART_SetConfig+0x38c>)
 800842c:	fba3 1302 	umull	r1, r3, r3, r2
 8008430:	095b      	lsrs	r3, r3, #5
 8008432:	2164      	movs	r1, #100	; 0x64
 8008434:	fb01 f303 	mul.w	r3, r1, r3
 8008438:	1ad3      	subs	r3, r2, r3
 800843a:	00db      	lsls	r3, r3, #3
 800843c:	3332      	adds	r3, #50	; 0x32
 800843e:	4a87      	ldr	r2, [pc, #540]	; (800865c <UART_SetConfig+0x38c>)
 8008440:	fba2 2303 	umull	r2, r3, r2, r3
 8008444:	095b      	lsrs	r3, r3, #5
 8008446:	005b      	lsls	r3, r3, #1
 8008448:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800844c:	441e      	add	r6, r3
 800844e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008450:	4618      	mov	r0, r3
 8008452:	f04f 0100 	mov.w	r1, #0
 8008456:	4602      	mov	r2, r0
 8008458:	460b      	mov	r3, r1
 800845a:	1894      	adds	r4, r2, r2
 800845c:	623c      	str	r4, [r7, #32]
 800845e:	415b      	adcs	r3, r3
 8008460:	627b      	str	r3, [r7, #36]	; 0x24
 8008462:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008466:	1812      	adds	r2, r2, r0
 8008468:	eb41 0303 	adc.w	r3, r1, r3
 800846c:	f04f 0400 	mov.w	r4, #0
 8008470:	f04f 0500 	mov.w	r5, #0
 8008474:	00dd      	lsls	r5, r3, #3
 8008476:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800847a:	00d4      	lsls	r4, r2, #3
 800847c:	4622      	mov	r2, r4
 800847e:	462b      	mov	r3, r5
 8008480:	1814      	adds	r4, r2, r0
 8008482:	653c      	str	r4, [r7, #80]	; 0x50
 8008484:	414b      	adcs	r3, r1
 8008486:	657b      	str	r3, [r7, #84]	; 0x54
 8008488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	461a      	mov	r2, r3
 800848e:	f04f 0300 	mov.w	r3, #0
 8008492:	1891      	adds	r1, r2, r2
 8008494:	61b9      	str	r1, [r7, #24]
 8008496:	415b      	adcs	r3, r3
 8008498:	61fb      	str	r3, [r7, #28]
 800849a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800849e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80084a2:	f7f8 fb59 	bl	8000b58 <__aeabi_uldivmod>
 80084a6:	4602      	mov	r2, r0
 80084a8:	460b      	mov	r3, r1
 80084aa:	4b6c      	ldr	r3, [pc, #432]	; (800865c <UART_SetConfig+0x38c>)
 80084ac:	fba3 1302 	umull	r1, r3, r3, r2
 80084b0:	095b      	lsrs	r3, r3, #5
 80084b2:	2164      	movs	r1, #100	; 0x64
 80084b4:	fb01 f303 	mul.w	r3, r1, r3
 80084b8:	1ad3      	subs	r3, r2, r3
 80084ba:	00db      	lsls	r3, r3, #3
 80084bc:	3332      	adds	r3, #50	; 0x32
 80084be:	4a67      	ldr	r2, [pc, #412]	; (800865c <UART_SetConfig+0x38c>)
 80084c0:	fba2 2303 	umull	r2, r3, r2, r3
 80084c4:	095b      	lsrs	r3, r3, #5
 80084c6:	f003 0207 	and.w	r2, r3, #7
 80084ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4432      	add	r2, r6
 80084d0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80084d2:	e0b9      	b.n	8008648 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80084d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084d6:	461c      	mov	r4, r3
 80084d8:	f04f 0500 	mov.w	r5, #0
 80084dc:	4622      	mov	r2, r4
 80084de:	462b      	mov	r3, r5
 80084e0:	1891      	adds	r1, r2, r2
 80084e2:	6139      	str	r1, [r7, #16]
 80084e4:	415b      	adcs	r3, r3
 80084e6:	617b      	str	r3, [r7, #20]
 80084e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80084ec:	1912      	adds	r2, r2, r4
 80084ee:	eb45 0303 	adc.w	r3, r5, r3
 80084f2:	f04f 0000 	mov.w	r0, #0
 80084f6:	f04f 0100 	mov.w	r1, #0
 80084fa:	00d9      	lsls	r1, r3, #3
 80084fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008500:	00d0      	lsls	r0, r2, #3
 8008502:	4602      	mov	r2, r0
 8008504:	460b      	mov	r3, r1
 8008506:	eb12 0804 	adds.w	r8, r2, r4
 800850a:	eb43 0905 	adc.w	r9, r3, r5
 800850e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	4618      	mov	r0, r3
 8008514:	f04f 0100 	mov.w	r1, #0
 8008518:	f04f 0200 	mov.w	r2, #0
 800851c:	f04f 0300 	mov.w	r3, #0
 8008520:	008b      	lsls	r3, r1, #2
 8008522:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008526:	0082      	lsls	r2, r0, #2
 8008528:	4640      	mov	r0, r8
 800852a:	4649      	mov	r1, r9
 800852c:	f7f8 fb14 	bl	8000b58 <__aeabi_uldivmod>
 8008530:	4602      	mov	r2, r0
 8008532:	460b      	mov	r3, r1
 8008534:	4b49      	ldr	r3, [pc, #292]	; (800865c <UART_SetConfig+0x38c>)
 8008536:	fba3 2302 	umull	r2, r3, r3, r2
 800853a:	095b      	lsrs	r3, r3, #5
 800853c:	011e      	lsls	r6, r3, #4
 800853e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008540:	4618      	mov	r0, r3
 8008542:	f04f 0100 	mov.w	r1, #0
 8008546:	4602      	mov	r2, r0
 8008548:	460b      	mov	r3, r1
 800854a:	1894      	adds	r4, r2, r2
 800854c:	60bc      	str	r4, [r7, #8]
 800854e:	415b      	adcs	r3, r3
 8008550:	60fb      	str	r3, [r7, #12]
 8008552:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008556:	1812      	adds	r2, r2, r0
 8008558:	eb41 0303 	adc.w	r3, r1, r3
 800855c:	f04f 0400 	mov.w	r4, #0
 8008560:	f04f 0500 	mov.w	r5, #0
 8008564:	00dd      	lsls	r5, r3, #3
 8008566:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800856a:	00d4      	lsls	r4, r2, #3
 800856c:	4622      	mov	r2, r4
 800856e:	462b      	mov	r3, r5
 8008570:	1814      	adds	r4, r2, r0
 8008572:	64bc      	str	r4, [r7, #72]	; 0x48
 8008574:	414b      	adcs	r3, r1
 8008576:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	4618      	mov	r0, r3
 800857e:	f04f 0100 	mov.w	r1, #0
 8008582:	f04f 0200 	mov.w	r2, #0
 8008586:	f04f 0300 	mov.w	r3, #0
 800858a:	008b      	lsls	r3, r1, #2
 800858c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008590:	0082      	lsls	r2, r0, #2
 8008592:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008596:	f7f8 fadf 	bl	8000b58 <__aeabi_uldivmod>
 800859a:	4602      	mov	r2, r0
 800859c:	460b      	mov	r3, r1
 800859e:	4b2f      	ldr	r3, [pc, #188]	; (800865c <UART_SetConfig+0x38c>)
 80085a0:	fba3 1302 	umull	r1, r3, r3, r2
 80085a4:	095b      	lsrs	r3, r3, #5
 80085a6:	2164      	movs	r1, #100	; 0x64
 80085a8:	fb01 f303 	mul.w	r3, r1, r3
 80085ac:	1ad3      	subs	r3, r2, r3
 80085ae:	011b      	lsls	r3, r3, #4
 80085b0:	3332      	adds	r3, #50	; 0x32
 80085b2:	4a2a      	ldr	r2, [pc, #168]	; (800865c <UART_SetConfig+0x38c>)
 80085b4:	fba2 2303 	umull	r2, r3, r2, r3
 80085b8:	095b      	lsrs	r3, r3, #5
 80085ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80085be:	441e      	add	r6, r3
 80085c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085c2:	4618      	mov	r0, r3
 80085c4:	f04f 0100 	mov.w	r1, #0
 80085c8:	4602      	mov	r2, r0
 80085ca:	460b      	mov	r3, r1
 80085cc:	1894      	adds	r4, r2, r2
 80085ce:	603c      	str	r4, [r7, #0]
 80085d0:	415b      	adcs	r3, r3
 80085d2:	607b      	str	r3, [r7, #4]
 80085d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085d8:	1812      	adds	r2, r2, r0
 80085da:	eb41 0303 	adc.w	r3, r1, r3
 80085de:	f04f 0400 	mov.w	r4, #0
 80085e2:	f04f 0500 	mov.w	r5, #0
 80085e6:	00dd      	lsls	r5, r3, #3
 80085e8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80085ec:	00d4      	lsls	r4, r2, #3
 80085ee:	4622      	mov	r2, r4
 80085f0:	462b      	mov	r3, r5
 80085f2:	eb12 0a00 	adds.w	sl, r2, r0
 80085f6:	eb43 0b01 	adc.w	fp, r3, r1
 80085fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	4618      	mov	r0, r3
 8008600:	f04f 0100 	mov.w	r1, #0
 8008604:	f04f 0200 	mov.w	r2, #0
 8008608:	f04f 0300 	mov.w	r3, #0
 800860c:	008b      	lsls	r3, r1, #2
 800860e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008612:	0082      	lsls	r2, r0, #2
 8008614:	4650      	mov	r0, sl
 8008616:	4659      	mov	r1, fp
 8008618:	f7f8 fa9e 	bl	8000b58 <__aeabi_uldivmod>
 800861c:	4602      	mov	r2, r0
 800861e:	460b      	mov	r3, r1
 8008620:	4b0e      	ldr	r3, [pc, #56]	; (800865c <UART_SetConfig+0x38c>)
 8008622:	fba3 1302 	umull	r1, r3, r3, r2
 8008626:	095b      	lsrs	r3, r3, #5
 8008628:	2164      	movs	r1, #100	; 0x64
 800862a:	fb01 f303 	mul.w	r3, r1, r3
 800862e:	1ad3      	subs	r3, r2, r3
 8008630:	011b      	lsls	r3, r3, #4
 8008632:	3332      	adds	r3, #50	; 0x32
 8008634:	4a09      	ldr	r2, [pc, #36]	; (800865c <UART_SetConfig+0x38c>)
 8008636:	fba2 2303 	umull	r2, r3, r2, r3
 800863a:	095b      	lsrs	r3, r3, #5
 800863c:	f003 020f 	and.w	r2, r3, #15
 8008640:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4432      	add	r2, r6
 8008646:	609a      	str	r2, [r3, #8]
}
 8008648:	bf00      	nop
 800864a:	377c      	adds	r7, #124	; 0x7c
 800864c:	46bd      	mov	sp, r7
 800864e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008652:	bf00      	nop
 8008654:	40011000 	.word	0x40011000
 8008658:	40011400 	.word	0x40011400
 800865c:	51eb851f 	.word	0x51eb851f

08008660 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008660:	b480      	push	{r7}
 8008662:	b085      	sub	sp, #20
 8008664:	af00      	add	r7, sp, #0
 8008666:	4603      	mov	r3, r0
 8008668:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800866a:	2300      	movs	r3, #0
 800866c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800866e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008672:	2b84      	cmp	r3, #132	; 0x84
 8008674:	d005      	beq.n	8008682 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008676:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	4413      	add	r3, r2
 800867e:	3303      	adds	r3, #3
 8008680:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008682:	68fb      	ldr	r3, [r7, #12]
}
 8008684:	4618      	mov	r0, r3
 8008686:	3714      	adds	r7, #20
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr

08008690 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008690:	b480      	push	{r7}
 8008692:	b083      	sub	sp, #12
 8008694:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008696:	f3ef 8305 	mrs	r3, IPSR
 800869a:	607b      	str	r3, [r7, #4]
  return(result);
 800869c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800869e:	2b00      	cmp	r3, #0
 80086a0:	bf14      	ite	ne
 80086a2:	2301      	movne	r3, #1
 80086a4:	2300      	moveq	r3, #0
 80086a6:	b2db      	uxtb	r3, r3
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	370c      	adds	r7, #12
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr

080086b4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80086b8:	f001 ff38 	bl	800a52c <vTaskStartScheduler>
  
  return osOK;
 80086bc:	2300      	movs	r3, #0
}
 80086be:	4618      	mov	r0, r3
 80086c0:	bd80      	pop	{r7, pc}

080086c2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80086c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086c4:	b089      	sub	sp, #36	; 0x24
 80086c6:	af04      	add	r7, sp, #16
 80086c8:	6078      	str	r0, [r7, #4]
 80086ca:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	695b      	ldr	r3, [r3, #20]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d020      	beq.n	8008716 <osThreadCreate+0x54>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	699b      	ldr	r3, [r3, #24]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d01c      	beq.n	8008716 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	685c      	ldr	r4, [r3, #4]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681d      	ldr	r5, [r3, #0]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	691e      	ldr	r6, [r3, #16]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80086ee:	4618      	mov	r0, r3
 80086f0:	f7ff ffb6 	bl	8008660 <makeFreeRtosPriority>
 80086f4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	695b      	ldr	r3, [r3, #20]
 80086fa:	687a      	ldr	r2, [r7, #4]
 80086fc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80086fe:	9202      	str	r2, [sp, #8]
 8008700:	9301      	str	r3, [sp, #4]
 8008702:	9100      	str	r1, [sp, #0]
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	4632      	mov	r2, r6
 8008708:	4629      	mov	r1, r5
 800870a:	4620      	mov	r0, r4
 800870c:	f001 fb9c 	bl	8009e48 <xTaskCreateStatic>
 8008710:	4603      	mov	r3, r0
 8008712:	60fb      	str	r3, [r7, #12]
 8008714:	e01c      	b.n	8008750 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	685c      	ldr	r4, [r3, #4]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008722:	b29e      	uxth	r6, r3
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800872a:	4618      	mov	r0, r3
 800872c:	f7ff ff98 	bl	8008660 <makeFreeRtosPriority>
 8008730:	4602      	mov	r2, r0
 8008732:	f107 030c 	add.w	r3, r7, #12
 8008736:	9301      	str	r3, [sp, #4]
 8008738:	9200      	str	r2, [sp, #0]
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	4632      	mov	r2, r6
 800873e:	4629      	mov	r1, r5
 8008740:	4620      	mov	r0, r4
 8008742:	f001 fbde 	bl	8009f02 <xTaskCreate>
 8008746:	4603      	mov	r3, r0
 8008748:	2b01      	cmp	r3, #1
 800874a:	d001      	beq.n	8008750 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800874c:	2300      	movs	r3, #0
 800874e:	e000      	b.n	8008752 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008750:	68fb      	ldr	r3, [r7, #12]
}
 8008752:	4618      	mov	r0, r3
 8008754:	3714      	adds	r7, #20
 8008756:	46bd      	mov	sp, r7
 8008758:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800875a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800875a:	b580      	push	{r7, lr}
 800875c:	b084      	sub	sp, #16
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d001      	beq.n	8008770 <osDelay+0x16>
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	e000      	b.n	8008772 <osDelay+0x18>
 8008770:	2301      	movs	r3, #1
 8008772:	4618      	mov	r0, r3
 8008774:	f001 fd12 	bl	800a19c <vTaskDelay>
  
  return osOK;
 8008778:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800877a:	4618      	mov	r0, r3
 800877c:	3710      	adds	r7, #16
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}
	...

08008784 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b086      	sub	sp, #24
 8008788:	af02      	add	r7, sp, #8
 800878a:	60f8      	str	r0, [r7, #12]
 800878c:	460b      	mov	r3, r1
 800878e:	607a      	str	r2, [r7, #4]
 8008790:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d013      	beq.n	80087c2 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 800879a:	7afb      	ldrb	r3, [r7, #11]
 800879c:	2b01      	cmp	r3, #1
 800879e:	d101      	bne.n	80087a4 <osTimerCreate+0x20>
 80087a0:	2101      	movs	r1, #1
 80087a2:	e000      	b.n	80087a6 <osTimerCreate+0x22>
 80087a4:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 80087aa:	68fa      	ldr	r2, [r7, #12]
 80087ac:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 80087ae:	9201      	str	r2, [sp, #4]
 80087b0:	9300      	str	r3, [sp, #0]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	460a      	mov	r2, r1
 80087b6:	2101      	movs	r1, #1
 80087b8:	480b      	ldr	r0, [pc, #44]	; (80087e8 <osTimerCreate+0x64>)
 80087ba:	f002 fd96 	bl	800b2ea <xTimerCreateStatic>
 80087be:	4603      	mov	r3, r0
 80087c0:	e00e      	b.n	80087e0 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 80087c2:	7afb      	ldrb	r3, [r7, #11]
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d101      	bne.n	80087cc <osTimerCreate+0x48>
 80087c8:	2201      	movs	r2, #1
 80087ca:	e000      	b.n	80087ce <osTimerCreate+0x4a>
 80087cc:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 80087d2:	9300      	str	r3, [sp, #0]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2101      	movs	r1, #1
 80087d8:	4803      	ldr	r0, [pc, #12]	; (80087e8 <osTimerCreate+0x64>)
 80087da:	f002 fd65 	bl	800b2a8 <xTimerCreate>
 80087de:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3710      	adds	r7, #16
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}
 80087e8:	0801bf14 	.word	0x0801bf14

080087ec <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b088      	sub	sp, #32
 80087f0:	af02      	add	r7, sp, #8
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 80087f6:	2300      	movs	r3, #0
 80087f8:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 80087fa:	2300      	movs	r3, #0
 80087fc:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d101      	bne.n	800880c <osTimerStart+0x20>
    ticks = 1;
 8008808:	2301      	movs	r3, #1
 800880a:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 800880c:	f7ff ff40 	bl	8008690 <inHandlerMode>
 8008810:	4603      	mov	r3, r0
 8008812:	2b00      	cmp	r3, #0
 8008814:	d01a      	beq.n	800884c <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8008816:	f107 030c 	add.w	r3, r7, #12
 800881a:	2200      	movs	r2, #0
 800881c:	9200      	str	r2, [sp, #0]
 800881e:	693a      	ldr	r2, [r7, #16]
 8008820:	2109      	movs	r1, #9
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f002 fdda 	bl	800b3dc <xTimerGenericCommand>
 8008828:	4603      	mov	r3, r0
 800882a:	2b01      	cmp	r3, #1
 800882c:	d002      	beq.n	8008834 <osTimerStart+0x48>
    {
      result = osErrorOS;
 800882e:	23ff      	movs	r3, #255	; 0xff
 8008830:	617b      	str	r3, [r7, #20]
 8008832:	e018      	b.n	8008866 <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d015      	beq.n	8008866 <osTimerStart+0x7a>
 800883a:	4b0d      	ldr	r3, [pc, #52]	; (8008870 <osTimerStart+0x84>)
 800883c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008840:	601a      	str	r2, [r3, #0]
 8008842:	f3bf 8f4f 	dsb	sy
 8008846:	f3bf 8f6f 	isb	sy
 800884a:	e00c      	b.n	8008866 <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 800884c:	2300      	movs	r3, #0
 800884e:	9300      	str	r3, [sp, #0]
 8008850:	2300      	movs	r3, #0
 8008852:	693a      	ldr	r2, [r7, #16]
 8008854:	2104      	movs	r1, #4
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f002 fdc0 	bl	800b3dc <xTimerGenericCommand>
 800885c:	4603      	mov	r3, r0
 800885e:	2b01      	cmp	r3, #1
 8008860:	d001      	beq.n	8008866 <osTimerStart+0x7a>
      result = osErrorOS;
 8008862:	23ff      	movs	r3, #255	; 0xff
 8008864:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 8008866:	697b      	ldr	r3, [r7, #20]
}
 8008868:	4618      	mov	r0, r3
 800886a:	3718      	adds	r7, #24
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}
 8008870:	e000ed04 	.word	0xe000ed04

08008874 <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b086      	sub	sp, #24
 8008878:	af02      	add	r7, sp, #8
 800887a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800887c:	2300      	movs	r3, #0
 800887e:	60fb      	str	r3, [r7, #12]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8008880:	2300      	movs	r3, #0
 8008882:	60bb      	str	r3, [r7, #8]

  if (inHandlerMode()) {
 8008884:	f7ff ff04 	bl	8008690 <inHandlerMode>
 8008888:	4603      	mov	r3, r0
 800888a:	2b00      	cmp	r3, #0
 800888c:	d019      	beq.n	80088c2 <osTimerStop+0x4e>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 800888e:	f107 0308 	add.w	r3, r7, #8
 8008892:	2200      	movs	r2, #0
 8008894:	9200      	str	r2, [sp, #0]
 8008896:	2200      	movs	r2, #0
 8008898:	2108      	movs	r1, #8
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f002 fd9e 	bl	800b3dc <xTimerGenericCommand>
 80088a0:	4603      	mov	r3, r0
 80088a2:	2b01      	cmp	r3, #1
 80088a4:	d001      	beq.n	80088aa <osTimerStop+0x36>
      return osErrorOS;
 80088a6:	23ff      	movs	r3, #255	; 0xff
 80088a8:	e019      	b.n	80088de <osTimerStop+0x6a>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d015      	beq.n	80088dc <osTimerStop+0x68>
 80088b0:	4b0d      	ldr	r3, [pc, #52]	; (80088e8 <osTimerStop+0x74>)
 80088b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088b6:	601a      	str	r2, [r3, #0]
 80088b8:	f3bf 8f4f 	dsb	sy
 80088bc:	f3bf 8f6f 	isb	sy
 80088c0:	e00c      	b.n	80088dc <osTimerStop+0x68>
  }
  else {
    if (xTimerStop(timer_id, 0) != pdPASS) {
 80088c2:	2300      	movs	r3, #0
 80088c4:	9300      	str	r3, [sp, #0]
 80088c6:	2300      	movs	r3, #0
 80088c8:	2200      	movs	r2, #0
 80088ca:	2103      	movs	r1, #3
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f002 fd85 	bl	800b3dc <xTimerGenericCommand>
 80088d2:	4603      	mov	r3, r0
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d001      	beq.n	80088dc <osTimerStop+0x68>
      result = osErrorOS;
 80088d8:	23ff      	movs	r3, #255	; 0xff
 80088da:	60fb      	str	r3, [r7, #12]
    }
  }
#else 
  result = osErrorOS;
#endif 
  return result;
 80088dc:	68fb      	ldr	r3, [r7, #12]
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3710      	adds	r7, #16
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}
 80088e6:	bf00      	nop
 80088e8:	e000ed04 	.word	0xe000ed04

080088ec <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b082      	sub	sp, #8
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d007      	beq.n	800890c <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	4619      	mov	r1, r3
 8008902:	2001      	movs	r0, #1
 8008904:	f000 fc6d 	bl	80091e2 <xQueueCreateMutexStatic>
 8008908:	4603      	mov	r3, r0
 800890a:	e003      	b.n	8008914 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800890c:	2001      	movs	r0, #1
 800890e:	f000 fc50 	bl	80091b2 <xQueueCreateMutex>
 8008912:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8008914:	4618      	mov	r0, r3
 8008916:	3708      	adds	r7, #8
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b084      	sub	sp, #16
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8008926:	2300      	movs	r3, #0
 8008928:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d101      	bne.n	8008934 <osMutexWait+0x18>
    return osErrorParameter;
 8008930:	2380      	movs	r3, #128	; 0x80
 8008932:	e03a      	b.n	80089aa <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8008934:	2300      	movs	r3, #0
 8008936:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800893e:	d103      	bne.n	8008948 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8008940:	f04f 33ff 	mov.w	r3, #4294967295
 8008944:	60fb      	str	r3, [r7, #12]
 8008946:	e009      	b.n	800895c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d006      	beq.n	800895c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d101      	bne.n	800895c <osMutexWait+0x40>
      ticks = 1;
 8008958:	2301      	movs	r3, #1
 800895a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800895c:	f7ff fe98 	bl	8008690 <inHandlerMode>
 8008960:	4603      	mov	r3, r0
 8008962:	2b00      	cmp	r3, #0
 8008964:	d017      	beq.n	8008996 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8008966:	f107 0308 	add.w	r3, r7, #8
 800896a:	461a      	mov	r2, r3
 800896c:	2100      	movs	r1, #0
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f001 f864 	bl	8009a3c <xQueueReceiveFromISR>
 8008974:	4603      	mov	r3, r0
 8008976:	2b01      	cmp	r3, #1
 8008978:	d001      	beq.n	800897e <osMutexWait+0x62>
      return osErrorOS;
 800897a:	23ff      	movs	r3, #255	; 0xff
 800897c:	e015      	b.n	80089aa <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d011      	beq.n	80089a8 <osMutexWait+0x8c>
 8008984:	4b0b      	ldr	r3, [pc, #44]	; (80089b4 <osMutexWait+0x98>)
 8008986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800898a:	601a      	str	r2, [r3, #0]
 800898c:	f3bf 8f4f 	dsb	sy
 8008990:	f3bf 8f6f 	isb	sy
 8008994:	e008      	b.n	80089a8 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8008996:	68f9      	ldr	r1, [r7, #12]
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f000 ff43 	bl	8009824 <xQueueSemaphoreTake>
 800899e:	4603      	mov	r3, r0
 80089a0:	2b01      	cmp	r3, #1
 80089a2:	d001      	beq.n	80089a8 <osMutexWait+0x8c>
    return osErrorOS;
 80089a4:	23ff      	movs	r3, #255	; 0xff
 80089a6:	e000      	b.n	80089aa <osMutexWait+0x8e>
  }
  
  return osOK;
 80089a8:	2300      	movs	r3, #0
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3710      	adds	r7, #16
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}
 80089b2:	bf00      	nop
 80089b4:	e000ed04 	.word	0xe000ed04

080089b8 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b084      	sub	sp, #16
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80089c0:	2300      	movs	r3, #0
 80089c2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80089c4:	2300      	movs	r3, #0
 80089c6:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 80089c8:	f7ff fe62 	bl	8008690 <inHandlerMode>
 80089cc:	4603      	mov	r3, r0
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d016      	beq.n	8008a00 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80089d2:	f107 0308 	add.w	r3, r7, #8
 80089d6:	4619      	mov	r1, r3
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f000 fdb6 	bl	800954a <xQueueGiveFromISR>
 80089de:	4603      	mov	r3, r0
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	d001      	beq.n	80089e8 <osMutexRelease+0x30>
      return osErrorOS;
 80089e4:	23ff      	movs	r3, #255	; 0xff
 80089e6:	e017      	b.n	8008a18 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d013      	beq.n	8008a16 <osMutexRelease+0x5e>
 80089ee:	4b0c      	ldr	r3, [pc, #48]	; (8008a20 <osMutexRelease+0x68>)
 80089f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089f4:	601a      	str	r2, [r3, #0]
 80089f6:	f3bf 8f4f 	dsb	sy
 80089fa:	f3bf 8f6f 	isb	sy
 80089fe:	e00a      	b.n	8008a16 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8008a00:	2300      	movs	r3, #0
 8008a02:	2200      	movs	r2, #0
 8008a04:	2100      	movs	r1, #0
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f000 fc06 	bl	8009218 <xQueueGenericSend>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	d001      	beq.n	8008a16 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8008a12:	23ff      	movs	r3, #255	; 0xff
 8008a14:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8008a16:	68fb      	ldr	r3, [r7, #12]
}
 8008a18:	4618      	mov	r0, r3
 8008a1a:	3710      	adds	r7, #16
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	bd80      	pop	{r7, pc}
 8008a20:	e000ed04 	.word	0xe000ed04

08008a24 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b086      	sub	sp, #24
 8008a28:	af02      	add	r7, sp, #8
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d00f      	beq.n	8008a56 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d10a      	bne.n	8008a52 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	2203      	movs	r2, #3
 8008a42:	9200      	str	r2, [sp, #0]
 8008a44:	2200      	movs	r2, #0
 8008a46:	2100      	movs	r1, #0
 8008a48:	2001      	movs	r0, #1
 8008a4a:	f000 fac7 	bl	8008fdc <xQueueGenericCreateStatic>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	e016      	b.n	8008a80 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8008a52:	2300      	movs	r3, #0
 8008a54:	e014      	b.n	8008a80 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d110      	bne.n	8008a7e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8008a5c:	2203      	movs	r2, #3
 8008a5e:	2100      	movs	r1, #0
 8008a60:	2001      	movs	r0, #1
 8008a62:	f000 fb33 	bl	80090cc <xQueueGenericCreate>
 8008a66:	60f8      	str	r0, [r7, #12]
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d005      	beq.n	8008a7a <osSemaphoreCreate+0x56>
 8008a6e:	2300      	movs	r3, #0
 8008a70:	2200      	movs	r2, #0
 8008a72:	2100      	movs	r1, #0
 8008a74:	68f8      	ldr	r0, [r7, #12]
 8008a76:	f000 fbcf 	bl	8009218 <xQueueGenericSend>
      return sema;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	e000      	b.n	8008a80 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8008a7e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8008a80:	4618      	mov	r0, r3
 8008a82:	3710      	adds	r7, #16
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}

08008a88 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b084      	sub	sp, #16
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8008a92:	2300      	movs	r3, #0
 8008a94:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d101      	bne.n	8008aa0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8008a9c:	2380      	movs	r3, #128	; 0x80
 8008a9e:	e03a      	b.n	8008b16 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aaa:	d103      	bne.n	8008ab4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8008aac:	f04f 33ff 	mov.w	r3, #4294967295
 8008ab0:	60fb      	str	r3, [r7, #12]
 8008ab2:	e009      	b.n	8008ac8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d006      	beq.n	8008ac8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8008aba:	683b      	ldr	r3, [r7, #0]
 8008abc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d101      	bne.n	8008ac8 <osSemaphoreWait+0x40>
      ticks = 1;
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8008ac8:	f7ff fde2 	bl	8008690 <inHandlerMode>
 8008acc:	4603      	mov	r3, r0
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d017      	beq.n	8008b02 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008ad2:	f107 0308 	add.w	r3, r7, #8
 8008ad6:	461a      	mov	r2, r3
 8008ad8:	2100      	movs	r1, #0
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 ffae 	bl	8009a3c <xQueueReceiveFromISR>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	d001      	beq.n	8008aea <osSemaphoreWait+0x62>
      return osErrorOS;
 8008ae6:	23ff      	movs	r3, #255	; 0xff
 8008ae8:	e015      	b.n	8008b16 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d011      	beq.n	8008b14 <osSemaphoreWait+0x8c>
 8008af0:	4b0b      	ldr	r3, [pc, #44]	; (8008b20 <osSemaphoreWait+0x98>)
 8008af2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008af6:	601a      	str	r2, [r3, #0]
 8008af8:	f3bf 8f4f 	dsb	sy
 8008afc:	f3bf 8f6f 	isb	sy
 8008b00:	e008      	b.n	8008b14 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8008b02:	68f9      	ldr	r1, [r7, #12]
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 fe8d 	bl	8009824 <xQueueSemaphoreTake>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d001      	beq.n	8008b14 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8008b10:	23ff      	movs	r3, #255	; 0xff
 8008b12:	e000      	b.n	8008b16 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8008b14:	2300      	movs	r3, #0
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3710      	adds	r7, #16
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	e000ed04 	.word	0xe000ed04

08008b24 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b084      	sub	sp, #16
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8008b30:	2300      	movs	r3, #0
 8008b32:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8008b34:	f7ff fdac 	bl	8008690 <inHandlerMode>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d016      	beq.n	8008b6c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008b3e:	f107 0308 	add.w	r3, r7, #8
 8008b42:	4619      	mov	r1, r3
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f000 fd00 	bl	800954a <xQueueGiveFromISR>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d001      	beq.n	8008b54 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8008b50:	23ff      	movs	r3, #255	; 0xff
 8008b52:	e017      	b.n	8008b84 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d013      	beq.n	8008b82 <osSemaphoreRelease+0x5e>
 8008b5a:	4b0c      	ldr	r3, [pc, #48]	; (8008b8c <osSemaphoreRelease+0x68>)
 8008b5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b60:	601a      	str	r2, [r3, #0]
 8008b62:	f3bf 8f4f 	dsb	sy
 8008b66:	f3bf 8f6f 	isb	sy
 8008b6a:	e00a      	b.n	8008b82 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	2200      	movs	r2, #0
 8008b70:	2100      	movs	r1, #0
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 fb50 	bl	8009218 <xQueueGenericSend>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d001      	beq.n	8008b82 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8008b7e:	23ff      	movs	r3, #255	; 0xff
 8008b80:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8008b82:	68fb      	ldr	r3, [r7, #12]
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3710      	adds	r7, #16
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}
 8008b8c:	e000ed04 	.word	0xe000ed04

08008b90 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8008b90:	b590      	push	{r4, r7, lr}
 8008b92:	b085      	sub	sp, #20
 8008b94:	af02      	add	r7, sp, #8
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	689b      	ldr	r3, [r3, #8]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d011      	beq.n	8008bc6 <osMessageCreate+0x36>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	68db      	ldr	r3, [r3, #12]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d00d      	beq.n	8008bc6 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6818      	ldr	r0, [r3, #0]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6859      	ldr	r1, [r3, #4]
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	689a      	ldr	r2, [r3, #8]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	68db      	ldr	r3, [r3, #12]
 8008bba:	2400      	movs	r4, #0
 8008bbc:	9400      	str	r4, [sp, #0]
 8008bbe:	f000 fa0d 	bl	8008fdc <xQueueGenericCreateStatic>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	e008      	b.n	8008bd8 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6818      	ldr	r0, [r3, #0]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	f000 fa7b 	bl	80090cc <xQueueGenericCreate>
 8008bd6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	370c      	adds	r7, #12
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd90      	pop	{r4, r7, pc}

08008be0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b086      	sub	sp, #24
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	60f8      	str	r0, [r7, #12]
 8008be8:	60b9      	str	r1, [r7, #8]
 8008bea:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8008bec:	2300      	movs	r3, #0
 8008bee:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d101      	bne.n	8008bfe <osMessagePut+0x1e>
    ticks = 1;
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8008bfe:	f7ff fd47 	bl	8008690 <inHandlerMode>
 8008c02:	4603      	mov	r3, r0
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d018      	beq.n	8008c3a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8008c08:	f107 0210 	add.w	r2, r7, #16
 8008c0c:	f107 0108 	add.w	r1, r7, #8
 8008c10:	2300      	movs	r3, #0
 8008c12:	68f8      	ldr	r0, [r7, #12]
 8008c14:	f000 fbfe 	bl	8009414 <xQueueGenericSendFromISR>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	2b01      	cmp	r3, #1
 8008c1c:	d001      	beq.n	8008c22 <osMessagePut+0x42>
      return osErrorOS;
 8008c1e:	23ff      	movs	r3, #255	; 0xff
 8008c20:	e018      	b.n	8008c54 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d014      	beq.n	8008c52 <osMessagePut+0x72>
 8008c28:	4b0c      	ldr	r3, [pc, #48]	; (8008c5c <osMessagePut+0x7c>)
 8008c2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c2e:	601a      	str	r2, [r3, #0]
 8008c30:	f3bf 8f4f 	dsb	sy
 8008c34:	f3bf 8f6f 	isb	sy
 8008c38:	e00b      	b.n	8008c52 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8008c3a:	f107 0108 	add.w	r1, r7, #8
 8008c3e:	2300      	movs	r3, #0
 8008c40:	697a      	ldr	r2, [r7, #20]
 8008c42:	68f8      	ldr	r0, [r7, #12]
 8008c44:	f000 fae8 	bl	8009218 <xQueueGenericSend>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	2b01      	cmp	r3, #1
 8008c4c:	d001      	beq.n	8008c52 <osMessagePut+0x72>
      return osErrorOS;
 8008c4e:	23ff      	movs	r3, #255	; 0xff
 8008c50:	e000      	b.n	8008c54 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8008c52:	2300      	movs	r3, #0
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	3718      	adds	r7, #24
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}
 8008c5c:	e000ed04 	.word	0xe000ed04

08008c60 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8008c60:	b590      	push	{r4, r7, lr}
 8008c62:	b08b      	sub	sp, #44	; 0x2c
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	60f8      	str	r0, [r7, #12]
 8008c68:	60b9      	str	r1, [r7, #8]
 8008c6a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8008c70:	2300      	movs	r3, #0
 8008c72:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d10a      	bne.n	8008c90 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8008c7a:	2380      	movs	r3, #128	; 0x80
 8008c7c:	617b      	str	r3, [r7, #20]
    return event;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	461c      	mov	r4, r3
 8008c82:	f107 0314 	add.w	r3, r7, #20
 8008c86:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008c8a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008c8e:	e054      	b.n	8008d3a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8008c90:	2300      	movs	r3, #0
 8008c92:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8008c94:	2300      	movs	r3, #0
 8008c96:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c9e:	d103      	bne.n	8008ca8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8008ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8008ca6:	e009      	b.n	8008cbc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d006      	beq.n	8008cbc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8008cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d101      	bne.n	8008cbc <osMessageGet+0x5c>
      ticks = 1;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8008cbc:	f7ff fce8 	bl	8008690 <inHandlerMode>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d01c      	beq.n	8008d00 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8008cc6:	f107 0220 	add.w	r2, r7, #32
 8008cca:	f107 0314 	add.w	r3, r7, #20
 8008cce:	3304      	adds	r3, #4
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	68b8      	ldr	r0, [r7, #8]
 8008cd4:	f000 feb2 	bl	8009a3c <xQueueReceiveFromISR>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	2b01      	cmp	r3, #1
 8008cdc:	d102      	bne.n	8008ce4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8008cde:	2310      	movs	r3, #16
 8008ce0:	617b      	str	r3, [r7, #20]
 8008ce2:	e001      	b.n	8008ce8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008ce8:	6a3b      	ldr	r3, [r7, #32]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d01d      	beq.n	8008d2a <osMessageGet+0xca>
 8008cee:	4b15      	ldr	r3, [pc, #84]	; (8008d44 <osMessageGet+0xe4>)
 8008cf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008cf4:	601a      	str	r2, [r3, #0]
 8008cf6:	f3bf 8f4f 	dsb	sy
 8008cfa:	f3bf 8f6f 	isb	sy
 8008cfe:	e014      	b.n	8008d2a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8008d00:	f107 0314 	add.w	r3, r7, #20
 8008d04:	3304      	adds	r3, #4
 8008d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d08:	4619      	mov	r1, r3
 8008d0a:	68b8      	ldr	r0, [r7, #8]
 8008d0c:	f000 fcaa 	bl	8009664 <xQueueReceive>
 8008d10:	4603      	mov	r3, r0
 8008d12:	2b01      	cmp	r3, #1
 8008d14:	d102      	bne.n	8008d1c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8008d16:	2310      	movs	r3, #16
 8008d18:	617b      	str	r3, [r7, #20]
 8008d1a:	e006      	b.n	8008d2a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8008d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d101      	bne.n	8008d26 <osMessageGet+0xc6>
 8008d22:	2300      	movs	r3, #0
 8008d24:	e000      	b.n	8008d28 <osMessageGet+0xc8>
 8008d26:	2340      	movs	r3, #64	; 0x40
 8008d28:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	461c      	mov	r4, r3
 8008d2e:	f107 0314 	add.w	r3, r7, #20
 8008d32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008d36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8008d3a:	68f8      	ldr	r0, [r7, #12]
 8008d3c:	372c      	adds	r7, #44	; 0x2c
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd90      	pop	{r4, r7, pc}
 8008d42:	bf00      	nop
 8008d44:	e000ed04 	.word	0xe000ed04

08008d48 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f001 fa57 	bl	800a204 <vTaskSuspend>
  
  return osOK;
 8008d56:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3708      	adds	r7, #8
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b082      	sub	sp, #8
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 8008d68:	f7ff fc92 	bl	8008690 <inHandlerMode>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d00e      	beq.n	8008d90 <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f001 fb68 	bl	800a448 <xTaskResumeFromISR>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	2b01      	cmp	r3, #1
 8008d7c:	d10b      	bne.n	8008d96 <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 8008d7e:	4b08      	ldr	r3, [pc, #32]	; (8008da0 <osThreadResume+0x40>)
 8008d80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d84:	601a      	str	r2, [r3, #0]
 8008d86:	f3bf 8f4f 	dsb	sy
 8008d8a:	f3bf 8f6f 	isb	sy
 8008d8e:	e002      	b.n	8008d96 <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f001 fafb 	bl	800a38c <vTaskResume>
  }
  return osOK;
 8008d96:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8008d98:	4618      	mov	r0, r3
 8008d9a:	3708      	adds	r7, #8
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}
 8008da0:	e000ed04 	.word	0xe000ed04

08008da4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008da4:	b480      	push	{r7}
 8008da6:	b083      	sub	sp, #12
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f103 0208 	add.w	r2, r3, #8
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f04f 32ff 	mov.w	r2, #4294967295
 8008dbc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f103 0208 	add.w	r2, r3, #8
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f103 0208 	add.w	r2, r3, #8
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008dd8:	bf00      	nop
 8008dda:	370c      	adds	r7, #12
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de2:	4770      	bx	lr

08008de4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008de4:	b480      	push	{r7}
 8008de6:	b083      	sub	sp, #12
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2200      	movs	r2, #0
 8008df0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008df2:	bf00      	nop
 8008df4:	370c      	adds	r7, #12
 8008df6:	46bd      	mov	sp, r7
 8008df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfc:	4770      	bx	lr

08008dfe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008dfe:	b480      	push	{r7}
 8008e00:	b085      	sub	sp, #20
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	6078      	str	r0, [r7, #4]
 8008e06:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	685b      	ldr	r3, [r3, #4]
 8008e0c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	68fa      	ldr	r2, [r7, #12]
 8008e12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	689a      	ldr	r2, [r3, #8]
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	689b      	ldr	r3, [r3, #8]
 8008e20:	683a      	ldr	r2, [r7, #0]
 8008e22:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	683a      	ldr	r2, [r7, #0]
 8008e28:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	687a      	ldr	r2, [r7, #4]
 8008e2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	1c5a      	adds	r2, r3, #1
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	601a      	str	r2, [r3, #0]
}
 8008e3a:	bf00      	nop
 8008e3c:	3714      	adds	r7, #20
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e44:	4770      	bx	lr

08008e46 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008e46:	b480      	push	{r7}
 8008e48:	b085      	sub	sp, #20
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
 8008e4e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e5c:	d103      	bne.n	8008e66 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	691b      	ldr	r3, [r3, #16]
 8008e62:	60fb      	str	r3, [r7, #12]
 8008e64:	e00c      	b.n	8008e80 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	3308      	adds	r3, #8
 8008e6a:	60fb      	str	r3, [r7, #12]
 8008e6c:	e002      	b.n	8008e74 <vListInsert+0x2e>
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	60fb      	str	r3, [r7, #12]
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	685b      	ldr	r3, [r3, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	68ba      	ldr	r2, [r7, #8]
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d2f6      	bcs.n	8008e6e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	685a      	ldr	r2, [r3, #4]
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	683a      	ldr	r2, [r7, #0]
 8008e8e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	68fa      	ldr	r2, [r7, #12]
 8008e94:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	683a      	ldr	r2, [r7, #0]
 8008e9a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	1c5a      	adds	r2, r3, #1
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	601a      	str	r2, [r3, #0]
}
 8008eac:	bf00      	nop
 8008eae:	3714      	adds	r7, #20
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr

08008eb8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b085      	sub	sp, #20
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	691b      	ldr	r3, [r3, #16]
 8008ec4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	687a      	ldr	r2, [r7, #4]
 8008ecc:	6892      	ldr	r2, [r2, #8]
 8008ece:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	689b      	ldr	r3, [r3, #8]
 8008ed4:	687a      	ldr	r2, [r7, #4]
 8008ed6:	6852      	ldr	r2, [r2, #4]
 8008ed8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	687a      	ldr	r2, [r7, #4]
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d103      	bne.n	8008eec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	689a      	ldr	r2, [r3, #8]
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2200      	movs	r2, #0
 8008ef0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	1e5a      	subs	r2, r3, #1
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3714      	adds	r7, #20
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr

08008f0c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b084      	sub	sp, #16
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d10a      	bne.n	8008f36 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f24:	f383 8811 	msr	BASEPRI, r3
 8008f28:	f3bf 8f6f 	isb	sy
 8008f2c:	f3bf 8f4f 	dsb	sy
 8008f30:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008f32:	bf00      	nop
 8008f34:	e7fe      	b.n	8008f34 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008f36:	f002 fe65 	bl	800bc04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681a      	ldr	r2, [r3, #0]
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f42:	68f9      	ldr	r1, [r7, #12]
 8008f44:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008f46:	fb01 f303 	mul.w	r3, r1, r3
 8008f4a:	441a      	add	r2, r3
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2200      	movs	r2, #0
 8008f54:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681a      	ldr	r2, [r3, #0]
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681a      	ldr	r2, [r3, #0]
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f66:	3b01      	subs	r3, #1
 8008f68:	68f9      	ldr	r1, [r7, #12]
 8008f6a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008f6c:	fb01 f303 	mul.w	r3, r1, r3
 8008f70:	441a      	add	r2, r3
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	22ff      	movs	r2, #255	; 0xff
 8008f7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	22ff      	movs	r2, #255	; 0xff
 8008f82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d114      	bne.n	8008fb6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	691b      	ldr	r3, [r3, #16]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d01a      	beq.n	8008fca <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	3310      	adds	r3, #16
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f001 fd5b 	bl	800aa54 <xTaskRemoveFromEventList>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d012      	beq.n	8008fca <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008fa4:	4b0c      	ldr	r3, [pc, #48]	; (8008fd8 <xQueueGenericReset+0xcc>)
 8008fa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008faa:	601a      	str	r2, [r3, #0]
 8008fac:	f3bf 8f4f 	dsb	sy
 8008fb0:	f3bf 8f6f 	isb	sy
 8008fb4:	e009      	b.n	8008fca <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	3310      	adds	r3, #16
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f7ff fef2 	bl	8008da4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	3324      	adds	r3, #36	; 0x24
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f7ff feed 	bl	8008da4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008fca:	f002 fe4b 	bl	800bc64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008fce:	2301      	movs	r3, #1
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3710      	adds	r7, #16
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}
 8008fd8:	e000ed04 	.word	0xe000ed04

08008fdc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b08e      	sub	sp, #56	; 0x38
 8008fe0:	af02      	add	r7, sp, #8
 8008fe2:	60f8      	str	r0, [r7, #12]
 8008fe4:	60b9      	str	r1, [r7, #8]
 8008fe6:	607a      	str	r2, [r7, #4]
 8008fe8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d10a      	bne.n	8009006 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff4:	f383 8811 	msr	BASEPRI, r3
 8008ff8:	f3bf 8f6f 	isb	sy
 8008ffc:	f3bf 8f4f 	dsb	sy
 8009000:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009002:	bf00      	nop
 8009004:	e7fe      	b.n	8009004 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d10a      	bne.n	8009022 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800900c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009010:	f383 8811 	msr	BASEPRI, r3
 8009014:	f3bf 8f6f 	isb	sy
 8009018:	f3bf 8f4f 	dsb	sy
 800901c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800901e:	bf00      	nop
 8009020:	e7fe      	b.n	8009020 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d002      	beq.n	800902e <xQueueGenericCreateStatic+0x52>
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d001      	beq.n	8009032 <xQueueGenericCreateStatic+0x56>
 800902e:	2301      	movs	r3, #1
 8009030:	e000      	b.n	8009034 <xQueueGenericCreateStatic+0x58>
 8009032:	2300      	movs	r3, #0
 8009034:	2b00      	cmp	r3, #0
 8009036:	d10a      	bne.n	800904e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800903c:	f383 8811 	msr	BASEPRI, r3
 8009040:	f3bf 8f6f 	isb	sy
 8009044:	f3bf 8f4f 	dsb	sy
 8009048:	623b      	str	r3, [r7, #32]
}
 800904a:	bf00      	nop
 800904c:	e7fe      	b.n	800904c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d102      	bne.n	800905a <xQueueGenericCreateStatic+0x7e>
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d101      	bne.n	800905e <xQueueGenericCreateStatic+0x82>
 800905a:	2301      	movs	r3, #1
 800905c:	e000      	b.n	8009060 <xQueueGenericCreateStatic+0x84>
 800905e:	2300      	movs	r3, #0
 8009060:	2b00      	cmp	r3, #0
 8009062:	d10a      	bne.n	800907a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009068:	f383 8811 	msr	BASEPRI, r3
 800906c:	f3bf 8f6f 	isb	sy
 8009070:	f3bf 8f4f 	dsb	sy
 8009074:	61fb      	str	r3, [r7, #28]
}
 8009076:	bf00      	nop
 8009078:	e7fe      	b.n	8009078 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800907a:	2348      	movs	r3, #72	; 0x48
 800907c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	2b48      	cmp	r3, #72	; 0x48
 8009082:	d00a      	beq.n	800909a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009088:	f383 8811 	msr	BASEPRI, r3
 800908c:	f3bf 8f6f 	isb	sy
 8009090:	f3bf 8f4f 	dsb	sy
 8009094:	61bb      	str	r3, [r7, #24]
}
 8009096:	bf00      	nop
 8009098:	e7fe      	b.n	8009098 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800909a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80090a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d00d      	beq.n	80090c2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80090a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090a8:	2201      	movs	r2, #1
 80090aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80090ae:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80090b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090b4:	9300      	str	r3, [sp, #0]
 80090b6:	4613      	mov	r3, r2
 80090b8:	687a      	ldr	r2, [r7, #4]
 80090ba:	68b9      	ldr	r1, [r7, #8]
 80090bc:	68f8      	ldr	r0, [r7, #12]
 80090be:	f000 f83f 	bl	8009140 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80090c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3730      	adds	r7, #48	; 0x30
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}

080090cc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b08a      	sub	sp, #40	; 0x28
 80090d0:	af02      	add	r7, sp, #8
 80090d2:	60f8      	str	r0, [r7, #12]
 80090d4:	60b9      	str	r1, [r7, #8]
 80090d6:	4613      	mov	r3, r2
 80090d8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d10a      	bne.n	80090f6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80090e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e4:	f383 8811 	msr	BASEPRI, r3
 80090e8:	f3bf 8f6f 	isb	sy
 80090ec:	f3bf 8f4f 	dsb	sy
 80090f0:	613b      	str	r3, [r7, #16]
}
 80090f2:	bf00      	nop
 80090f4:	e7fe      	b.n	80090f4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	68ba      	ldr	r2, [r7, #8]
 80090fa:	fb02 f303 	mul.w	r3, r2, r3
 80090fe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009100:	69fb      	ldr	r3, [r7, #28]
 8009102:	3348      	adds	r3, #72	; 0x48
 8009104:	4618      	mov	r0, r3
 8009106:	f002 fe9f 	bl	800be48 <pvPortMalloc>
 800910a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800910c:	69bb      	ldr	r3, [r7, #24]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d011      	beq.n	8009136 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009112:	69bb      	ldr	r3, [r7, #24]
 8009114:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	3348      	adds	r3, #72	; 0x48
 800911a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800911c:	69bb      	ldr	r3, [r7, #24]
 800911e:	2200      	movs	r2, #0
 8009120:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009124:	79fa      	ldrb	r2, [r7, #7]
 8009126:	69bb      	ldr	r3, [r7, #24]
 8009128:	9300      	str	r3, [sp, #0]
 800912a:	4613      	mov	r3, r2
 800912c:	697a      	ldr	r2, [r7, #20]
 800912e:	68b9      	ldr	r1, [r7, #8]
 8009130:	68f8      	ldr	r0, [r7, #12]
 8009132:	f000 f805 	bl	8009140 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009136:	69bb      	ldr	r3, [r7, #24]
	}
 8009138:	4618      	mov	r0, r3
 800913a:	3720      	adds	r7, #32
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b084      	sub	sp, #16
 8009144:	af00      	add	r7, sp, #0
 8009146:	60f8      	str	r0, [r7, #12]
 8009148:	60b9      	str	r1, [r7, #8]
 800914a:	607a      	str	r2, [r7, #4]
 800914c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800914e:	68bb      	ldr	r3, [r7, #8]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d103      	bne.n	800915c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009154:	69bb      	ldr	r3, [r7, #24]
 8009156:	69ba      	ldr	r2, [r7, #24]
 8009158:	601a      	str	r2, [r3, #0]
 800915a:	e002      	b.n	8009162 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800915c:	69bb      	ldr	r3, [r7, #24]
 800915e:	687a      	ldr	r2, [r7, #4]
 8009160:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009162:	69bb      	ldr	r3, [r7, #24]
 8009164:	68fa      	ldr	r2, [r7, #12]
 8009166:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009168:	69bb      	ldr	r3, [r7, #24]
 800916a:	68ba      	ldr	r2, [r7, #8]
 800916c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800916e:	2101      	movs	r1, #1
 8009170:	69b8      	ldr	r0, [r7, #24]
 8009172:	f7ff fecb 	bl	8008f0c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009176:	bf00      	nop
 8009178:	3710      	adds	r7, #16
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}

0800917e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800917e:	b580      	push	{r7, lr}
 8009180:	b082      	sub	sp, #8
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d00e      	beq.n	80091aa <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2200      	movs	r2, #0
 8009190:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2200      	movs	r2, #0
 8009196:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2200      	movs	r2, #0
 800919c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800919e:	2300      	movs	r3, #0
 80091a0:	2200      	movs	r2, #0
 80091a2:	2100      	movs	r1, #0
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f000 f837 	bl	8009218 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80091aa:	bf00      	nop
 80091ac:	3708      	adds	r7, #8
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}

080091b2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80091b2:	b580      	push	{r7, lr}
 80091b4:	b086      	sub	sp, #24
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	4603      	mov	r3, r0
 80091ba:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80091bc:	2301      	movs	r3, #1
 80091be:	617b      	str	r3, [r7, #20]
 80091c0:	2300      	movs	r3, #0
 80091c2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80091c4:	79fb      	ldrb	r3, [r7, #7]
 80091c6:	461a      	mov	r2, r3
 80091c8:	6939      	ldr	r1, [r7, #16]
 80091ca:	6978      	ldr	r0, [r7, #20]
 80091cc:	f7ff ff7e 	bl	80090cc <xQueueGenericCreate>
 80091d0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80091d2:	68f8      	ldr	r0, [r7, #12]
 80091d4:	f7ff ffd3 	bl	800917e <prvInitialiseMutex>

		return xNewQueue;
 80091d8:	68fb      	ldr	r3, [r7, #12]
	}
 80091da:	4618      	mov	r0, r3
 80091dc:	3718      	adds	r7, #24
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}

080091e2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80091e2:	b580      	push	{r7, lr}
 80091e4:	b088      	sub	sp, #32
 80091e6:	af02      	add	r7, sp, #8
 80091e8:	4603      	mov	r3, r0
 80091ea:	6039      	str	r1, [r7, #0]
 80091ec:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80091ee:	2301      	movs	r3, #1
 80091f0:	617b      	str	r3, [r7, #20]
 80091f2:	2300      	movs	r3, #0
 80091f4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80091f6:	79fb      	ldrb	r3, [r7, #7]
 80091f8:	9300      	str	r3, [sp, #0]
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	2200      	movs	r2, #0
 80091fe:	6939      	ldr	r1, [r7, #16]
 8009200:	6978      	ldr	r0, [r7, #20]
 8009202:	f7ff feeb 	bl	8008fdc <xQueueGenericCreateStatic>
 8009206:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009208:	68f8      	ldr	r0, [r7, #12]
 800920a:	f7ff ffb8 	bl	800917e <prvInitialiseMutex>

		return xNewQueue;
 800920e:	68fb      	ldr	r3, [r7, #12]
	}
 8009210:	4618      	mov	r0, r3
 8009212:	3718      	adds	r7, #24
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}

08009218 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b08e      	sub	sp, #56	; 0x38
 800921c:	af00      	add	r7, sp, #0
 800921e:	60f8      	str	r0, [r7, #12]
 8009220:	60b9      	str	r1, [r7, #8]
 8009222:	607a      	str	r2, [r7, #4]
 8009224:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009226:	2300      	movs	r3, #0
 8009228:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800922e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009230:	2b00      	cmp	r3, #0
 8009232:	d10a      	bne.n	800924a <xQueueGenericSend+0x32>
	__asm volatile
 8009234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009238:	f383 8811 	msr	BASEPRI, r3
 800923c:	f3bf 8f6f 	isb	sy
 8009240:	f3bf 8f4f 	dsb	sy
 8009244:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009246:	bf00      	nop
 8009248:	e7fe      	b.n	8009248 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d103      	bne.n	8009258 <xQueueGenericSend+0x40>
 8009250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009254:	2b00      	cmp	r3, #0
 8009256:	d101      	bne.n	800925c <xQueueGenericSend+0x44>
 8009258:	2301      	movs	r3, #1
 800925a:	e000      	b.n	800925e <xQueueGenericSend+0x46>
 800925c:	2300      	movs	r3, #0
 800925e:	2b00      	cmp	r3, #0
 8009260:	d10a      	bne.n	8009278 <xQueueGenericSend+0x60>
	__asm volatile
 8009262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009266:	f383 8811 	msr	BASEPRI, r3
 800926a:	f3bf 8f6f 	isb	sy
 800926e:	f3bf 8f4f 	dsb	sy
 8009272:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009274:	bf00      	nop
 8009276:	e7fe      	b.n	8009276 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	2b02      	cmp	r3, #2
 800927c:	d103      	bne.n	8009286 <xQueueGenericSend+0x6e>
 800927e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009282:	2b01      	cmp	r3, #1
 8009284:	d101      	bne.n	800928a <xQueueGenericSend+0x72>
 8009286:	2301      	movs	r3, #1
 8009288:	e000      	b.n	800928c <xQueueGenericSend+0x74>
 800928a:	2300      	movs	r3, #0
 800928c:	2b00      	cmp	r3, #0
 800928e:	d10a      	bne.n	80092a6 <xQueueGenericSend+0x8e>
	__asm volatile
 8009290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009294:	f383 8811 	msr	BASEPRI, r3
 8009298:	f3bf 8f6f 	isb	sy
 800929c:	f3bf 8f4f 	dsb	sy
 80092a0:	623b      	str	r3, [r7, #32]
}
 80092a2:	bf00      	nop
 80092a4:	e7fe      	b.n	80092a4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80092a6:	f001 fd95 	bl	800add4 <xTaskGetSchedulerState>
 80092aa:	4603      	mov	r3, r0
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d102      	bne.n	80092b6 <xQueueGenericSend+0x9e>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d101      	bne.n	80092ba <xQueueGenericSend+0xa2>
 80092b6:	2301      	movs	r3, #1
 80092b8:	e000      	b.n	80092bc <xQueueGenericSend+0xa4>
 80092ba:	2300      	movs	r3, #0
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d10a      	bne.n	80092d6 <xQueueGenericSend+0xbe>
	__asm volatile
 80092c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c4:	f383 8811 	msr	BASEPRI, r3
 80092c8:	f3bf 8f6f 	isb	sy
 80092cc:	f3bf 8f4f 	dsb	sy
 80092d0:	61fb      	str	r3, [r7, #28]
}
 80092d2:	bf00      	nop
 80092d4:	e7fe      	b.n	80092d4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80092d6:	f002 fc95 	bl	800bc04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80092da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d302      	bcc.n	80092ec <xQueueGenericSend+0xd4>
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	2b02      	cmp	r3, #2
 80092ea:	d129      	bne.n	8009340 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80092ec:	683a      	ldr	r2, [r7, #0]
 80092ee:	68b9      	ldr	r1, [r7, #8]
 80092f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80092f2:	f000 fc3b 	bl	8009b6c <prvCopyDataToQueue>
 80092f6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80092f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d010      	beq.n	8009322 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009302:	3324      	adds	r3, #36	; 0x24
 8009304:	4618      	mov	r0, r3
 8009306:	f001 fba5 	bl	800aa54 <xTaskRemoveFromEventList>
 800930a:	4603      	mov	r3, r0
 800930c:	2b00      	cmp	r3, #0
 800930e:	d013      	beq.n	8009338 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009310:	4b3f      	ldr	r3, [pc, #252]	; (8009410 <xQueueGenericSend+0x1f8>)
 8009312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009316:	601a      	str	r2, [r3, #0]
 8009318:	f3bf 8f4f 	dsb	sy
 800931c:	f3bf 8f6f 	isb	sy
 8009320:	e00a      	b.n	8009338 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009324:	2b00      	cmp	r3, #0
 8009326:	d007      	beq.n	8009338 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009328:	4b39      	ldr	r3, [pc, #228]	; (8009410 <xQueueGenericSend+0x1f8>)
 800932a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800932e:	601a      	str	r2, [r3, #0]
 8009330:	f3bf 8f4f 	dsb	sy
 8009334:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009338:	f002 fc94 	bl	800bc64 <vPortExitCritical>
				return pdPASS;
 800933c:	2301      	movs	r3, #1
 800933e:	e063      	b.n	8009408 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d103      	bne.n	800934e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009346:	f002 fc8d 	bl	800bc64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800934a:	2300      	movs	r3, #0
 800934c:	e05c      	b.n	8009408 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800934e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009350:	2b00      	cmp	r3, #0
 8009352:	d106      	bne.n	8009362 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009354:	f107 0314 	add.w	r3, r7, #20
 8009358:	4618      	mov	r0, r3
 800935a:	f001 fbdd 	bl	800ab18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800935e:	2301      	movs	r3, #1
 8009360:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009362:	f002 fc7f 	bl	800bc64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009366:	f001 f951 	bl	800a60c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800936a:	f002 fc4b 	bl	800bc04 <vPortEnterCritical>
 800936e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009370:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009374:	b25b      	sxtb	r3, r3
 8009376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800937a:	d103      	bne.n	8009384 <xQueueGenericSend+0x16c>
 800937c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800937e:	2200      	movs	r2, #0
 8009380:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009386:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800938a:	b25b      	sxtb	r3, r3
 800938c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009390:	d103      	bne.n	800939a <xQueueGenericSend+0x182>
 8009392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009394:	2200      	movs	r2, #0
 8009396:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800939a:	f002 fc63 	bl	800bc64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800939e:	1d3a      	adds	r2, r7, #4
 80093a0:	f107 0314 	add.w	r3, r7, #20
 80093a4:	4611      	mov	r1, r2
 80093a6:	4618      	mov	r0, r3
 80093a8:	f001 fbcc 	bl	800ab44 <xTaskCheckForTimeOut>
 80093ac:	4603      	mov	r3, r0
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d124      	bne.n	80093fc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80093b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093b4:	f000 fcd2 	bl	8009d5c <prvIsQueueFull>
 80093b8:	4603      	mov	r3, r0
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d018      	beq.n	80093f0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80093be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c0:	3310      	adds	r3, #16
 80093c2:	687a      	ldr	r2, [r7, #4]
 80093c4:	4611      	mov	r1, r2
 80093c6:	4618      	mov	r0, r3
 80093c8:	f001 faf4 	bl	800a9b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80093cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093ce:	f000 fc5d 	bl	8009c8c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80093d2:	f001 f929 	bl	800a628 <xTaskResumeAll>
 80093d6:	4603      	mov	r3, r0
 80093d8:	2b00      	cmp	r3, #0
 80093da:	f47f af7c 	bne.w	80092d6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80093de:	4b0c      	ldr	r3, [pc, #48]	; (8009410 <xQueueGenericSend+0x1f8>)
 80093e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093e4:	601a      	str	r2, [r3, #0]
 80093e6:	f3bf 8f4f 	dsb	sy
 80093ea:	f3bf 8f6f 	isb	sy
 80093ee:	e772      	b.n	80092d6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80093f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093f2:	f000 fc4b 	bl	8009c8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80093f6:	f001 f917 	bl	800a628 <xTaskResumeAll>
 80093fa:	e76c      	b.n	80092d6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80093fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80093fe:	f000 fc45 	bl	8009c8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009402:	f001 f911 	bl	800a628 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009406:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009408:	4618      	mov	r0, r3
 800940a:	3738      	adds	r7, #56	; 0x38
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}
 8009410:	e000ed04 	.word	0xe000ed04

08009414 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b090      	sub	sp, #64	; 0x40
 8009418:	af00      	add	r7, sp, #0
 800941a:	60f8      	str	r0, [r7, #12]
 800941c:	60b9      	str	r1, [r7, #8]
 800941e:	607a      	str	r2, [r7, #4]
 8009420:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009428:	2b00      	cmp	r3, #0
 800942a:	d10a      	bne.n	8009442 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800942c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009430:	f383 8811 	msr	BASEPRI, r3
 8009434:	f3bf 8f6f 	isb	sy
 8009438:	f3bf 8f4f 	dsb	sy
 800943c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800943e:	bf00      	nop
 8009440:	e7fe      	b.n	8009440 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d103      	bne.n	8009450 <xQueueGenericSendFromISR+0x3c>
 8009448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800944a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800944c:	2b00      	cmp	r3, #0
 800944e:	d101      	bne.n	8009454 <xQueueGenericSendFromISR+0x40>
 8009450:	2301      	movs	r3, #1
 8009452:	e000      	b.n	8009456 <xQueueGenericSendFromISR+0x42>
 8009454:	2300      	movs	r3, #0
 8009456:	2b00      	cmp	r3, #0
 8009458:	d10a      	bne.n	8009470 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800945a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800945e:	f383 8811 	msr	BASEPRI, r3
 8009462:	f3bf 8f6f 	isb	sy
 8009466:	f3bf 8f4f 	dsb	sy
 800946a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800946c:	bf00      	nop
 800946e:	e7fe      	b.n	800946e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	2b02      	cmp	r3, #2
 8009474:	d103      	bne.n	800947e <xQueueGenericSendFromISR+0x6a>
 8009476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800947a:	2b01      	cmp	r3, #1
 800947c:	d101      	bne.n	8009482 <xQueueGenericSendFromISR+0x6e>
 800947e:	2301      	movs	r3, #1
 8009480:	e000      	b.n	8009484 <xQueueGenericSendFromISR+0x70>
 8009482:	2300      	movs	r3, #0
 8009484:	2b00      	cmp	r3, #0
 8009486:	d10a      	bne.n	800949e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800948c:	f383 8811 	msr	BASEPRI, r3
 8009490:	f3bf 8f6f 	isb	sy
 8009494:	f3bf 8f4f 	dsb	sy
 8009498:	623b      	str	r3, [r7, #32]
}
 800949a:	bf00      	nop
 800949c:	e7fe      	b.n	800949c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800949e:	f002 fc93 	bl	800bdc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80094a2:	f3ef 8211 	mrs	r2, BASEPRI
 80094a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094aa:	f383 8811 	msr	BASEPRI, r3
 80094ae:	f3bf 8f6f 	isb	sy
 80094b2:	f3bf 8f4f 	dsb	sy
 80094b6:	61fa      	str	r2, [r7, #28]
 80094b8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80094ba:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80094bc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80094be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094c6:	429a      	cmp	r2, r3
 80094c8:	d302      	bcc.n	80094d0 <xQueueGenericSendFromISR+0xbc>
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	2b02      	cmp	r3, #2
 80094ce:	d12f      	bne.n	8009530 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80094d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80094da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094de:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80094e0:	683a      	ldr	r2, [r7, #0]
 80094e2:	68b9      	ldr	r1, [r7, #8]
 80094e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80094e6:	f000 fb41 	bl	8009b6c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80094ea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80094ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094f2:	d112      	bne.n	800951a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80094f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d016      	beq.n	800952a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80094fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094fe:	3324      	adds	r3, #36	; 0x24
 8009500:	4618      	mov	r0, r3
 8009502:	f001 faa7 	bl	800aa54 <xTaskRemoveFromEventList>
 8009506:	4603      	mov	r3, r0
 8009508:	2b00      	cmp	r3, #0
 800950a:	d00e      	beq.n	800952a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d00b      	beq.n	800952a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2201      	movs	r2, #1
 8009516:	601a      	str	r2, [r3, #0]
 8009518:	e007      	b.n	800952a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800951a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800951e:	3301      	adds	r3, #1
 8009520:	b2db      	uxtb	r3, r3
 8009522:	b25a      	sxtb	r2, r3
 8009524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009526:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800952a:	2301      	movs	r3, #1
 800952c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800952e:	e001      	b.n	8009534 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009530:	2300      	movs	r3, #0
 8009532:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009536:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800953e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009542:	4618      	mov	r0, r3
 8009544:	3740      	adds	r7, #64	; 0x40
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}

0800954a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800954a:	b580      	push	{r7, lr}
 800954c:	b08e      	sub	sp, #56	; 0x38
 800954e:	af00      	add	r7, sp, #0
 8009550:	6078      	str	r0, [r7, #4]
 8009552:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800955a:	2b00      	cmp	r3, #0
 800955c:	d10a      	bne.n	8009574 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800955e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009562:	f383 8811 	msr	BASEPRI, r3
 8009566:	f3bf 8f6f 	isb	sy
 800956a:	f3bf 8f4f 	dsb	sy
 800956e:	623b      	str	r3, [r7, #32]
}
 8009570:	bf00      	nop
 8009572:	e7fe      	b.n	8009572 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009578:	2b00      	cmp	r3, #0
 800957a:	d00a      	beq.n	8009592 <xQueueGiveFromISR+0x48>
	__asm volatile
 800957c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009580:	f383 8811 	msr	BASEPRI, r3
 8009584:	f3bf 8f6f 	isb	sy
 8009588:	f3bf 8f4f 	dsb	sy
 800958c:	61fb      	str	r3, [r7, #28]
}
 800958e:	bf00      	nop
 8009590:	e7fe      	b.n	8009590 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d103      	bne.n	80095a2 <xQueueGiveFromISR+0x58>
 800959a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800959c:	689b      	ldr	r3, [r3, #8]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d101      	bne.n	80095a6 <xQueueGiveFromISR+0x5c>
 80095a2:	2301      	movs	r3, #1
 80095a4:	e000      	b.n	80095a8 <xQueueGiveFromISR+0x5e>
 80095a6:	2300      	movs	r3, #0
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d10a      	bne.n	80095c2 <xQueueGiveFromISR+0x78>
	__asm volatile
 80095ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b0:	f383 8811 	msr	BASEPRI, r3
 80095b4:	f3bf 8f6f 	isb	sy
 80095b8:	f3bf 8f4f 	dsb	sy
 80095bc:	61bb      	str	r3, [r7, #24]
}
 80095be:	bf00      	nop
 80095c0:	e7fe      	b.n	80095c0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80095c2:	f002 fc01 	bl	800bdc8 <vPortValidateInterruptPriority>
	__asm volatile
 80095c6:	f3ef 8211 	mrs	r2, BASEPRI
 80095ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ce:	f383 8811 	msr	BASEPRI, r3
 80095d2:	f3bf 8f6f 	isb	sy
 80095d6:	f3bf 8f4f 	dsb	sy
 80095da:	617a      	str	r2, [r7, #20]
 80095dc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80095de:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80095e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80095e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095e6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80095e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d22b      	bcs.n	800964a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80095f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80095f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80095fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095fe:	1c5a      	adds	r2, r3, #1
 8009600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009602:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009604:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800960c:	d112      	bne.n	8009634 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800960e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009612:	2b00      	cmp	r3, #0
 8009614:	d016      	beq.n	8009644 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009618:	3324      	adds	r3, #36	; 0x24
 800961a:	4618      	mov	r0, r3
 800961c:	f001 fa1a 	bl	800aa54 <xTaskRemoveFromEventList>
 8009620:	4603      	mov	r3, r0
 8009622:	2b00      	cmp	r3, #0
 8009624:	d00e      	beq.n	8009644 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d00b      	beq.n	8009644 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	2201      	movs	r2, #1
 8009630:	601a      	str	r2, [r3, #0]
 8009632:	e007      	b.n	8009644 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009634:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009638:	3301      	adds	r3, #1
 800963a:	b2db      	uxtb	r3, r3
 800963c:	b25a      	sxtb	r2, r3
 800963e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009640:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009644:	2301      	movs	r3, #1
 8009646:	637b      	str	r3, [r7, #52]	; 0x34
 8009648:	e001      	b.n	800964e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800964a:	2300      	movs	r3, #0
 800964c:	637b      	str	r3, [r7, #52]	; 0x34
 800964e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009650:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	f383 8811 	msr	BASEPRI, r3
}
 8009658:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800965a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800965c:	4618      	mov	r0, r3
 800965e:	3738      	adds	r7, #56	; 0x38
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}

08009664 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b08c      	sub	sp, #48	; 0x30
 8009668:	af00      	add	r7, sp, #0
 800966a:	60f8      	str	r0, [r7, #12]
 800966c:	60b9      	str	r1, [r7, #8]
 800966e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009670:	2300      	movs	r3, #0
 8009672:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800967a:	2b00      	cmp	r3, #0
 800967c:	d10a      	bne.n	8009694 <xQueueReceive+0x30>
	__asm volatile
 800967e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009682:	f383 8811 	msr	BASEPRI, r3
 8009686:	f3bf 8f6f 	isb	sy
 800968a:	f3bf 8f4f 	dsb	sy
 800968e:	623b      	str	r3, [r7, #32]
}
 8009690:	bf00      	nop
 8009692:	e7fe      	b.n	8009692 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d103      	bne.n	80096a2 <xQueueReceive+0x3e>
 800969a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800969c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d101      	bne.n	80096a6 <xQueueReceive+0x42>
 80096a2:	2301      	movs	r3, #1
 80096a4:	e000      	b.n	80096a8 <xQueueReceive+0x44>
 80096a6:	2300      	movs	r3, #0
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d10a      	bne.n	80096c2 <xQueueReceive+0x5e>
	__asm volatile
 80096ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b0:	f383 8811 	msr	BASEPRI, r3
 80096b4:	f3bf 8f6f 	isb	sy
 80096b8:	f3bf 8f4f 	dsb	sy
 80096bc:	61fb      	str	r3, [r7, #28]
}
 80096be:	bf00      	nop
 80096c0:	e7fe      	b.n	80096c0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80096c2:	f001 fb87 	bl	800add4 <xTaskGetSchedulerState>
 80096c6:	4603      	mov	r3, r0
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d102      	bne.n	80096d2 <xQueueReceive+0x6e>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d101      	bne.n	80096d6 <xQueueReceive+0x72>
 80096d2:	2301      	movs	r3, #1
 80096d4:	e000      	b.n	80096d8 <xQueueReceive+0x74>
 80096d6:	2300      	movs	r3, #0
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d10a      	bne.n	80096f2 <xQueueReceive+0x8e>
	__asm volatile
 80096dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e0:	f383 8811 	msr	BASEPRI, r3
 80096e4:	f3bf 8f6f 	isb	sy
 80096e8:	f3bf 8f4f 	dsb	sy
 80096ec:	61bb      	str	r3, [r7, #24]
}
 80096ee:	bf00      	nop
 80096f0:	e7fe      	b.n	80096f0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80096f2:	f002 fa87 	bl	800bc04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80096f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096fa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80096fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d01f      	beq.n	8009742 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009702:	68b9      	ldr	r1, [r7, #8]
 8009704:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009706:	f000 fa9b 	bl	8009c40 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800970a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800970c:	1e5a      	subs	r2, r3, #1
 800970e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009710:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009714:	691b      	ldr	r3, [r3, #16]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d00f      	beq.n	800973a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800971a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800971c:	3310      	adds	r3, #16
 800971e:	4618      	mov	r0, r3
 8009720:	f001 f998 	bl	800aa54 <xTaskRemoveFromEventList>
 8009724:	4603      	mov	r3, r0
 8009726:	2b00      	cmp	r3, #0
 8009728:	d007      	beq.n	800973a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800972a:	4b3d      	ldr	r3, [pc, #244]	; (8009820 <xQueueReceive+0x1bc>)
 800972c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009730:	601a      	str	r2, [r3, #0]
 8009732:	f3bf 8f4f 	dsb	sy
 8009736:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800973a:	f002 fa93 	bl	800bc64 <vPortExitCritical>
				return pdPASS;
 800973e:	2301      	movs	r3, #1
 8009740:	e069      	b.n	8009816 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d103      	bne.n	8009750 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009748:	f002 fa8c 	bl	800bc64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800974c:	2300      	movs	r3, #0
 800974e:	e062      	b.n	8009816 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009752:	2b00      	cmp	r3, #0
 8009754:	d106      	bne.n	8009764 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009756:	f107 0310 	add.w	r3, r7, #16
 800975a:	4618      	mov	r0, r3
 800975c:	f001 f9dc 	bl	800ab18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009760:	2301      	movs	r3, #1
 8009762:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009764:	f002 fa7e 	bl	800bc64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009768:	f000 ff50 	bl	800a60c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800976c:	f002 fa4a 	bl	800bc04 <vPortEnterCritical>
 8009770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009772:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009776:	b25b      	sxtb	r3, r3
 8009778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800977c:	d103      	bne.n	8009786 <xQueueReceive+0x122>
 800977e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009780:	2200      	movs	r2, #0
 8009782:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009788:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800978c:	b25b      	sxtb	r3, r3
 800978e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009792:	d103      	bne.n	800979c <xQueueReceive+0x138>
 8009794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009796:	2200      	movs	r2, #0
 8009798:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800979c:	f002 fa62 	bl	800bc64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80097a0:	1d3a      	adds	r2, r7, #4
 80097a2:	f107 0310 	add.w	r3, r7, #16
 80097a6:	4611      	mov	r1, r2
 80097a8:	4618      	mov	r0, r3
 80097aa:	f001 f9cb 	bl	800ab44 <xTaskCheckForTimeOut>
 80097ae:	4603      	mov	r3, r0
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d123      	bne.n	80097fc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80097b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097b6:	f000 fabb 	bl	8009d30 <prvIsQueueEmpty>
 80097ba:	4603      	mov	r3, r0
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d017      	beq.n	80097f0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80097c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c2:	3324      	adds	r3, #36	; 0x24
 80097c4:	687a      	ldr	r2, [r7, #4]
 80097c6:	4611      	mov	r1, r2
 80097c8:	4618      	mov	r0, r3
 80097ca:	f001 f8f3 	bl	800a9b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80097ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097d0:	f000 fa5c 	bl	8009c8c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80097d4:	f000 ff28 	bl	800a628 <xTaskResumeAll>
 80097d8:	4603      	mov	r3, r0
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d189      	bne.n	80096f2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80097de:	4b10      	ldr	r3, [pc, #64]	; (8009820 <xQueueReceive+0x1bc>)
 80097e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097e4:	601a      	str	r2, [r3, #0]
 80097e6:	f3bf 8f4f 	dsb	sy
 80097ea:	f3bf 8f6f 	isb	sy
 80097ee:	e780      	b.n	80096f2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80097f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097f2:	f000 fa4b 	bl	8009c8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80097f6:	f000 ff17 	bl	800a628 <xTaskResumeAll>
 80097fa:	e77a      	b.n	80096f2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80097fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097fe:	f000 fa45 	bl	8009c8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009802:	f000 ff11 	bl	800a628 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009806:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009808:	f000 fa92 	bl	8009d30 <prvIsQueueEmpty>
 800980c:	4603      	mov	r3, r0
 800980e:	2b00      	cmp	r3, #0
 8009810:	f43f af6f 	beq.w	80096f2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009814:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009816:	4618      	mov	r0, r3
 8009818:	3730      	adds	r7, #48	; 0x30
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
 800981e:	bf00      	nop
 8009820:	e000ed04 	.word	0xe000ed04

08009824 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b08e      	sub	sp, #56	; 0x38
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800982e:	2300      	movs	r3, #0
 8009830:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009836:	2300      	movs	r3, #0
 8009838:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800983a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800983c:	2b00      	cmp	r3, #0
 800983e:	d10a      	bne.n	8009856 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009844:	f383 8811 	msr	BASEPRI, r3
 8009848:	f3bf 8f6f 	isb	sy
 800984c:	f3bf 8f4f 	dsb	sy
 8009850:	623b      	str	r3, [r7, #32]
}
 8009852:	bf00      	nop
 8009854:	e7fe      	b.n	8009854 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800985a:	2b00      	cmp	r3, #0
 800985c:	d00a      	beq.n	8009874 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800985e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009862:	f383 8811 	msr	BASEPRI, r3
 8009866:	f3bf 8f6f 	isb	sy
 800986a:	f3bf 8f4f 	dsb	sy
 800986e:	61fb      	str	r3, [r7, #28]
}
 8009870:	bf00      	nop
 8009872:	e7fe      	b.n	8009872 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009874:	f001 faae 	bl	800add4 <xTaskGetSchedulerState>
 8009878:	4603      	mov	r3, r0
 800987a:	2b00      	cmp	r3, #0
 800987c:	d102      	bne.n	8009884 <xQueueSemaphoreTake+0x60>
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d101      	bne.n	8009888 <xQueueSemaphoreTake+0x64>
 8009884:	2301      	movs	r3, #1
 8009886:	e000      	b.n	800988a <xQueueSemaphoreTake+0x66>
 8009888:	2300      	movs	r3, #0
 800988a:	2b00      	cmp	r3, #0
 800988c:	d10a      	bne.n	80098a4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800988e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009892:	f383 8811 	msr	BASEPRI, r3
 8009896:	f3bf 8f6f 	isb	sy
 800989a:	f3bf 8f4f 	dsb	sy
 800989e:	61bb      	str	r3, [r7, #24]
}
 80098a0:	bf00      	nop
 80098a2:	e7fe      	b.n	80098a2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80098a4:	f002 f9ae 	bl	800bc04 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80098a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ac:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80098ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d024      	beq.n	80098fe <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80098b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b6:	1e5a      	subs	r2, r3, #1
 80098b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ba:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80098bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d104      	bne.n	80098ce <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80098c4:	f001 fc2e 	bl	800b124 <pvTaskIncrementMutexHeldCount>
 80098c8:	4602      	mov	r2, r0
 80098ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098cc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80098ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098d0:	691b      	ldr	r3, [r3, #16]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d00f      	beq.n	80098f6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80098d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098d8:	3310      	adds	r3, #16
 80098da:	4618      	mov	r0, r3
 80098dc:	f001 f8ba 	bl	800aa54 <xTaskRemoveFromEventList>
 80098e0:	4603      	mov	r3, r0
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d007      	beq.n	80098f6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80098e6:	4b54      	ldr	r3, [pc, #336]	; (8009a38 <xQueueSemaphoreTake+0x214>)
 80098e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098ec:	601a      	str	r2, [r3, #0]
 80098ee:	f3bf 8f4f 	dsb	sy
 80098f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80098f6:	f002 f9b5 	bl	800bc64 <vPortExitCritical>
				return pdPASS;
 80098fa:	2301      	movs	r3, #1
 80098fc:	e097      	b.n	8009a2e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d111      	bne.n	8009928 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009906:	2b00      	cmp	r3, #0
 8009908:	d00a      	beq.n	8009920 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800990a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800990e:	f383 8811 	msr	BASEPRI, r3
 8009912:	f3bf 8f6f 	isb	sy
 8009916:	f3bf 8f4f 	dsb	sy
 800991a:	617b      	str	r3, [r7, #20]
}
 800991c:	bf00      	nop
 800991e:	e7fe      	b.n	800991e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009920:	f002 f9a0 	bl	800bc64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009924:	2300      	movs	r3, #0
 8009926:	e082      	b.n	8009a2e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800992a:	2b00      	cmp	r3, #0
 800992c:	d106      	bne.n	800993c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800992e:	f107 030c 	add.w	r3, r7, #12
 8009932:	4618      	mov	r0, r3
 8009934:	f001 f8f0 	bl	800ab18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009938:	2301      	movs	r3, #1
 800993a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800993c:	f002 f992 	bl	800bc64 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009940:	f000 fe64 	bl	800a60c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009944:	f002 f95e 	bl	800bc04 <vPortEnterCritical>
 8009948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800994a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800994e:	b25b      	sxtb	r3, r3
 8009950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009954:	d103      	bne.n	800995e <xQueueSemaphoreTake+0x13a>
 8009956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009958:	2200      	movs	r2, #0
 800995a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800995e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009960:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009964:	b25b      	sxtb	r3, r3
 8009966:	f1b3 3fff 	cmp.w	r3, #4294967295
 800996a:	d103      	bne.n	8009974 <xQueueSemaphoreTake+0x150>
 800996c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800996e:	2200      	movs	r2, #0
 8009970:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009974:	f002 f976 	bl	800bc64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009978:	463a      	mov	r2, r7
 800997a:	f107 030c 	add.w	r3, r7, #12
 800997e:	4611      	mov	r1, r2
 8009980:	4618      	mov	r0, r3
 8009982:	f001 f8df 	bl	800ab44 <xTaskCheckForTimeOut>
 8009986:	4603      	mov	r3, r0
 8009988:	2b00      	cmp	r3, #0
 800998a:	d132      	bne.n	80099f2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800998c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800998e:	f000 f9cf 	bl	8009d30 <prvIsQueueEmpty>
 8009992:	4603      	mov	r3, r0
 8009994:	2b00      	cmp	r3, #0
 8009996:	d026      	beq.n	80099e6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d109      	bne.n	80099b4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80099a0:	f002 f930 	bl	800bc04 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80099a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099a6:	689b      	ldr	r3, [r3, #8]
 80099a8:	4618      	mov	r0, r3
 80099aa:	f001 fa31 	bl	800ae10 <xTaskPriorityInherit>
 80099ae:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80099b0:	f002 f958 	bl	800bc64 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80099b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099b6:	3324      	adds	r3, #36	; 0x24
 80099b8:	683a      	ldr	r2, [r7, #0]
 80099ba:	4611      	mov	r1, r2
 80099bc:	4618      	mov	r0, r3
 80099be:	f000 fff9 	bl	800a9b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80099c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80099c4:	f000 f962 	bl	8009c8c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80099c8:	f000 fe2e 	bl	800a628 <xTaskResumeAll>
 80099cc:	4603      	mov	r3, r0
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	f47f af68 	bne.w	80098a4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80099d4:	4b18      	ldr	r3, [pc, #96]	; (8009a38 <xQueueSemaphoreTake+0x214>)
 80099d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099da:	601a      	str	r2, [r3, #0]
 80099dc:	f3bf 8f4f 	dsb	sy
 80099e0:	f3bf 8f6f 	isb	sy
 80099e4:	e75e      	b.n	80098a4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80099e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80099e8:	f000 f950 	bl	8009c8c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80099ec:	f000 fe1c 	bl	800a628 <xTaskResumeAll>
 80099f0:	e758      	b.n	80098a4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80099f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80099f4:	f000 f94a 	bl	8009c8c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80099f8:	f000 fe16 	bl	800a628 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80099fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80099fe:	f000 f997 	bl	8009d30 <prvIsQueueEmpty>
 8009a02:	4603      	mov	r3, r0
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	f43f af4d 	beq.w	80098a4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d00d      	beq.n	8009a2c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009a10:	f002 f8f8 	bl	800bc04 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009a14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a16:	f000 f891 	bl	8009b3c <prvGetDisinheritPriorityAfterTimeout>
 8009a1a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a1e:	689b      	ldr	r3, [r3, #8]
 8009a20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a22:	4618      	mov	r0, r3
 8009a24:	f001 faf0 	bl	800b008 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009a28:	f002 f91c 	bl	800bc64 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009a2c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3738      	adds	r7, #56	; 0x38
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
 8009a36:	bf00      	nop
 8009a38:	e000ed04 	.word	0xe000ed04

08009a3c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b08e      	sub	sp, #56	; 0x38
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	60f8      	str	r0, [r7, #12]
 8009a44:	60b9      	str	r1, [r7, #8]
 8009a46:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d10a      	bne.n	8009a68 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8009a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a56:	f383 8811 	msr	BASEPRI, r3
 8009a5a:	f3bf 8f6f 	isb	sy
 8009a5e:	f3bf 8f4f 	dsb	sy
 8009a62:	623b      	str	r3, [r7, #32]
}
 8009a64:	bf00      	nop
 8009a66:	e7fe      	b.n	8009a66 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d103      	bne.n	8009a76 <xQueueReceiveFromISR+0x3a>
 8009a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d101      	bne.n	8009a7a <xQueueReceiveFromISR+0x3e>
 8009a76:	2301      	movs	r3, #1
 8009a78:	e000      	b.n	8009a7c <xQueueReceiveFromISR+0x40>
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d10a      	bne.n	8009a96 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a84:	f383 8811 	msr	BASEPRI, r3
 8009a88:	f3bf 8f6f 	isb	sy
 8009a8c:	f3bf 8f4f 	dsb	sy
 8009a90:	61fb      	str	r3, [r7, #28]
}
 8009a92:	bf00      	nop
 8009a94:	e7fe      	b.n	8009a94 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009a96:	f002 f997 	bl	800bdc8 <vPortValidateInterruptPriority>
	__asm volatile
 8009a9a:	f3ef 8211 	mrs	r2, BASEPRI
 8009a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa2:	f383 8811 	msr	BASEPRI, r3
 8009aa6:	f3bf 8f6f 	isb	sy
 8009aaa:	f3bf 8f4f 	dsb	sy
 8009aae:	61ba      	str	r2, [r7, #24]
 8009ab0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009ab2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d02f      	beq.n	8009b22 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ac4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009ac8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009acc:	68b9      	ldr	r1, [r7, #8]
 8009ace:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ad0:	f000 f8b6 	bl	8009c40 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ad6:	1e5a      	subs	r2, r3, #1
 8009ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ada:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009adc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ae4:	d112      	bne.n	8009b0c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae8:	691b      	ldr	r3, [r3, #16]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d016      	beq.n	8009b1c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af0:	3310      	adds	r3, #16
 8009af2:	4618      	mov	r0, r3
 8009af4:	f000 ffae 	bl	800aa54 <xTaskRemoveFromEventList>
 8009af8:	4603      	mov	r3, r0
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d00e      	beq.n	8009b1c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d00b      	beq.n	8009b1c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2201      	movs	r2, #1
 8009b08:	601a      	str	r2, [r3, #0]
 8009b0a:	e007      	b.n	8009b1c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009b0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b10:	3301      	adds	r3, #1
 8009b12:	b2db      	uxtb	r3, r3
 8009b14:	b25a      	sxtb	r2, r3
 8009b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	637b      	str	r3, [r7, #52]	; 0x34
 8009b20:	e001      	b.n	8009b26 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8009b22:	2300      	movs	r3, #0
 8009b24:	637b      	str	r3, [r7, #52]	; 0x34
 8009b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b28:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009b2a:	693b      	ldr	r3, [r7, #16]
 8009b2c:	f383 8811 	msr	BASEPRI, r3
}
 8009b30:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3738      	adds	r7, #56	; 0x38
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}

08009b3c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b085      	sub	sp, #20
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d006      	beq.n	8009b5a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f1c3 0307 	rsb	r3, r3, #7
 8009b56:	60fb      	str	r3, [r7, #12]
 8009b58:	e001      	b.n	8009b5e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
	}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3714      	adds	r7, #20
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr

08009b6c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b086      	sub	sp, #24
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	60f8      	str	r0, [r7, #12]
 8009b74:	60b9      	str	r1, [r7, #8]
 8009b76:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009b78:	2300      	movs	r3, #0
 8009b7a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b80:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d10d      	bne.n	8009ba6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d14d      	bne.n	8009c2e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	689b      	ldr	r3, [r3, #8]
 8009b96:	4618      	mov	r0, r3
 8009b98:	f001 f9b0 	bl	800aefc <xTaskPriorityDisinherit>
 8009b9c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	609a      	str	r2, [r3, #8]
 8009ba4:	e043      	b.n	8009c2e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d119      	bne.n	8009be0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	6858      	ldr	r0, [r3, #4]
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bb4:	461a      	mov	r2, r3
 8009bb6:	68b9      	ldr	r1, [r7, #8]
 8009bb8:	f010 fc6e 	bl	801a498 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	685a      	ldr	r2, [r3, #4]
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bc4:	441a      	add	r2, r3
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	685a      	ldr	r2, [r3, #4]
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	689b      	ldr	r3, [r3, #8]
 8009bd2:	429a      	cmp	r2, r3
 8009bd4:	d32b      	bcc.n	8009c2e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681a      	ldr	r2, [r3, #0]
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	605a      	str	r2, [r3, #4]
 8009bde:	e026      	b.n	8009c2e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	68d8      	ldr	r0, [r3, #12]
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009be8:	461a      	mov	r2, r3
 8009bea:	68b9      	ldr	r1, [r7, #8]
 8009bec:	f010 fc54 	bl	801a498 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	68da      	ldr	r2, [r3, #12]
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bf8:	425b      	negs	r3, r3
 8009bfa:	441a      	add	r2, r3
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	68da      	ldr	r2, [r3, #12]
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	d207      	bcs.n	8009c1c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	689a      	ldr	r2, [r3, #8]
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c14:	425b      	negs	r3, r3
 8009c16:	441a      	add	r2, r3
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2b02      	cmp	r3, #2
 8009c20:	d105      	bne.n	8009c2e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d002      	beq.n	8009c2e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	3b01      	subs	r3, #1
 8009c2c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	1c5a      	adds	r2, r3, #1
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009c36:	697b      	ldr	r3, [r7, #20]
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	3718      	adds	r7, #24
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}

08009c40 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b082      	sub	sp, #8
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
 8009c48:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d018      	beq.n	8009c84 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	68da      	ldr	r2, [r3, #12]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c5a:	441a      	add	r2, r3
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	68da      	ldr	r2, [r3, #12]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	d303      	bcc.n	8009c74 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681a      	ldr	r2, [r3, #0]
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	68d9      	ldr	r1, [r3, #12]
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c7c:	461a      	mov	r2, r3
 8009c7e:	6838      	ldr	r0, [r7, #0]
 8009c80:	f010 fc0a 	bl	801a498 <memcpy>
	}
}
 8009c84:	bf00      	nop
 8009c86:	3708      	adds	r7, #8
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}

08009c8c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b084      	sub	sp, #16
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009c94:	f001 ffb6 	bl	800bc04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c9e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009ca0:	e011      	b.n	8009cc6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d012      	beq.n	8009cd0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	3324      	adds	r3, #36	; 0x24
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f000 fed0 	bl	800aa54 <xTaskRemoveFromEventList>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d001      	beq.n	8009cbe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009cba:	f000 ffa5 	bl	800ac08 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009cbe:	7bfb      	ldrb	r3, [r7, #15]
 8009cc0:	3b01      	subs	r3, #1
 8009cc2:	b2db      	uxtb	r3, r3
 8009cc4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	dce9      	bgt.n	8009ca2 <prvUnlockQueue+0x16>
 8009cce:	e000      	b.n	8009cd2 <prvUnlockQueue+0x46>
					break;
 8009cd0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	22ff      	movs	r2, #255	; 0xff
 8009cd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009cda:	f001 ffc3 	bl	800bc64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009cde:	f001 ff91 	bl	800bc04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009ce8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009cea:	e011      	b.n	8009d10 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	691b      	ldr	r3, [r3, #16]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d012      	beq.n	8009d1a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	3310      	adds	r3, #16
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f000 feab 	bl	800aa54 <xTaskRemoveFromEventList>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d001      	beq.n	8009d08 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009d04:	f000 ff80 	bl	800ac08 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009d08:	7bbb      	ldrb	r3, [r7, #14]
 8009d0a:	3b01      	subs	r3, #1
 8009d0c:	b2db      	uxtb	r3, r3
 8009d0e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009d10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	dce9      	bgt.n	8009cec <prvUnlockQueue+0x60>
 8009d18:	e000      	b.n	8009d1c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009d1a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	22ff      	movs	r2, #255	; 0xff
 8009d20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009d24:	f001 ff9e 	bl	800bc64 <vPortExitCritical>
}
 8009d28:	bf00      	nop
 8009d2a:	3710      	adds	r7, #16
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}

08009d30 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b084      	sub	sp, #16
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009d38:	f001 ff64 	bl	800bc04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d102      	bne.n	8009d4a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009d44:	2301      	movs	r3, #1
 8009d46:	60fb      	str	r3, [r7, #12]
 8009d48:	e001      	b.n	8009d4e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009d4e:	f001 ff89 	bl	800bc64 <vPortExitCritical>

	return xReturn;
 8009d52:	68fb      	ldr	r3, [r7, #12]
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3710      	adds	r7, #16
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}

08009d5c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b084      	sub	sp, #16
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009d64:	f001 ff4e 	bl	800bc04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d70:	429a      	cmp	r2, r3
 8009d72:	d102      	bne.n	8009d7a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009d74:	2301      	movs	r3, #1
 8009d76:	60fb      	str	r3, [r7, #12]
 8009d78:	e001      	b.n	8009d7e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009d7e:	f001 ff71 	bl	800bc64 <vPortExitCritical>

	return xReturn;
 8009d82:	68fb      	ldr	r3, [r7, #12]
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3710      	adds	r7, #16
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}

08009d8c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b085      	sub	sp, #20
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009d96:	2300      	movs	r3, #0
 8009d98:	60fb      	str	r3, [r7, #12]
 8009d9a:	e014      	b.n	8009dc6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009d9c:	4a0f      	ldr	r2, [pc, #60]	; (8009ddc <vQueueAddToRegistry+0x50>)
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d10b      	bne.n	8009dc0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009da8:	490c      	ldr	r1, [pc, #48]	; (8009ddc <vQueueAddToRegistry+0x50>)
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	683a      	ldr	r2, [r7, #0]
 8009dae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009db2:	4a0a      	ldr	r2, [pc, #40]	; (8009ddc <vQueueAddToRegistry+0x50>)
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	00db      	lsls	r3, r3, #3
 8009db8:	4413      	add	r3, r2
 8009dba:	687a      	ldr	r2, [r7, #4]
 8009dbc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009dbe:	e006      	b.n	8009dce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	3301      	adds	r3, #1
 8009dc4:	60fb      	str	r3, [r7, #12]
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	2b07      	cmp	r3, #7
 8009dca:	d9e7      	bls.n	8009d9c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009dcc:	bf00      	nop
 8009dce:	bf00      	nop
 8009dd0:	3714      	adds	r7, #20
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd8:	4770      	bx	lr
 8009dda:	bf00      	nop
 8009ddc:	20009e04 	.word	0x20009e04

08009de0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b086      	sub	sp, #24
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	60f8      	str	r0, [r7, #12]
 8009de8:	60b9      	str	r1, [r7, #8]
 8009dea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009df0:	f001 ff08 	bl	800bc04 <vPortEnterCritical>
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009dfa:	b25b      	sxtb	r3, r3
 8009dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e00:	d103      	bne.n	8009e0a <vQueueWaitForMessageRestricted+0x2a>
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	2200      	movs	r2, #0
 8009e06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e10:	b25b      	sxtb	r3, r3
 8009e12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e16:	d103      	bne.n	8009e20 <vQueueWaitForMessageRestricted+0x40>
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e20:	f001 ff20 	bl	800bc64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d106      	bne.n	8009e3a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	3324      	adds	r3, #36	; 0x24
 8009e30:	687a      	ldr	r2, [r7, #4]
 8009e32:	68b9      	ldr	r1, [r7, #8]
 8009e34:	4618      	mov	r0, r3
 8009e36:	f000 fde1 	bl	800a9fc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009e3a:	6978      	ldr	r0, [r7, #20]
 8009e3c:	f7ff ff26 	bl	8009c8c <prvUnlockQueue>
	}
 8009e40:	bf00      	nop
 8009e42:	3718      	adds	r7, #24
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}

08009e48 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b08e      	sub	sp, #56	; 0x38
 8009e4c:	af04      	add	r7, sp, #16
 8009e4e:	60f8      	str	r0, [r7, #12]
 8009e50:	60b9      	str	r1, [r7, #8]
 8009e52:	607a      	str	r2, [r7, #4]
 8009e54:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d10a      	bne.n	8009e72 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e60:	f383 8811 	msr	BASEPRI, r3
 8009e64:	f3bf 8f6f 	isb	sy
 8009e68:	f3bf 8f4f 	dsb	sy
 8009e6c:	623b      	str	r3, [r7, #32]
}
 8009e6e:	bf00      	nop
 8009e70:	e7fe      	b.n	8009e70 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d10a      	bne.n	8009e8e <xTaskCreateStatic+0x46>
	__asm volatile
 8009e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e7c:	f383 8811 	msr	BASEPRI, r3
 8009e80:	f3bf 8f6f 	isb	sy
 8009e84:	f3bf 8f4f 	dsb	sy
 8009e88:	61fb      	str	r3, [r7, #28]
}
 8009e8a:	bf00      	nop
 8009e8c:	e7fe      	b.n	8009e8c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009e8e:	23b4      	movs	r3, #180	; 0xb4
 8009e90:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009e92:	693b      	ldr	r3, [r7, #16]
 8009e94:	2bb4      	cmp	r3, #180	; 0xb4
 8009e96:	d00a      	beq.n	8009eae <xTaskCreateStatic+0x66>
	__asm volatile
 8009e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e9c:	f383 8811 	msr	BASEPRI, r3
 8009ea0:	f3bf 8f6f 	isb	sy
 8009ea4:	f3bf 8f4f 	dsb	sy
 8009ea8:	61bb      	str	r3, [r7, #24]
}
 8009eaa:	bf00      	nop
 8009eac:	e7fe      	b.n	8009eac <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009eae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d01e      	beq.n	8009ef4 <xTaskCreateStatic+0xac>
 8009eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d01b      	beq.n	8009ef4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ebe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ec4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec8:	2202      	movs	r2, #2
 8009eca:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009ece:	2300      	movs	r3, #0
 8009ed0:	9303      	str	r3, [sp, #12]
 8009ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed4:	9302      	str	r3, [sp, #8]
 8009ed6:	f107 0314 	add.w	r3, r7, #20
 8009eda:	9301      	str	r3, [sp, #4]
 8009edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ede:	9300      	str	r3, [sp, #0]
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	687a      	ldr	r2, [r7, #4]
 8009ee4:	68b9      	ldr	r1, [r7, #8]
 8009ee6:	68f8      	ldr	r0, [r7, #12]
 8009ee8:	f000 f850 	bl	8009f8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009eec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009eee:	f000 f8eb 	bl	800a0c8 <prvAddNewTaskToReadyList>
 8009ef2:	e001      	b.n	8009ef8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009ef8:	697b      	ldr	r3, [r7, #20]
	}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3728      	adds	r7, #40	; 0x28
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}

08009f02 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009f02:	b580      	push	{r7, lr}
 8009f04:	b08c      	sub	sp, #48	; 0x30
 8009f06:	af04      	add	r7, sp, #16
 8009f08:	60f8      	str	r0, [r7, #12]
 8009f0a:	60b9      	str	r1, [r7, #8]
 8009f0c:	603b      	str	r3, [r7, #0]
 8009f0e:	4613      	mov	r3, r2
 8009f10:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009f12:	88fb      	ldrh	r3, [r7, #6]
 8009f14:	009b      	lsls	r3, r3, #2
 8009f16:	4618      	mov	r0, r3
 8009f18:	f001 ff96 	bl	800be48 <pvPortMalloc>
 8009f1c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d00e      	beq.n	8009f42 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009f24:	20b4      	movs	r0, #180	; 0xb4
 8009f26:	f001 ff8f 	bl	800be48 <pvPortMalloc>
 8009f2a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009f2c:	69fb      	ldr	r3, [r7, #28]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d003      	beq.n	8009f3a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009f32:	69fb      	ldr	r3, [r7, #28]
 8009f34:	697a      	ldr	r2, [r7, #20]
 8009f36:	631a      	str	r2, [r3, #48]	; 0x30
 8009f38:	e005      	b.n	8009f46 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009f3a:	6978      	ldr	r0, [r7, #20]
 8009f3c:	f002 f850 	bl	800bfe0 <vPortFree>
 8009f40:	e001      	b.n	8009f46 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009f42:	2300      	movs	r3, #0
 8009f44:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009f46:	69fb      	ldr	r3, [r7, #28]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d017      	beq.n	8009f7c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009f4c:	69fb      	ldr	r3, [r7, #28]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009f54:	88fa      	ldrh	r2, [r7, #6]
 8009f56:	2300      	movs	r3, #0
 8009f58:	9303      	str	r3, [sp, #12]
 8009f5a:	69fb      	ldr	r3, [r7, #28]
 8009f5c:	9302      	str	r3, [sp, #8]
 8009f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f60:	9301      	str	r3, [sp, #4]
 8009f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f64:	9300      	str	r3, [sp, #0]
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	68b9      	ldr	r1, [r7, #8]
 8009f6a:	68f8      	ldr	r0, [r7, #12]
 8009f6c:	f000 f80e 	bl	8009f8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009f70:	69f8      	ldr	r0, [r7, #28]
 8009f72:	f000 f8a9 	bl	800a0c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009f76:	2301      	movs	r3, #1
 8009f78:	61bb      	str	r3, [r7, #24]
 8009f7a:	e002      	b.n	8009f82 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8009f80:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009f82:	69bb      	ldr	r3, [r7, #24]
	}
 8009f84:	4618      	mov	r0, r3
 8009f86:	3720      	adds	r7, #32
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}

08009f8c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b088      	sub	sp, #32
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	60f8      	str	r0, [r7, #12]
 8009f94:	60b9      	str	r1, [r7, #8]
 8009f96:	607a      	str	r2, [r7, #4]
 8009f98:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009fa4:	3b01      	subs	r3, #1
 8009fa6:	009b      	lsls	r3, r3, #2
 8009fa8:	4413      	add	r3, r2
 8009faa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009fac:	69bb      	ldr	r3, [r7, #24]
 8009fae:	f023 0307 	bic.w	r3, r3, #7
 8009fb2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009fb4:	69bb      	ldr	r3, [r7, #24]
 8009fb6:	f003 0307 	and.w	r3, r3, #7
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d00a      	beq.n	8009fd4 <prvInitialiseNewTask+0x48>
	__asm volatile
 8009fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc2:	f383 8811 	msr	BASEPRI, r3
 8009fc6:	f3bf 8f6f 	isb	sy
 8009fca:	f3bf 8f4f 	dsb	sy
 8009fce:	617b      	str	r3, [r7, #20]
}
 8009fd0:	bf00      	nop
 8009fd2:	e7fe      	b.n	8009fd2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d01f      	beq.n	800a01a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009fda:	2300      	movs	r3, #0
 8009fdc:	61fb      	str	r3, [r7, #28]
 8009fde:	e012      	b.n	800a006 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009fe0:	68ba      	ldr	r2, [r7, #8]
 8009fe2:	69fb      	ldr	r3, [r7, #28]
 8009fe4:	4413      	add	r3, r2
 8009fe6:	7819      	ldrb	r1, [r3, #0]
 8009fe8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fea:	69fb      	ldr	r3, [r7, #28]
 8009fec:	4413      	add	r3, r2
 8009fee:	3334      	adds	r3, #52	; 0x34
 8009ff0:	460a      	mov	r2, r1
 8009ff2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009ff4:	68ba      	ldr	r2, [r7, #8]
 8009ff6:	69fb      	ldr	r3, [r7, #28]
 8009ff8:	4413      	add	r3, r2
 8009ffa:	781b      	ldrb	r3, [r3, #0]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d006      	beq.n	800a00e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a000:	69fb      	ldr	r3, [r7, #28]
 800a002:	3301      	adds	r3, #1
 800a004:	61fb      	str	r3, [r7, #28]
 800a006:	69fb      	ldr	r3, [r7, #28]
 800a008:	2b0f      	cmp	r3, #15
 800a00a:	d9e9      	bls.n	8009fe0 <prvInitialiseNewTask+0x54>
 800a00c:	e000      	b.n	800a010 <prvInitialiseNewTask+0x84>
			{
				break;
 800a00e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a012:	2200      	movs	r2, #0
 800a014:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a018:	e003      	b.n	800a022 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a01c:	2200      	movs	r2, #0
 800a01e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a024:	2b06      	cmp	r3, #6
 800a026:	d901      	bls.n	800a02c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a028:	2306      	movs	r3, #6
 800a02a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a02e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a030:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a034:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a036:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a03a:	2200      	movs	r2, #0
 800a03c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a040:	3304      	adds	r3, #4
 800a042:	4618      	mov	r0, r3
 800a044:	f7fe fece 	bl	8008de4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a04a:	3318      	adds	r3, #24
 800a04c:	4618      	mov	r0, r3
 800a04e:	f7fe fec9 	bl	8008de4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a054:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a056:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a05a:	f1c3 0207 	rsb	r2, r3, #7
 800a05e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a060:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a066:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a06a:	2200      	movs	r2, #0
 800a06c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a072:	2200      	movs	r2, #0
 800a074:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a07a:	334c      	adds	r3, #76	; 0x4c
 800a07c:	2260      	movs	r2, #96	; 0x60
 800a07e:	2100      	movs	r1, #0
 800a080:	4618      	mov	r0, r3
 800a082:	f010 fa17 	bl	801a4b4 <memset>
 800a086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a088:	4a0c      	ldr	r2, [pc, #48]	; (800a0bc <prvInitialiseNewTask+0x130>)
 800a08a:	651a      	str	r2, [r3, #80]	; 0x50
 800a08c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a08e:	4a0c      	ldr	r2, [pc, #48]	; (800a0c0 <prvInitialiseNewTask+0x134>)
 800a090:	655a      	str	r2, [r3, #84]	; 0x54
 800a092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a094:	4a0b      	ldr	r2, [pc, #44]	; (800a0c4 <prvInitialiseNewTask+0x138>)
 800a096:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a098:	683a      	ldr	r2, [r7, #0]
 800a09a:	68f9      	ldr	r1, [r7, #12]
 800a09c:	69b8      	ldr	r0, [r7, #24]
 800a09e:	f001 fc87 	bl	800b9b0 <pxPortInitialiseStack>
 800a0a2:	4602      	mov	r2, r0
 800a0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a0a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d002      	beq.n	800a0b4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a0ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0b2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a0b4:	bf00      	nop
 800a0b6:	3720      	adds	r7, #32
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}
 800a0bc:	0801c3b4 	.word	0x0801c3b4
 800a0c0:	0801c3d4 	.word	0x0801c3d4
 800a0c4:	0801c394 	.word	0x0801c394

0800a0c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	b082      	sub	sp, #8
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a0d0:	f001 fd98 	bl	800bc04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a0d4:	4b2a      	ldr	r3, [pc, #168]	; (800a180 <prvAddNewTaskToReadyList+0xb8>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	3301      	adds	r3, #1
 800a0da:	4a29      	ldr	r2, [pc, #164]	; (800a180 <prvAddNewTaskToReadyList+0xb8>)
 800a0dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a0de:	4b29      	ldr	r3, [pc, #164]	; (800a184 <prvAddNewTaskToReadyList+0xbc>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d109      	bne.n	800a0fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a0e6:	4a27      	ldr	r2, [pc, #156]	; (800a184 <prvAddNewTaskToReadyList+0xbc>)
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a0ec:	4b24      	ldr	r3, [pc, #144]	; (800a180 <prvAddNewTaskToReadyList+0xb8>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	2b01      	cmp	r3, #1
 800a0f2:	d110      	bne.n	800a116 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a0f4:	f000 fdac 	bl	800ac50 <prvInitialiseTaskLists>
 800a0f8:	e00d      	b.n	800a116 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a0fa:	4b23      	ldr	r3, [pc, #140]	; (800a188 <prvAddNewTaskToReadyList+0xc0>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d109      	bne.n	800a116 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a102:	4b20      	ldr	r3, [pc, #128]	; (800a184 <prvAddNewTaskToReadyList+0xbc>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a10c:	429a      	cmp	r2, r3
 800a10e:	d802      	bhi.n	800a116 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a110:	4a1c      	ldr	r2, [pc, #112]	; (800a184 <prvAddNewTaskToReadyList+0xbc>)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a116:	4b1d      	ldr	r3, [pc, #116]	; (800a18c <prvAddNewTaskToReadyList+0xc4>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	3301      	adds	r3, #1
 800a11c:	4a1b      	ldr	r2, [pc, #108]	; (800a18c <prvAddNewTaskToReadyList+0xc4>)
 800a11e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a124:	2201      	movs	r2, #1
 800a126:	409a      	lsls	r2, r3
 800a128:	4b19      	ldr	r3, [pc, #100]	; (800a190 <prvAddNewTaskToReadyList+0xc8>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4313      	orrs	r3, r2
 800a12e:	4a18      	ldr	r2, [pc, #96]	; (800a190 <prvAddNewTaskToReadyList+0xc8>)
 800a130:	6013      	str	r3, [r2, #0]
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a136:	4613      	mov	r3, r2
 800a138:	009b      	lsls	r3, r3, #2
 800a13a:	4413      	add	r3, r2
 800a13c:	009b      	lsls	r3, r3, #2
 800a13e:	4a15      	ldr	r2, [pc, #84]	; (800a194 <prvAddNewTaskToReadyList+0xcc>)
 800a140:	441a      	add	r2, r3
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	3304      	adds	r3, #4
 800a146:	4619      	mov	r1, r3
 800a148:	4610      	mov	r0, r2
 800a14a:	f7fe fe58 	bl	8008dfe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a14e:	f001 fd89 	bl	800bc64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a152:	4b0d      	ldr	r3, [pc, #52]	; (800a188 <prvAddNewTaskToReadyList+0xc0>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d00e      	beq.n	800a178 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a15a:	4b0a      	ldr	r3, [pc, #40]	; (800a184 <prvAddNewTaskToReadyList+0xbc>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a164:	429a      	cmp	r2, r3
 800a166:	d207      	bcs.n	800a178 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a168:	4b0b      	ldr	r3, [pc, #44]	; (800a198 <prvAddNewTaskToReadyList+0xd0>)
 800a16a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a16e:	601a      	str	r2, [r3, #0]
 800a170:	f3bf 8f4f 	dsb	sy
 800a174:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a178:	bf00      	nop
 800a17a:	3708      	adds	r7, #8
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}
 800a180:	2000097c 	.word	0x2000097c
 800a184:	2000087c 	.word	0x2000087c
 800a188:	20000988 	.word	0x20000988
 800a18c:	20000998 	.word	0x20000998
 800a190:	20000984 	.word	0x20000984
 800a194:	20000880 	.word	0x20000880
 800a198:	e000ed04 	.word	0xe000ed04

0800a19c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b084      	sub	sp, #16
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d017      	beq.n	800a1de <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a1ae:	4b13      	ldr	r3, [pc, #76]	; (800a1fc <vTaskDelay+0x60>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d00a      	beq.n	800a1cc <vTaskDelay+0x30>
	__asm volatile
 800a1b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ba:	f383 8811 	msr	BASEPRI, r3
 800a1be:	f3bf 8f6f 	isb	sy
 800a1c2:	f3bf 8f4f 	dsb	sy
 800a1c6:	60bb      	str	r3, [r7, #8]
}
 800a1c8:	bf00      	nop
 800a1ca:	e7fe      	b.n	800a1ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a1cc:	f000 fa1e 	bl	800a60c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a1d0:	2100      	movs	r1, #0
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f000 ffba 	bl	800b14c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a1d8:	f000 fa26 	bl	800a628 <xTaskResumeAll>
 800a1dc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d107      	bne.n	800a1f4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a1e4:	4b06      	ldr	r3, [pc, #24]	; (800a200 <vTaskDelay+0x64>)
 800a1e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1ea:	601a      	str	r2, [r3, #0]
 800a1ec:	f3bf 8f4f 	dsb	sy
 800a1f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a1f4:	bf00      	nop
 800a1f6:	3710      	adds	r7, #16
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}
 800a1fc:	200009a4 	.word	0x200009a4
 800a200:	e000ed04 	.word	0xe000ed04

0800a204 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800a204:	b580      	push	{r7, lr}
 800a206:	b084      	sub	sp, #16
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800a20c:	f001 fcfa 	bl	800bc04 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d102      	bne.n	800a21c <vTaskSuspend+0x18>
 800a216:	4b3c      	ldr	r3, [pc, #240]	; (800a308 <vTaskSuspend+0x104>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	e000      	b.n	800a21e <vTaskSuspend+0x1a>
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	3304      	adds	r3, #4
 800a224:	4618      	mov	r0, r3
 800a226:	f7fe fe47 	bl	8008eb8 <uxListRemove>
 800a22a:	4603      	mov	r3, r0
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d115      	bne.n	800a25c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a234:	4935      	ldr	r1, [pc, #212]	; (800a30c <vTaskSuspend+0x108>)
 800a236:	4613      	mov	r3, r2
 800a238:	009b      	lsls	r3, r3, #2
 800a23a:	4413      	add	r3, r2
 800a23c:	009b      	lsls	r3, r3, #2
 800a23e:	440b      	add	r3, r1
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d10a      	bne.n	800a25c <vTaskSuspend+0x58>
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a24a:	2201      	movs	r2, #1
 800a24c:	fa02 f303 	lsl.w	r3, r2, r3
 800a250:	43da      	mvns	r2, r3
 800a252:	4b2f      	ldr	r3, [pc, #188]	; (800a310 <vTaskSuspend+0x10c>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	4013      	ands	r3, r2
 800a258:	4a2d      	ldr	r2, [pc, #180]	; (800a310 <vTaskSuspend+0x10c>)
 800a25a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a260:	2b00      	cmp	r3, #0
 800a262:	d004      	beq.n	800a26e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	3318      	adds	r3, #24
 800a268:	4618      	mov	r0, r3
 800a26a:	f7fe fe25 	bl	8008eb8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	3304      	adds	r3, #4
 800a272:	4619      	mov	r1, r3
 800a274:	4827      	ldr	r0, [pc, #156]	; (800a314 <vTaskSuspend+0x110>)
 800a276:	f7fe fdc2 	bl	8008dfe <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 800a280:	b2db      	uxtb	r3, r3
 800a282:	2b01      	cmp	r3, #1
 800a284:	d103      	bne.n	800a28e <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	2200      	movs	r2, #0
 800a28a:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800a28e:	f001 fce9 	bl	800bc64 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800a292:	4b21      	ldr	r3, [pc, #132]	; (800a318 <vTaskSuspend+0x114>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d005      	beq.n	800a2a6 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800a29a:	f001 fcb3 	bl	800bc04 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800a29e:	f000 fd79 	bl	800ad94 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800a2a2:	f001 fcdf 	bl	800bc64 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800a2a6:	4b18      	ldr	r3, [pc, #96]	; (800a308 <vTaskSuspend+0x104>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	68fa      	ldr	r2, [r7, #12]
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d127      	bne.n	800a300 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 800a2b0:	4b19      	ldr	r3, [pc, #100]	; (800a318 <vTaskSuspend+0x114>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d017      	beq.n	800a2e8 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800a2b8:	4b18      	ldr	r3, [pc, #96]	; (800a31c <vTaskSuspend+0x118>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d00a      	beq.n	800a2d6 <vTaskSuspend+0xd2>
	__asm volatile
 800a2c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c4:	f383 8811 	msr	BASEPRI, r3
 800a2c8:	f3bf 8f6f 	isb	sy
 800a2cc:	f3bf 8f4f 	dsb	sy
 800a2d0:	60bb      	str	r3, [r7, #8]
}
 800a2d2:	bf00      	nop
 800a2d4:	e7fe      	b.n	800a2d4 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 800a2d6:	4b12      	ldr	r3, [pc, #72]	; (800a320 <vTaskSuspend+0x11c>)
 800a2d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2dc:	601a      	str	r2, [r3, #0]
 800a2de:	f3bf 8f4f 	dsb	sy
 800a2e2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a2e6:	e00b      	b.n	800a300 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800a2e8:	4b0a      	ldr	r3, [pc, #40]	; (800a314 <vTaskSuspend+0x110>)
 800a2ea:	681a      	ldr	r2, [r3, #0]
 800a2ec:	4b0d      	ldr	r3, [pc, #52]	; (800a324 <vTaskSuspend+0x120>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d103      	bne.n	800a2fc <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 800a2f4:	4b04      	ldr	r3, [pc, #16]	; (800a308 <vTaskSuspend+0x104>)
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	601a      	str	r2, [r3, #0]
	}
 800a2fa:	e001      	b.n	800a300 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 800a2fc:	f000 faf8 	bl	800a8f0 <vTaskSwitchContext>
	}
 800a300:	bf00      	nop
 800a302:	3710      	adds	r7, #16
 800a304:	46bd      	mov	sp, r7
 800a306:	bd80      	pop	{r7, pc}
 800a308:	2000087c 	.word	0x2000087c
 800a30c:	20000880 	.word	0x20000880
 800a310:	20000984 	.word	0x20000984
 800a314:	20000968 	.word	0x20000968
 800a318:	20000988 	.word	0x20000988
 800a31c:	200009a4 	.word	0x200009a4
 800a320:	e000ed04 	.word	0xe000ed04
 800a324:	2000097c 	.word	0x2000097c

0800a328 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800a328:	b480      	push	{r7}
 800a32a:	b087      	sub	sp, #28
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800a330:	2300      	movs	r3, #0
 800a332:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d10a      	bne.n	800a354 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800a33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a342:	f383 8811 	msr	BASEPRI, r3
 800a346:	f3bf 8f6f 	isb	sy
 800a34a:	f3bf 8f4f 	dsb	sy
 800a34e:	60fb      	str	r3, [r7, #12]
}
 800a350:	bf00      	nop
 800a352:	e7fe      	b.n	800a352 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	695b      	ldr	r3, [r3, #20]
 800a358:	4a0a      	ldr	r2, [pc, #40]	; (800a384 <prvTaskIsTaskSuspended+0x5c>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d10a      	bne.n	800a374 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800a35e:	693b      	ldr	r3, [r7, #16]
 800a360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a362:	4a09      	ldr	r2, [pc, #36]	; (800a388 <prvTaskIsTaskSuspended+0x60>)
 800a364:	4293      	cmp	r3, r2
 800a366:	d005      	beq.n	800a374 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800a368:	693b      	ldr	r3, [r7, #16]
 800a36a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d101      	bne.n	800a374 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800a370:	2301      	movs	r3, #1
 800a372:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a374:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800a376:	4618      	mov	r0, r3
 800a378:	371c      	adds	r7, #28
 800a37a:	46bd      	mov	sp, r7
 800a37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a380:	4770      	bx	lr
 800a382:	bf00      	nop
 800a384:	20000968 	.word	0x20000968
 800a388:	2000093c 	.word	0x2000093c

0800a38c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b084      	sub	sp, #16
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d10a      	bne.n	800a3b4 <vTaskResume+0x28>
	__asm volatile
 800a39e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a2:	f383 8811 	msr	BASEPRI, r3
 800a3a6:	f3bf 8f6f 	isb	sy
 800a3aa:	f3bf 8f4f 	dsb	sy
 800a3ae:	60bb      	str	r3, [r7, #8]
}
 800a3b0:	bf00      	nop
 800a3b2:	e7fe      	b.n	800a3b2 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800a3b4:	4b20      	ldr	r3, [pc, #128]	; (800a438 <vTaskResume+0xac>)
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	68fa      	ldr	r2, [r7, #12]
 800a3ba:	429a      	cmp	r2, r3
 800a3bc:	d037      	beq.n	800a42e <vTaskResume+0xa2>
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d034      	beq.n	800a42e <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 800a3c4:	f001 fc1e 	bl	800bc04 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800a3c8:	68f8      	ldr	r0, [r7, #12]
 800a3ca:	f7ff ffad 	bl	800a328 <prvTaskIsTaskSuspended>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d02a      	beq.n	800a42a <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	3304      	adds	r3, #4
 800a3d8:	4618      	mov	r0, r3
 800a3da:	f7fe fd6d 	bl	8008eb8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3e2:	2201      	movs	r2, #1
 800a3e4:	409a      	lsls	r2, r3
 800a3e6:	4b15      	ldr	r3, [pc, #84]	; (800a43c <vTaskResume+0xb0>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	4313      	orrs	r3, r2
 800a3ec:	4a13      	ldr	r2, [pc, #76]	; (800a43c <vTaskResume+0xb0>)
 800a3ee:	6013      	str	r3, [r2, #0]
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3f4:	4613      	mov	r3, r2
 800a3f6:	009b      	lsls	r3, r3, #2
 800a3f8:	4413      	add	r3, r2
 800a3fa:	009b      	lsls	r3, r3, #2
 800a3fc:	4a10      	ldr	r2, [pc, #64]	; (800a440 <vTaskResume+0xb4>)
 800a3fe:	441a      	add	r2, r3
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	3304      	adds	r3, #4
 800a404:	4619      	mov	r1, r3
 800a406:	4610      	mov	r0, r2
 800a408:	f7fe fcf9 	bl	8008dfe <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a410:	4b09      	ldr	r3, [pc, #36]	; (800a438 <vTaskResume+0xac>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a416:	429a      	cmp	r2, r3
 800a418:	d307      	bcc.n	800a42a <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800a41a:	4b0a      	ldr	r3, [pc, #40]	; (800a444 <vTaskResume+0xb8>)
 800a41c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a420:	601a      	str	r2, [r3, #0]
 800a422:	f3bf 8f4f 	dsb	sy
 800a426:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800a42a:	f001 fc1b 	bl	800bc64 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a42e:	bf00      	nop
 800a430:	3710      	adds	r7, #16
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}
 800a436:	bf00      	nop
 800a438:	2000087c 	.word	0x2000087c
 800a43c:	20000984 	.word	0x20000984
 800a440:	20000880 	.word	0x20000880
 800a444:	e000ed04 	.word	0xe000ed04

0800a448 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b08a      	sub	sp, #40	; 0x28
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 800a450:	2300      	movs	r3, #0
 800a452:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d10a      	bne.n	800a474 <xTaskResumeFromISR+0x2c>
	__asm volatile
 800a45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a462:	f383 8811 	msr	BASEPRI, r3
 800a466:	f3bf 8f6f 	isb	sy
 800a46a:	f3bf 8f4f 	dsb	sy
 800a46e:	61bb      	str	r3, [r7, #24]
}
 800a470:	bf00      	nop
 800a472:	e7fe      	b.n	800a472 <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a474:	f001 fca8 	bl	800bdc8 <vPortValidateInterruptPriority>
	__asm volatile
 800a478:	f3ef 8211 	mrs	r2, BASEPRI
 800a47c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a480:	f383 8811 	msr	BASEPRI, r3
 800a484:	f3bf 8f6f 	isb	sy
 800a488:	f3bf 8f4f 	dsb	sy
 800a48c:	617a      	str	r2, [r7, #20]
 800a48e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a490:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a492:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800a494:	6a38      	ldr	r0, [r7, #32]
 800a496:	f7ff ff47 	bl	800a328 <prvTaskIsTaskSuspended>
 800a49a:	4603      	mov	r3, r0
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d02f      	beq.n	800a500 <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a4a0:	4b1d      	ldr	r3, [pc, #116]	; (800a518 <xTaskResumeFromISR+0xd0>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d125      	bne.n	800a4f4 <xTaskResumeFromISR+0xac>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a4a8:	6a3b      	ldr	r3, [r7, #32]
 800a4aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4ac:	4b1b      	ldr	r3, [pc, #108]	; (800a51c <xTaskResumeFromISR+0xd4>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4b2:	429a      	cmp	r2, r3
 800a4b4:	d301      	bcc.n	800a4ba <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a4ba:	6a3b      	ldr	r3, [r7, #32]
 800a4bc:	3304      	adds	r3, #4
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f7fe fcfa 	bl	8008eb8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a4c4:	6a3b      	ldr	r3, [r7, #32]
 800a4c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4c8:	2201      	movs	r2, #1
 800a4ca:	409a      	lsls	r2, r3
 800a4cc:	4b14      	ldr	r3, [pc, #80]	; (800a520 <xTaskResumeFromISR+0xd8>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	4313      	orrs	r3, r2
 800a4d2:	4a13      	ldr	r2, [pc, #76]	; (800a520 <xTaskResumeFromISR+0xd8>)
 800a4d4:	6013      	str	r3, [r2, #0]
 800a4d6:	6a3b      	ldr	r3, [r7, #32]
 800a4d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4da:	4613      	mov	r3, r2
 800a4dc:	009b      	lsls	r3, r3, #2
 800a4de:	4413      	add	r3, r2
 800a4e0:	009b      	lsls	r3, r3, #2
 800a4e2:	4a10      	ldr	r2, [pc, #64]	; (800a524 <xTaskResumeFromISR+0xdc>)
 800a4e4:	441a      	add	r2, r3
 800a4e6:	6a3b      	ldr	r3, [r7, #32]
 800a4e8:	3304      	adds	r3, #4
 800a4ea:	4619      	mov	r1, r3
 800a4ec:	4610      	mov	r0, r2
 800a4ee:	f7fe fc86 	bl	8008dfe <vListInsertEnd>
 800a4f2:	e005      	b.n	800a500 <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800a4f4:	6a3b      	ldr	r3, [r7, #32]
 800a4f6:	3318      	adds	r3, #24
 800a4f8:	4619      	mov	r1, r3
 800a4fa:	480b      	ldr	r0, [pc, #44]	; (800a528 <xTaskResumeFromISR+0xe0>)
 800a4fc:	f7fe fc7f 	bl	8008dfe <vListInsertEnd>
 800a500:	69fb      	ldr	r3, [r7, #28]
 800a502:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	f383 8811 	msr	BASEPRI, r3
}
 800a50a:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 800a50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800a50e:	4618      	mov	r0, r3
 800a510:	3728      	adds	r7, #40	; 0x28
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}
 800a516:	bf00      	nop
 800a518:	200009a4 	.word	0x200009a4
 800a51c:	2000087c 	.word	0x2000087c
 800a520:	20000984 	.word	0x20000984
 800a524:	20000880 	.word	0x20000880
 800a528:	2000093c 	.word	0x2000093c

0800a52c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b08a      	sub	sp, #40	; 0x28
 800a530:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a532:	2300      	movs	r3, #0
 800a534:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a536:	2300      	movs	r3, #0
 800a538:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a53a:	463a      	mov	r2, r7
 800a53c:	1d39      	adds	r1, r7, #4
 800a53e:	f107 0308 	add.w	r3, r7, #8
 800a542:	4618      	mov	r0, r3
 800a544:	f7f6 fc84 	bl	8000e50 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a548:	6839      	ldr	r1, [r7, #0]
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	68ba      	ldr	r2, [r7, #8]
 800a54e:	9202      	str	r2, [sp, #8]
 800a550:	9301      	str	r3, [sp, #4]
 800a552:	2300      	movs	r3, #0
 800a554:	9300      	str	r3, [sp, #0]
 800a556:	2300      	movs	r3, #0
 800a558:	460a      	mov	r2, r1
 800a55a:	4924      	ldr	r1, [pc, #144]	; (800a5ec <vTaskStartScheduler+0xc0>)
 800a55c:	4824      	ldr	r0, [pc, #144]	; (800a5f0 <vTaskStartScheduler+0xc4>)
 800a55e:	f7ff fc73 	bl	8009e48 <xTaskCreateStatic>
 800a562:	4603      	mov	r3, r0
 800a564:	4a23      	ldr	r2, [pc, #140]	; (800a5f4 <vTaskStartScheduler+0xc8>)
 800a566:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a568:	4b22      	ldr	r3, [pc, #136]	; (800a5f4 <vTaskStartScheduler+0xc8>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d002      	beq.n	800a576 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a570:	2301      	movs	r3, #1
 800a572:	617b      	str	r3, [r7, #20]
 800a574:	e001      	b.n	800a57a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a576:	2300      	movs	r3, #0
 800a578:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	2b01      	cmp	r3, #1
 800a57e:	d102      	bne.n	800a586 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a580:	f000 fe4a 	bl	800b218 <xTimerCreateTimerTask>
 800a584:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	2b01      	cmp	r3, #1
 800a58a:	d11b      	bne.n	800a5c4 <vTaskStartScheduler+0x98>
	__asm volatile
 800a58c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a590:	f383 8811 	msr	BASEPRI, r3
 800a594:	f3bf 8f6f 	isb	sy
 800a598:	f3bf 8f4f 	dsb	sy
 800a59c:	613b      	str	r3, [r7, #16]
}
 800a59e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a5a0:	4b15      	ldr	r3, [pc, #84]	; (800a5f8 <vTaskStartScheduler+0xcc>)
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	334c      	adds	r3, #76	; 0x4c
 800a5a6:	4a15      	ldr	r2, [pc, #84]	; (800a5fc <vTaskStartScheduler+0xd0>)
 800a5a8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a5aa:	4b15      	ldr	r3, [pc, #84]	; (800a600 <vTaskStartScheduler+0xd4>)
 800a5ac:	f04f 32ff 	mov.w	r2, #4294967295
 800a5b0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a5b2:	4b14      	ldr	r3, [pc, #80]	; (800a604 <vTaskStartScheduler+0xd8>)
 800a5b4:	2201      	movs	r2, #1
 800a5b6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a5b8:	4b13      	ldr	r3, [pc, #76]	; (800a608 <vTaskStartScheduler+0xdc>)
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a5be:	f001 fa7f 	bl	800bac0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a5c2:	e00e      	b.n	800a5e2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5ca:	d10a      	bne.n	800a5e2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800a5cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d0:	f383 8811 	msr	BASEPRI, r3
 800a5d4:	f3bf 8f6f 	isb	sy
 800a5d8:	f3bf 8f4f 	dsb	sy
 800a5dc:	60fb      	str	r3, [r7, #12]
}
 800a5de:	bf00      	nop
 800a5e0:	e7fe      	b.n	800a5e0 <vTaskStartScheduler+0xb4>
}
 800a5e2:	bf00      	nop
 800a5e4:	3718      	adds	r7, #24
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}
 800a5ea:	bf00      	nop
 800a5ec:	0801bf18 	.word	0x0801bf18
 800a5f0:	0800ac21 	.word	0x0800ac21
 800a5f4:	200009a0 	.word	0x200009a0
 800a5f8:	2000087c 	.word	0x2000087c
 800a5fc:	20000074 	.word	0x20000074
 800a600:	2000099c 	.word	0x2000099c
 800a604:	20000988 	.word	0x20000988
 800a608:	20000980 	.word	0x20000980

0800a60c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a60c:	b480      	push	{r7}
 800a60e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a610:	4b04      	ldr	r3, [pc, #16]	; (800a624 <vTaskSuspendAll+0x18>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	3301      	adds	r3, #1
 800a616:	4a03      	ldr	r2, [pc, #12]	; (800a624 <vTaskSuspendAll+0x18>)
 800a618:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a61a:	bf00      	nop
 800a61c:	46bd      	mov	sp, r7
 800a61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a622:	4770      	bx	lr
 800a624:	200009a4 	.word	0x200009a4

0800a628 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b084      	sub	sp, #16
 800a62c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a62e:	2300      	movs	r3, #0
 800a630:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a632:	2300      	movs	r3, #0
 800a634:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a636:	4b41      	ldr	r3, [pc, #260]	; (800a73c <xTaskResumeAll+0x114>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d10a      	bne.n	800a654 <xTaskResumeAll+0x2c>
	__asm volatile
 800a63e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a642:	f383 8811 	msr	BASEPRI, r3
 800a646:	f3bf 8f6f 	isb	sy
 800a64a:	f3bf 8f4f 	dsb	sy
 800a64e:	603b      	str	r3, [r7, #0]
}
 800a650:	bf00      	nop
 800a652:	e7fe      	b.n	800a652 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a654:	f001 fad6 	bl	800bc04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a658:	4b38      	ldr	r3, [pc, #224]	; (800a73c <xTaskResumeAll+0x114>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	3b01      	subs	r3, #1
 800a65e:	4a37      	ldr	r2, [pc, #220]	; (800a73c <xTaskResumeAll+0x114>)
 800a660:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a662:	4b36      	ldr	r3, [pc, #216]	; (800a73c <xTaskResumeAll+0x114>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d161      	bne.n	800a72e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a66a:	4b35      	ldr	r3, [pc, #212]	; (800a740 <xTaskResumeAll+0x118>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d05d      	beq.n	800a72e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a672:	e02e      	b.n	800a6d2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a674:	4b33      	ldr	r3, [pc, #204]	; (800a744 <xTaskResumeAll+0x11c>)
 800a676:	68db      	ldr	r3, [r3, #12]
 800a678:	68db      	ldr	r3, [r3, #12]
 800a67a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	3318      	adds	r3, #24
 800a680:	4618      	mov	r0, r3
 800a682:	f7fe fc19 	bl	8008eb8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	3304      	adds	r3, #4
 800a68a:	4618      	mov	r0, r3
 800a68c:	f7fe fc14 	bl	8008eb8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a694:	2201      	movs	r2, #1
 800a696:	409a      	lsls	r2, r3
 800a698:	4b2b      	ldr	r3, [pc, #172]	; (800a748 <xTaskResumeAll+0x120>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	4313      	orrs	r3, r2
 800a69e:	4a2a      	ldr	r2, [pc, #168]	; (800a748 <xTaskResumeAll+0x120>)
 800a6a0:	6013      	str	r3, [r2, #0]
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6a6:	4613      	mov	r3, r2
 800a6a8:	009b      	lsls	r3, r3, #2
 800a6aa:	4413      	add	r3, r2
 800a6ac:	009b      	lsls	r3, r3, #2
 800a6ae:	4a27      	ldr	r2, [pc, #156]	; (800a74c <xTaskResumeAll+0x124>)
 800a6b0:	441a      	add	r2, r3
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	3304      	adds	r3, #4
 800a6b6:	4619      	mov	r1, r3
 800a6b8:	4610      	mov	r0, r2
 800a6ba:	f7fe fba0 	bl	8008dfe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6c2:	4b23      	ldr	r3, [pc, #140]	; (800a750 <xTaskResumeAll+0x128>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6c8:	429a      	cmp	r2, r3
 800a6ca:	d302      	bcc.n	800a6d2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a6cc:	4b21      	ldr	r3, [pc, #132]	; (800a754 <xTaskResumeAll+0x12c>)
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a6d2:	4b1c      	ldr	r3, [pc, #112]	; (800a744 <xTaskResumeAll+0x11c>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d1cc      	bne.n	800a674 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d001      	beq.n	800a6e4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a6e0:	f000 fb58 	bl	800ad94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a6e4:	4b1c      	ldr	r3, [pc, #112]	; (800a758 <xTaskResumeAll+0x130>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d010      	beq.n	800a712 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a6f0:	f000 f846 	bl	800a780 <xTaskIncrementTick>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d002      	beq.n	800a700 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a6fa:	4b16      	ldr	r3, [pc, #88]	; (800a754 <xTaskResumeAll+0x12c>)
 800a6fc:	2201      	movs	r2, #1
 800a6fe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	3b01      	subs	r3, #1
 800a704:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d1f1      	bne.n	800a6f0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800a70c:	4b12      	ldr	r3, [pc, #72]	; (800a758 <xTaskResumeAll+0x130>)
 800a70e:	2200      	movs	r2, #0
 800a710:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a712:	4b10      	ldr	r3, [pc, #64]	; (800a754 <xTaskResumeAll+0x12c>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d009      	beq.n	800a72e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a71a:	2301      	movs	r3, #1
 800a71c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a71e:	4b0f      	ldr	r3, [pc, #60]	; (800a75c <xTaskResumeAll+0x134>)
 800a720:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a724:	601a      	str	r2, [r3, #0]
 800a726:	f3bf 8f4f 	dsb	sy
 800a72a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a72e:	f001 fa99 	bl	800bc64 <vPortExitCritical>

	return xAlreadyYielded;
 800a732:	68bb      	ldr	r3, [r7, #8]
}
 800a734:	4618      	mov	r0, r3
 800a736:	3710      	adds	r7, #16
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}
 800a73c:	200009a4 	.word	0x200009a4
 800a740:	2000097c 	.word	0x2000097c
 800a744:	2000093c 	.word	0x2000093c
 800a748:	20000984 	.word	0x20000984
 800a74c:	20000880 	.word	0x20000880
 800a750:	2000087c 	.word	0x2000087c
 800a754:	20000990 	.word	0x20000990
 800a758:	2000098c 	.word	0x2000098c
 800a75c:	e000ed04 	.word	0xe000ed04

0800a760 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a760:	b480      	push	{r7}
 800a762:	b083      	sub	sp, #12
 800a764:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a766:	4b05      	ldr	r3, [pc, #20]	; (800a77c <xTaskGetTickCount+0x1c>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a76c:	687b      	ldr	r3, [r7, #4]
}
 800a76e:	4618      	mov	r0, r3
 800a770:	370c      	adds	r7, #12
 800a772:	46bd      	mov	sp, r7
 800a774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a778:	4770      	bx	lr
 800a77a:	bf00      	nop
 800a77c:	20000980 	.word	0x20000980

0800a780 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b086      	sub	sp, #24
 800a784:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a786:	2300      	movs	r3, #0
 800a788:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a78a:	4b4e      	ldr	r3, [pc, #312]	; (800a8c4 <xTaskIncrementTick+0x144>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	f040 808e 	bne.w	800a8b0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a794:	4b4c      	ldr	r3, [pc, #304]	; (800a8c8 <xTaskIncrementTick+0x148>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	3301      	adds	r3, #1
 800a79a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a79c:	4a4a      	ldr	r2, [pc, #296]	; (800a8c8 <xTaskIncrementTick+0x148>)
 800a79e:	693b      	ldr	r3, [r7, #16]
 800a7a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d120      	bne.n	800a7ea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a7a8:	4b48      	ldr	r3, [pc, #288]	; (800a8cc <xTaskIncrementTick+0x14c>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d00a      	beq.n	800a7c8 <xTaskIncrementTick+0x48>
	__asm volatile
 800a7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b6:	f383 8811 	msr	BASEPRI, r3
 800a7ba:	f3bf 8f6f 	isb	sy
 800a7be:	f3bf 8f4f 	dsb	sy
 800a7c2:	603b      	str	r3, [r7, #0]
}
 800a7c4:	bf00      	nop
 800a7c6:	e7fe      	b.n	800a7c6 <xTaskIncrementTick+0x46>
 800a7c8:	4b40      	ldr	r3, [pc, #256]	; (800a8cc <xTaskIncrementTick+0x14c>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	60fb      	str	r3, [r7, #12]
 800a7ce:	4b40      	ldr	r3, [pc, #256]	; (800a8d0 <xTaskIncrementTick+0x150>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	4a3e      	ldr	r2, [pc, #248]	; (800a8cc <xTaskIncrementTick+0x14c>)
 800a7d4:	6013      	str	r3, [r2, #0]
 800a7d6:	4a3e      	ldr	r2, [pc, #248]	; (800a8d0 <xTaskIncrementTick+0x150>)
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	6013      	str	r3, [r2, #0]
 800a7dc:	4b3d      	ldr	r3, [pc, #244]	; (800a8d4 <xTaskIncrementTick+0x154>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	3301      	adds	r3, #1
 800a7e2:	4a3c      	ldr	r2, [pc, #240]	; (800a8d4 <xTaskIncrementTick+0x154>)
 800a7e4:	6013      	str	r3, [r2, #0]
 800a7e6:	f000 fad5 	bl	800ad94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a7ea:	4b3b      	ldr	r3, [pc, #236]	; (800a8d8 <xTaskIncrementTick+0x158>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	693a      	ldr	r2, [r7, #16]
 800a7f0:	429a      	cmp	r2, r3
 800a7f2:	d348      	bcc.n	800a886 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a7f4:	4b35      	ldr	r3, [pc, #212]	; (800a8cc <xTaskIncrementTick+0x14c>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d104      	bne.n	800a808 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7fe:	4b36      	ldr	r3, [pc, #216]	; (800a8d8 <xTaskIncrementTick+0x158>)
 800a800:	f04f 32ff 	mov.w	r2, #4294967295
 800a804:	601a      	str	r2, [r3, #0]
					break;
 800a806:	e03e      	b.n	800a886 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a808:	4b30      	ldr	r3, [pc, #192]	; (800a8cc <xTaskIncrementTick+0x14c>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	68db      	ldr	r3, [r3, #12]
 800a80e:	68db      	ldr	r3, [r3, #12]
 800a810:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	685b      	ldr	r3, [r3, #4]
 800a816:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a818:	693a      	ldr	r2, [r7, #16]
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	429a      	cmp	r2, r3
 800a81e:	d203      	bcs.n	800a828 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a820:	4a2d      	ldr	r2, [pc, #180]	; (800a8d8 <xTaskIncrementTick+0x158>)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a826:	e02e      	b.n	800a886 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	3304      	adds	r3, #4
 800a82c:	4618      	mov	r0, r3
 800a82e:	f7fe fb43 	bl	8008eb8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a836:	2b00      	cmp	r3, #0
 800a838:	d004      	beq.n	800a844 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a83a:	68bb      	ldr	r3, [r7, #8]
 800a83c:	3318      	adds	r3, #24
 800a83e:	4618      	mov	r0, r3
 800a840:	f7fe fb3a 	bl	8008eb8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a848:	2201      	movs	r2, #1
 800a84a:	409a      	lsls	r2, r3
 800a84c:	4b23      	ldr	r3, [pc, #140]	; (800a8dc <xTaskIncrementTick+0x15c>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	4313      	orrs	r3, r2
 800a852:	4a22      	ldr	r2, [pc, #136]	; (800a8dc <xTaskIncrementTick+0x15c>)
 800a854:	6013      	str	r3, [r2, #0]
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a85a:	4613      	mov	r3, r2
 800a85c:	009b      	lsls	r3, r3, #2
 800a85e:	4413      	add	r3, r2
 800a860:	009b      	lsls	r3, r3, #2
 800a862:	4a1f      	ldr	r2, [pc, #124]	; (800a8e0 <xTaskIncrementTick+0x160>)
 800a864:	441a      	add	r2, r3
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	3304      	adds	r3, #4
 800a86a:	4619      	mov	r1, r3
 800a86c:	4610      	mov	r0, r2
 800a86e:	f7fe fac6 	bl	8008dfe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a876:	4b1b      	ldr	r3, [pc, #108]	; (800a8e4 <xTaskIncrementTick+0x164>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a87c:	429a      	cmp	r2, r3
 800a87e:	d3b9      	bcc.n	800a7f4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a880:	2301      	movs	r3, #1
 800a882:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a884:	e7b6      	b.n	800a7f4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a886:	4b17      	ldr	r3, [pc, #92]	; (800a8e4 <xTaskIncrementTick+0x164>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a88c:	4914      	ldr	r1, [pc, #80]	; (800a8e0 <xTaskIncrementTick+0x160>)
 800a88e:	4613      	mov	r3, r2
 800a890:	009b      	lsls	r3, r3, #2
 800a892:	4413      	add	r3, r2
 800a894:	009b      	lsls	r3, r3, #2
 800a896:	440b      	add	r3, r1
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	2b01      	cmp	r3, #1
 800a89c:	d901      	bls.n	800a8a2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800a89e:	2301      	movs	r3, #1
 800a8a0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a8a2:	4b11      	ldr	r3, [pc, #68]	; (800a8e8 <xTaskIncrementTick+0x168>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d007      	beq.n	800a8ba <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800a8aa:	2301      	movs	r3, #1
 800a8ac:	617b      	str	r3, [r7, #20]
 800a8ae:	e004      	b.n	800a8ba <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a8b0:	4b0e      	ldr	r3, [pc, #56]	; (800a8ec <xTaskIncrementTick+0x16c>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	3301      	adds	r3, #1
 800a8b6:	4a0d      	ldr	r2, [pc, #52]	; (800a8ec <xTaskIncrementTick+0x16c>)
 800a8b8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a8ba:	697b      	ldr	r3, [r7, #20]
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3718      	adds	r7, #24
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}
 800a8c4:	200009a4 	.word	0x200009a4
 800a8c8:	20000980 	.word	0x20000980
 800a8cc:	20000934 	.word	0x20000934
 800a8d0:	20000938 	.word	0x20000938
 800a8d4:	20000994 	.word	0x20000994
 800a8d8:	2000099c 	.word	0x2000099c
 800a8dc:	20000984 	.word	0x20000984
 800a8e0:	20000880 	.word	0x20000880
 800a8e4:	2000087c 	.word	0x2000087c
 800a8e8:	20000990 	.word	0x20000990
 800a8ec:	2000098c 	.word	0x2000098c

0800a8f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b087      	sub	sp, #28
 800a8f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a8f6:	4b29      	ldr	r3, [pc, #164]	; (800a99c <vTaskSwitchContext+0xac>)
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d003      	beq.n	800a906 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a8fe:	4b28      	ldr	r3, [pc, #160]	; (800a9a0 <vTaskSwitchContext+0xb0>)
 800a900:	2201      	movs	r2, #1
 800a902:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a904:	e044      	b.n	800a990 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800a906:	4b26      	ldr	r3, [pc, #152]	; (800a9a0 <vTaskSwitchContext+0xb0>)
 800a908:	2200      	movs	r2, #0
 800a90a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a90c:	4b25      	ldr	r3, [pc, #148]	; (800a9a4 <vTaskSwitchContext+0xb4>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	fab3 f383 	clz	r3, r3
 800a918:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a91a:	7afb      	ldrb	r3, [r7, #11]
 800a91c:	f1c3 031f 	rsb	r3, r3, #31
 800a920:	617b      	str	r3, [r7, #20]
 800a922:	4921      	ldr	r1, [pc, #132]	; (800a9a8 <vTaskSwitchContext+0xb8>)
 800a924:	697a      	ldr	r2, [r7, #20]
 800a926:	4613      	mov	r3, r2
 800a928:	009b      	lsls	r3, r3, #2
 800a92a:	4413      	add	r3, r2
 800a92c:	009b      	lsls	r3, r3, #2
 800a92e:	440b      	add	r3, r1
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d10a      	bne.n	800a94c <vTaskSwitchContext+0x5c>
	__asm volatile
 800a936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a93a:	f383 8811 	msr	BASEPRI, r3
 800a93e:	f3bf 8f6f 	isb	sy
 800a942:	f3bf 8f4f 	dsb	sy
 800a946:	607b      	str	r3, [r7, #4]
}
 800a948:	bf00      	nop
 800a94a:	e7fe      	b.n	800a94a <vTaskSwitchContext+0x5a>
 800a94c:	697a      	ldr	r2, [r7, #20]
 800a94e:	4613      	mov	r3, r2
 800a950:	009b      	lsls	r3, r3, #2
 800a952:	4413      	add	r3, r2
 800a954:	009b      	lsls	r3, r3, #2
 800a956:	4a14      	ldr	r2, [pc, #80]	; (800a9a8 <vTaskSwitchContext+0xb8>)
 800a958:	4413      	add	r3, r2
 800a95a:	613b      	str	r3, [r7, #16]
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	685b      	ldr	r3, [r3, #4]
 800a960:	685a      	ldr	r2, [r3, #4]
 800a962:	693b      	ldr	r3, [r7, #16]
 800a964:	605a      	str	r2, [r3, #4]
 800a966:	693b      	ldr	r3, [r7, #16]
 800a968:	685a      	ldr	r2, [r3, #4]
 800a96a:	693b      	ldr	r3, [r7, #16]
 800a96c:	3308      	adds	r3, #8
 800a96e:	429a      	cmp	r2, r3
 800a970:	d104      	bne.n	800a97c <vTaskSwitchContext+0x8c>
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	685b      	ldr	r3, [r3, #4]
 800a976:	685a      	ldr	r2, [r3, #4]
 800a978:	693b      	ldr	r3, [r7, #16]
 800a97a:	605a      	str	r2, [r3, #4]
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	685b      	ldr	r3, [r3, #4]
 800a980:	68db      	ldr	r3, [r3, #12]
 800a982:	4a0a      	ldr	r2, [pc, #40]	; (800a9ac <vTaskSwitchContext+0xbc>)
 800a984:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a986:	4b09      	ldr	r3, [pc, #36]	; (800a9ac <vTaskSwitchContext+0xbc>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	334c      	adds	r3, #76	; 0x4c
 800a98c:	4a08      	ldr	r2, [pc, #32]	; (800a9b0 <vTaskSwitchContext+0xc0>)
 800a98e:	6013      	str	r3, [r2, #0]
}
 800a990:	bf00      	nop
 800a992:	371c      	adds	r7, #28
 800a994:	46bd      	mov	sp, r7
 800a996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99a:	4770      	bx	lr
 800a99c:	200009a4 	.word	0x200009a4
 800a9a0:	20000990 	.word	0x20000990
 800a9a4:	20000984 	.word	0x20000984
 800a9a8:	20000880 	.word	0x20000880
 800a9ac:	2000087c 	.word	0x2000087c
 800a9b0:	20000074 	.word	0x20000074

0800a9b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b084      	sub	sp, #16
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
 800a9bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d10a      	bne.n	800a9da <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a9c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c8:	f383 8811 	msr	BASEPRI, r3
 800a9cc:	f3bf 8f6f 	isb	sy
 800a9d0:	f3bf 8f4f 	dsb	sy
 800a9d4:	60fb      	str	r3, [r7, #12]
}
 800a9d6:	bf00      	nop
 800a9d8:	e7fe      	b.n	800a9d8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a9da:	4b07      	ldr	r3, [pc, #28]	; (800a9f8 <vTaskPlaceOnEventList+0x44>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	3318      	adds	r3, #24
 800a9e0:	4619      	mov	r1, r3
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f7fe fa2f 	bl	8008e46 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a9e8:	2101      	movs	r1, #1
 800a9ea:	6838      	ldr	r0, [r7, #0]
 800a9ec:	f000 fbae 	bl	800b14c <prvAddCurrentTaskToDelayedList>
}
 800a9f0:	bf00      	nop
 800a9f2:	3710      	adds	r7, #16
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}
 800a9f8:	2000087c 	.word	0x2000087c

0800a9fc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b086      	sub	sp, #24
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	60f8      	str	r0, [r7, #12]
 800aa04:	60b9      	str	r1, [r7, #8]
 800aa06:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d10a      	bne.n	800aa24 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800aa0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa12:	f383 8811 	msr	BASEPRI, r3
 800aa16:	f3bf 8f6f 	isb	sy
 800aa1a:	f3bf 8f4f 	dsb	sy
 800aa1e:	617b      	str	r3, [r7, #20]
}
 800aa20:	bf00      	nop
 800aa22:	e7fe      	b.n	800aa22 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800aa24:	4b0a      	ldr	r3, [pc, #40]	; (800aa50 <vTaskPlaceOnEventListRestricted+0x54>)
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	3318      	adds	r3, #24
 800aa2a:	4619      	mov	r1, r3
 800aa2c:	68f8      	ldr	r0, [r7, #12]
 800aa2e:	f7fe f9e6 	bl	8008dfe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d002      	beq.n	800aa3e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800aa38:	f04f 33ff 	mov.w	r3, #4294967295
 800aa3c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800aa3e:	6879      	ldr	r1, [r7, #4]
 800aa40:	68b8      	ldr	r0, [r7, #8]
 800aa42:	f000 fb83 	bl	800b14c <prvAddCurrentTaskToDelayedList>
	}
 800aa46:	bf00      	nop
 800aa48:	3718      	adds	r7, #24
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}
 800aa4e:	bf00      	nop
 800aa50:	2000087c 	.word	0x2000087c

0800aa54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b086      	sub	sp, #24
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	68db      	ldr	r3, [r3, #12]
 800aa60:	68db      	ldr	r3, [r3, #12]
 800aa62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800aa64:	693b      	ldr	r3, [r7, #16]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d10a      	bne.n	800aa80 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800aa6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa6e:	f383 8811 	msr	BASEPRI, r3
 800aa72:	f3bf 8f6f 	isb	sy
 800aa76:	f3bf 8f4f 	dsb	sy
 800aa7a:	60fb      	str	r3, [r7, #12]
}
 800aa7c:	bf00      	nop
 800aa7e:	e7fe      	b.n	800aa7e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800aa80:	693b      	ldr	r3, [r7, #16]
 800aa82:	3318      	adds	r3, #24
 800aa84:	4618      	mov	r0, r3
 800aa86:	f7fe fa17 	bl	8008eb8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa8a:	4b1d      	ldr	r3, [pc, #116]	; (800ab00 <xTaskRemoveFromEventList+0xac>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d11c      	bne.n	800aacc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800aa92:	693b      	ldr	r3, [r7, #16]
 800aa94:	3304      	adds	r3, #4
 800aa96:	4618      	mov	r0, r3
 800aa98:	f7fe fa0e 	bl	8008eb8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800aa9c:	693b      	ldr	r3, [r7, #16]
 800aa9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaa0:	2201      	movs	r2, #1
 800aaa2:	409a      	lsls	r2, r3
 800aaa4:	4b17      	ldr	r3, [pc, #92]	; (800ab04 <xTaskRemoveFromEventList+0xb0>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	4313      	orrs	r3, r2
 800aaaa:	4a16      	ldr	r2, [pc, #88]	; (800ab04 <xTaskRemoveFromEventList+0xb0>)
 800aaac:	6013      	str	r3, [r2, #0]
 800aaae:	693b      	ldr	r3, [r7, #16]
 800aab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aab2:	4613      	mov	r3, r2
 800aab4:	009b      	lsls	r3, r3, #2
 800aab6:	4413      	add	r3, r2
 800aab8:	009b      	lsls	r3, r3, #2
 800aaba:	4a13      	ldr	r2, [pc, #76]	; (800ab08 <xTaskRemoveFromEventList+0xb4>)
 800aabc:	441a      	add	r2, r3
 800aabe:	693b      	ldr	r3, [r7, #16]
 800aac0:	3304      	adds	r3, #4
 800aac2:	4619      	mov	r1, r3
 800aac4:	4610      	mov	r0, r2
 800aac6:	f7fe f99a 	bl	8008dfe <vListInsertEnd>
 800aaca:	e005      	b.n	800aad8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	3318      	adds	r3, #24
 800aad0:	4619      	mov	r1, r3
 800aad2:	480e      	ldr	r0, [pc, #56]	; (800ab0c <xTaskRemoveFromEventList+0xb8>)
 800aad4:	f7fe f993 	bl	8008dfe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aadc:	4b0c      	ldr	r3, [pc, #48]	; (800ab10 <xTaskRemoveFromEventList+0xbc>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aae2:	429a      	cmp	r2, r3
 800aae4:	d905      	bls.n	800aaf2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800aae6:	2301      	movs	r3, #1
 800aae8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800aaea:	4b0a      	ldr	r3, [pc, #40]	; (800ab14 <xTaskRemoveFromEventList+0xc0>)
 800aaec:	2201      	movs	r2, #1
 800aaee:	601a      	str	r2, [r3, #0]
 800aaf0:	e001      	b.n	800aaf6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800aaf6:	697b      	ldr	r3, [r7, #20]
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	3718      	adds	r7, #24
 800aafc:	46bd      	mov	sp, r7
 800aafe:	bd80      	pop	{r7, pc}
 800ab00:	200009a4 	.word	0x200009a4
 800ab04:	20000984 	.word	0x20000984
 800ab08:	20000880 	.word	0x20000880
 800ab0c:	2000093c 	.word	0x2000093c
 800ab10:	2000087c 	.word	0x2000087c
 800ab14:	20000990 	.word	0x20000990

0800ab18 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ab18:	b480      	push	{r7}
 800ab1a:	b083      	sub	sp, #12
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ab20:	4b06      	ldr	r3, [pc, #24]	; (800ab3c <vTaskInternalSetTimeOutState+0x24>)
 800ab22:	681a      	ldr	r2, [r3, #0]
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ab28:	4b05      	ldr	r3, [pc, #20]	; (800ab40 <vTaskInternalSetTimeOutState+0x28>)
 800ab2a:	681a      	ldr	r2, [r3, #0]
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	605a      	str	r2, [r3, #4]
}
 800ab30:	bf00      	nop
 800ab32:	370c      	adds	r7, #12
 800ab34:	46bd      	mov	sp, r7
 800ab36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3a:	4770      	bx	lr
 800ab3c:	20000994 	.word	0x20000994
 800ab40:	20000980 	.word	0x20000980

0800ab44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b088      	sub	sp, #32
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
 800ab4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d10a      	bne.n	800ab6a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ab54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab58:	f383 8811 	msr	BASEPRI, r3
 800ab5c:	f3bf 8f6f 	isb	sy
 800ab60:	f3bf 8f4f 	dsb	sy
 800ab64:	613b      	str	r3, [r7, #16]
}
 800ab66:	bf00      	nop
 800ab68:	e7fe      	b.n	800ab68 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d10a      	bne.n	800ab86 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ab70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab74:	f383 8811 	msr	BASEPRI, r3
 800ab78:	f3bf 8f6f 	isb	sy
 800ab7c:	f3bf 8f4f 	dsb	sy
 800ab80:	60fb      	str	r3, [r7, #12]
}
 800ab82:	bf00      	nop
 800ab84:	e7fe      	b.n	800ab84 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ab86:	f001 f83d 	bl	800bc04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ab8a:	4b1d      	ldr	r3, [pc, #116]	; (800ac00 <xTaskCheckForTimeOut+0xbc>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	685b      	ldr	r3, [r3, #4]
 800ab94:	69ba      	ldr	r2, [r7, #24]
 800ab96:	1ad3      	subs	r3, r2, r3
 800ab98:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aba2:	d102      	bne.n	800abaa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800aba4:	2300      	movs	r3, #0
 800aba6:	61fb      	str	r3, [r7, #28]
 800aba8:	e023      	b.n	800abf2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681a      	ldr	r2, [r3, #0]
 800abae:	4b15      	ldr	r3, [pc, #84]	; (800ac04 <xTaskCheckForTimeOut+0xc0>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	429a      	cmp	r2, r3
 800abb4:	d007      	beq.n	800abc6 <xTaskCheckForTimeOut+0x82>
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	685b      	ldr	r3, [r3, #4]
 800abba:	69ba      	ldr	r2, [r7, #24]
 800abbc:	429a      	cmp	r2, r3
 800abbe:	d302      	bcc.n	800abc6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800abc0:	2301      	movs	r3, #1
 800abc2:	61fb      	str	r3, [r7, #28]
 800abc4:	e015      	b.n	800abf2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	697a      	ldr	r2, [r7, #20]
 800abcc:	429a      	cmp	r2, r3
 800abce:	d20b      	bcs.n	800abe8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	681a      	ldr	r2, [r3, #0]
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	1ad2      	subs	r2, r2, r3
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f7ff ff9b 	bl	800ab18 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800abe2:	2300      	movs	r3, #0
 800abe4:	61fb      	str	r3, [r7, #28]
 800abe6:	e004      	b.n	800abf2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	2200      	movs	r2, #0
 800abec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800abee:	2301      	movs	r3, #1
 800abf0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800abf2:	f001 f837 	bl	800bc64 <vPortExitCritical>

	return xReturn;
 800abf6:	69fb      	ldr	r3, [r7, #28]
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	3720      	adds	r7, #32
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}
 800ac00:	20000980 	.word	0x20000980
 800ac04:	20000994 	.word	0x20000994

0800ac08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ac08:	b480      	push	{r7}
 800ac0a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ac0c:	4b03      	ldr	r3, [pc, #12]	; (800ac1c <vTaskMissedYield+0x14>)
 800ac0e:	2201      	movs	r2, #1
 800ac10:	601a      	str	r2, [r3, #0]
}
 800ac12:	bf00      	nop
 800ac14:	46bd      	mov	sp, r7
 800ac16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1a:	4770      	bx	lr
 800ac1c:	20000990 	.word	0x20000990

0800ac20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b082      	sub	sp, #8
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ac28:	f000 f852 	bl	800acd0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ac2c:	4b06      	ldr	r3, [pc, #24]	; (800ac48 <prvIdleTask+0x28>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	2b01      	cmp	r3, #1
 800ac32:	d9f9      	bls.n	800ac28 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ac34:	4b05      	ldr	r3, [pc, #20]	; (800ac4c <prvIdleTask+0x2c>)
 800ac36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac3a:	601a      	str	r2, [r3, #0]
 800ac3c:	f3bf 8f4f 	dsb	sy
 800ac40:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ac44:	e7f0      	b.n	800ac28 <prvIdleTask+0x8>
 800ac46:	bf00      	nop
 800ac48:	20000880 	.word	0x20000880
 800ac4c:	e000ed04 	.word	0xe000ed04

0800ac50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b082      	sub	sp, #8
 800ac54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ac56:	2300      	movs	r3, #0
 800ac58:	607b      	str	r3, [r7, #4]
 800ac5a:	e00c      	b.n	800ac76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ac5c:	687a      	ldr	r2, [r7, #4]
 800ac5e:	4613      	mov	r3, r2
 800ac60:	009b      	lsls	r3, r3, #2
 800ac62:	4413      	add	r3, r2
 800ac64:	009b      	lsls	r3, r3, #2
 800ac66:	4a12      	ldr	r2, [pc, #72]	; (800acb0 <prvInitialiseTaskLists+0x60>)
 800ac68:	4413      	add	r3, r2
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f7fe f89a 	bl	8008da4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	3301      	adds	r3, #1
 800ac74:	607b      	str	r3, [r7, #4]
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2b06      	cmp	r3, #6
 800ac7a:	d9ef      	bls.n	800ac5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ac7c:	480d      	ldr	r0, [pc, #52]	; (800acb4 <prvInitialiseTaskLists+0x64>)
 800ac7e:	f7fe f891 	bl	8008da4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ac82:	480d      	ldr	r0, [pc, #52]	; (800acb8 <prvInitialiseTaskLists+0x68>)
 800ac84:	f7fe f88e 	bl	8008da4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ac88:	480c      	ldr	r0, [pc, #48]	; (800acbc <prvInitialiseTaskLists+0x6c>)
 800ac8a:	f7fe f88b 	bl	8008da4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ac8e:	480c      	ldr	r0, [pc, #48]	; (800acc0 <prvInitialiseTaskLists+0x70>)
 800ac90:	f7fe f888 	bl	8008da4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ac94:	480b      	ldr	r0, [pc, #44]	; (800acc4 <prvInitialiseTaskLists+0x74>)
 800ac96:	f7fe f885 	bl	8008da4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ac9a:	4b0b      	ldr	r3, [pc, #44]	; (800acc8 <prvInitialiseTaskLists+0x78>)
 800ac9c:	4a05      	ldr	r2, [pc, #20]	; (800acb4 <prvInitialiseTaskLists+0x64>)
 800ac9e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800aca0:	4b0a      	ldr	r3, [pc, #40]	; (800accc <prvInitialiseTaskLists+0x7c>)
 800aca2:	4a05      	ldr	r2, [pc, #20]	; (800acb8 <prvInitialiseTaskLists+0x68>)
 800aca4:	601a      	str	r2, [r3, #0]
}
 800aca6:	bf00      	nop
 800aca8:	3708      	adds	r7, #8
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}
 800acae:	bf00      	nop
 800acb0:	20000880 	.word	0x20000880
 800acb4:	2000090c 	.word	0x2000090c
 800acb8:	20000920 	.word	0x20000920
 800acbc:	2000093c 	.word	0x2000093c
 800acc0:	20000950 	.word	0x20000950
 800acc4:	20000968 	.word	0x20000968
 800acc8:	20000934 	.word	0x20000934
 800accc:	20000938 	.word	0x20000938

0800acd0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b082      	sub	sp, #8
 800acd4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800acd6:	e019      	b.n	800ad0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800acd8:	f000 ff94 	bl	800bc04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acdc:	4b10      	ldr	r3, [pc, #64]	; (800ad20 <prvCheckTasksWaitingTermination+0x50>)
 800acde:	68db      	ldr	r3, [r3, #12]
 800ace0:	68db      	ldr	r3, [r3, #12]
 800ace2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	3304      	adds	r3, #4
 800ace8:	4618      	mov	r0, r3
 800acea:	f7fe f8e5 	bl	8008eb8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800acee:	4b0d      	ldr	r3, [pc, #52]	; (800ad24 <prvCheckTasksWaitingTermination+0x54>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	3b01      	subs	r3, #1
 800acf4:	4a0b      	ldr	r2, [pc, #44]	; (800ad24 <prvCheckTasksWaitingTermination+0x54>)
 800acf6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800acf8:	4b0b      	ldr	r3, [pc, #44]	; (800ad28 <prvCheckTasksWaitingTermination+0x58>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	3b01      	subs	r3, #1
 800acfe:	4a0a      	ldr	r2, [pc, #40]	; (800ad28 <prvCheckTasksWaitingTermination+0x58>)
 800ad00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ad02:	f000 ffaf 	bl	800bc64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f000 f810 	bl	800ad2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ad0c:	4b06      	ldr	r3, [pc, #24]	; (800ad28 <prvCheckTasksWaitingTermination+0x58>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d1e1      	bne.n	800acd8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ad14:	bf00      	nop
 800ad16:	bf00      	nop
 800ad18:	3708      	adds	r7, #8
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}
 800ad1e:	bf00      	nop
 800ad20:	20000950 	.word	0x20000950
 800ad24:	2000097c 	.word	0x2000097c
 800ad28:	20000964 	.word	0x20000964

0800ad2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b084      	sub	sp, #16
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	334c      	adds	r3, #76	; 0x4c
 800ad38:	4618      	mov	r0, r3
 800ad3a:	f00f fc2b 	bl	801a594 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d108      	bne.n	800ad5a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f001 f947 	bl	800bfe0 <vPortFree>
				vPortFree( pxTCB );
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f001 f944 	bl	800bfe0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ad58:	e018      	b.n	800ad8c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800ad60:	2b01      	cmp	r3, #1
 800ad62:	d103      	bne.n	800ad6c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f001 f93b 	bl	800bfe0 <vPortFree>
	}
 800ad6a:	e00f      	b.n	800ad8c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800ad72:	2b02      	cmp	r3, #2
 800ad74:	d00a      	beq.n	800ad8c <prvDeleteTCB+0x60>
	__asm volatile
 800ad76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad7a:	f383 8811 	msr	BASEPRI, r3
 800ad7e:	f3bf 8f6f 	isb	sy
 800ad82:	f3bf 8f4f 	dsb	sy
 800ad86:	60fb      	str	r3, [r7, #12]
}
 800ad88:	bf00      	nop
 800ad8a:	e7fe      	b.n	800ad8a <prvDeleteTCB+0x5e>
	}
 800ad8c:	bf00      	nop
 800ad8e:	3710      	adds	r7, #16
 800ad90:	46bd      	mov	sp, r7
 800ad92:	bd80      	pop	{r7, pc}

0800ad94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ad94:	b480      	push	{r7}
 800ad96:	b083      	sub	sp, #12
 800ad98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ad9a:	4b0c      	ldr	r3, [pc, #48]	; (800adcc <prvResetNextTaskUnblockTime+0x38>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d104      	bne.n	800adae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ada4:	4b0a      	ldr	r3, [pc, #40]	; (800add0 <prvResetNextTaskUnblockTime+0x3c>)
 800ada6:	f04f 32ff 	mov.w	r2, #4294967295
 800adaa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800adac:	e008      	b.n	800adc0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800adae:	4b07      	ldr	r3, [pc, #28]	; (800adcc <prvResetNextTaskUnblockTime+0x38>)
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	68db      	ldr	r3, [r3, #12]
 800adb4:	68db      	ldr	r3, [r3, #12]
 800adb6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	685b      	ldr	r3, [r3, #4]
 800adbc:	4a04      	ldr	r2, [pc, #16]	; (800add0 <prvResetNextTaskUnblockTime+0x3c>)
 800adbe:	6013      	str	r3, [r2, #0]
}
 800adc0:	bf00      	nop
 800adc2:	370c      	adds	r7, #12
 800adc4:	46bd      	mov	sp, r7
 800adc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adca:	4770      	bx	lr
 800adcc:	20000934 	.word	0x20000934
 800add0:	2000099c 	.word	0x2000099c

0800add4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800add4:	b480      	push	{r7}
 800add6:	b083      	sub	sp, #12
 800add8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800adda:	4b0b      	ldr	r3, [pc, #44]	; (800ae08 <xTaskGetSchedulerState+0x34>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d102      	bne.n	800ade8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ade2:	2301      	movs	r3, #1
 800ade4:	607b      	str	r3, [r7, #4]
 800ade6:	e008      	b.n	800adfa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ade8:	4b08      	ldr	r3, [pc, #32]	; (800ae0c <xTaskGetSchedulerState+0x38>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d102      	bne.n	800adf6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800adf0:	2302      	movs	r3, #2
 800adf2:	607b      	str	r3, [r7, #4]
 800adf4:	e001      	b.n	800adfa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800adf6:	2300      	movs	r3, #0
 800adf8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800adfa:	687b      	ldr	r3, [r7, #4]
	}
 800adfc:	4618      	mov	r0, r3
 800adfe:	370c      	adds	r7, #12
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr
 800ae08:	20000988 	.word	0x20000988
 800ae0c:	200009a4 	.word	0x200009a4

0800ae10 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b084      	sub	sp, #16
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d05e      	beq.n	800aee4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae2a:	4b31      	ldr	r3, [pc, #196]	; (800aef0 <xTaskPriorityInherit+0xe0>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae30:	429a      	cmp	r2, r3
 800ae32:	d24e      	bcs.n	800aed2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	699b      	ldr	r3, [r3, #24]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	db06      	blt.n	800ae4a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae3c:	4b2c      	ldr	r3, [pc, #176]	; (800aef0 <xTaskPriorityInherit+0xe0>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae42:	f1c3 0207 	rsb	r2, r3, #7
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	6959      	ldr	r1, [r3, #20]
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae52:	4613      	mov	r3, r2
 800ae54:	009b      	lsls	r3, r3, #2
 800ae56:	4413      	add	r3, r2
 800ae58:	009b      	lsls	r3, r3, #2
 800ae5a:	4a26      	ldr	r2, [pc, #152]	; (800aef4 <xTaskPriorityInherit+0xe4>)
 800ae5c:	4413      	add	r3, r2
 800ae5e:	4299      	cmp	r1, r3
 800ae60:	d12f      	bne.n	800aec2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	3304      	adds	r3, #4
 800ae66:	4618      	mov	r0, r3
 800ae68:	f7fe f826 	bl	8008eb8 <uxListRemove>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d10a      	bne.n	800ae88 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae76:	2201      	movs	r2, #1
 800ae78:	fa02 f303 	lsl.w	r3, r2, r3
 800ae7c:	43da      	mvns	r2, r3
 800ae7e:	4b1e      	ldr	r3, [pc, #120]	; (800aef8 <xTaskPriorityInherit+0xe8>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	4013      	ands	r3, r2
 800ae84:	4a1c      	ldr	r2, [pc, #112]	; (800aef8 <xTaskPriorityInherit+0xe8>)
 800ae86:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ae88:	4b19      	ldr	r3, [pc, #100]	; (800aef0 <xTaskPriorityInherit+0xe0>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae8e:	68bb      	ldr	r3, [r7, #8]
 800ae90:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ae92:	68bb      	ldr	r3, [r7, #8]
 800ae94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae96:	2201      	movs	r2, #1
 800ae98:	409a      	lsls	r2, r3
 800ae9a:	4b17      	ldr	r3, [pc, #92]	; (800aef8 <xTaskPriorityInherit+0xe8>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	4313      	orrs	r3, r2
 800aea0:	4a15      	ldr	r2, [pc, #84]	; (800aef8 <xTaskPriorityInherit+0xe8>)
 800aea2:	6013      	str	r3, [r2, #0]
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aea8:	4613      	mov	r3, r2
 800aeaa:	009b      	lsls	r3, r3, #2
 800aeac:	4413      	add	r3, r2
 800aeae:	009b      	lsls	r3, r3, #2
 800aeb0:	4a10      	ldr	r2, [pc, #64]	; (800aef4 <xTaskPriorityInherit+0xe4>)
 800aeb2:	441a      	add	r2, r3
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	3304      	adds	r3, #4
 800aeb8:	4619      	mov	r1, r3
 800aeba:	4610      	mov	r0, r2
 800aebc:	f7fd ff9f 	bl	8008dfe <vListInsertEnd>
 800aec0:	e004      	b.n	800aecc <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800aec2:	4b0b      	ldr	r3, [pc, #44]	; (800aef0 <xTaskPriorityInherit+0xe0>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800aecc:	2301      	movs	r3, #1
 800aece:	60fb      	str	r3, [r7, #12]
 800aed0:	e008      	b.n	800aee4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aed6:	4b06      	ldr	r3, [pc, #24]	; (800aef0 <xTaskPriorityInherit+0xe0>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aedc:	429a      	cmp	r2, r3
 800aede:	d201      	bcs.n	800aee4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800aee0:	2301      	movs	r3, #1
 800aee2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aee4:	68fb      	ldr	r3, [r7, #12]
	}
 800aee6:	4618      	mov	r0, r3
 800aee8:	3710      	adds	r7, #16
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd80      	pop	{r7, pc}
 800aeee:	bf00      	nop
 800aef0:	2000087c 	.word	0x2000087c
 800aef4:	20000880 	.word	0x20000880
 800aef8:	20000984 	.word	0x20000984

0800aefc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b086      	sub	sp, #24
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800af08:	2300      	movs	r3, #0
 800af0a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d06e      	beq.n	800aff0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800af12:	4b3a      	ldr	r3, [pc, #232]	; (800affc <xTaskPriorityDisinherit+0x100>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	693a      	ldr	r2, [r7, #16]
 800af18:	429a      	cmp	r2, r3
 800af1a:	d00a      	beq.n	800af32 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800af1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af20:	f383 8811 	msr	BASEPRI, r3
 800af24:	f3bf 8f6f 	isb	sy
 800af28:	f3bf 8f4f 	dsb	sy
 800af2c:	60fb      	str	r3, [r7, #12]
}
 800af2e:	bf00      	nop
 800af30:	e7fe      	b.n	800af30 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af36:	2b00      	cmp	r3, #0
 800af38:	d10a      	bne.n	800af50 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800af3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af3e:	f383 8811 	msr	BASEPRI, r3
 800af42:	f3bf 8f6f 	isb	sy
 800af46:	f3bf 8f4f 	dsb	sy
 800af4a:	60bb      	str	r3, [r7, #8]
}
 800af4c:	bf00      	nop
 800af4e:	e7fe      	b.n	800af4e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800af50:	693b      	ldr	r3, [r7, #16]
 800af52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af54:	1e5a      	subs	r2, r3, #1
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800af5a:	693b      	ldr	r3, [r7, #16]
 800af5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af5e:	693b      	ldr	r3, [r7, #16]
 800af60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af62:	429a      	cmp	r2, r3
 800af64:	d044      	beq.n	800aff0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d140      	bne.n	800aff0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800af6e:	693b      	ldr	r3, [r7, #16]
 800af70:	3304      	adds	r3, #4
 800af72:	4618      	mov	r0, r3
 800af74:	f7fd ffa0 	bl	8008eb8 <uxListRemove>
 800af78:	4603      	mov	r3, r0
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d115      	bne.n	800afaa <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800af7e:	693b      	ldr	r3, [r7, #16]
 800af80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af82:	491f      	ldr	r1, [pc, #124]	; (800b000 <xTaskPriorityDisinherit+0x104>)
 800af84:	4613      	mov	r3, r2
 800af86:	009b      	lsls	r3, r3, #2
 800af88:	4413      	add	r3, r2
 800af8a:	009b      	lsls	r3, r3, #2
 800af8c:	440b      	add	r3, r1
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d10a      	bne.n	800afaa <xTaskPriorityDisinherit+0xae>
 800af94:	693b      	ldr	r3, [r7, #16]
 800af96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af98:	2201      	movs	r2, #1
 800af9a:	fa02 f303 	lsl.w	r3, r2, r3
 800af9e:	43da      	mvns	r2, r3
 800afa0:	4b18      	ldr	r3, [pc, #96]	; (800b004 <xTaskPriorityDisinherit+0x108>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	4013      	ands	r3, r2
 800afa6:	4a17      	ldr	r2, [pc, #92]	; (800b004 <xTaskPriorityDisinherit+0x108>)
 800afa8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afb2:	693b      	ldr	r3, [r7, #16]
 800afb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afb6:	f1c3 0207 	rsb	r2, r3, #7
 800afba:	693b      	ldr	r3, [r7, #16]
 800afbc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afc2:	2201      	movs	r2, #1
 800afc4:	409a      	lsls	r2, r3
 800afc6:	4b0f      	ldr	r3, [pc, #60]	; (800b004 <xTaskPriorityDisinherit+0x108>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	4313      	orrs	r3, r2
 800afcc:	4a0d      	ldr	r2, [pc, #52]	; (800b004 <xTaskPriorityDisinherit+0x108>)
 800afce:	6013      	str	r3, [r2, #0]
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afd4:	4613      	mov	r3, r2
 800afd6:	009b      	lsls	r3, r3, #2
 800afd8:	4413      	add	r3, r2
 800afda:	009b      	lsls	r3, r3, #2
 800afdc:	4a08      	ldr	r2, [pc, #32]	; (800b000 <xTaskPriorityDisinherit+0x104>)
 800afde:	441a      	add	r2, r3
 800afe0:	693b      	ldr	r3, [r7, #16]
 800afe2:	3304      	adds	r3, #4
 800afe4:	4619      	mov	r1, r3
 800afe6:	4610      	mov	r0, r2
 800afe8:	f7fd ff09 	bl	8008dfe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800afec:	2301      	movs	r3, #1
 800afee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aff0:	697b      	ldr	r3, [r7, #20]
	}
 800aff2:	4618      	mov	r0, r3
 800aff4:	3718      	adds	r7, #24
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bd80      	pop	{r7, pc}
 800affa:	bf00      	nop
 800affc:	2000087c 	.word	0x2000087c
 800b000:	20000880 	.word	0x20000880
 800b004:	20000984 	.word	0x20000984

0800b008 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b088      	sub	sp, #32
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
 800b010:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b016:	2301      	movs	r3, #1
 800b018:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d077      	beq.n	800b110 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b020:	69bb      	ldr	r3, [r7, #24]
 800b022:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b024:	2b00      	cmp	r3, #0
 800b026:	d10a      	bne.n	800b03e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b02c:	f383 8811 	msr	BASEPRI, r3
 800b030:	f3bf 8f6f 	isb	sy
 800b034:	f3bf 8f4f 	dsb	sy
 800b038:	60fb      	str	r3, [r7, #12]
}
 800b03a:	bf00      	nop
 800b03c:	e7fe      	b.n	800b03c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b03e:	69bb      	ldr	r3, [r7, #24]
 800b040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b042:	683a      	ldr	r2, [r7, #0]
 800b044:	429a      	cmp	r2, r3
 800b046:	d902      	bls.n	800b04e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	61fb      	str	r3, [r7, #28]
 800b04c:	e002      	b.n	800b054 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b04e:	69bb      	ldr	r3, [r7, #24]
 800b050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b052:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b054:	69bb      	ldr	r3, [r7, #24]
 800b056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b058:	69fa      	ldr	r2, [r7, #28]
 800b05a:	429a      	cmp	r2, r3
 800b05c:	d058      	beq.n	800b110 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b05e:	69bb      	ldr	r3, [r7, #24]
 800b060:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b062:	697a      	ldr	r2, [r7, #20]
 800b064:	429a      	cmp	r2, r3
 800b066:	d153      	bne.n	800b110 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b068:	4b2b      	ldr	r3, [pc, #172]	; (800b118 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	69ba      	ldr	r2, [r7, #24]
 800b06e:	429a      	cmp	r2, r3
 800b070:	d10a      	bne.n	800b088 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b076:	f383 8811 	msr	BASEPRI, r3
 800b07a:	f3bf 8f6f 	isb	sy
 800b07e:	f3bf 8f4f 	dsb	sy
 800b082:	60bb      	str	r3, [r7, #8]
}
 800b084:	bf00      	nop
 800b086:	e7fe      	b.n	800b086 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b088:	69bb      	ldr	r3, [r7, #24]
 800b08a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b08c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b08e:	69bb      	ldr	r3, [r7, #24]
 800b090:	69fa      	ldr	r2, [r7, #28]
 800b092:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b094:	69bb      	ldr	r3, [r7, #24]
 800b096:	699b      	ldr	r3, [r3, #24]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	db04      	blt.n	800b0a6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b09c:	69fb      	ldr	r3, [r7, #28]
 800b09e:	f1c3 0207 	rsb	r2, r3, #7
 800b0a2:	69bb      	ldr	r3, [r7, #24]
 800b0a4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b0a6:	69bb      	ldr	r3, [r7, #24]
 800b0a8:	6959      	ldr	r1, [r3, #20]
 800b0aa:	693a      	ldr	r2, [r7, #16]
 800b0ac:	4613      	mov	r3, r2
 800b0ae:	009b      	lsls	r3, r3, #2
 800b0b0:	4413      	add	r3, r2
 800b0b2:	009b      	lsls	r3, r3, #2
 800b0b4:	4a19      	ldr	r2, [pc, #100]	; (800b11c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800b0b6:	4413      	add	r3, r2
 800b0b8:	4299      	cmp	r1, r3
 800b0ba:	d129      	bne.n	800b110 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b0bc:	69bb      	ldr	r3, [r7, #24]
 800b0be:	3304      	adds	r3, #4
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	f7fd fef9 	bl	8008eb8 <uxListRemove>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d10a      	bne.n	800b0e2 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800b0cc:	69bb      	ldr	r3, [r7, #24]
 800b0ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0d0:	2201      	movs	r2, #1
 800b0d2:	fa02 f303 	lsl.w	r3, r2, r3
 800b0d6:	43da      	mvns	r2, r3
 800b0d8:	4b11      	ldr	r3, [pc, #68]	; (800b120 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	4013      	ands	r3, r2
 800b0de:	4a10      	ldr	r2, [pc, #64]	; (800b120 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b0e0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b0e2:	69bb      	ldr	r3, [r7, #24]
 800b0e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0e6:	2201      	movs	r2, #1
 800b0e8:	409a      	lsls	r2, r3
 800b0ea:	4b0d      	ldr	r3, [pc, #52]	; (800b120 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	4313      	orrs	r3, r2
 800b0f0:	4a0b      	ldr	r2, [pc, #44]	; (800b120 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800b0f2:	6013      	str	r3, [r2, #0]
 800b0f4:	69bb      	ldr	r3, [r7, #24]
 800b0f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0f8:	4613      	mov	r3, r2
 800b0fa:	009b      	lsls	r3, r3, #2
 800b0fc:	4413      	add	r3, r2
 800b0fe:	009b      	lsls	r3, r3, #2
 800b100:	4a06      	ldr	r2, [pc, #24]	; (800b11c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800b102:	441a      	add	r2, r3
 800b104:	69bb      	ldr	r3, [r7, #24]
 800b106:	3304      	adds	r3, #4
 800b108:	4619      	mov	r1, r3
 800b10a:	4610      	mov	r0, r2
 800b10c:	f7fd fe77 	bl	8008dfe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b110:	bf00      	nop
 800b112:	3720      	adds	r7, #32
 800b114:	46bd      	mov	sp, r7
 800b116:	bd80      	pop	{r7, pc}
 800b118:	2000087c 	.word	0x2000087c
 800b11c:	20000880 	.word	0x20000880
 800b120:	20000984 	.word	0x20000984

0800b124 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b124:	b480      	push	{r7}
 800b126:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b128:	4b07      	ldr	r3, [pc, #28]	; (800b148 <pvTaskIncrementMutexHeldCount+0x24>)
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d004      	beq.n	800b13a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b130:	4b05      	ldr	r3, [pc, #20]	; (800b148 <pvTaskIncrementMutexHeldCount+0x24>)
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b136:	3201      	adds	r2, #1
 800b138:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800b13a:	4b03      	ldr	r3, [pc, #12]	; (800b148 <pvTaskIncrementMutexHeldCount+0x24>)
 800b13c:	681b      	ldr	r3, [r3, #0]
	}
 800b13e:	4618      	mov	r0, r3
 800b140:	46bd      	mov	sp, r7
 800b142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b146:	4770      	bx	lr
 800b148:	2000087c 	.word	0x2000087c

0800b14c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b084      	sub	sp, #16
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
 800b154:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b156:	4b29      	ldr	r3, [pc, #164]	; (800b1fc <prvAddCurrentTaskToDelayedList+0xb0>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b15c:	4b28      	ldr	r3, [pc, #160]	; (800b200 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	3304      	adds	r3, #4
 800b162:	4618      	mov	r0, r3
 800b164:	f7fd fea8 	bl	8008eb8 <uxListRemove>
 800b168:	4603      	mov	r3, r0
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d10b      	bne.n	800b186 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b16e:	4b24      	ldr	r3, [pc, #144]	; (800b200 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b174:	2201      	movs	r2, #1
 800b176:	fa02 f303 	lsl.w	r3, r2, r3
 800b17a:	43da      	mvns	r2, r3
 800b17c:	4b21      	ldr	r3, [pc, #132]	; (800b204 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	4013      	ands	r3, r2
 800b182:	4a20      	ldr	r2, [pc, #128]	; (800b204 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b184:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b18c:	d10a      	bne.n	800b1a4 <prvAddCurrentTaskToDelayedList+0x58>
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d007      	beq.n	800b1a4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b194:	4b1a      	ldr	r3, [pc, #104]	; (800b200 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	3304      	adds	r3, #4
 800b19a:	4619      	mov	r1, r3
 800b19c:	481a      	ldr	r0, [pc, #104]	; (800b208 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b19e:	f7fd fe2e 	bl	8008dfe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b1a2:	e026      	b.n	800b1f2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b1a4:	68fa      	ldr	r2, [r7, #12]
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	4413      	add	r3, r2
 800b1aa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b1ac:	4b14      	ldr	r3, [pc, #80]	; (800b200 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	68ba      	ldr	r2, [r7, #8]
 800b1b2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b1b4:	68ba      	ldr	r2, [r7, #8]
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	429a      	cmp	r2, r3
 800b1ba:	d209      	bcs.n	800b1d0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b1bc:	4b13      	ldr	r3, [pc, #76]	; (800b20c <prvAddCurrentTaskToDelayedList+0xc0>)
 800b1be:	681a      	ldr	r2, [r3, #0]
 800b1c0:	4b0f      	ldr	r3, [pc, #60]	; (800b200 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	3304      	adds	r3, #4
 800b1c6:	4619      	mov	r1, r3
 800b1c8:	4610      	mov	r0, r2
 800b1ca:	f7fd fe3c 	bl	8008e46 <vListInsert>
}
 800b1ce:	e010      	b.n	800b1f2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b1d0:	4b0f      	ldr	r3, [pc, #60]	; (800b210 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b1d2:	681a      	ldr	r2, [r3, #0]
 800b1d4:	4b0a      	ldr	r3, [pc, #40]	; (800b200 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	3304      	adds	r3, #4
 800b1da:	4619      	mov	r1, r3
 800b1dc:	4610      	mov	r0, r2
 800b1de:	f7fd fe32 	bl	8008e46 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b1e2:	4b0c      	ldr	r3, [pc, #48]	; (800b214 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	68ba      	ldr	r2, [r7, #8]
 800b1e8:	429a      	cmp	r2, r3
 800b1ea:	d202      	bcs.n	800b1f2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b1ec:	4a09      	ldr	r2, [pc, #36]	; (800b214 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	6013      	str	r3, [r2, #0]
}
 800b1f2:	bf00      	nop
 800b1f4:	3710      	adds	r7, #16
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}
 800b1fa:	bf00      	nop
 800b1fc:	20000980 	.word	0x20000980
 800b200:	2000087c 	.word	0x2000087c
 800b204:	20000984 	.word	0x20000984
 800b208:	20000968 	.word	0x20000968
 800b20c:	20000938 	.word	0x20000938
 800b210:	20000934 	.word	0x20000934
 800b214:	2000099c 	.word	0x2000099c

0800b218 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b08a      	sub	sp, #40	; 0x28
 800b21c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b21e:	2300      	movs	r3, #0
 800b220:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b222:	f000 fb85 	bl	800b930 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b226:	4b1c      	ldr	r3, [pc, #112]	; (800b298 <xTimerCreateTimerTask+0x80>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d021      	beq.n	800b272 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b22e:	2300      	movs	r3, #0
 800b230:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b232:	2300      	movs	r3, #0
 800b234:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b236:	1d3a      	adds	r2, r7, #4
 800b238:	f107 0108 	add.w	r1, r7, #8
 800b23c:	f107 030c 	add.w	r3, r7, #12
 800b240:	4618      	mov	r0, r3
 800b242:	f7f5 fe1f 	bl	8000e84 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b246:	6879      	ldr	r1, [r7, #4]
 800b248:	68bb      	ldr	r3, [r7, #8]
 800b24a:	68fa      	ldr	r2, [r7, #12]
 800b24c:	9202      	str	r2, [sp, #8]
 800b24e:	9301      	str	r3, [sp, #4]
 800b250:	2305      	movs	r3, #5
 800b252:	9300      	str	r3, [sp, #0]
 800b254:	2300      	movs	r3, #0
 800b256:	460a      	mov	r2, r1
 800b258:	4910      	ldr	r1, [pc, #64]	; (800b29c <xTimerCreateTimerTask+0x84>)
 800b25a:	4811      	ldr	r0, [pc, #68]	; (800b2a0 <xTimerCreateTimerTask+0x88>)
 800b25c:	f7fe fdf4 	bl	8009e48 <xTaskCreateStatic>
 800b260:	4603      	mov	r3, r0
 800b262:	4a10      	ldr	r2, [pc, #64]	; (800b2a4 <xTimerCreateTimerTask+0x8c>)
 800b264:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b266:	4b0f      	ldr	r3, [pc, #60]	; (800b2a4 <xTimerCreateTimerTask+0x8c>)
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d001      	beq.n	800b272 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b26e:	2301      	movs	r3, #1
 800b270:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d10a      	bne.n	800b28e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b27c:	f383 8811 	msr	BASEPRI, r3
 800b280:	f3bf 8f6f 	isb	sy
 800b284:	f3bf 8f4f 	dsb	sy
 800b288:	613b      	str	r3, [r7, #16]
}
 800b28a:	bf00      	nop
 800b28c:	e7fe      	b.n	800b28c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b28e:	697b      	ldr	r3, [r7, #20]
}
 800b290:	4618      	mov	r0, r3
 800b292:	3718      	adds	r7, #24
 800b294:	46bd      	mov	sp, r7
 800b296:	bd80      	pop	{r7, pc}
 800b298:	200009d8 	.word	0x200009d8
 800b29c:	0801bf20 	.word	0x0801bf20
 800b2a0:	0800b511 	.word	0x0800b511
 800b2a4:	200009dc 	.word	0x200009dc

0800b2a8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b088      	sub	sp, #32
 800b2ac:	af02      	add	r7, sp, #8
 800b2ae:	60f8      	str	r0, [r7, #12]
 800b2b0:	60b9      	str	r1, [r7, #8]
 800b2b2:	607a      	str	r2, [r7, #4]
 800b2b4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800b2b6:	2028      	movs	r0, #40	; 0x28
 800b2b8:	f000 fdc6 	bl	800be48 <pvPortMalloc>
 800b2bc:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d00d      	beq.n	800b2e0 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b2cc:	697b      	ldr	r3, [r7, #20]
 800b2ce:	9301      	str	r3, [sp, #4]
 800b2d0:	6a3b      	ldr	r3, [r7, #32]
 800b2d2:	9300      	str	r3, [sp, #0]
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	687a      	ldr	r2, [r7, #4]
 800b2d8:	68b9      	ldr	r1, [r7, #8]
 800b2da:	68f8      	ldr	r0, [r7, #12]
 800b2dc:	f000 f843 	bl	800b366 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800b2e0:	697b      	ldr	r3, [r7, #20]
	}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3718      	adds	r7, #24
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}

0800b2ea <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800b2ea:	b580      	push	{r7, lr}
 800b2ec:	b08a      	sub	sp, #40	; 0x28
 800b2ee:	af02      	add	r7, sp, #8
 800b2f0:	60f8      	str	r0, [r7, #12]
 800b2f2:	60b9      	str	r1, [r7, #8]
 800b2f4:	607a      	str	r2, [r7, #4]
 800b2f6:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800b2f8:	2328      	movs	r3, #40	; 0x28
 800b2fa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	2b28      	cmp	r3, #40	; 0x28
 800b300:	d00a      	beq.n	800b318 <xTimerCreateStatic+0x2e>
	__asm volatile
 800b302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b306:	f383 8811 	msr	BASEPRI, r3
 800b30a:	f3bf 8f6f 	isb	sy
 800b30e:	f3bf 8f4f 	dsb	sy
 800b312:	61bb      	str	r3, [r7, #24]
}
 800b314:	bf00      	nop
 800b316:	e7fe      	b.n	800b316 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b318:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800b31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d10a      	bne.n	800b336 <xTimerCreateStatic+0x4c>
	__asm volatile
 800b320:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b324:	f383 8811 	msr	BASEPRI, r3
 800b328:	f3bf 8f6f 	isb	sy
 800b32c:	f3bf 8f4f 	dsb	sy
 800b330:	617b      	str	r3, [r7, #20]
}
 800b332:	bf00      	nop
 800b334:	e7fe      	b.n	800b334 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800b336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b338:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800b33a:	69fb      	ldr	r3, [r7, #28]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d00d      	beq.n	800b35c <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800b340:	69fb      	ldr	r3, [r7, #28]
 800b342:	2202      	movs	r2, #2
 800b344:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b348:	69fb      	ldr	r3, [r7, #28]
 800b34a:	9301      	str	r3, [sp, #4]
 800b34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b34e:	9300      	str	r3, [sp, #0]
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	687a      	ldr	r2, [r7, #4]
 800b354:	68b9      	ldr	r1, [r7, #8]
 800b356:	68f8      	ldr	r0, [r7, #12]
 800b358:	f000 f805 	bl	800b366 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800b35c:	69fb      	ldr	r3, [r7, #28]
	}
 800b35e:	4618      	mov	r0, r3
 800b360:	3720      	adds	r7, #32
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}

0800b366 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800b366:	b580      	push	{r7, lr}
 800b368:	b086      	sub	sp, #24
 800b36a:	af00      	add	r7, sp, #0
 800b36c:	60f8      	str	r0, [r7, #12]
 800b36e:	60b9      	str	r1, [r7, #8]
 800b370:	607a      	str	r2, [r7, #4]
 800b372:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d10a      	bne.n	800b390 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800b37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b37e:	f383 8811 	msr	BASEPRI, r3
 800b382:	f3bf 8f6f 	isb	sy
 800b386:	f3bf 8f4f 	dsb	sy
 800b38a:	617b      	str	r3, [r7, #20]
}
 800b38c:	bf00      	nop
 800b38e:	e7fe      	b.n	800b38e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800b390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b392:	2b00      	cmp	r3, #0
 800b394:	d01e      	beq.n	800b3d4 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800b396:	f000 facb 	bl	800b930 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800b39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b39c:	68fa      	ldr	r2, [r7, #12]
 800b39e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800b3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3a2:	68ba      	ldr	r2, [r7, #8]
 800b3a4:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800b3a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3a8:	683a      	ldr	r2, [r7, #0]
 800b3aa:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800b3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ae:	6a3a      	ldr	r2, [r7, #32]
 800b3b0:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800b3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b4:	3304      	adds	r3, #4
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	f7fd fd14 	bl	8008de4 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d008      	beq.n	800b3d4 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800b3c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b3c8:	f043 0304 	orr.w	r3, r3, #4
 800b3cc:	b2da      	uxtb	r2, r3
 800b3ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800b3d4:	bf00      	nop
 800b3d6:	3718      	adds	r7, #24
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}

0800b3dc <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b08a      	sub	sp, #40	; 0x28
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	60f8      	str	r0, [r7, #12]
 800b3e4:	60b9      	str	r1, [r7, #8]
 800b3e6:	607a      	str	r2, [r7, #4]
 800b3e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d10a      	bne.n	800b40a <xTimerGenericCommand+0x2e>
	__asm volatile
 800b3f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3f8:	f383 8811 	msr	BASEPRI, r3
 800b3fc:	f3bf 8f6f 	isb	sy
 800b400:	f3bf 8f4f 	dsb	sy
 800b404:	623b      	str	r3, [r7, #32]
}
 800b406:	bf00      	nop
 800b408:	e7fe      	b.n	800b408 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b40a:	4b1a      	ldr	r3, [pc, #104]	; (800b474 <xTimerGenericCommand+0x98>)
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d02a      	beq.n	800b468 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b412:	68bb      	ldr	r3, [r7, #8]
 800b414:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	2b05      	cmp	r3, #5
 800b422:	dc18      	bgt.n	800b456 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b424:	f7ff fcd6 	bl	800add4 <xTaskGetSchedulerState>
 800b428:	4603      	mov	r3, r0
 800b42a:	2b02      	cmp	r3, #2
 800b42c:	d109      	bne.n	800b442 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b42e:	4b11      	ldr	r3, [pc, #68]	; (800b474 <xTimerGenericCommand+0x98>)
 800b430:	6818      	ldr	r0, [r3, #0]
 800b432:	f107 0114 	add.w	r1, r7, #20
 800b436:	2300      	movs	r3, #0
 800b438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b43a:	f7fd feed 	bl	8009218 <xQueueGenericSend>
 800b43e:	6278      	str	r0, [r7, #36]	; 0x24
 800b440:	e012      	b.n	800b468 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b442:	4b0c      	ldr	r3, [pc, #48]	; (800b474 <xTimerGenericCommand+0x98>)
 800b444:	6818      	ldr	r0, [r3, #0]
 800b446:	f107 0114 	add.w	r1, r7, #20
 800b44a:	2300      	movs	r3, #0
 800b44c:	2200      	movs	r2, #0
 800b44e:	f7fd fee3 	bl	8009218 <xQueueGenericSend>
 800b452:	6278      	str	r0, [r7, #36]	; 0x24
 800b454:	e008      	b.n	800b468 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b456:	4b07      	ldr	r3, [pc, #28]	; (800b474 <xTimerGenericCommand+0x98>)
 800b458:	6818      	ldr	r0, [r3, #0]
 800b45a:	f107 0114 	add.w	r1, r7, #20
 800b45e:	2300      	movs	r3, #0
 800b460:	683a      	ldr	r2, [r7, #0]
 800b462:	f7fd ffd7 	bl	8009414 <xQueueGenericSendFromISR>
 800b466:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b46a:	4618      	mov	r0, r3
 800b46c:	3728      	adds	r7, #40	; 0x28
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}
 800b472:	bf00      	nop
 800b474:	200009d8 	.word	0x200009d8

0800b478 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b088      	sub	sp, #32
 800b47c:	af02      	add	r7, sp, #8
 800b47e:	6078      	str	r0, [r7, #4]
 800b480:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b482:	4b22      	ldr	r3, [pc, #136]	; (800b50c <prvProcessExpiredTimer+0x94>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	68db      	ldr	r3, [r3, #12]
 800b488:	68db      	ldr	r3, [r3, #12]
 800b48a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b48c:	697b      	ldr	r3, [r7, #20]
 800b48e:	3304      	adds	r3, #4
 800b490:	4618      	mov	r0, r3
 800b492:	f7fd fd11 	bl	8008eb8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b496:	697b      	ldr	r3, [r7, #20]
 800b498:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b49c:	f003 0304 	and.w	r3, r3, #4
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d022      	beq.n	800b4ea <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b4a4:	697b      	ldr	r3, [r7, #20]
 800b4a6:	699a      	ldr	r2, [r3, #24]
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	18d1      	adds	r1, r2, r3
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	683a      	ldr	r2, [r7, #0]
 800b4b0:	6978      	ldr	r0, [r7, #20]
 800b4b2:	f000 f8d1 	bl	800b658 <prvInsertTimerInActiveList>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d01f      	beq.n	800b4fc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b4bc:	2300      	movs	r3, #0
 800b4be:	9300      	str	r3, [sp, #0]
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	687a      	ldr	r2, [r7, #4]
 800b4c4:	2100      	movs	r1, #0
 800b4c6:	6978      	ldr	r0, [r7, #20]
 800b4c8:	f7ff ff88 	bl	800b3dc <xTimerGenericCommand>
 800b4cc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b4ce:	693b      	ldr	r3, [r7, #16]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d113      	bne.n	800b4fc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4d8:	f383 8811 	msr	BASEPRI, r3
 800b4dc:	f3bf 8f6f 	isb	sy
 800b4e0:	f3bf 8f4f 	dsb	sy
 800b4e4:	60fb      	str	r3, [r7, #12]
}
 800b4e6:	bf00      	nop
 800b4e8:	e7fe      	b.n	800b4e8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b4ea:	697b      	ldr	r3, [r7, #20]
 800b4ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b4f0:	f023 0301 	bic.w	r3, r3, #1
 800b4f4:	b2da      	uxtb	r2, r3
 800b4f6:	697b      	ldr	r3, [r7, #20]
 800b4f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b4fc:	697b      	ldr	r3, [r7, #20]
 800b4fe:	6a1b      	ldr	r3, [r3, #32]
 800b500:	6978      	ldr	r0, [r7, #20]
 800b502:	4798      	blx	r3
}
 800b504:	bf00      	nop
 800b506:	3718      	adds	r7, #24
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}
 800b50c:	200009d0 	.word	0x200009d0

0800b510 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b510:	b580      	push	{r7, lr}
 800b512:	b084      	sub	sp, #16
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b518:	f107 0308 	add.w	r3, r7, #8
 800b51c:	4618      	mov	r0, r3
 800b51e:	f000 f857 	bl	800b5d0 <prvGetNextExpireTime>
 800b522:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	4619      	mov	r1, r3
 800b528:	68f8      	ldr	r0, [r7, #12]
 800b52a:	f000 f803 	bl	800b534 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b52e:	f000 f8d5 	bl	800b6dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b532:	e7f1      	b.n	800b518 <prvTimerTask+0x8>

0800b534 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b534:	b580      	push	{r7, lr}
 800b536:	b084      	sub	sp, #16
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
 800b53c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b53e:	f7ff f865 	bl	800a60c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b542:	f107 0308 	add.w	r3, r7, #8
 800b546:	4618      	mov	r0, r3
 800b548:	f000 f866 	bl	800b618 <prvSampleTimeNow>
 800b54c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d130      	bne.n	800b5b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d10a      	bne.n	800b570 <prvProcessTimerOrBlockTask+0x3c>
 800b55a:	687a      	ldr	r2, [r7, #4]
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	429a      	cmp	r2, r3
 800b560:	d806      	bhi.n	800b570 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b562:	f7ff f861 	bl	800a628 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b566:	68f9      	ldr	r1, [r7, #12]
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f7ff ff85 	bl	800b478 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b56e:	e024      	b.n	800b5ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d008      	beq.n	800b588 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b576:	4b13      	ldr	r3, [pc, #76]	; (800b5c4 <prvProcessTimerOrBlockTask+0x90>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d101      	bne.n	800b584 <prvProcessTimerOrBlockTask+0x50>
 800b580:	2301      	movs	r3, #1
 800b582:	e000      	b.n	800b586 <prvProcessTimerOrBlockTask+0x52>
 800b584:	2300      	movs	r3, #0
 800b586:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b588:	4b0f      	ldr	r3, [pc, #60]	; (800b5c8 <prvProcessTimerOrBlockTask+0x94>)
 800b58a:	6818      	ldr	r0, [r3, #0]
 800b58c:	687a      	ldr	r2, [r7, #4]
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	1ad3      	subs	r3, r2, r3
 800b592:	683a      	ldr	r2, [r7, #0]
 800b594:	4619      	mov	r1, r3
 800b596:	f7fe fc23 	bl	8009de0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b59a:	f7ff f845 	bl	800a628 <xTaskResumeAll>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d10a      	bne.n	800b5ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b5a4:	4b09      	ldr	r3, [pc, #36]	; (800b5cc <prvProcessTimerOrBlockTask+0x98>)
 800b5a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5aa:	601a      	str	r2, [r3, #0]
 800b5ac:	f3bf 8f4f 	dsb	sy
 800b5b0:	f3bf 8f6f 	isb	sy
}
 800b5b4:	e001      	b.n	800b5ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b5b6:	f7ff f837 	bl	800a628 <xTaskResumeAll>
}
 800b5ba:	bf00      	nop
 800b5bc:	3710      	adds	r7, #16
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd80      	pop	{r7, pc}
 800b5c2:	bf00      	nop
 800b5c4:	200009d4 	.word	0x200009d4
 800b5c8:	200009d8 	.word	0x200009d8
 800b5cc:	e000ed04 	.word	0xe000ed04

0800b5d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b085      	sub	sp, #20
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b5d8:	4b0e      	ldr	r3, [pc, #56]	; (800b614 <prvGetNextExpireTime+0x44>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d101      	bne.n	800b5e6 <prvGetNextExpireTime+0x16>
 800b5e2:	2201      	movs	r2, #1
 800b5e4:	e000      	b.n	800b5e8 <prvGetNextExpireTime+0x18>
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d105      	bne.n	800b600 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b5f4:	4b07      	ldr	r3, [pc, #28]	; (800b614 <prvGetNextExpireTime+0x44>)
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	68db      	ldr	r3, [r3, #12]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	60fb      	str	r3, [r7, #12]
 800b5fe:	e001      	b.n	800b604 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b600:	2300      	movs	r3, #0
 800b602:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b604:	68fb      	ldr	r3, [r7, #12]
}
 800b606:	4618      	mov	r0, r3
 800b608:	3714      	adds	r7, #20
 800b60a:	46bd      	mov	sp, r7
 800b60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b610:	4770      	bx	lr
 800b612:	bf00      	nop
 800b614:	200009d0 	.word	0x200009d0

0800b618 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b084      	sub	sp, #16
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b620:	f7ff f89e 	bl	800a760 <xTaskGetTickCount>
 800b624:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b626:	4b0b      	ldr	r3, [pc, #44]	; (800b654 <prvSampleTimeNow+0x3c>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	68fa      	ldr	r2, [r7, #12]
 800b62c:	429a      	cmp	r2, r3
 800b62e:	d205      	bcs.n	800b63c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b630:	f000 f91a 	bl	800b868 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2201      	movs	r2, #1
 800b638:	601a      	str	r2, [r3, #0]
 800b63a:	e002      	b.n	800b642 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2200      	movs	r2, #0
 800b640:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b642:	4a04      	ldr	r2, [pc, #16]	; (800b654 <prvSampleTimeNow+0x3c>)
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b648:	68fb      	ldr	r3, [r7, #12]
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	3710      	adds	r7, #16
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}
 800b652:	bf00      	nop
 800b654:	200009e0 	.word	0x200009e0

0800b658 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b086      	sub	sp, #24
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	60f8      	str	r0, [r7, #12]
 800b660:	60b9      	str	r1, [r7, #8]
 800b662:	607a      	str	r2, [r7, #4]
 800b664:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b666:	2300      	movs	r3, #0
 800b668:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	68ba      	ldr	r2, [r7, #8]
 800b66e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	68fa      	ldr	r2, [r7, #12]
 800b674:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b676:	68ba      	ldr	r2, [r7, #8]
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	429a      	cmp	r2, r3
 800b67c:	d812      	bhi.n	800b6a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b67e:	687a      	ldr	r2, [r7, #4]
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	1ad2      	subs	r2, r2, r3
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	699b      	ldr	r3, [r3, #24]
 800b688:	429a      	cmp	r2, r3
 800b68a:	d302      	bcc.n	800b692 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b68c:	2301      	movs	r3, #1
 800b68e:	617b      	str	r3, [r7, #20]
 800b690:	e01b      	b.n	800b6ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b692:	4b10      	ldr	r3, [pc, #64]	; (800b6d4 <prvInsertTimerInActiveList+0x7c>)
 800b694:	681a      	ldr	r2, [r3, #0]
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	3304      	adds	r3, #4
 800b69a:	4619      	mov	r1, r3
 800b69c:	4610      	mov	r0, r2
 800b69e:	f7fd fbd2 	bl	8008e46 <vListInsert>
 800b6a2:	e012      	b.n	800b6ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b6a4:	687a      	ldr	r2, [r7, #4]
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	429a      	cmp	r2, r3
 800b6aa:	d206      	bcs.n	800b6ba <prvInsertTimerInActiveList+0x62>
 800b6ac:	68ba      	ldr	r2, [r7, #8]
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	429a      	cmp	r2, r3
 800b6b2:	d302      	bcc.n	800b6ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	617b      	str	r3, [r7, #20]
 800b6b8:	e007      	b.n	800b6ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b6ba:	4b07      	ldr	r3, [pc, #28]	; (800b6d8 <prvInsertTimerInActiveList+0x80>)
 800b6bc:	681a      	ldr	r2, [r3, #0]
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	3304      	adds	r3, #4
 800b6c2:	4619      	mov	r1, r3
 800b6c4:	4610      	mov	r0, r2
 800b6c6:	f7fd fbbe 	bl	8008e46 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b6ca:	697b      	ldr	r3, [r7, #20]
}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	3718      	adds	r7, #24
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bd80      	pop	{r7, pc}
 800b6d4:	200009d4 	.word	0x200009d4
 800b6d8:	200009d0 	.word	0x200009d0

0800b6dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b08c      	sub	sp, #48	; 0x30
 800b6e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b6e2:	e0ae      	b.n	800b842 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	f2c0 80aa 	blt.w	800b840 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f2:	695b      	ldr	r3, [r3, #20]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d004      	beq.n	800b702 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6fa:	3304      	adds	r3, #4
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	f7fd fbdb 	bl	8008eb8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b702:	1d3b      	adds	r3, r7, #4
 800b704:	4618      	mov	r0, r3
 800b706:	f7ff ff87 	bl	800b618 <prvSampleTimeNow>
 800b70a:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	2b09      	cmp	r3, #9
 800b710:	f200 8097 	bhi.w	800b842 <prvProcessReceivedCommands+0x166>
 800b714:	a201      	add	r2, pc, #4	; (adr r2, 800b71c <prvProcessReceivedCommands+0x40>)
 800b716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b71a:	bf00      	nop
 800b71c:	0800b745 	.word	0x0800b745
 800b720:	0800b745 	.word	0x0800b745
 800b724:	0800b745 	.word	0x0800b745
 800b728:	0800b7b9 	.word	0x0800b7b9
 800b72c:	0800b7cd 	.word	0x0800b7cd
 800b730:	0800b817 	.word	0x0800b817
 800b734:	0800b745 	.word	0x0800b745
 800b738:	0800b745 	.word	0x0800b745
 800b73c:	0800b7b9 	.word	0x0800b7b9
 800b740:	0800b7cd 	.word	0x0800b7cd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b746:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b74a:	f043 0301 	orr.w	r3, r3, #1
 800b74e:	b2da      	uxtb	r2, r3
 800b750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b752:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b756:	68fa      	ldr	r2, [r7, #12]
 800b758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b75a:	699b      	ldr	r3, [r3, #24]
 800b75c:	18d1      	adds	r1, r2, r3
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	6a3a      	ldr	r2, [r7, #32]
 800b762:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b764:	f7ff ff78 	bl	800b658 <prvInsertTimerInActiveList>
 800b768:	4603      	mov	r3, r0
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d069      	beq.n	800b842 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b76e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b770:	6a1b      	ldr	r3, [r3, #32]
 800b772:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b774:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b778:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b77c:	f003 0304 	and.w	r3, r3, #4
 800b780:	2b00      	cmp	r3, #0
 800b782:	d05e      	beq.n	800b842 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b784:	68fa      	ldr	r2, [r7, #12]
 800b786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b788:	699b      	ldr	r3, [r3, #24]
 800b78a:	441a      	add	r2, r3
 800b78c:	2300      	movs	r3, #0
 800b78e:	9300      	str	r3, [sp, #0]
 800b790:	2300      	movs	r3, #0
 800b792:	2100      	movs	r1, #0
 800b794:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b796:	f7ff fe21 	bl	800b3dc <xTimerGenericCommand>
 800b79a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800b79c:	69fb      	ldr	r3, [r7, #28]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d14f      	bne.n	800b842 <prvProcessReceivedCommands+0x166>
	__asm volatile
 800b7a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7a6:	f383 8811 	msr	BASEPRI, r3
 800b7aa:	f3bf 8f6f 	isb	sy
 800b7ae:	f3bf 8f4f 	dsb	sy
 800b7b2:	61bb      	str	r3, [r7, #24]
}
 800b7b4:	bf00      	nop
 800b7b6:	e7fe      	b.n	800b7b6 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b7be:	f023 0301 	bic.w	r3, r3, #1
 800b7c2:	b2da      	uxtb	r2, r3
 800b7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800b7ca:	e03a      	b.n	800b842 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b7d2:	f043 0301 	orr.w	r3, r3, #1
 800b7d6:	b2da      	uxtb	r2, r3
 800b7d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b7de:	68fa      	ldr	r2, [r7, #12]
 800b7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7e2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b7e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7e6:	699b      	ldr	r3, [r3, #24]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d10a      	bne.n	800b802 <prvProcessReceivedCommands+0x126>
	__asm volatile
 800b7ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f0:	f383 8811 	msr	BASEPRI, r3
 800b7f4:	f3bf 8f6f 	isb	sy
 800b7f8:	f3bf 8f4f 	dsb	sy
 800b7fc:	617b      	str	r3, [r7, #20]
}
 800b7fe:	bf00      	nop
 800b800:	e7fe      	b.n	800b800 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b804:	699a      	ldr	r2, [r3, #24]
 800b806:	6a3b      	ldr	r3, [r7, #32]
 800b808:	18d1      	adds	r1, r2, r3
 800b80a:	6a3b      	ldr	r3, [r7, #32]
 800b80c:	6a3a      	ldr	r2, [r7, #32]
 800b80e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b810:	f7ff ff22 	bl	800b658 <prvInsertTimerInActiveList>
					break;
 800b814:	e015      	b.n	800b842 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b818:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b81c:	f003 0302 	and.w	r3, r3, #2
 800b820:	2b00      	cmp	r3, #0
 800b822:	d103      	bne.n	800b82c <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 800b824:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b826:	f000 fbdb 	bl	800bfe0 <vPortFree>
 800b82a:	e00a      	b.n	800b842 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b82e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b832:	f023 0301 	bic.w	r3, r3, #1
 800b836:	b2da      	uxtb	r2, r3
 800b838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b83a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b83e:	e000      	b.n	800b842 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b840:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b842:	4b08      	ldr	r3, [pc, #32]	; (800b864 <prvProcessReceivedCommands+0x188>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	f107 0108 	add.w	r1, r7, #8
 800b84a:	2200      	movs	r2, #0
 800b84c:	4618      	mov	r0, r3
 800b84e:	f7fd ff09 	bl	8009664 <xQueueReceive>
 800b852:	4603      	mov	r3, r0
 800b854:	2b00      	cmp	r3, #0
 800b856:	f47f af45 	bne.w	800b6e4 <prvProcessReceivedCommands+0x8>
	}
}
 800b85a:	bf00      	nop
 800b85c:	bf00      	nop
 800b85e:	3728      	adds	r7, #40	; 0x28
 800b860:	46bd      	mov	sp, r7
 800b862:	bd80      	pop	{r7, pc}
 800b864:	200009d8 	.word	0x200009d8

0800b868 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b088      	sub	sp, #32
 800b86c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b86e:	e048      	b.n	800b902 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b870:	4b2d      	ldr	r3, [pc, #180]	; (800b928 <prvSwitchTimerLists+0xc0>)
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	68db      	ldr	r3, [r3, #12]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b87a:	4b2b      	ldr	r3, [pc, #172]	; (800b928 <prvSwitchTimerLists+0xc0>)
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	68db      	ldr	r3, [r3, #12]
 800b880:	68db      	ldr	r3, [r3, #12]
 800b882:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	3304      	adds	r3, #4
 800b888:	4618      	mov	r0, r3
 800b88a:	f7fd fb15 	bl	8008eb8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	6a1b      	ldr	r3, [r3, #32]
 800b892:	68f8      	ldr	r0, [r7, #12]
 800b894:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b89c:	f003 0304 	and.w	r3, r3, #4
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d02e      	beq.n	800b902 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	699b      	ldr	r3, [r3, #24]
 800b8a8:	693a      	ldr	r2, [r7, #16]
 800b8aa:	4413      	add	r3, r2
 800b8ac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b8ae:	68ba      	ldr	r2, [r7, #8]
 800b8b0:	693b      	ldr	r3, [r7, #16]
 800b8b2:	429a      	cmp	r2, r3
 800b8b4:	d90e      	bls.n	800b8d4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	68ba      	ldr	r2, [r7, #8]
 800b8ba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	68fa      	ldr	r2, [r7, #12]
 800b8c0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b8c2:	4b19      	ldr	r3, [pc, #100]	; (800b928 <prvSwitchTimerLists+0xc0>)
 800b8c4:	681a      	ldr	r2, [r3, #0]
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	3304      	adds	r3, #4
 800b8ca:	4619      	mov	r1, r3
 800b8cc:	4610      	mov	r0, r2
 800b8ce:	f7fd faba 	bl	8008e46 <vListInsert>
 800b8d2:	e016      	b.n	800b902 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	9300      	str	r3, [sp, #0]
 800b8d8:	2300      	movs	r3, #0
 800b8da:	693a      	ldr	r2, [r7, #16]
 800b8dc:	2100      	movs	r1, #0
 800b8de:	68f8      	ldr	r0, [r7, #12]
 800b8e0:	f7ff fd7c 	bl	800b3dc <xTimerGenericCommand>
 800b8e4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d10a      	bne.n	800b902 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b8ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8f0:	f383 8811 	msr	BASEPRI, r3
 800b8f4:	f3bf 8f6f 	isb	sy
 800b8f8:	f3bf 8f4f 	dsb	sy
 800b8fc:	603b      	str	r3, [r7, #0]
}
 800b8fe:	bf00      	nop
 800b900:	e7fe      	b.n	800b900 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b902:	4b09      	ldr	r3, [pc, #36]	; (800b928 <prvSwitchTimerLists+0xc0>)
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d1b1      	bne.n	800b870 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b90c:	4b06      	ldr	r3, [pc, #24]	; (800b928 <prvSwitchTimerLists+0xc0>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b912:	4b06      	ldr	r3, [pc, #24]	; (800b92c <prvSwitchTimerLists+0xc4>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	4a04      	ldr	r2, [pc, #16]	; (800b928 <prvSwitchTimerLists+0xc0>)
 800b918:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b91a:	4a04      	ldr	r2, [pc, #16]	; (800b92c <prvSwitchTimerLists+0xc4>)
 800b91c:	697b      	ldr	r3, [r7, #20]
 800b91e:	6013      	str	r3, [r2, #0]
}
 800b920:	bf00      	nop
 800b922:	3718      	adds	r7, #24
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}
 800b928:	200009d0 	.word	0x200009d0
 800b92c:	200009d4 	.word	0x200009d4

0800b930 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b082      	sub	sp, #8
 800b934:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b936:	f000 f965 	bl	800bc04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b93a:	4b15      	ldr	r3, [pc, #84]	; (800b990 <prvCheckForValidListAndQueue+0x60>)
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d120      	bne.n	800b984 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b942:	4814      	ldr	r0, [pc, #80]	; (800b994 <prvCheckForValidListAndQueue+0x64>)
 800b944:	f7fd fa2e 	bl	8008da4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b948:	4813      	ldr	r0, [pc, #76]	; (800b998 <prvCheckForValidListAndQueue+0x68>)
 800b94a:	f7fd fa2b 	bl	8008da4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b94e:	4b13      	ldr	r3, [pc, #76]	; (800b99c <prvCheckForValidListAndQueue+0x6c>)
 800b950:	4a10      	ldr	r2, [pc, #64]	; (800b994 <prvCheckForValidListAndQueue+0x64>)
 800b952:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b954:	4b12      	ldr	r3, [pc, #72]	; (800b9a0 <prvCheckForValidListAndQueue+0x70>)
 800b956:	4a10      	ldr	r2, [pc, #64]	; (800b998 <prvCheckForValidListAndQueue+0x68>)
 800b958:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b95a:	2300      	movs	r3, #0
 800b95c:	9300      	str	r3, [sp, #0]
 800b95e:	4b11      	ldr	r3, [pc, #68]	; (800b9a4 <prvCheckForValidListAndQueue+0x74>)
 800b960:	4a11      	ldr	r2, [pc, #68]	; (800b9a8 <prvCheckForValidListAndQueue+0x78>)
 800b962:	210c      	movs	r1, #12
 800b964:	200a      	movs	r0, #10
 800b966:	f7fd fb39 	bl	8008fdc <xQueueGenericCreateStatic>
 800b96a:	4603      	mov	r3, r0
 800b96c:	4a08      	ldr	r2, [pc, #32]	; (800b990 <prvCheckForValidListAndQueue+0x60>)
 800b96e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b970:	4b07      	ldr	r3, [pc, #28]	; (800b990 <prvCheckForValidListAndQueue+0x60>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d005      	beq.n	800b984 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b978:	4b05      	ldr	r3, [pc, #20]	; (800b990 <prvCheckForValidListAndQueue+0x60>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	490b      	ldr	r1, [pc, #44]	; (800b9ac <prvCheckForValidListAndQueue+0x7c>)
 800b97e:	4618      	mov	r0, r3
 800b980:	f7fe fa04 	bl	8009d8c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b984:	f000 f96e 	bl	800bc64 <vPortExitCritical>
}
 800b988:	bf00      	nop
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}
 800b98e:	bf00      	nop
 800b990:	200009d8 	.word	0x200009d8
 800b994:	200009a8 	.word	0x200009a8
 800b998:	200009bc 	.word	0x200009bc
 800b99c:	200009d0 	.word	0x200009d0
 800b9a0:	200009d4 	.word	0x200009d4
 800b9a4:	20000a5c 	.word	0x20000a5c
 800b9a8:	200009e4 	.word	0x200009e4
 800b9ac:	0801bf28 	.word	0x0801bf28

0800b9b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	b085      	sub	sp, #20
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	60f8      	str	r0, [r7, #12]
 800b9b8:	60b9      	str	r1, [r7, #8]
 800b9ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	3b04      	subs	r3, #4
 800b9c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b9c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	3b04      	subs	r3, #4
 800b9ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b9d0:	68bb      	ldr	r3, [r7, #8]
 800b9d2:	f023 0201 	bic.w	r2, r3, #1
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	3b04      	subs	r3, #4
 800b9de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b9e0:	4a0c      	ldr	r2, [pc, #48]	; (800ba14 <pxPortInitialiseStack+0x64>)
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	3b14      	subs	r3, #20
 800b9ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b9ec:	687a      	ldr	r2, [r7, #4]
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	3b04      	subs	r3, #4
 800b9f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	f06f 0202 	mvn.w	r2, #2
 800b9fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	3b20      	subs	r3, #32
 800ba04:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ba06:	68fb      	ldr	r3, [r7, #12]
}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	3714      	adds	r7, #20
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba12:	4770      	bx	lr
 800ba14:	0800ba19 	.word	0x0800ba19

0800ba18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ba18:	b480      	push	{r7}
 800ba1a:	b085      	sub	sp, #20
 800ba1c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ba22:	4b12      	ldr	r3, [pc, #72]	; (800ba6c <prvTaskExitError+0x54>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba2a:	d00a      	beq.n	800ba42 <prvTaskExitError+0x2a>
	__asm volatile
 800ba2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba30:	f383 8811 	msr	BASEPRI, r3
 800ba34:	f3bf 8f6f 	isb	sy
 800ba38:	f3bf 8f4f 	dsb	sy
 800ba3c:	60fb      	str	r3, [r7, #12]
}
 800ba3e:	bf00      	nop
 800ba40:	e7fe      	b.n	800ba40 <prvTaskExitError+0x28>
	__asm volatile
 800ba42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba46:	f383 8811 	msr	BASEPRI, r3
 800ba4a:	f3bf 8f6f 	isb	sy
 800ba4e:	f3bf 8f4f 	dsb	sy
 800ba52:	60bb      	str	r3, [r7, #8]
}
 800ba54:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ba56:	bf00      	nop
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d0fc      	beq.n	800ba58 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ba5e:	bf00      	nop
 800ba60:	bf00      	nop
 800ba62:	3714      	adds	r7, #20
 800ba64:	46bd      	mov	sp, r7
 800ba66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6a:	4770      	bx	lr
 800ba6c:	20000010 	.word	0x20000010

0800ba70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ba70:	4b07      	ldr	r3, [pc, #28]	; (800ba90 <pxCurrentTCBConst2>)
 800ba72:	6819      	ldr	r1, [r3, #0]
 800ba74:	6808      	ldr	r0, [r1, #0]
 800ba76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba7a:	f380 8809 	msr	PSP, r0
 800ba7e:	f3bf 8f6f 	isb	sy
 800ba82:	f04f 0000 	mov.w	r0, #0
 800ba86:	f380 8811 	msr	BASEPRI, r0
 800ba8a:	4770      	bx	lr
 800ba8c:	f3af 8000 	nop.w

0800ba90 <pxCurrentTCBConst2>:
 800ba90:	2000087c 	.word	0x2000087c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ba94:	bf00      	nop
 800ba96:	bf00      	nop

0800ba98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ba98:	4808      	ldr	r0, [pc, #32]	; (800babc <prvPortStartFirstTask+0x24>)
 800ba9a:	6800      	ldr	r0, [r0, #0]
 800ba9c:	6800      	ldr	r0, [r0, #0]
 800ba9e:	f380 8808 	msr	MSP, r0
 800baa2:	f04f 0000 	mov.w	r0, #0
 800baa6:	f380 8814 	msr	CONTROL, r0
 800baaa:	b662      	cpsie	i
 800baac:	b661      	cpsie	f
 800baae:	f3bf 8f4f 	dsb	sy
 800bab2:	f3bf 8f6f 	isb	sy
 800bab6:	df00      	svc	0
 800bab8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800baba:	bf00      	nop
 800babc:	e000ed08 	.word	0xe000ed08

0800bac0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b086      	sub	sp, #24
 800bac4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bac6:	4b46      	ldr	r3, [pc, #280]	; (800bbe0 <xPortStartScheduler+0x120>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	4a46      	ldr	r2, [pc, #280]	; (800bbe4 <xPortStartScheduler+0x124>)
 800bacc:	4293      	cmp	r3, r2
 800bace:	d10a      	bne.n	800bae6 <xPortStartScheduler+0x26>
	__asm volatile
 800bad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bad4:	f383 8811 	msr	BASEPRI, r3
 800bad8:	f3bf 8f6f 	isb	sy
 800badc:	f3bf 8f4f 	dsb	sy
 800bae0:	613b      	str	r3, [r7, #16]
}
 800bae2:	bf00      	nop
 800bae4:	e7fe      	b.n	800bae4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bae6:	4b3e      	ldr	r3, [pc, #248]	; (800bbe0 <xPortStartScheduler+0x120>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	4a3f      	ldr	r2, [pc, #252]	; (800bbe8 <xPortStartScheduler+0x128>)
 800baec:	4293      	cmp	r3, r2
 800baee:	d10a      	bne.n	800bb06 <xPortStartScheduler+0x46>
	__asm volatile
 800baf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baf4:	f383 8811 	msr	BASEPRI, r3
 800baf8:	f3bf 8f6f 	isb	sy
 800bafc:	f3bf 8f4f 	dsb	sy
 800bb00:	60fb      	str	r3, [r7, #12]
}
 800bb02:	bf00      	nop
 800bb04:	e7fe      	b.n	800bb04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bb06:	4b39      	ldr	r3, [pc, #228]	; (800bbec <xPortStartScheduler+0x12c>)
 800bb08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bb0a:	697b      	ldr	r3, [r7, #20]
 800bb0c:	781b      	ldrb	r3, [r3, #0]
 800bb0e:	b2db      	uxtb	r3, r3
 800bb10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bb12:	697b      	ldr	r3, [r7, #20]
 800bb14:	22ff      	movs	r2, #255	; 0xff
 800bb16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bb18:	697b      	ldr	r3, [r7, #20]
 800bb1a:	781b      	ldrb	r3, [r3, #0]
 800bb1c:	b2db      	uxtb	r3, r3
 800bb1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bb20:	78fb      	ldrb	r3, [r7, #3]
 800bb22:	b2db      	uxtb	r3, r3
 800bb24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bb28:	b2da      	uxtb	r2, r3
 800bb2a:	4b31      	ldr	r3, [pc, #196]	; (800bbf0 <xPortStartScheduler+0x130>)
 800bb2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bb2e:	4b31      	ldr	r3, [pc, #196]	; (800bbf4 <xPortStartScheduler+0x134>)
 800bb30:	2207      	movs	r2, #7
 800bb32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bb34:	e009      	b.n	800bb4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bb36:	4b2f      	ldr	r3, [pc, #188]	; (800bbf4 <xPortStartScheduler+0x134>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	3b01      	subs	r3, #1
 800bb3c:	4a2d      	ldr	r2, [pc, #180]	; (800bbf4 <xPortStartScheduler+0x134>)
 800bb3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bb40:	78fb      	ldrb	r3, [r7, #3]
 800bb42:	b2db      	uxtb	r3, r3
 800bb44:	005b      	lsls	r3, r3, #1
 800bb46:	b2db      	uxtb	r3, r3
 800bb48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bb4a:	78fb      	ldrb	r3, [r7, #3]
 800bb4c:	b2db      	uxtb	r3, r3
 800bb4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb52:	2b80      	cmp	r3, #128	; 0x80
 800bb54:	d0ef      	beq.n	800bb36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bb56:	4b27      	ldr	r3, [pc, #156]	; (800bbf4 <xPortStartScheduler+0x134>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	f1c3 0307 	rsb	r3, r3, #7
 800bb5e:	2b04      	cmp	r3, #4
 800bb60:	d00a      	beq.n	800bb78 <xPortStartScheduler+0xb8>
	__asm volatile
 800bb62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb66:	f383 8811 	msr	BASEPRI, r3
 800bb6a:	f3bf 8f6f 	isb	sy
 800bb6e:	f3bf 8f4f 	dsb	sy
 800bb72:	60bb      	str	r3, [r7, #8]
}
 800bb74:	bf00      	nop
 800bb76:	e7fe      	b.n	800bb76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bb78:	4b1e      	ldr	r3, [pc, #120]	; (800bbf4 <xPortStartScheduler+0x134>)
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	021b      	lsls	r3, r3, #8
 800bb7e:	4a1d      	ldr	r2, [pc, #116]	; (800bbf4 <xPortStartScheduler+0x134>)
 800bb80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bb82:	4b1c      	ldr	r3, [pc, #112]	; (800bbf4 <xPortStartScheduler+0x134>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bb8a:	4a1a      	ldr	r2, [pc, #104]	; (800bbf4 <xPortStartScheduler+0x134>)
 800bb8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	b2da      	uxtb	r2, r3
 800bb92:	697b      	ldr	r3, [r7, #20]
 800bb94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bb96:	4b18      	ldr	r3, [pc, #96]	; (800bbf8 <xPortStartScheduler+0x138>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	4a17      	ldr	r2, [pc, #92]	; (800bbf8 <xPortStartScheduler+0x138>)
 800bb9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bba0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bba2:	4b15      	ldr	r3, [pc, #84]	; (800bbf8 <xPortStartScheduler+0x138>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	4a14      	ldr	r2, [pc, #80]	; (800bbf8 <xPortStartScheduler+0x138>)
 800bba8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bbac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bbae:	f000 f8dd 	bl	800bd6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bbb2:	4b12      	ldr	r3, [pc, #72]	; (800bbfc <xPortStartScheduler+0x13c>)
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bbb8:	f000 f8fc 	bl	800bdb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bbbc:	4b10      	ldr	r3, [pc, #64]	; (800bc00 <xPortStartScheduler+0x140>)
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	4a0f      	ldr	r2, [pc, #60]	; (800bc00 <xPortStartScheduler+0x140>)
 800bbc2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bbc6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bbc8:	f7ff ff66 	bl	800ba98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bbcc:	f7fe fe90 	bl	800a8f0 <vTaskSwitchContext>
	prvTaskExitError();
 800bbd0:	f7ff ff22 	bl	800ba18 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bbd4:	2300      	movs	r3, #0
}
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	3718      	adds	r7, #24
 800bbda:	46bd      	mov	sp, r7
 800bbdc:	bd80      	pop	{r7, pc}
 800bbde:	bf00      	nop
 800bbe0:	e000ed00 	.word	0xe000ed00
 800bbe4:	410fc271 	.word	0x410fc271
 800bbe8:	410fc270 	.word	0x410fc270
 800bbec:	e000e400 	.word	0xe000e400
 800bbf0:	20000aa4 	.word	0x20000aa4
 800bbf4:	20000aa8 	.word	0x20000aa8
 800bbf8:	e000ed20 	.word	0xe000ed20
 800bbfc:	20000010 	.word	0x20000010
 800bc00:	e000ef34 	.word	0xe000ef34

0800bc04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bc04:	b480      	push	{r7}
 800bc06:	b083      	sub	sp, #12
 800bc08:	af00      	add	r7, sp, #0
	__asm volatile
 800bc0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc0e:	f383 8811 	msr	BASEPRI, r3
 800bc12:	f3bf 8f6f 	isb	sy
 800bc16:	f3bf 8f4f 	dsb	sy
 800bc1a:	607b      	str	r3, [r7, #4]
}
 800bc1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bc1e:	4b0f      	ldr	r3, [pc, #60]	; (800bc5c <vPortEnterCritical+0x58>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	3301      	adds	r3, #1
 800bc24:	4a0d      	ldr	r2, [pc, #52]	; (800bc5c <vPortEnterCritical+0x58>)
 800bc26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bc28:	4b0c      	ldr	r3, [pc, #48]	; (800bc5c <vPortEnterCritical+0x58>)
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	2b01      	cmp	r3, #1
 800bc2e:	d10f      	bne.n	800bc50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bc30:	4b0b      	ldr	r3, [pc, #44]	; (800bc60 <vPortEnterCritical+0x5c>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	b2db      	uxtb	r3, r3
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d00a      	beq.n	800bc50 <vPortEnterCritical+0x4c>
	__asm volatile
 800bc3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc3e:	f383 8811 	msr	BASEPRI, r3
 800bc42:	f3bf 8f6f 	isb	sy
 800bc46:	f3bf 8f4f 	dsb	sy
 800bc4a:	603b      	str	r3, [r7, #0]
}
 800bc4c:	bf00      	nop
 800bc4e:	e7fe      	b.n	800bc4e <vPortEnterCritical+0x4a>
	}
}
 800bc50:	bf00      	nop
 800bc52:	370c      	adds	r7, #12
 800bc54:	46bd      	mov	sp, r7
 800bc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5a:	4770      	bx	lr
 800bc5c:	20000010 	.word	0x20000010
 800bc60:	e000ed04 	.word	0xe000ed04

0800bc64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bc64:	b480      	push	{r7}
 800bc66:	b083      	sub	sp, #12
 800bc68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bc6a:	4b12      	ldr	r3, [pc, #72]	; (800bcb4 <vPortExitCritical+0x50>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d10a      	bne.n	800bc88 <vPortExitCritical+0x24>
	__asm volatile
 800bc72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc76:	f383 8811 	msr	BASEPRI, r3
 800bc7a:	f3bf 8f6f 	isb	sy
 800bc7e:	f3bf 8f4f 	dsb	sy
 800bc82:	607b      	str	r3, [r7, #4]
}
 800bc84:	bf00      	nop
 800bc86:	e7fe      	b.n	800bc86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bc88:	4b0a      	ldr	r3, [pc, #40]	; (800bcb4 <vPortExitCritical+0x50>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	3b01      	subs	r3, #1
 800bc8e:	4a09      	ldr	r2, [pc, #36]	; (800bcb4 <vPortExitCritical+0x50>)
 800bc90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bc92:	4b08      	ldr	r3, [pc, #32]	; (800bcb4 <vPortExitCritical+0x50>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d105      	bne.n	800bca6 <vPortExitCritical+0x42>
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	f383 8811 	msr	BASEPRI, r3
}
 800bca4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bca6:	bf00      	nop
 800bca8:	370c      	adds	r7, #12
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb0:	4770      	bx	lr
 800bcb2:	bf00      	nop
 800bcb4:	20000010 	.word	0x20000010
	...

0800bcc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bcc0:	f3ef 8009 	mrs	r0, PSP
 800bcc4:	f3bf 8f6f 	isb	sy
 800bcc8:	4b15      	ldr	r3, [pc, #84]	; (800bd20 <pxCurrentTCBConst>)
 800bcca:	681a      	ldr	r2, [r3, #0]
 800bccc:	f01e 0f10 	tst.w	lr, #16
 800bcd0:	bf08      	it	eq
 800bcd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bcd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcda:	6010      	str	r0, [r2, #0]
 800bcdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bce0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bce4:	f380 8811 	msr	BASEPRI, r0
 800bce8:	f3bf 8f4f 	dsb	sy
 800bcec:	f3bf 8f6f 	isb	sy
 800bcf0:	f7fe fdfe 	bl	800a8f0 <vTaskSwitchContext>
 800bcf4:	f04f 0000 	mov.w	r0, #0
 800bcf8:	f380 8811 	msr	BASEPRI, r0
 800bcfc:	bc09      	pop	{r0, r3}
 800bcfe:	6819      	ldr	r1, [r3, #0]
 800bd00:	6808      	ldr	r0, [r1, #0]
 800bd02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd06:	f01e 0f10 	tst.w	lr, #16
 800bd0a:	bf08      	it	eq
 800bd0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bd10:	f380 8809 	msr	PSP, r0
 800bd14:	f3bf 8f6f 	isb	sy
 800bd18:	4770      	bx	lr
 800bd1a:	bf00      	nop
 800bd1c:	f3af 8000 	nop.w

0800bd20 <pxCurrentTCBConst>:
 800bd20:	2000087c 	.word	0x2000087c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bd24:	bf00      	nop
 800bd26:	bf00      	nop

0800bd28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b082      	sub	sp, #8
 800bd2c:	af00      	add	r7, sp, #0
	__asm volatile
 800bd2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd32:	f383 8811 	msr	BASEPRI, r3
 800bd36:	f3bf 8f6f 	isb	sy
 800bd3a:	f3bf 8f4f 	dsb	sy
 800bd3e:	607b      	str	r3, [r7, #4]
}
 800bd40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bd42:	f7fe fd1d 	bl	800a780 <xTaskIncrementTick>
 800bd46:	4603      	mov	r3, r0
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d003      	beq.n	800bd54 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bd4c:	4b06      	ldr	r3, [pc, #24]	; (800bd68 <SysTick_Handler+0x40>)
 800bd4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd52:	601a      	str	r2, [r3, #0]
 800bd54:	2300      	movs	r3, #0
 800bd56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	f383 8811 	msr	BASEPRI, r3
}
 800bd5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bd60:	bf00      	nop
 800bd62:	3708      	adds	r7, #8
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd80      	pop	{r7, pc}
 800bd68:	e000ed04 	.word	0xe000ed04

0800bd6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bd6c:	b480      	push	{r7}
 800bd6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bd70:	4b0b      	ldr	r3, [pc, #44]	; (800bda0 <vPortSetupTimerInterrupt+0x34>)
 800bd72:	2200      	movs	r2, #0
 800bd74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bd76:	4b0b      	ldr	r3, [pc, #44]	; (800bda4 <vPortSetupTimerInterrupt+0x38>)
 800bd78:	2200      	movs	r2, #0
 800bd7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bd7c:	4b0a      	ldr	r3, [pc, #40]	; (800bda8 <vPortSetupTimerInterrupt+0x3c>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	4a0a      	ldr	r2, [pc, #40]	; (800bdac <vPortSetupTimerInterrupt+0x40>)
 800bd82:	fba2 2303 	umull	r2, r3, r2, r3
 800bd86:	099b      	lsrs	r3, r3, #6
 800bd88:	4a09      	ldr	r2, [pc, #36]	; (800bdb0 <vPortSetupTimerInterrupt+0x44>)
 800bd8a:	3b01      	subs	r3, #1
 800bd8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bd8e:	4b04      	ldr	r3, [pc, #16]	; (800bda0 <vPortSetupTimerInterrupt+0x34>)
 800bd90:	2207      	movs	r2, #7
 800bd92:	601a      	str	r2, [r3, #0]
}
 800bd94:	bf00      	nop
 800bd96:	46bd      	mov	sp, r7
 800bd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9c:	4770      	bx	lr
 800bd9e:	bf00      	nop
 800bda0:	e000e010 	.word	0xe000e010
 800bda4:	e000e018 	.word	0xe000e018
 800bda8:	20000004 	.word	0x20000004
 800bdac:	10624dd3 	.word	0x10624dd3
 800bdb0:	e000e014 	.word	0xe000e014

0800bdb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bdb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bdc4 <vPortEnableVFP+0x10>
 800bdb8:	6801      	ldr	r1, [r0, #0]
 800bdba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bdbe:	6001      	str	r1, [r0, #0]
 800bdc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bdc2:	bf00      	nop
 800bdc4:	e000ed88 	.word	0xe000ed88

0800bdc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bdc8:	b480      	push	{r7}
 800bdca:	b085      	sub	sp, #20
 800bdcc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bdce:	f3ef 8305 	mrs	r3, IPSR
 800bdd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	2b0f      	cmp	r3, #15
 800bdd8:	d914      	bls.n	800be04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bdda:	4a17      	ldr	r2, [pc, #92]	; (800be38 <vPortValidateInterruptPriority+0x70>)
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	4413      	add	r3, r2
 800bde0:	781b      	ldrb	r3, [r3, #0]
 800bde2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bde4:	4b15      	ldr	r3, [pc, #84]	; (800be3c <vPortValidateInterruptPriority+0x74>)
 800bde6:	781b      	ldrb	r3, [r3, #0]
 800bde8:	7afa      	ldrb	r2, [r7, #11]
 800bdea:	429a      	cmp	r2, r3
 800bdec:	d20a      	bcs.n	800be04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bdee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdf2:	f383 8811 	msr	BASEPRI, r3
 800bdf6:	f3bf 8f6f 	isb	sy
 800bdfa:	f3bf 8f4f 	dsb	sy
 800bdfe:	607b      	str	r3, [r7, #4]
}
 800be00:	bf00      	nop
 800be02:	e7fe      	b.n	800be02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800be04:	4b0e      	ldr	r3, [pc, #56]	; (800be40 <vPortValidateInterruptPriority+0x78>)
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800be0c:	4b0d      	ldr	r3, [pc, #52]	; (800be44 <vPortValidateInterruptPriority+0x7c>)
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	429a      	cmp	r2, r3
 800be12:	d90a      	bls.n	800be2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800be14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be18:	f383 8811 	msr	BASEPRI, r3
 800be1c:	f3bf 8f6f 	isb	sy
 800be20:	f3bf 8f4f 	dsb	sy
 800be24:	603b      	str	r3, [r7, #0]
}
 800be26:	bf00      	nop
 800be28:	e7fe      	b.n	800be28 <vPortValidateInterruptPriority+0x60>
	}
 800be2a:	bf00      	nop
 800be2c:	3714      	adds	r7, #20
 800be2e:	46bd      	mov	sp, r7
 800be30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be34:	4770      	bx	lr
 800be36:	bf00      	nop
 800be38:	e000e3f0 	.word	0xe000e3f0
 800be3c:	20000aa4 	.word	0x20000aa4
 800be40:	e000ed0c 	.word	0xe000ed0c
 800be44:	20000aa8 	.word	0x20000aa8

0800be48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b08a      	sub	sp, #40	; 0x28
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800be50:	2300      	movs	r3, #0
 800be52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800be54:	f7fe fbda 	bl	800a60c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800be58:	4b5b      	ldr	r3, [pc, #364]	; (800bfc8 <pvPortMalloc+0x180>)
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d101      	bne.n	800be64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800be60:	f000 f920 	bl	800c0a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800be64:	4b59      	ldr	r3, [pc, #356]	; (800bfcc <pvPortMalloc+0x184>)
 800be66:	681a      	ldr	r2, [r3, #0]
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	4013      	ands	r3, r2
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	f040 8093 	bne.w	800bf98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d01d      	beq.n	800beb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800be78:	2208      	movs	r2, #8
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	4413      	add	r3, r2
 800be7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f003 0307 	and.w	r3, r3, #7
 800be86:	2b00      	cmp	r3, #0
 800be88:	d014      	beq.n	800beb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f023 0307 	bic.w	r3, r3, #7
 800be90:	3308      	adds	r3, #8
 800be92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	f003 0307 	and.w	r3, r3, #7
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d00a      	beq.n	800beb4 <pvPortMalloc+0x6c>
	__asm volatile
 800be9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea2:	f383 8811 	msr	BASEPRI, r3
 800bea6:	f3bf 8f6f 	isb	sy
 800beaa:	f3bf 8f4f 	dsb	sy
 800beae:	617b      	str	r3, [r7, #20]
}
 800beb0:	bf00      	nop
 800beb2:	e7fe      	b.n	800beb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d06e      	beq.n	800bf98 <pvPortMalloc+0x150>
 800beba:	4b45      	ldr	r3, [pc, #276]	; (800bfd0 <pvPortMalloc+0x188>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	687a      	ldr	r2, [r7, #4]
 800bec0:	429a      	cmp	r2, r3
 800bec2:	d869      	bhi.n	800bf98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bec4:	4b43      	ldr	r3, [pc, #268]	; (800bfd4 <pvPortMalloc+0x18c>)
 800bec6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bec8:	4b42      	ldr	r3, [pc, #264]	; (800bfd4 <pvPortMalloc+0x18c>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bece:	e004      	b.n	800beda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800beda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bedc:	685b      	ldr	r3, [r3, #4]
 800bede:	687a      	ldr	r2, [r7, #4]
 800bee0:	429a      	cmp	r2, r3
 800bee2:	d903      	bls.n	800beec <pvPortMalloc+0xa4>
 800bee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d1f1      	bne.n	800bed0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800beec:	4b36      	ldr	r3, [pc, #216]	; (800bfc8 <pvPortMalloc+0x180>)
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bef2:	429a      	cmp	r2, r3
 800bef4:	d050      	beq.n	800bf98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bef6:	6a3b      	ldr	r3, [r7, #32]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	2208      	movs	r2, #8
 800befc:	4413      	add	r3, r2
 800befe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bf00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf02:	681a      	ldr	r2, [r3, #0]
 800bf04:	6a3b      	ldr	r3, [r7, #32]
 800bf06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bf08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf0a:	685a      	ldr	r2, [r3, #4]
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	1ad2      	subs	r2, r2, r3
 800bf10:	2308      	movs	r3, #8
 800bf12:	005b      	lsls	r3, r3, #1
 800bf14:	429a      	cmp	r2, r3
 800bf16:	d91f      	bls.n	800bf58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bf18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	4413      	add	r3, r2
 800bf1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf20:	69bb      	ldr	r3, [r7, #24]
 800bf22:	f003 0307 	and.w	r3, r3, #7
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d00a      	beq.n	800bf40 <pvPortMalloc+0xf8>
	__asm volatile
 800bf2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf2e:	f383 8811 	msr	BASEPRI, r3
 800bf32:	f3bf 8f6f 	isb	sy
 800bf36:	f3bf 8f4f 	dsb	sy
 800bf3a:	613b      	str	r3, [r7, #16]
}
 800bf3c:	bf00      	nop
 800bf3e:	e7fe      	b.n	800bf3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bf40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf42:	685a      	ldr	r2, [r3, #4]
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	1ad2      	subs	r2, r2, r3
 800bf48:	69bb      	ldr	r3, [r7, #24]
 800bf4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bf4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf4e:	687a      	ldr	r2, [r7, #4]
 800bf50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bf52:	69b8      	ldr	r0, [r7, #24]
 800bf54:	f000 f908 	bl	800c168 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bf58:	4b1d      	ldr	r3, [pc, #116]	; (800bfd0 <pvPortMalloc+0x188>)
 800bf5a:	681a      	ldr	r2, [r3, #0]
 800bf5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf5e:	685b      	ldr	r3, [r3, #4]
 800bf60:	1ad3      	subs	r3, r2, r3
 800bf62:	4a1b      	ldr	r2, [pc, #108]	; (800bfd0 <pvPortMalloc+0x188>)
 800bf64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bf66:	4b1a      	ldr	r3, [pc, #104]	; (800bfd0 <pvPortMalloc+0x188>)
 800bf68:	681a      	ldr	r2, [r3, #0]
 800bf6a:	4b1b      	ldr	r3, [pc, #108]	; (800bfd8 <pvPortMalloc+0x190>)
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	429a      	cmp	r2, r3
 800bf70:	d203      	bcs.n	800bf7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bf72:	4b17      	ldr	r3, [pc, #92]	; (800bfd0 <pvPortMalloc+0x188>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	4a18      	ldr	r2, [pc, #96]	; (800bfd8 <pvPortMalloc+0x190>)
 800bf78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bf7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf7c:	685a      	ldr	r2, [r3, #4]
 800bf7e:	4b13      	ldr	r3, [pc, #76]	; (800bfcc <pvPortMalloc+0x184>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	431a      	orrs	r2, r3
 800bf84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bf88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bf8e:	4b13      	ldr	r3, [pc, #76]	; (800bfdc <pvPortMalloc+0x194>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	3301      	adds	r3, #1
 800bf94:	4a11      	ldr	r2, [pc, #68]	; (800bfdc <pvPortMalloc+0x194>)
 800bf96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bf98:	f7fe fb46 	bl	800a628 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf9c:	69fb      	ldr	r3, [r7, #28]
 800bf9e:	f003 0307 	and.w	r3, r3, #7
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d00a      	beq.n	800bfbc <pvPortMalloc+0x174>
	__asm volatile
 800bfa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfaa:	f383 8811 	msr	BASEPRI, r3
 800bfae:	f3bf 8f6f 	isb	sy
 800bfb2:	f3bf 8f4f 	dsb	sy
 800bfb6:	60fb      	str	r3, [r7, #12]
}
 800bfb8:	bf00      	nop
 800bfba:	e7fe      	b.n	800bfba <pvPortMalloc+0x172>
	return pvReturn;
 800bfbc:	69fb      	ldr	r3, [r7, #28]
}
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	3728      	adds	r7, #40	; 0x28
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd80      	pop	{r7, pc}
 800bfc6:	bf00      	nop
 800bfc8:	20007fe4 	.word	0x20007fe4
 800bfcc:	20007ff8 	.word	0x20007ff8
 800bfd0:	20007fe8 	.word	0x20007fe8
 800bfd4:	20007fdc 	.word	0x20007fdc
 800bfd8:	20007fec 	.word	0x20007fec
 800bfdc:	20007ff0 	.word	0x20007ff0

0800bfe0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b086      	sub	sp, #24
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d04d      	beq.n	800c08e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bff2:	2308      	movs	r3, #8
 800bff4:	425b      	negs	r3, r3
 800bff6:	697a      	ldr	r2, [r7, #20]
 800bff8:	4413      	add	r3, r2
 800bffa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bffc:	697b      	ldr	r3, [r7, #20]
 800bffe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c000:	693b      	ldr	r3, [r7, #16]
 800c002:	685a      	ldr	r2, [r3, #4]
 800c004:	4b24      	ldr	r3, [pc, #144]	; (800c098 <vPortFree+0xb8>)
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	4013      	ands	r3, r2
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d10a      	bne.n	800c024 <vPortFree+0x44>
	__asm volatile
 800c00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c012:	f383 8811 	msr	BASEPRI, r3
 800c016:	f3bf 8f6f 	isb	sy
 800c01a:	f3bf 8f4f 	dsb	sy
 800c01e:	60fb      	str	r3, [r7, #12]
}
 800c020:	bf00      	nop
 800c022:	e7fe      	b.n	800c022 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c024:	693b      	ldr	r3, [r7, #16]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d00a      	beq.n	800c042 <vPortFree+0x62>
	__asm volatile
 800c02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c030:	f383 8811 	msr	BASEPRI, r3
 800c034:	f3bf 8f6f 	isb	sy
 800c038:	f3bf 8f4f 	dsb	sy
 800c03c:	60bb      	str	r3, [r7, #8]
}
 800c03e:	bf00      	nop
 800c040:	e7fe      	b.n	800c040 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c042:	693b      	ldr	r3, [r7, #16]
 800c044:	685a      	ldr	r2, [r3, #4]
 800c046:	4b14      	ldr	r3, [pc, #80]	; (800c098 <vPortFree+0xb8>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	4013      	ands	r3, r2
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d01e      	beq.n	800c08e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c050:	693b      	ldr	r3, [r7, #16]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d11a      	bne.n	800c08e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c058:	693b      	ldr	r3, [r7, #16]
 800c05a:	685a      	ldr	r2, [r3, #4]
 800c05c:	4b0e      	ldr	r3, [pc, #56]	; (800c098 <vPortFree+0xb8>)
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	43db      	mvns	r3, r3
 800c062:	401a      	ands	r2, r3
 800c064:	693b      	ldr	r3, [r7, #16]
 800c066:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c068:	f7fe fad0 	bl	800a60c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c06c:	693b      	ldr	r3, [r7, #16]
 800c06e:	685a      	ldr	r2, [r3, #4]
 800c070:	4b0a      	ldr	r3, [pc, #40]	; (800c09c <vPortFree+0xbc>)
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	4413      	add	r3, r2
 800c076:	4a09      	ldr	r2, [pc, #36]	; (800c09c <vPortFree+0xbc>)
 800c078:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c07a:	6938      	ldr	r0, [r7, #16]
 800c07c:	f000 f874 	bl	800c168 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c080:	4b07      	ldr	r3, [pc, #28]	; (800c0a0 <vPortFree+0xc0>)
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	3301      	adds	r3, #1
 800c086:	4a06      	ldr	r2, [pc, #24]	; (800c0a0 <vPortFree+0xc0>)
 800c088:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c08a:	f7fe facd 	bl	800a628 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c08e:	bf00      	nop
 800c090:	3718      	adds	r7, #24
 800c092:	46bd      	mov	sp, r7
 800c094:	bd80      	pop	{r7, pc}
 800c096:	bf00      	nop
 800c098:	20007ff8 	.word	0x20007ff8
 800c09c:	20007fe8 	.word	0x20007fe8
 800c0a0:	20007ff4 	.word	0x20007ff4

0800c0a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b085      	sub	sp, #20
 800c0a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c0aa:	f247 5330 	movw	r3, #30000	; 0x7530
 800c0ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c0b0:	4b27      	ldr	r3, [pc, #156]	; (800c150 <prvHeapInit+0xac>)
 800c0b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	f003 0307 	and.w	r3, r3, #7
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d00c      	beq.n	800c0d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c0be:	68fb      	ldr	r3, [r7, #12]
 800c0c0:	3307      	adds	r3, #7
 800c0c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	f023 0307 	bic.w	r3, r3, #7
 800c0ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c0cc:	68ba      	ldr	r2, [r7, #8]
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	1ad3      	subs	r3, r2, r3
 800c0d2:	4a1f      	ldr	r2, [pc, #124]	; (800c150 <prvHeapInit+0xac>)
 800c0d4:	4413      	add	r3, r2
 800c0d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c0dc:	4a1d      	ldr	r2, [pc, #116]	; (800c154 <prvHeapInit+0xb0>)
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c0e2:	4b1c      	ldr	r3, [pc, #112]	; (800c154 <prvHeapInit+0xb0>)
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	68ba      	ldr	r2, [r7, #8]
 800c0ec:	4413      	add	r3, r2
 800c0ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c0f0:	2208      	movs	r2, #8
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	1a9b      	subs	r3, r3, r2
 800c0f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	f023 0307 	bic.w	r3, r3, #7
 800c0fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	4a15      	ldr	r2, [pc, #84]	; (800c158 <prvHeapInit+0xb4>)
 800c104:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c106:	4b14      	ldr	r3, [pc, #80]	; (800c158 <prvHeapInit+0xb4>)
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	2200      	movs	r2, #0
 800c10c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c10e:	4b12      	ldr	r3, [pc, #72]	; (800c158 <prvHeapInit+0xb4>)
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	2200      	movs	r2, #0
 800c114:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	68fa      	ldr	r2, [r7, #12]
 800c11e:	1ad2      	subs	r2, r2, r3
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c124:	4b0c      	ldr	r3, [pc, #48]	; (800c158 <prvHeapInit+0xb4>)
 800c126:	681a      	ldr	r2, [r3, #0]
 800c128:	683b      	ldr	r3, [r7, #0]
 800c12a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c12c:	683b      	ldr	r3, [r7, #0]
 800c12e:	685b      	ldr	r3, [r3, #4]
 800c130:	4a0a      	ldr	r2, [pc, #40]	; (800c15c <prvHeapInit+0xb8>)
 800c132:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	685b      	ldr	r3, [r3, #4]
 800c138:	4a09      	ldr	r2, [pc, #36]	; (800c160 <prvHeapInit+0xbc>)
 800c13a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c13c:	4b09      	ldr	r3, [pc, #36]	; (800c164 <prvHeapInit+0xc0>)
 800c13e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c142:	601a      	str	r2, [r3, #0]
}
 800c144:	bf00      	nop
 800c146:	3714      	adds	r7, #20
 800c148:	46bd      	mov	sp, r7
 800c14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14e:	4770      	bx	lr
 800c150:	20000aac 	.word	0x20000aac
 800c154:	20007fdc 	.word	0x20007fdc
 800c158:	20007fe4 	.word	0x20007fe4
 800c15c:	20007fec 	.word	0x20007fec
 800c160:	20007fe8 	.word	0x20007fe8
 800c164:	20007ff8 	.word	0x20007ff8

0800c168 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c168:	b480      	push	{r7}
 800c16a:	b085      	sub	sp, #20
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c170:	4b28      	ldr	r3, [pc, #160]	; (800c214 <prvInsertBlockIntoFreeList+0xac>)
 800c172:	60fb      	str	r3, [r7, #12]
 800c174:	e002      	b.n	800c17c <prvInsertBlockIntoFreeList+0x14>
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	60fb      	str	r3, [r7, #12]
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	687a      	ldr	r2, [r7, #4]
 800c182:	429a      	cmp	r2, r3
 800c184:	d8f7      	bhi.n	800c176 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	685b      	ldr	r3, [r3, #4]
 800c18e:	68ba      	ldr	r2, [r7, #8]
 800c190:	4413      	add	r3, r2
 800c192:	687a      	ldr	r2, [r7, #4]
 800c194:	429a      	cmp	r2, r3
 800c196:	d108      	bne.n	800c1aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	685a      	ldr	r2, [r3, #4]
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	685b      	ldr	r3, [r3, #4]
 800c1a0:	441a      	add	r2, r3
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	685b      	ldr	r3, [r3, #4]
 800c1b2:	68ba      	ldr	r2, [r7, #8]
 800c1b4:	441a      	add	r2, r3
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	429a      	cmp	r2, r3
 800c1bc:	d118      	bne.n	800c1f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	681a      	ldr	r2, [r3, #0]
 800c1c2:	4b15      	ldr	r3, [pc, #84]	; (800c218 <prvInsertBlockIntoFreeList+0xb0>)
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	429a      	cmp	r2, r3
 800c1c8:	d00d      	beq.n	800c1e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	685a      	ldr	r2, [r3, #4]
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	685b      	ldr	r3, [r3, #4]
 800c1d4:	441a      	add	r2, r3
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	681a      	ldr	r2, [r3, #0]
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	601a      	str	r2, [r3, #0]
 800c1e4:	e008      	b.n	800c1f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c1e6:	4b0c      	ldr	r3, [pc, #48]	; (800c218 <prvInsertBlockIntoFreeList+0xb0>)
 800c1e8:	681a      	ldr	r2, [r3, #0]
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	601a      	str	r2, [r3, #0]
 800c1ee:	e003      	b.n	800c1f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	681a      	ldr	r2, [r3, #0]
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c1f8:	68fa      	ldr	r2, [r7, #12]
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	429a      	cmp	r2, r3
 800c1fe:	d002      	beq.n	800c206 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	687a      	ldr	r2, [r7, #4]
 800c204:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c206:	bf00      	nop
 800c208:	3714      	adds	r7, #20
 800c20a:	46bd      	mov	sp, r7
 800c20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c210:	4770      	bx	lr
 800c212:	bf00      	nop
 800c214:	20007fdc 	.word	0x20007fdc
 800c218:	20007fe4 	.word	0x20007fe4

0800c21c <ThreadEventWriteTask>:
extern status_register_struct status_registers;
extern control_register_struct control_registers;


void ThreadEventWriteTask(void const * argument)
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b08c      	sub	sp, #48	; 0x30
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
	uint8_t temp_data[30]; // буфер для записи событий
	uint16_t address_event_temp; // переменная для записи адреса последнего записанного события
	uint8_t read_temp; // временная переменная для чтения из памяти

	osMutexWait(Fm25v02MutexHandle, osWaitForever); // выставляем адрес начала записи событий по умолчанию
 800c224:	4bb4      	ldr	r3, [pc, #720]	; (800c4f8 <ThreadEventWriteTask+0x2dc>)
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	f04f 31ff 	mov.w	r1, #4294967295
 800c22c:	4618      	mov	r0, r3
 800c22e:	f7fc fb75 	bl	800891c <osMutexWait>
	fm25v02_write(2*ADDRESS_PROCESSED_EVENT_H_REG, 0x00);
 800c232:	2100      	movs	r1, #0
 800c234:	f242 0018 	movw	r0, #8216	; 0x2018
 800c238:	f00a fd32 	bl	8016ca0 <fm25v02_write>
	fm25v02_write(2*ADDRESS_PROCESSED_EVENT_H_REG+1, 0x20);
 800c23c:	2120      	movs	r1, #32
 800c23e:	f242 0019 	movw	r0, #8217	; 0x2019
 800c242:	f00a fd2d 	bl	8016ca0 <fm25v02_write>
	fm25v02_write(2*ADDRESS_PROCESSED_EVENT_L_REG, 0x00);
 800c246:	2100      	movs	r1, #0
 800c248:	f242 001a 	movw	r0, #8218	; 0x201a
 800c24c:	f00a fd28 	bl	8016ca0 <fm25v02_write>
	fm25v02_write(2*ADDRESS_PROCESSED_EVENT_L_REG+1, 0x00);
 800c250:	2100      	movs	r1, #0
 800c252:	f242 001b 	movw	r0, #8219	; 0x201b
 800c256:	f00a fd23 	bl	8016ca0 <fm25v02_write>
	osMutexRelease(Fm25v02MutexHandle);
 800c25a:	4ba7      	ldr	r3, [pc, #668]	; (800c4f8 <ThreadEventWriteTask+0x2dc>)
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	4618      	mov	r0, r3
 800c260:	f7fc fbaa 	bl	80089b8 <osMutexRelease>

	osMutexWait(Fm25v02MutexHandle, osWaitForever); // вычитывавем из памяти значение адреса последнего события
 800c264:	4ba4      	ldr	r3, [pc, #656]	; (800c4f8 <ThreadEventWriteTask+0x2dc>)
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	f04f 31ff 	mov.w	r1, #4294967295
 800c26c:	4618      	mov	r0, r3
 800c26e:	f7fc fb55 	bl	800891c <osMutexWait>
	fm25v02_read(2*ADDRESS_LAST_EVENT_H_REG+1, &read_temp);
 800c272:	f107 030b 	add.w	r3, r7, #11
 800c276:	4619      	mov	r1, r3
 800c278:	f242 001d 	movw	r0, #8221	; 0x201d
 800c27c:	f00a fcd6 	bl	8016c2c <fm25v02_read>
	status_registers.address_last_event_h_reg = read_temp;
 800c280:	7afb      	ldrb	r3, [r7, #11]
 800c282:	b29a      	uxth	r2, r3
 800c284:	4b9d      	ldr	r3, [pc, #628]	; (800c4fc <ThreadEventWriteTask+0x2e0>)
 800c286:	839a      	strh	r2, [r3, #28]
	fm25v02_read(2*ADDRESS_LAST_EVENT_L_REG+1, &read_temp);
 800c288:	f107 030b 	add.w	r3, r7, #11
 800c28c:	4619      	mov	r1, r3
 800c28e:	f242 001f 	movw	r0, #8223	; 0x201f
 800c292:	f00a fccb 	bl	8016c2c <fm25v02_read>
	status_registers.address_last_event_l_reg = read_temp;
 800c296:	7afb      	ldrb	r3, [r7, #11]
 800c298:	b29a      	uxth	r2, r3
 800c29a:	4b98      	ldr	r3, [pc, #608]	; (800c4fc <ThreadEventWriteTask+0x2e0>)
 800c29c:	83da      	strh	r2, [r3, #30]
	osMutexRelease(Fm25v02MutexHandle);
 800c29e:	4b96      	ldr	r3, [pc, #600]	; (800c4f8 <ThreadEventWriteTask+0x2dc>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f7fc fb88 	bl	80089b8 <osMutexRelease>

	address_event_temp = (((status_registers.address_last_event_h_reg)<<8)|(status_registers.address_last_event_l_reg&0x00FF)); // высчитываем адрес последнего события
 800c2a8:	4b94      	ldr	r3, [pc, #592]	; (800c4fc <ThreadEventWriteTask+0x2e0>)
 800c2aa:	8b9b      	ldrh	r3, [r3, #28]
 800c2ac:	021b      	lsls	r3, r3, #8
 800c2ae:	b21a      	sxth	r2, r3
 800c2b0:	4b92      	ldr	r3, [pc, #584]	; (800c4fc <ThreadEventWriteTask+0x2e0>)
 800c2b2:	8bdb      	ldrh	r3, [r3, #30]
 800c2b4:	b21b      	sxth	r3, r3
 800c2b6:	b2db      	uxtb	r3, r3
 800c2b8:	b21b      	sxth	r3, r3
 800c2ba:	4313      	orrs	r3, r2
 800c2bc:	b21b      	sxth	r3, r3
 800c2be:	85bb      	strh	r3, [r7, #44]	; 0x2c

	if( (address_event_temp < 0x2000) || (address_event_temp > 0x7FFF) ) // проверяем, входит ли значение последнего события в диапазон памяти событий, если нет, то выставляем по умолчанию
 800c2c0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c2c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c2c6:	d303      	bcc.n	800c2d0 <ThreadEventWriteTask+0xb4>
 800c2c8:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	da1f      	bge.n	800c310 <ThreadEventWriteTask+0xf4>
	{
		osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800c2d0:	4b89      	ldr	r3, [pc, #548]	; (800c4f8 <ThreadEventWriteTask+0x2dc>)
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	f04f 31ff 	mov.w	r1, #4294967295
 800c2d8:	4618      	mov	r0, r3
 800c2da:	f7fc fb1f 	bl	800891c <osMutexWait>
		fm25v02_write(2*ADDRESS_LAST_EVENT_H_REG, 0x00);
 800c2de:	2100      	movs	r1, #0
 800c2e0:	f242 001c 	movw	r0, #8220	; 0x201c
 800c2e4:	f00a fcdc 	bl	8016ca0 <fm25v02_write>
		fm25v02_write(2*ADDRESS_LAST_EVENT_H_REG+1, 0x20);
 800c2e8:	2120      	movs	r1, #32
 800c2ea:	f242 001d 	movw	r0, #8221	; 0x201d
 800c2ee:	f00a fcd7 	bl	8016ca0 <fm25v02_write>
		fm25v02_write(2*ADDRESS_LAST_EVENT_L_REG, 0x00);
 800c2f2:	2100      	movs	r1, #0
 800c2f4:	f242 001e 	movw	r0, #8222	; 0x201e
 800c2f8:	f00a fcd2 	bl	8016ca0 <fm25v02_write>
		fm25v02_write(2*ADDRESS_LAST_EVENT_L_REG+1, 0x00);
 800c2fc:	2100      	movs	r1, #0
 800c2fe:	f242 001f 	movw	r0, #8223	; 0x201f
 800c302:	f00a fccd 	bl	8016ca0 <fm25v02_write>
		osMutexRelease(Fm25v02MutexHandle);
 800c306:	4b7c      	ldr	r3, [pc, #496]	; (800c4f8 <ThreadEventWriteTask+0x2dc>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	4618      	mov	r0, r3
 800c30c:	f7fc fb54 	bl	80089b8 <osMutexRelease>



	for(;;)
	{
		osThreadSuspend(EventWriteTaskHandle);
 800c310:	4b7b      	ldr	r3, [pc, #492]	; (800c500 <ThreadEventWriteTask+0x2e4>)
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	4618      	mov	r0, r3
 800c316:	f7fc fd17 	bl	8008d48 <osThreadSuspend>

		osMutexWait(Fm25v02MutexHandle, osWaitForever); // вычитывавем из памяти значение последнего события
 800c31a:	4b77      	ldr	r3, [pc, #476]	; (800c4f8 <ThreadEventWriteTask+0x2dc>)
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	f04f 31ff 	mov.w	r1, #4294967295
 800c322:	4618      	mov	r0, r3
 800c324:	f7fc fafa 	bl	800891c <osMutexWait>
		fm25v02_read(2*ADDRESS_LAST_EVENT_H_REG+1, &read_temp);
 800c328:	f107 030b 	add.w	r3, r7, #11
 800c32c:	4619      	mov	r1, r3
 800c32e:	f242 001d 	movw	r0, #8221	; 0x201d
 800c332:	f00a fc7b 	bl	8016c2c <fm25v02_read>
		status_registers.address_last_event_h_reg = read_temp;
 800c336:	7afb      	ldrb	r3, [r7, #11]
 800c338:	b29a      	uxth	r2, r3
 800c33a:	4b70      	ldr	r3, [pc, #448]	; (800c4fc <ThreadEventWriteTask+0x2e0>)
 800c33c:	839a      	strh	r2, [r3, #28]
		fm25v02_read(2*ADDRESS_LAST_EVENT_L_REG+1, &read_temp);
 800c33e:	f107 030b 	add.w	r3, r7, #11
 800c342:	4619      	mov	r1, r3
 800c344:	f242 001f 	movw	r0, #8223	; 0x201f
 800c348:	f00a fc70 	bl	8016c2c <fm25v02_read>
		status_registers.address_last_event_l_reg = read_temp;
 800c34c:	7afb      	ldrb	r3, [r7, #11]
 800c34e:	b29a      	uxth	r2, r3
 800c350:	4b6a      	ldr	r3, [pc, #424]	; (800c4fc <ThreadEventWriteTask+0x2e0>)
 800c352:	83da      	strh	r2, [r3, #30]
		osMutexRelease(Fm25v02MutexHandle);
 800c354:	4b68      	ldr	r3, [pc, #416]	; (800c4f8 <ThreadEventWriteTask+0x2dc>)
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	4618      	mov	r0, r3
 800c35a:	f7fc fb2d 	bl	80089b8 <osMutexRelease>

		address_event_temp = (((status_registers.address_last_event_h_reg)<<8)|(status_registers.address_last_event_l_reg&0x00FF)); // считаем значение адреса последнего события
 800c35e:	4b67      	ldr	r3, [pc, #412]	; (800c4fc <ThreadEventWriteTask+0x2e0>)
 800c360:	8b9b      	ldrh	r3, [r3, #28]
 800c362:	021b      	lsls	r3, r3, #8
 800c364:	b21a      	sxth	r2, r3
 800c366:	4b65      	ldr	r3, [pc, #404]	; (800c4fc <ThreadEventWriteTask+0x2e0>)
 800c368:	8bdb      	ldrh	r3, [r3, #30]
 800c36a:	b21b      	sxth	r3, r3
 800c36c:	b2db      	uxtb	r3, r3
 800c36e:	b21b      	sxth	r3, r3
 800c370:	4313      	orrs	r3, r2
 800c372:	b21b      	sxth	r3, r3
 800c374:	85bb      	strh	r3, [r7, #44]	; 0x2c

		if( (address_event_temp >= 0x2000) && (address_event_temp <= 0x7FFF) ) // проверяем, чтобы значение адреса события лежало в области памяти ведения протокола событий
 800c376:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c378:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c37c:	f0c0 8142 	bcc.w	800c604 <ThreadEventWriteTask+0x3e8>
 800c380:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800c384:	2b00      	cmp	r3, #0
 800c386:	f2c0 813d 	blt.w	800c604 <ThreadEventWriteTask+0x3e8>
		{

			osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800c38a:	4b5b      	ldr	r3, [pc, #364]	; (800c4f8 <ThreadEventWriteTask+0x2dc>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	f04f 31ff 	mov.w	r1, #4294967295
 800c392:	4618      	mov	r0, r3
 800c394:	f7fc fac2 	bl	800891c <osMutexWait>

			fm25v02_read(2*TIME_CURRENT_YEAR_REG+1, &temp_data[0]);
 800c398:	f107 030c 	add.w	r3, r7, #12
 800c39c:	4619      	mov	r1, r3
 800c39e:	f242 000b 	movw	r0, #8203	; 0x200b
 800c3a2:	f00a fc43 	bl	8016c2c <fm25v02_read>
			fm25v02_read(2*TIME_CURRENT_MONTH_REG+1, &temp_data[1]);
 800c3a6:	f107 030c 	add.w	r3, r7, #12
 800c3aa:	3301      	adds	r3, #1
 800c3ac:	4619      	mov	r1, r3
 800c3ae:	f242 000d 	movw	r0, #8205	; 0x200d
 800c3b2:	f00a fc3b 	bl	8016c2c <fm25v02_read>
			fm25v02_read(2*TIME_CURRENT_DAY_REG+1, &temp_data[2]);
 800c3b6:	f107 030c 	add.w	r3, r7, #12
 800c3ba:	3302      	adds	r3, #2
 800c3bc:	4619      	mov	r1, r3
 800c3be:	f242 000f 	movw	r0, #8207	; 0x200f
 800c3c2:	f00a fc33 	bl	8016c2c <fm25v02_read>
			fm25v02_read(2*TIME_CURRENT_HOUR_REG+1, &temp_data[3]);
 800c3c6:	f107 030c 	add.w	r3, r7, #12
 800c3ca:	3303      	adds	r3, #3
 800c3cc:	4619      	mov	r1, r3
 800c3ce:	f242 0011 	movw	r0, #8209	; 0x2011
 800c3d2:	f00a fc2b 	bl	8016c2c <fm25v02_read>
			fm25v02_read(2*TIME_CURRENT_MINUTE_REG+1, &temp_data[4]);
 800c3d6:	f107 030c 	add.w	r3, r7, #12
 800c3da:	3304      	adds	r3, #4
 800c3dc:	4619      	mov	r1, r3
 800c3de:	f242 0013 	movw	r0, #8211	; 0x2013
 800c3e2:	f00a fc23 	bl	8016c2c <fm25v02_read>
			fm25v02_read(2*TIME_CURRENT_SECOND_REG+1, &temp_data[5]);
 800c3e6:	f107 030c 	add.w	r3, r7, #12
 800c3ea:	3305      	adds	r3, #5
 800c3ec:	4619      	mov	r1, r3
 800c3ee:	f242 0015 	movw	r0, #8213	; 0x2015
 800c3f2:	f00a fc1b 	bl	8016c2c <fm25v02_read>
			fm25v02_read(2*SYSTEM_STATUS_REG+1, &temp_data[6]);
 800c3f6:	f107 030c 	add.w	r3, r7, #12
 800c3fa:	3306      	adds	r3, #6
 800c3fc:	4619      	mov	r1, r3
 800c3fe:	f242 0021 	movw	r0, #8225	; 0x2021
 800c402:	f00a fc13 	bl	8016c2c <fm25v02_read>
			fm25v02_read(2*SECURITY_STATUS_REG+1, &temp_data[7]);
 800c406:	f107 030c 	add.w	r3, r7, #12
 800c40a:	3307      	adds	r3, #7
 800c40c:	4619      	mov	r1, r3
 800c40e:	f242 0003 	movw	r0, #8195	; 0x2003
 800c412:	f00a fc0b 	bl	8016c2c <fm25v02_read>
			fm25v02_read(2*STATUS_LOOP_REG+1, &temp_data[8]);
 800c416:	f107 030c 	add.w	r3, r7, #12
 800c41a:	3308      	adds	r3, #8
 800c41c:	4619      	mov	r1, r3
 800c41e:	f242 0005 	movw	r0, #8197	; 0x2005
 800c422:	f00a fc03 	bl	8016c2c <fm25v02_read>
			fm25v02_read(2*ALARM_LOOP_REG+1, &temp_data[9]);
 800c426:	f107 030c 	add.w	r3, r7, #12
 800c42a:	3309      	adds	r3, #9
 800c42c:	4619      	mov	r1, r3
 800c42e:	f242 0009 	movw	r0, #8201	; 0x2009
 800c432:	f00a fbfb 	bl	8016c2c <fm25v02_read>
			fm25v02_read(2*ERROR_LOOP_REG+1, &temp_data[10]);
 800c436:	f107 030c 	add.w	r3, r7, #12
 800c43a:	330a      	adds	r3, #10
 800c43c:	4619      	mov	r1, r3
 800c43e:	f242 0007 	movw	r0, #8199	; 0x2007
 800c442:	f00a fbf3 	bl	8016c2c <fm25v02_read>
			fm25v02_read(2*IBUTTON_COMPLETE_0_REG+1, &temp_data[11]);
 800c446:	f107 030c 	add.w	r3, r7, #12
 800c44a:	330b      	adds	r3, #11
 800c44c:	4619      	mov	r1, r3
 800c44e:	f242 002b 	movw	r0, #8235	; 0x202b
 800c452:	f00a fbeb 	bl	8016c2c <fm25v02_read>
			fm25v02_read(2*IBUTTON_COMPLETE_1_REG+1, &temp_data[12]);
 800c456:	f107 030c 	add.w	r3, r7, #12
 800c45a:	330c      	adds	r3, #12
 800c45c:	4619      	mov	r1, r3
 800c45e:	f242 002d 	movw	r0, #8237	; 0x202d
 800c462:	f00a fbe3 	bl	8016c2c <fm25v02_read>
			fm25v02_read(2*IBUTTON_COMPLETE_2_REG+1, &temp_data[13]);
 800c466:	f107 030c 	add.w	r3, r7, #12
 800c46a:	330d      	adds	r3, #13
 800c46c:	4619      	mov	r1, r3
 800c46e:	f242 002f 	movw	r0, #8239	; 0x202f
 800c472:	f00a fbdb 	bl	8016c2c <fm25v02_read>
			fm25v02_read(2*IBUTTON_COMPLETE_3_REG+1, &temp_data[14]);
 800c476:	f107 030c 	add.w	r3, r7, #12
 800c47a:	330e      	adds	r3, #14
 800c47c:	4619      	mov	r1, r3
 800c47e:	f242 0031 	movw	r0, #8241	; 0x2031
 800c482:	f00a fbd3 	bl	8016c2c <fm25v02_read>
			fm25v02_read(2*IBUTTON_COMPLETE_4_REG+1, &temp_data[15]);
 800c486:	f107 030c 	add.w	r3, r7, #12
 800c48a:	330f      	adds	r3, #15
 800c48c:	4619      	mov	r1, r3
 800c48e:	f242 0033 	movw	r0, #8243	; 0x2033
 800c492:	f00a fbcb 	bl	8016c2c <fm25v02_read>
			fm25v02_read(2*IBUTTON_COMPLETE_5_REG+1, &temp_data[16]);
 800c496:	f107 030c 	add.w	r3, r7, #12
 800c49a:	3310      	adds	r3, #16
 800c49c:	4619      	mov	r1, r3
 800c49e:	f242 0035 	movw	r0, #8245	; 0x2035
 800c4a2:	f00a fbc3 	bl	8016c2c <fm25v02_read>
			fm25v02_read(2*IBUTTON_COMPLETE_6_REG+1, &temp_data[17]);
 800c4a6:	f107 030c 	add.w	r3, r7, #12
 800c4aa:	3311      	adds	r3, #17
 800c4ac:	4619      	mov	r1, r3
 800c4ae:	f242 0037 	movw	r0, #8247	; 0x2037
 800c4b2:	f00a fbbb 	bl	8016c2c <fm25v02_read>
			fm25v02_read(2*IBUTTON_COMPLETE_7_REG+1, &temp_data[18]);
 800c4b6:	f107 030c 	add.w	r3, r7, #12
 800c4ba:	3312      	adds	r3, #18
 800c4bc:	4619      	mov	r1, r3
 800c4be:	f242 0039 	movw	r0, #8249	; 0x2039
 800c4c2:	f00a fbb3 	bl	8016c2c <fm25v02_read>
			fm25v02_read(2*POWER_ON_REG+1, &temp_data[19]);
 800c4c6:	f107 030c 	add.w	r3, r7, #12
 800c4ca:	3313      	adds	r3, #19
 800c4cc:	4619      	mov	r1, r3
 800c4ce:	f242 0023 	movw	r0, #8227	; 0x2023
 800c4d2:	f00a fbab 	bl	8016c2c <fm25v02_read>

			osMutexRelease(Fm25v02MutexHandle);
 800c4d6:	4b08      	ldr	r3, [pc, #32]	; (800c4f8 <ThreadEventWriteTask+0x2dc>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	4618      	mov	r0, r3
 800c4dc:	f7fc fa6c 	bl	80089b8 <osMutexRelease>

			osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800c4e0:	4b05      	ldr	r3, [pc, #20]	; (800c4f8 <ThreadEventWriteTask+0x2dc>)
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	f04f 31ff 	mov.w	r1, #4294967295
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	f7fc fa17 	bl	800891c <osMutexWait>
			//fm25v02_fast_write(address_event_temp, &temp_data[0], 30); // переписываем текущие значения переменных для события в память

			for(uint8_t i=0; i<30; i++) // переписываем текущие значения переменных для события в память
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c4f4:	e02a      	b.n	800c54c <ThreadEventWriteTask+0x330>
 800c4f6:	bf00      	nop
 800c4f8:	20009af8 	.word	0x20009af8
 800c4fc:	2000a174 	.word	0x2000a174
 800c500:	200096f4 	.word	0x200096f4
			{
				fm25v02_write(2*(address_event_temp+i), 0x00);
 800c504:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800c506:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c50a:	4413      	add	r3, r2
 800c50c:	b29b      	uxth	r3, r3
 800c50e:	005b      	lsls	r3, r3, #1
 800c510:	b29b      	uxth	r3, r3
 800c512:	2100      	movs	r1, #0
 800c514:	4618      	mov	r0, r3
 800c516:	f00a fbc3 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*(address_event_temp+i)+1, temp_data[i]);
 800c51a:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800c51c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c520:	4413      	add	r3, r2
 800c522:	b29b      	uxth	r3, r3
 800c524:	005b      	lsls	r3, r3, #1
 800c526:	b29b      	uxth	r3, r3
 800c528:	3301      	adds	r3, #1
 800c52a:	b29a      	uxth	r2, r3
 800c52c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c530:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800c534:	440b      	add	r3, r1
 800c536:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800c53a:	4619      	mov	r1, r3
 800c53c:	4610      	mov	r0, r2
 800c53e:	f00a fbaf 	bl	8016ca0 <fm25v02_write>
			for(uint8_t i=0; i<30; i++) // переписываем текущие значения переменных для события в память
 800c542:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c546:	3301      	adds	r3, #1
 800c548:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c54c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c550:	2b1d      	cmp	r3, #29
 800c552:	d9d7      	bls.n	800c504 <ThreadEventWriteTask+0x2e8>
			}

			osMutexRelease(Fm25v02MutexHandle);
 800c554:	4b2d      	ldr	r3, [pc, #180]	; (800c60c <ThreadEventWriteTask+0x3f0>)
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	4618      	mov	r0, r3
 800c55a:	f7fc fa2d 	bl	80089b8 <osMutexRelease>

			address_event_temp = address_event_temp + 30;
 800c55e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c560:	331e      	adds	r3, #30
 800c562:	85bb      	strh	r3, [r7, #44]	; 0x2c

			if( address_event_temp > 0x7FFF )
 800c564:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800c568:	2b00      	cmp	r3, #0
 800c56a:	da23      	bge.n	800c5b4 <ThreadEventWriteTask+0x398>
			{
				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800c56c:	4b27      	ldr	r3, [pc, #156]	; (800c60c <ThreadEventWriteTask+0x3f0>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	f04f 31ff 	mov.w	r1, #4294967295
 800c574:	4618      	mov	r0, r3
 800c576:	f7fc f9d1 	bl	800891c <osMutexWait>

				address_event_temp = 0x2000;
 800c57a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c57e:	85bb      	strh	r3, [r7, #44]	; 0x2c

				read_temp = (uint8_t)((address_event_temp>>8)&0x00FF);
 800c580:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c582:	0a1b      	lsrs	r3, r3, #8
 800c584:	b29b      	uxth	r3, r3
 800c586:	b2db      	uxtb	r3, r3
 800c588:	72fb      	strb	r3, [r7, #11]
				fm25v02_write(2*ADDRESS_LAST_EVENT_H_REG+1, read_temp);
 800c58a:	7afb      	ldrb	r3, [r7, #11]
 800c58c:	4619      	mov	r1, r3
 800c58e:	f242 001d 	movw	r0, #8221	; 0x201d
 800c592:	f00a fb85 	bl	8016ca0 <fm25v02_write>
				read_temp = (uint8_t)(address_event_temp&0x00FF);
 800c596:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c598:	b2db      	uxtb	r3, r3
 800c59a:	72fb      	strb	r3, [r7, #11]
				fm25v02_write(2*ADDRESS_LAST_EVENT_L_REG+1, read_temp);
 800c59c:	7afb      	ldrb	r3, [r7, #11]
 800c59e:	4619      	mov	r1, r3
 800c5a0:	f242 001f 	movw	r0, #8223	; 0x201f
 800c5a4:	f00a fb7c 	bl	8016ca0 <fm25v02_write>

				osMutexRelease(Fm25v02MutexHandle);
 800c5a8:	4b18      	ldr	r3, [pc, #96]	; (800c60c <ThreadEventWriteTask+0x3f0>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	f7fc fa03 	bl	80089b8 <osMutexRelease>
 800c5b2:	e027      	b.n	800c604 <ThreadEventWriteTask+0x3e8>

			}
			else if( (address_event_temp >= 0x2000) && (address_event_temp <= 0x7FFF) )
 800c5b4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c5b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c5ba:	d323      	bcc.n	800c604 <ThreadEventWriteTask+0x3e8>
 800c5bc:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	db1f      	blt.n	800c604 <ThreadEventWriteTask+0x3e8>
			{
				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800c5c4:	4b11      	ldr	r3, [pc, #68]	; (800c60c <ThreadEventWriteTask+0x3f0>)
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	f04f 31ff 	mov.w	r1, #4294967295
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	f7fc f9a5 	bl	800891c <osMutexWait>

				read_temp = (uint8_t)((address_event_temp>>8)&0x00FF);
 800c5d2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c5d4:	0a1b      	lsrs	r3, r3, #8
 800c5d6:	b29b      	uxth	r3, r3
 800c5d8:	b2db      	uxtb	r3, r3
 800c5da:	72fb      	strb	r3, [r7, #11]
				fm25v02_write(2*ADDRESS_LAST_EVENT_H_REG+1, read_temp);
 800c5dc:	7afb      	ldrb	r3, [r7, #11]
 800c5de:	4619      	mov	r1, r3
 800c5e0:	f242 001d 	movw	r0, #8221	; 0x201d
 800c5e4:	f00a fb5c 	bl	8016ca0 <fm25v02_write>
				read_temp = (uint8_t)(address_event_temp&0x00FF);
 800c5e8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800c5ea:	b2db      	uxtb	r3, r3
 800c5ec:	72fb      	strb	r3, [r7, #11]
				fm25v02_write(2*ADDRESS_LAST_EVENT_L_REG+1, read_temp);
 800c5ee:	7afb      	ldrb	r3, [r7, #11]
 800c5f0:	4619      	mov	r1, r3
 800c5f2:	f242 001f 	movw	r0, #8223	; 0x201f
 800c5f6:	f00a fb53 	bl	8016ca0 <fm25v02_write>

				osMutexRelease(Fm25v02MutexHandle);
 800c5fa:	4b04      	ldr	r3, [pc, #16]	; (800c60c <ThreadEventWriteTask+0x3f0>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	4618      	mov	r0, r3
 800c600:	f7fc f9da 	bl	80089b8 <osMutexRelease>
		else // здесь должно быть то, что нужно сделать если значение адреса не вошло в область памяти ведения протокола событий, например можно выставить соответствующий флаг и сделать запрос на сервер
		{

		}

		osDelay(1);
 800c604:	2001      	movs	r0, #1
 800c606:	f7fc f8a8 	bl	800875a <osDelay>
		osThreadSuspend(EventWriteTaskHandle);
 800c60a:	e681      	b.n	800c310 <ThreadEventWriteTask+0xf4>
 800c60c:	20009af8 	.word	0x20009af8

0800c610 <ThreadGetCurrentTask>:
volatile uint8_t control_phase_b;
volatile uint8_t control_phase_c;


void ThreadGetCurrentTask(void const * argument)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b090      	sub	sp, #64	; 0x40
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
	volatile uint16_t overcurrent_phase_a_state = 0;
 800c618:	2300      	movs	r3, #0
 800c61a:	867b      	strh	r3, [r7, #50]	; 0x32
	volatile uint16_t overcurrent_phase_b_state = 0;
 800c61c:	2300      	movs	r3, #0
 800c61e:	863b      	strh	r3, [r7, #48]	; 0x30
	volatile uint16_t overcurrent_phase_c_state = 0;
 800c620:	2300      	movs	r3, #0
 800c622:	85fb      	strh	r3, [r7, #46]	; 0x2e
	volatile uint8_t temp_h;
	volatile uint8_t temp_l;

	volatile uint8_t phase_temp;

	volatile uint8_t phase_a1_off_state=0;
 800c624:	2300      	movs	r3, #0
 800c626:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	volatile uint8_t phase_a2_off_state=0;
 800c62a:	2300      	movs	r3, #0
 800c62c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	volatile uint8_t phase_b1_off_state=0;
 800c630:	2300      	movs	r3, #0
 800c632:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	volatile uint8_t phase_b2_off_state=0;
 800c636:	2300      	movs	r3, #0
 800c638:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	volatile uint8_t phase_c1_off_state=0;
 800c63c:	2300      	movs	r3, #0
 800c63e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	volatile uint8_t phase_c2_off_state=0;
 800c642:	2300      	movs	r3, #0
 800c644:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	volatile uint8_t cascade_off_state=0;
 800c648:	2300      	movs	r3, #0
 800c64a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	volatile uint8_t door_off_state=0;
 800c64e:	2300      	movs	r3, #0
 800c650:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	volatile uint8_t phase_a1_on_state=0;
 800c654:	2300      	movs	r3, #0
 800c656:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	volatile uint8_t phase_a2_on_state=0;
 800c65a:	2300      	movs	r3, #0
 800c65c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	volatile uint8_t phase_b1_on_state=0;
 800c660:	2300      	movs	r3, #0
 800c662:	f887 3020 	strb.w	r3, [r7, #32]
	volatile uint8_t phase_b2_on_state=0;
 800c666:	2300      	movs	r3, #0
 800c668:	77fb      	strb	r3, [r7, #31]
	volatile uint8_t phase_c1_on_state=0;
 800c66a:	2300      	movs	r3, #0
 800c66c:	77bb      	strb	r3, [r7, #30]
	volatile uint8_t phase_c2_on_state=0;
 800c66e:	2300      	movs	r3, #0
 800c670:	777b      	strb	r3, [r7, #29]
	volatile uint8_t cascade_on_state=0;
 800c672:	2300      	movs	r3, #0
 800c674:	773b      	strb	r3, [r7, #28]
	volatile uint8_t door_on_state=0;
 800c676:	2300      	movs	r3, #0
 800c678:	76fb      	strb	r3, [r7, #27]

	volatile uint16_t phase_a1_alarm_state=0;
 800c67a:	2300      	movs	r3, #0
 800c67c:	833b      	strh	r3, [r7, #24]
	volatile uint16_t phase_a2_alarm_state=0;
 800c67e:	2300      	movs	r3, #0
 800c680:	82fb      	strh	r3, [r7, #22]
	volatile uint16_t phase_b1_alarm_state=0;
 800c682:	2300      	movs	r3, #0
 800c684:	82bb      	strh	r3, [r7, #20]
	volatile uint16_t phase_b2_alarm_state=0;
 800c686:	2300      	movs	r3, #0
 800c688:	827b      	strh	r3, [r7, #18]
	volatile uint16_t phase_c1_alarm_state=0;
 800c68a:	2300      	movs	r3, #0
 800c68c:	823b      	strh	r3, [r7, #16]
	volatile uint16_t phase_c2_alarm_state=0;
 800c68e:	2300      	movs	r3, #0
 800c690:	81fb      	strh	r3, [r7, #14]

	volatile uint8_t current_counter = 0;
 800c692:	2300      	movs	r3, #0
 800c694:	737b      	strb	r3, [r7, #13]

	uint16_t current_a_temp;
	uint16_t current_b_temp;
	uint16_t current_c_temp;

	uint16_t current_a_sum = 0;
 800c696:	2300      	movs	r3, #0
 800c698:	87fb      	strh	r3, [r7, #62]	; 0x3e
	uint16_t current_b_sum = 0;
 800c69a:	2300      	movs	r3, #0
 800c69c:	87bb      	strh	r3, [r7, #60]	; 0x3c
	uint16_t current_c_sum = 0;
 800c69e:	2300      	movs	r3, #0
 800c6a0:	877b      	strh	r3, [r7, #58]	; 0x3a

	uint16_t current_a = 0;
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	873b      	strh	r3, [r7, #56]	; 0x38
	uint16_t current_b = 0;
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	86fb      	strh	r3, [r7, #54]	; 0x36
	uint16_t current_c = 0;
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	86bb      	strh	r3, [r7, #52]	; 0x34


	//HAL_Delay(10000);
	osThreadSuspend(GetCurrentTaskHandle);
 800c6ae:	4bc8      	ldr	r3, [pc, #800]	; (800c9d0 <ThreadGetCurrentTask+0x3c0>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f7fc fb48 	bl	8008d48 <osThreadSuspend>

	HAL_TIM_Base_Start_IT(&htim2);
 800c6b8:	48c6      	ldr	r0, [pc, #792]	; (800c9d4 <ThreadGetCurrentTask+0x3c4>)
 800c6ba:	f7fa fa6f 	bl	8006b9c <HAL_TIM_Base_Start_IT>
				//if( ((control_registers.light_control_reg)&0x0001) == 0x0001 ) // если в управляющем регистре освещения выставлен бит включения фазы А
				//{

					//osThreadSuspend(MainTaskHandle); // останавливаем на всякий случай основной поток для того чтобы фазы не включились, если будут выключены

					if(cur_a > (control_registers.max_current_phase_a)*10 ) // проверяем если значение тока превысило максимальное значение тока фазы А
 800c6be:	4bc6      	ldr	r3, [pc, #792]	; (800c9d8 <ThreadGetCurrentTask+0x3c8>)
 800c6c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c6c4:	461a      	mov	r2, r3
 800c6c6:	4613      	mov	r3, r2
 800c6c8:	009b      	lsls	r3, r3, #2
 800c6ca:	4413      	add	r3, r2
 800c6cc:	005b      	lsls	r3, r3, #1
 800c6ce:	461a      	mov	r2, r3
 800c6d0:	4bc2      	ldr	r3, [pc, #776]	; (800c9dc <ThreadGetCurrentTask+0x3cc>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	429a      	cmp	r2, r3
 800c6d6:	f080 80dd 	bcs.w	800c894 <ThreadGetCurrentTask+0x284>
					{
						overcurrent_phase_a_state++;
 800c6da:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800c6dc:	b29b      	uxth	r3, r3
 800c6de:	3301      	adds	r3, #1
 800c6e0:	b29b      	uxth	r3, r3
 800c6e2:	867b      	strh	r3, [r7, #50]	; 0x32

						if(overcurrent_phase_a_state >= control_registers.overcurrent_timeleft_reg)
 800c6e4:	4bbc      	ldr	r3, [pc, #752]	; (800c9d8 <ThreadGetCurrentTask+0x3c8>)
 800c6e6:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 800c6ea:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800c6ec:	b29b      	uxth	r3, r3
 800c6ee:	429a      	cmp	r2, r3
 800c6f0:	f200 80d2 	bhi.w	800c898 <ThreadGetCurrentTask+0x288>
						{
							overcurrent_phase_a_state = 0;
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	867b      	strh	r3, [r7, #50]	; 0x32

							if( ((status_registers.lighting_alarm_reg)&0x0080) == 0x0000 ) // проверяем установлен ли бит превышения тока фазы А
 800c6f8:	4bb9      	ldr	r3, [pc, #740]	; (800c9e0 <ThreadGetCurrentTask+0x3d0>)
 800c6fa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c6fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c702:	2b00      	cmp	r3, #0
 800c704:	d176      	bne.n	800c7f4 <ThreadGetCurrentTask+0x1e4>
							{
								//osThreadSuspend(MainTaskHandle); // останавливаем на всякий случай основной поток для того чтобы фазы не включились, если будут выключены

								//PHASE_A_OFF(); // отключаем фазу А

								osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800c706:	4bb7      	ldr	r3, [pc, #732]	; (800c9e4 <ThreadGetCurrentTask+0x3d4>)
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	f04f 31ff 	mov.w	r1, #4294967295
 800c70e:	4618      	mov	r0, r3
 800c710:	f7fc f904 	bl	800891c <osMutexWait>
								fm25v02_read(2*LIGHTING_ALARM_REG, &temp_h);
 800c714:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 800c718:	4619      	mov	r1, r3
 800c71a:	f242 0064 	movw	r0, #8292	; 0x2064
 800c71e:	f00a fa85 	bl	8016c2c <fm25v02_read>
								fm25v02_read(2*LIGHTING_ALARM_REG+1, &temp_l);
 800c722:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c726:	4619      	mov	r1, r3
 800c728:	f242 0065 	movw	r0, #8293	; 0x2065
 800c72c:	f00a fa7e 	bl	8016c2c <fm25v02_read>
								temp_l = temp_l|0x80;
 800c730:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c734:	b2db      	uxtb	r3, r3
 800c736:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c73a:	b2db      	uxtb	r3, r3
 800c73c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
								fm25v02_write(2*LIGHTING_ALARM_REG, temp_h);
 800c740:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800c744:	b2db      	uxtb	r3, r3
 800c746:	4619      	mov	r1, r3
 800c748:	f242 0064 	movw	r0, #8292	; 0x2064
 800c74c:	f00a faa8 	bl	8016ca0 <fm25v02_write>
								fm25v02_write(2*LIGHTING_ALARM_REG+1, temp_l);
 800c750:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c754:	b2db      	uxtb	r3, r3
 800c756:	4619      	mov	r1, r3
 800c758:	f242 0065 	movw	r0, #8293	; 0x2065
 800c75c:	f00a faa0 	bl	8016ca0 <fm25v02_write>
								status_registers.lighting_alarm_reg = (((uint16_t)temp_h)<<8)|temp_l; // если превышение тока длилось 10 циклов, то выставляем бит превышения тока фазы А в регистр аварий
 800c760:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800c764:	b2db      	uxtb	r3, r3
 800c766:	021b      	lsls	r3, r3, #8
 800c768:	b21a      	sxth	r2, r3
 800c76a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c76e:	b2db      	uxtb	r3, r3
 800c770:	b21b      	sxth	r3, r3
 800c772:	4313      	orrs	r3, r2
 800c774:	b21b      	sxth	r3, r3
 800c776:	b29a      	uxth	r2, r3
 800c778:	4b99      	ldr	r3, [pc, #612]	; (800c9e0 <ThreadGetCurrentTask+0x3d0>)
 800c77a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

								fm25v02_read(2*LIGHT_CONTROL_REG, &temp_h);
 800c77e:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 800c782:	4619      	mov	r1, r3
 800c784:	f242 1082 	movw	r0, #8578	; 0x2182
 800c788:	f00a fa50 	bl	8016c2c <fm25v02_read>
								fm25v02_read(2*LIGHT_CONTROL_REG+1, &temp_l);
 800c78c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c790:	4619      	mov	r1, r3
 800c792:	f242 1083 	movw	r0, #8579	; 0x2183
 800c796:	f00a fa49 	bl	8016c2c <fm25v02_read>
								temp_l = temp_l&0xFE;
 800c79a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c79e:	b2db      	uxtb	r3, r3
 800c7a0:	f023 0301 	bic.w	r3, r3, #1
 800c7a4:	b2db      	uxtb	r3, r3
 800c7a6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
								fm25v02_write(2*LIGHT_CONTROL_REG, temp_h);
 800c7aa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800c7ae:	b2db      	uxtb	r3, r3
 800c7b0:	4619      	mov	r1, r3
 800c7b2:	f242 1082 	movw	r0, #8578	; 0x2182
 800c7b6:	f00a fa73 	bl	8016ca0 <fm25v02_write>
								fm25v02_write(2*LIGHT_CONTROL_REG+1, temp_l);
 800c7ba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c7be:	b2db      	uxtb	r3, r3
 800c7c0:	4619      	mov	r1, r3
 800c7c2:	f242 1083 	movw	r0, #8579	; 0x2183
 800c7c6:	f00a fa6b 	bl	8016ca0 <fm25v02_write>
								control_registers.light_control_reg = (((uint16_t)temp_h)<<8)|temp_l;
 800c7ca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800c7ce:	b2db      	uxtb	r3, r3
 800c7d0:	021b      	lsls	r3, r3, #8
 800c7d2:	b21a      	sxth	r2, r3
 800c7d4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c7d8:	b2db      	uxtb	r3, r3
 800c7da:	b21b      	sxth	r3, r3
 800c7dc:	4313      	orrs	r3, r2
 800c7de:	b21b      	sxth	r3, r3
 800c7e0:	b29a      	uxth	r2, r3
 800c7e2:	4b7d      	ldr	r3, [pc, #500]	; (800c9d8 <ThreadGetCurrentTask+0x3c8>)
 800c7e4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

								osMutexRelease(Fm25v02MutexHandle);
 800c7e8:	4b7e      	ldr	r3, [pc, #504]	; (800c9e4 <ThreadGetCurrentTask+0x3d4>)
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	f7fc f8e3 	bl	80089b8 <osMutexRelease>
 800c7f2:	e051      	b.n	800c898 <ThreadGetCurrentTask+0x288>

								//osThreadResume(MainTaskHandle); // запускаем основной поток после проверки превышения значений токов

							}
							else if( ((status_registers.lighting_alarm_reg)&0x0080) == 0x0080 ) // проверяем установлен ли бит превышения тока фазы А
 800c7f4:	4b7a      	ldr	r3, [pc, #488]	; (800c9e0 <ThreadGetCurrentTask+0x3d0>)
 800c7f6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c7fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d04a      	beq.n	800c898 <ThreadGetCurrentTask+0x288>
							{
								if( (control_registers.light_control_reg)&0x01 )
 800c802:	4b75      	ldr	r3, [pc, #468]	; (800c9d8 <ThreadGetCurrentTask+0x3c8>)
 800c804:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c808:	f003 0301 	and.w	r3, r3, #1
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d043      	beq.n	800c898 <ThreadGetCurrentTask+0x288>
								{
									//osThreadSuspend(MainTaskHandle); // останавливаем на всякий случай основной поток для того чтобы фазы не включились, если будут выключены

									//PHASE_A_OFF(); // отключаем фазу А

									osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800c810:	4b74      	ldr	r3, [pc, #464]	; (800c9e4 <ThreadGetCurrentTask+0x3d4>)
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	f04f 31ff 	mov.w	r1, #4294967295
 800c818:	4618      	mov	r0, r3
 800c81a:	f7fc f87f 	bl	800891c <osMutexWait>

									fm25v02_read(2*LIGHT_CONTROL_REG, &temp_h);
 800c81e:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 800c822:	4619      	mov	r1, r3
 800c824:	f242 1082 	movw	r0, #8578	; 0x2182
 800c828:	f00a fa00 	bl	8016c2c <fm25v02_read>
									fm25v02_read(2*LIGHT_CONTROL_REG+1, &temp_l);
 800c82c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c830:	4619      	mov	r1, r3
 800c832:	f242 1083 	movw	r0, #8579	; 0x2183
 800c836:	f00a f9f9 	bl	8016c2c <fm25v02_read>
									temp_l = temp_l&0xFE;
 800c83a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c83e:	b2db      	uxtb	r3, r3
 800c840:	f023 0301 	bic.w	r3, r3, #1
 800c844:	b2db      	uxtb	r3, r3
 800c846:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
									fm25v02_write(2*LIGHT_CONTROL_REG, temp_h);
 800c84a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800c84e:	b2db      	uxtb	r3, r3
 800c850:	4619      	mov	r1, r3
 800c852:	f242 1082 	movw	r0, #8578	; 0x2182
 800c856:	f00a fa23 	bl	8016ca0 <fm25v02_write>
									fm25v02_write(2*LIGHT_CONTROL_REG+1, temp_l);
 800c85a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c85e:	b2db      	uxtb	r3, r3
 800c860:	4619      	mov	r1, r3
 800c862:	f242 1083 	movw	r0, #8579	; 0x2183
 800c866:	f00a fa1b 	bl	8016ca0 <fm25v02_write>
									control_registers.light_control_reg = (((uint16_t)temp_h)<<8)|temp_l;
 800c86a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800c86e:	b2db      	uxtb	r3, r3
 800c870:	021b      	lsls	r3, r3, #8
 800c872:	b21a      	sxth	r2, r3
 800c874:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c878:	b2db      	uxtb	r3, r3
 800c87a:	b21b      	sxth	r3, r3
 800c87c:	4313      	orrs	r3, r2
 800c87e:	b21b      	sxth	r3, r3
 800c880:	b29a      	uxth	r2, r3
 800c882:	4b55      	ldr	r3, [pc, #340]	; (800c9d8 <ThreadGetCurrentTask+0x3c8>)
 800c884:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

									osMutexRelease(Fm25v02MutexHandle);
 800c888:	4b56      	ldr	r3, [pc, #344]	; (800c9e4 <ThreadGetCurrentTask+0x3d4>)
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	4618      	mov	r0, r3
 800c88e:	f7fc f893 	bl	80089b8 <osMutexRelease>
 800c892:	e001      	b.n	800c898 <ThreadGetCurrentTask+0x288>

					}

					else
					{
						overcurrent_phase_a_state = 0;
 800c894:	2300      	movs	r3, #0
 800c896:	867b      	strh	r3, [r7, #50]	; 0x32
				//}

				//if( ((control_registers.light_control_reg)&0x0002) == 0x0002 ) // если в управляющем регистре освещения выставлен бит включения фазы В
				//{

					if(cur_b > (control_registers.max_current_phase_b)*10 ) // проверяем если значение тока превысило максимальное значение тока фазы В
 800c898:	4b4f      	ldr	r3, [pc, #316]	; (800c9d8 <ThreadGetCurrentTask+0x3c8>)
 800c89a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c89e:	461a      	mov	r2, r3
 800c8a0:	4613      	mov	r3, r2
 800c8a2:	009b      	lsls	r3, r3, #2
 800c8a4:	4413      	add	r3, r2
 800c8a6:	005b      	lsls	r3, r3, #1
 800c8a8:	461a      	mov	r2, r3
 800c8aa:	4b4f      	ldr	r3, [pc, #316]	; (800c9e8 <ThreadGetCurrentTask+0x3d8>)
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	429a      	cmp	r2, r3
 800c8b0:	f080 80ec 	bcs.w	800ca8c <ThreadGetCurrentTask+0x47c>
					{

						overcurrent_phase_b_state++;
 800c8b4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c8b6:	b29b      	uxth	r3, r3
 800c8b8:	3301      	adds	r3, #1
 800c8ba:	b29b      	uxth	r3, r3
 800c8bc:	863b      	strh	r3, [r7, #48]	; 0x30

						if(overcurrent_phase_b_state >= control_registers.overcurrent_timeleft_reg)
 800c8be:	4b46      	ldr	r3, [pc, #280]	; (800c9d8 <ThreadGetCurrentTask+0x3c8>)
 800c8c0:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 800c8c4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c8c6:	b29b      	uxth	r3, r3
 800c8c8:	429a      	cmp	r2, r3
 800c8ca:	f200 80e1 	bhi.w	800ca90 <ThreadGetCurrentTask+0x480>
						{
							overcurrent_phase_b_state = 0;
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	863b      	strh	r3, [r7, #48]	; 0x30

							if( ((status_registers.lighting_alarm_reg)&0x0100) == 0x0000 ) // проверяем установлен ли бит превышения тока фазы В
 800c8d2:	4b43      	ldr	r3, [pc, #268]	; (800c9e0 <ThreadGetCurrentTask+0x3d0>)
 800c8d4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c8d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	f040 8085 	bne.w	800c9ec <ThreadGetCurrentTask+0x3dc>
							{
								//osThreadSuspend(MainTaskHandle); // останавливаем на всякий случай основной поток для того чтобы фазы не включились, если будут выключены

								//PHASE_B_OFF(); // отключаем фазу В

								osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800c8e2:	4b40      	ldr	r3, [pc, #256]	; (800c9e4 <ThreadGetCurrentTask+0x3d4>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	f04f 31ff 	mov.w	r1, #4294967295
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	f7fc f816 	bl	800891c <osMutexWait>
								fm25v02_read(2*LIGHTING_ALARM_REG, &temp_h);
 800c8f0:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 800c8f4:	4619      	mov	r1, r3
 800c8f6:	f242 0064 	movw	r0, #8292	; 0x2064
 800c8fa:	f00a f997 	bl	8016c2c <fm25v02_read>
								fm25v02_read(2*LIGHTING_ALARM_REG+1, &temp_l);
 800c8fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c902:	4619      	mov	r1, r3
 800c904:	f242 0065 	movw	r0, #8293	; 0x2065
 800c908:	f00a f990 	bl	8016c2c <fm25v02_read>
								temp_h = temp_h|0x01;
 800c90c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800c910:	b2db      	uxtb	r3, r3
 800c912:	f043 0301 	orr.w	r3, r3, #1
 800c916:	b2db      	uxtb	r3, r3
 800c918:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
								fm25v02_write(2*LIGHTING_ALARM_REG, temp_h);
 800c91c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800c920:	b2db      	uxtb	r3, r3
 800c922:	4619      	mov	r1, r3
 800c924:	f242 0064 	movw	r0, #8292	; 0x2064
 800c928:	f00a f9ba 	bl	8016ca0 <fm25v02_write>
								fm25v02_write(2*LIGHTING_ALARM_REG+1, temp_l);
 800c92c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c930:	b2db      	uxtb	r3, r3
 800c932:	4619      	mov	r1, r3
 800c934:	f242 0065 	movw	r0, #8293	; 0x2065
 800c938:	f00a f9b2 	bl	8016ca0 <fm25v02_write>
								status_registers.lighting_alarm_reg = (((uint16_t)temp_h)<<8)|temp_l; // если превышение тока длилось 10 циклов, то выставляем бит превышения тока фазы В в регистр аварий
 800c93c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800c940:	b2db      	uxtb	r3, r3
 800c942:	021b      	lsls	r3, r3, #8
 800c944:	b21a      	sxth	r2, r3
 800c946:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c94a:	b2db      	uxtb	r3, r3
 800c94c:	b21b      	sxth	r3, r3
 800c94e:	4313      	orrs	r3, r2
 800c950:	b21b      	sxth	r3, r3
 800c952:	b29a      	uxth	r2, r3
 800c954:	4b22      	ldr	r3, [pc, #136]	; (800c9e0 <ThreadGetCurrentTask+0x3d0>)
 800c956:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

								fm25v02_read(2*LIGHT_CONTROL_REG, &temp_h);
 800c95a:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 800c95e:	4619      	mov	r1, r3
 800c960:	f242 1082 	movw	r0, #8578	; 0x2182
 800c964:	f00a f962 	bl	8016c2c <fm25v02_read>
								fm25v02_read(2*LIGHT_CONTROL_REG+1, &temp_l);
 800c968:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800c96c:	4619      	mov	r1, r3
 800c96e:	f242 1083 	movw	r0, #8579	; 0x2183
 800c972:	f00a f95b 	bl	8016c2c <fm25v02_read>
								temp_l = temp_l&0xFD;
 800c976:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c97a:	b2db      	uxtb	r3, r3
 800c97c:	f023 0302 	bic.w	r3, r3, #2
 800c980:	b2db      	uxtb	r3, r3
 800c982:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
								fm25v02_write(2*LIGHT_CONTROL_REG, temp_h);
 800c986:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800c98a:	b2db      	uxtb	r3, r3
 800c98c:	4619      	mov	r1, r3
 800c98e:	f242 1082 	movw	r0, #8578	; 0x2182
 800c992:	f00a f985 	bl	8016ca0 <fm25v02_write>
								fm25v02_write(2*LIGHT_CONTROL_REG+1, temp_l);
 800c996:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c99a:	b2db      	uxtb	r3, r3
 800c99c:	4619      	mov	r1, r3
 800c99e:	f242 1083 	movw	r0, #8579	; 0x2183
 800c9a2:	f00a f97d 	bl	8016ca0 <fm25v02_write>
								control_registers.light_control_reg = (((uint16_t)temp_h)<<8)|temp_l;
 800c9a6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800c9aa:	b2db      	uxtb	r3, r3
 800c9ac:	021b      	lsls	r3, r3, #8
 800c9ae:	b21a      	sxth	r2, r3
 800c9b0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c9b4:	b2db      	uxtb	r3, r3
 800c9b6:	b21b      	sxth	r3, r3
 800c9b8:	4313      	orrs	r3, r2
 800c9ba:	b21b      	sxth	r3, r3
 800c9bc:	b29a      	uxth	r2, r3
 800c9be:	4b06      	ldr	r3, [pc, #24]	; (800c9d8 <ThreadGetCurrentTask+0x3c8>)
 800c9c0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

								osMutexRelease(Fm25v02MutexHandle);
 800c9c4:	4b07      	ldr	r3, [pc, #28]	; (800c9e4 <ThreadGetCurrentTask+0x3d4>)
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	f7fb fff5 	bl	80089b8 <osMutexRelease>
 800c9ce:	e05f      	b.n	800ca90 <ThreadGetCurrentTask+0x480>
 800c9d0:	20009764 	.word	0x20009764
 800c9d4:	20009d44 	.word	0x20009d44
 800c9d8:	2000a234 	.word	0x2000a234
 800c9dc:	200096ec 	.word	0x200096ec
 800c9e0:	2000a174 	.word	0x2000a174
 800c9e4:	20009af8 	.word	0x20009af8
 800c9e8:	20009bfc 	.word	0x20009bfc

								//osThreadResume(MainTaskHandle); // запускаем основной поток после проверки превышения значений токов
							}

							else if( ((status_registers.lighting_alarm_reg)&0x0100) == 0x0100 ) // проверяем установлен ли бит превышения тока фазы А
 800c9ec:	4b9e      	ldr	r3, [pc, #632]	; (800cc68 <ThreadGetCurrentTask+0x658>)
 800c9ee:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800c9f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d04a      	beq.n	800ca90 <ThreadGetCurrentTask+0x480>
							{
								if( (control_registers.light_control_reg)&0x02 )
 800c9fa:	4b9c      	ldr	r3, [pc, #624]	; (800cc6c <ThreadGetCurrentTask+0x65c>)
 800c9fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ca00:	f003 0302 	and.w	r3, r3, #2
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d043      	beq.n	800ca90 <ThreadGetCurrentTask+0x480>
								{
									//osThreadSuspend(MainTaskHandle); // останавливаем на всякий случай основной поток для того чтобы фазы не включились, если будут выключены

									//PHASE_B_OFF(); // отключаем фазу В

									osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800ca08:	4b99      	ldr	r3, [pc, #612]	; (800cc70 <ThreadGetCurrentTask+0x660>)
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	f04f 31ff 	mov.w	r1, #4294967295
 800ca10:	4618      	mov	r0, r3
 800ca12:	f7fb ff83 	bl	800891c <osMutexWait>

									fm25v02_read(2*LIGHT_CONTROL_REG, &temp_h);
 800ca16:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 800ca1a:	4619      	mov	r1, r3
 800ca1c:	f242 1082 	movw	r0, #8578	; 0x2182
 800ca20:	f00a f904 	bl	8016c2c <fm25v02_read>
									fm25v02_read(2*LIGHT_CONTROL_REG+1, &temp_l);
 800ca24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ca28:	4619      	mov	r1, r3
 800ca2a:	f242 1083 	movw	r0, #8579	; 0x2183
 800ca2e:	f00a f8fd 	bl	8016c2c <fm25v02_read>
									temp_l = temp_l&0xFD;
 800ca32:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ca36:	b2db      	uxtb	r3, r3
 800ca38:	f023 0302 	bic.w	r3, r3, #2
 800ca3c:	b2db      	uxtb	r3, r3
 800ca3e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
									fm25v02_write(2*LIGHT_CONTROL_REG, temp_h);
 800ca42:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ca46:	b2db      	uxtb	r3, r3
 800ca48:	4619      	mov	r1, r3
 800ca4a:	f242 1082 	movw	r0, #8578	; 0x2182
 800ca4e:	f00a f927 	bl	8016ca0 <fm25v02_write>
									fm25v02_write(2*LIGHT_CONTROL_REG+1, temp_l);
 800ca52:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ca56:	b2db      	uxtb	r3, r3
 800ca58:	4619      	mov	r1, r3
 800ca5a:	f242 1083 	movw	r0, #8579	; 0x2183
 800ca5e:	f00a f91f 	bl	8016ca0 <fm25v02_write>
									control_registers.light_control_reg = (((uint16_t)temp_h)<<8)|temp_l;
 800ca62:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ca66:	b2db      	uxtb	r3, r3
 800ca68:	021b      	lsls	r3, r3, #8
 800ca6a:	b21a      	sxth	r2, r3
 800ca6c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ca70:	b2db      	uxtb	r3, r3
 800ca72:	b21b      	sxth	r3, r3
 800ca74:	4313      	orrs	r3, r2
 800ca76:	b21b      	sxth	r3, r3
 800ca78:	b29a      	uxth	r2, r3
 800ca7a:	4b7c      	ldr	r3, [pc, #496]	; (800cc6c <ThreadGetCurrentTask+0x65c>)
 800ca7c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

									osMutexRelease(Fm25v02MutexHandle);
 800ca80:	4b7b      	ldr	r3, [pc, #492]	; (800cc70 <ThreadGetCurrentTask+0x660>)
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	4618      	mov	r0, r3
 800ca86:	f7fb ff97 	bl	80089b8 <osMutexRelease>
 800ca8a:	e001      	b.n	800ca90 <ThreadGetCurrentTask+0x480>

					}

					else
					{
						overcurrent_phase_b_state = 0;
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	863b      	strh	r3, [r7, #48]	; 0x30
				//}

				//if( ((control_registers.light_control_reg)&0x0004) == 0x0004 ) // если в управляющем регистре освещения выставлен бит включения фазы С
				//{

					if(cur_c > (control_registers.max_current_phase_c)*10 ) // проверяем если значение тока превысило максимальное значение тока фазы С
 800ca90:	4b76      	ldr	r3, [pc, #472]	; (800cc6c <ThreadGetCurrentTask+0x65c>)
 800ca92:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ca96:	461a      	mov	r2, r3
 800ca98:	4613      	mov	r3, r2
 800ca9a:	009b      	lsls	r3, r3, #2
 800ca9c:	4413      	add	r3, r2
 800ca9e:	005b      	lsls	r3, r3, #1
 800caa0:	461a      	mov	r2, r3
 800caa2:	4b74      	ldr	r3, [pc, #464]	; (800cc74 <ThreadGetCurrentTask+0x664>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	429a      	cmp	r2, r3
 800caa8:	f080 80e6 	bcs.w	800cc78 <ThreadGetCurrentTask+0x668>
					{

						overcurrent_phase_c_state++;
 800caac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800caae:	b29b      	uxth	r3, r3
 800cab0:	3301      	adds	r3, #1
 800cab2:	b29b      	uxth	r3, r3
 800cab4:	85fb      	strh	r3, [r7, #46]	; 0x2e

						if(overcurrent_phase_c_state >= control_registers.overcurrent_timeleft_reg)
 800cab6:	4b6d      	ldr	r3, [pc, #436]	; (800cc6c <ThreadGetCurrentTask+0x65c>)
 800cab8:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 800cabc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cabe:	b29b      	uxth	r3, r3
 800cac0:	429a      	cmp	r2, r3
 800cac2:	f200 80db 	bhi.w	800cc7c <ThreadGetCurrentTask+0x66c>
						{
							overcurrent_phase_c_state = 0;
 800cac6:	2300      	movs	r3, #0
 800cac8:	85fb      	strh	r3, [r7, #46]	; 0x2e

							if( ((status_registers.lighting_alarm_reg)&0x0200) == 0x0000 ) // проверяем установлен ли бит превышения тока фазы С
 800caca:	4b67      	ldr	r3, [pc, #412]	; (800cc68 <ThreadGetCurrentTask+0x658>)
 800cacc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800cad0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d176      	bne.n	800cbc6 <ThreadGetCurrentTask+0x5b6>
							{
								//osThreadSuspend(MainTaskHandle); // останавливаем на всякий случай основной поток для того чтобы фазы не включились, если будут выключены

								//PHASE_C_OFF(); // отключаем фазу С

								osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800cad8:	4b65      	ldr	r3, [pc, #404]	; (800cc70 <ThreadGetCurrentTask+0x660>)
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	f04f 31ff 	mov.w	r1, #4294967295
 800cae0:	4618      	mov	r0, r3
 800cae2:	f7fb ff1b 	bl	800891c <osMutexWait>
								fm25v02_read(2*LIGHTING_ALARM_REG, &temp_h);
 800cae6:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 800caea:	4619      	mov	r1, r3
 800caec:	f242 0064 	movw	r0, #8292	; 0x2064
 800caf0:	f00a f89c 	bl	8016c2c <fm25v02_read>
								fm25v02_read(2*LIGHTING_ALARM_REG+1, &temp_l);
 800caf4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800caf8:	4619      	mov	r1, r3
 800cafa:	f242 0065 	movw	r0, #8293	; 0x2065
 800cafe:	f00a f895 	bl	8016c2c <fm25v02_read>
								temp_h = temp_h|0x02;
 800cb02:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800cb06:	b2db      	uxtb	r3, r3
 800cb08:	f043 0302 	orr.w	r3, r3, #2
 800cb0c:	b2db      	uxtb	r3, r3
 800cb0e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
								fm25v02_write(2*LIGHTING_ALARM_REG, temp_h);
 800cb12:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800cb16:	b2db      	uxtb	r3, r3
 800cb18:	4619      	mov	r1, r3
 800cb1a:	f242 0064 	movw	r0, #8292	; 0x2064
 800cb1e:	f00a f8bf 	bl	8016ca0 <fm25v02_write>
								fm25v02_write(2*LIGHTING_ALARM_REG+1, temp_l);
 800cb22:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800cb26:	b2db      	uxtb	r3, r3
 800cb28:	4619      	mov	r1, r3
 800cb2a:	f242 0065 	movw	r0, #8293	; 0x2065
 800cb2e:	f00a f8b7 	bl	8016ca0 <fm25v02_write>
								status_registers.lighting_alarm_reg = (((uint16_t)temp_h)<<8)|temp_l; // если превышение тока длилось 10 циклов, то выставляем бит превышения тока фазы А в регистр аварий
 800cb32:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800cb36:	b2db      	uxtb	r3, r3
 800cb38:	021b      	lsls	r3, r3, #8
 800cb3a:	b21a      	sxth	r2, r3
 800cb3c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800cb40:	b2db      	uxtb	r3, r3
 800cb42:	b21b      	sxth	r3, r3
 800cb44:	4313      	orrs	r3, r2
 800cb46:	b21b      	sxth	r3, r3
 800cb48:	b29a      	uxth	r2, r3
 800cb4a:	4b47      	ldr	r3, [pc, #284]	; (800cc68 <ThreadGetCurrentTask+0x658>)
 800cb4c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

								fm25v02_read(2*LIGHT_CONTROL_REG, &temp_h);
 800cb50:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 800cb54:	4619      	mov	r1, r3
 800cb56:	f242 1082 	movw	r0, #8578	; 0x2182
 800cb5a:	f00a f867 	bl	8016c2c <fm25v02_read>
								fm25v02_read(2*LIGHT_CONTROL_REG+1, &temp_l);
 800cb5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800cb62:	4619      	mov	r1, r3
 800cb64:	f242 1083 	movw	r0, #8579	; 0x2183
 800cb68:	f00a f860 	bl	8016c2c <fm25v02_read>
								temp_l = temp_l&0xFB;
 800cb6c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800cb70:	b2db      	uxtb	r3, r3
 800cb72:	f023 0304 	bic.w	r3, r3, #4
 800cb76:	b2db      	uxtb	r3, r3
 800cb78:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
								fm25v02_write(2*LIGHT_CONTROL_REG, temp_h);
 800cb7c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800cb80:	b2db      	uxtb	r3, r3
 800cb82:	4619      	mov	r1, r3
 800cb84:	f242 1082 	movw	r0, #8578	; 0x2182
 800cb88:	f00a f88a 	bl	8016ca0 <fm25v02_write>
								fm25v02_write(2*LIGHT_CONTROL_REG+1, temp_l);
 800cb8c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800cb90:	b2db      	uxtb	r3, r3
 800cb92:	4619      	mov	r1, r3
 800cb94:	f242 1083 	movw	r0, #8579	; 0x2183
 800cb98:	f00a f882 	bl	8016ca0 <fm25v02_write>
								control_registers.light_control_reg = (((uint16_t)temp_h)<<8)|temp_l;
 800cb9c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800cba0:	b2db      	uxtb	r3, r3
 800cba2:	021b      	lsls	r3, r3, #8
 800cba4:	b21a      	sxth	r2, r3
 800cba6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800cbaa:	b2db      	uxtb	r3, r3
 800cbac:	b21b      	sxth	r3, r3
 800cbae:	4313      	orrs	r3, r2
 800cbb0:	b21b      	sxth	r3, r3
 800cbb2:	b29a      	uxth	r2, r3
 800cbb4:	4b2d      	ldr	r3, [pc, #180]	; (800cc6c <ThreadGetCurrentTask+0x65c>)
 800cbb6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

								osMutexRelease(Fm25v02MutexHandle);
 800cbba:	4b2d      	ldr	r3, [pc, #180]	; (800cc70 <ThreadGetCurrentTask+0x660>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	f7fb fefa 	bl	80089b8 <osMutexRelease>
 800cbc4:	e05a      	b.n	800cc7c <ThreadGetCurrentTask+0x66c>

								//osThreadResume(MainTaskHandle); // запускаем основной поток после проверки превышения значений токов
							}

							else if( ((status_registers.lighting_alarm_reg)&0x0200) == 0x0200 ) // проверяем установлен ли бит превышения тока фазы А
 800cbc6:	4b28      	ldr	r3, [pc, #160]	; (800cc68 <ThreadGetCurrentTask+0x658>)
 800cbc8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800cbcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d053      	beq.n	800cc7c <ThreadGetCurrentTask+0x66c>
							{
								if( (control_registers.light_control_reg)&0x04 )
 800cbd4:	4b25      	ldr	r3, [pc, #148]	; (800cc6c <ThreadGetCurrentTask+0x65c>)
 800cbd6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800cbda:	f003 0304 	and.w	r3, r3, #4
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d04c      	beq.n	800cc7c <ThreadGetCurrentTask+0x66c>
								{
									//osThreadSuspend(MainTaskHandle); // останавливаем на всякий случай основной поток для того чтобы фазы не включились, если будут выключены

									//PHASE_C_OFF(); // отключаем фазу С

									osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800cbe2:	4b23      	ldr	r3, [pc, #140]	; (800cc70 <ThreadGetCurrentTask+0x660>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	f04f 31ff 	mov.w	r1, #4294967295
 800cbea:	4618      	mov	r0, r3
 800cbec:	f7fb fe96 	bl	800891c <osMutexWait>

									fm25v02_read(2*LIGHT_CONTROL_REG, &temp_h);
 800cbf0:	f107 032d 	add.w	r3, r7, #45	; 0x2d
 800cbf4:	4619      	mov	r1, r3
 800cbf6:	f242 1082 	movw	r0, #8578	; 0x2182
 800cbfa:	f00a f817 	bl	8016c2c <fm25v02_read>
									fm25v02_read(2*LIGHT_CONTROL_REG+1, &temp_l);
 800cbfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800cc02:	4619      	mov	r1, r3
 800cc04:	f242 1083 	movw	r0, #8579	; 0x2183
 800cc08:	f00a f810 	bl	8016c2c <fm25v02_read>
									temp_l = temp_l&0xFB;
 800cc0c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800cc10:	b2db      	uxtb	r3, r3
 800cc12:	f023 0304 	bic.w	r3, r3, #4
 800cc16:	b2db      	uxtb	r3, r3
 800cc18:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
									fm25v02_write(2*LIGHT_CONTROL_REG, temp_h);
 800cc1c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800cc20:	b2db      	uxtb	r3, r3
 800cc22:	4619      	mov	r1, r3
 800cc24:	f242 1082 	movw	r0, #8578	; 0x2182
 800cc28:	f00a f83a 	bl	8016ca0 <fm25v02_write>
									fm25v02_write(2*LIGHT_CONTROL_REG+1, temp_l);
 800cc2c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800cc30:	b2db      	uxtb	r3, r3
 800cc32:	4619      	mov	r1, r3
 800cc34:	f242 1083 	movw	r0, #8579	; 0x2183
 800cc38:	f00a f832 	bl	8016ca0 <fm25v02_write>
									control_registers.light_control_reg = (((uint16_t)temp_h)<<8)|temp_l;
 800cc3c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800cc40:	b2db      	uxtb	r3, r3
 800cc42:	021b      	lsls	r3, r3, #8
 800cc44:	b21a      	sxth	r2, r3
 800cc46:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800cc4a:	b2db      	uxtb	r3, r3
 800cc4c:	b21b      	sxth	r3, r3
 800cc4e:	4313      	orrs	r3, r2
 800cc50:	b21b      	sxth	r3, r3
 800cc52:	b29a      	uxth	r2, r3
 800cc54:	4b05      	ldr	r3, [pc, #20]	; (800cc6c <ThreadGetCurrentTask+0x65c>)
 800cc56:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

									osMutexRelease(Fm25v02MutexHandle);
 800cc5a:	4b05      	ldr	r3, [pc, #20]	; (800cc70 <ThreadGetCurrentTask+0x660>)
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	4618      	mov	r0, r3
 800cc60:	f7fb feaa 	bl	80089b8 <osMutexRelease>
 800cc64:	e00a      	b.n	800cc7c <ThreadGetCurrentTask+0x66c>
 800cc66:	bf00      	nop
 800cc68:	2000a174 	.word	0x2000a174
 800cc6c:	2000a234 	.word	0x2000a234
 800cc70:	20009af8 	.word	0x20009af8
 800cc74:	20009940 	.word	0x20009940

					}

					else
					{
						overcurrent_phase_c_state = 0;
 800cc78:	2300      	movs	r3, #0
 800cc7a:	85fb      	strh	r3, [r7, #46]	; 0x2e

				//}

//----контроль фаз, двери и каскада---------------------------------------------------------------------------------------------------------------------

				if( HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_4) == GPIO_PIN_RESET ) // если нет наличия фазы А1
 800cc7c:	2110      	movs	r1, #16
 800cc7e:	4852      	ldr	r0, [pc, #328]	; (800cdc8 <ThreadGetCurrentTask+0x7b8>)
 800cc80:	f7f7 f8d6 	bl	8003e30 <HAL_GPIO_ReadPin>
 800cc84:	4603      	mov	r3, r0
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	f040 80a6 	bne.w	800cdd8 <ThreadGetCurrentTask+0x7c8>
				{
					if( ((control_registers.light_control_reg)&0x0001) == 0x0001 ) // если в управляющем регистре освещения выставлен бит включения фазы А
 800cc8c:	4b4f      	ldr	r3, [pc, #316]	; (800cdcc <ThreadGetCurrentTask+0x7bc>)
 800cc8e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800cc92:	f003 0301 	and.w	r3, r3, #1
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d045      	beq.n	800cd26 <ThreadGetCurrentTask+0x716>
					{
						if(phase_a1_alarm_state<3000)
 800cc9a:	8b3b      	ldrh	r3, [r7, #24]
 800cc9c:	b29b      	uxth	r3, r3
 800cc9e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800cca2:	4293      	cmp	r3, r2
 800cca4:	d83f      	bhi.n	800cd26 <ThreadGetCurrentTask+0x716>
						{
							phase_a1_alarm_state++;
 800cca6:	8b3b      	ldrh	r3, [r7, #24]
 800cca8:	b29b      	uxth	r3, r3
 800ccaa:	3301      	adds	r3, #1
 800ccac:	b29b      	uxth	r3, r3
 800ccae:	833b      	strh	r3, [r7, #24]

							if(phase_a1_alarm_state==3000)
 800ccb0:	8b3b      	ldrh	r3, [r7, #24]
 800ccb2:	b29b      	uxth	r3, r3
 800ccb4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800ccb8:	4293      	cmp	r3, r2
 800ccba:	d134      	bne.n	800cd26 <ThreadGetCurrentTask+0x716>
							{
								phase_a1_alarm_state = 0;
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	833b      	strh	r3, [r7, #24]

								if( ((status_registers.lighting_alarm_reg)&0x0001) == 0x0000 ) // проверяем наличие бита аварии фазы А1, если бит не выставлен, устанавливаем бит
 800ccc0:	4b43      	ldr	r3, [pc, #268]	; (800cdd0 <ThreadGetCurrentTask+0x7c0>)
 800ccc2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ccc6:	f003 0301 	and.w	r3, r3, #1
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d12b      	bne.n	800cd26 <ThreadGetCurrentTask+0x716>
								{
									osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800ccce:	4b41      	ldr	r3, [pc, #260]	; (800cdd4 <ThreadGetCurrentTask+0x7c4>)
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	f04f 31ff 	mov.w	r1, #4294967295
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f7fb fe20 	bl	800891c <osMutexWait>
									fm25v02_read(2*LIGHTING_ALARM_REG+1, &phase_temp); // читаем значение из старшего байта регистра аварий освещения
 800ccdc:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800cce0:	4619      	mov	r1, r3
 800cce2:	f242 0065 	movw	r0, #8293	; 0x2065
 800cce6:	f009 ffa1 	bl	8016c2c <fm25v02_read>
									phase_temp = phase_temp|0x01; // устанавливаем 0-й бит статуса фазы А1
 800ccea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ccee:	b2db      	uxtb	r3, r3
 800ccf0:	f043 0301 	orr.w	r3, r3, #1
 800ccf4:	b2db      	uxtb	r3, r3
 800ccf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
									fm25v02_write(2*LIGHTING_ALARM_REG+1, phase_temp); // записываем младший байт регистра аварий освещения
 800ccfa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ccfe:	b2db      	uxtb	r3, r3
 800cd00:	4619      	mov	r1, r3
 800cd02:	f242 0065 	movw	r0, #8293	; 0x2065
 800cd06:	f009 ffcb 	bl	8016ca0 <fm25v02_write>
									status_registers.lighting_alarm_reg = status_registers.lighting_alarm_reg|0x0001; // выставляем бит аварии фазы А1 в переменной регистра аварий освещения
 800cd0a:	4b31      	ldr	r3, [pc, #196]	; (800cdd0 <ThreadGetCurrentTask+0x7c0>)
 800cd0c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800cd10:	f043 0301 	orr.w	r3, r3, #1
 800cd14:	b29a      	uxth	r2, r3
 800cd16:	4b2e      	ldr	r3, [pc, #184]	; (800cdd0 <ThreadGetCurrentTask+0x7c0>)
 800cd18:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
									osMutexRelease(Fm25v02MutexHandle);
 800cd1c:	4b2d      	ldr	r3, [pc, #180]	; (800cdd4 <ThreadGetCurrentTask+0x7c4>)
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	4618      	mov	r0, r3
 800cd22:	f7fb fe49 	bl	80089b8 <osMutexRelease>

							}
						}
					}

					phase_a1_on_state = 0;
 800cd26:	2300      	movs	r3, #0
 800cd28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

					if(phase_a1_off_state<200)
 800cd2c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800cd30:	b2db      	uxtb	r3, r3
 800cd32:	2bc7      	cmp	r3, #199	; 0xc7
 800cd34:	f200 80a5 	bhi.w	800ce82 <ThreadGetCurrentTask+0x872>
					{
						phase_a1_off_state++;
 800cd38:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800cd3c:	b2db      	uxtb	r3, r3
 800cd3e:	3301      	adds	r3, #1
 800cd40:	b2db      	uxtb	r3, r3
 800cd42:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

						if(phase_a1_off_state >= 200)
 800cd46:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800cd4a:	b2db      	uxtb	r3, r3
 800cd4c:	2bc7      	cmp	r3, #199	; 0xc7
 800cd4e:	f240 8098 	bls.w	800ce82 <ThreadGetCurrentTask+0x872>
						{
							phase_a1_off_state = 0;
 800cd52:	2300      	movs	r3, #0
 800cd54:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
							if( ((status_registers.lighting_status_reg)&0x0001) == 0x0001 )
 800cd58:	4b1d      	ldr	r3, [pc, #116]	; (800cdd0 <ThreadGetCurrentTask+0x7c0>)
 800cd5a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cd5e:	f003 0301 	and.w	r3, r3, #1
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	f000 808d 	beq.w	800ce82 <ThreadGetCurrentTask+0x872>
							{
								osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800cd68:	4b1a      	ldr	r3, [pc, #104]	; (800cdd4 <ThreadGetCurrentTask+0x7c4>)
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	f04f 31ff 	mov.w	r1, #4294967295
 800cd70:	4618      	mov	r0, r3
 800cd72:	f7fb fdd3 	bl	800891c <osMutexWait>
								fm25v02_read(2*LIGHTING_STATUS_REG+1, &phase_temp);
 800cd76:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800cd7a:	4619      	mov	r1, r3
 800cd7c:	f242 0063 	movw	r0, #8291	; 0x2063
 800cd80:	f009 ff54 	bl	8016c2c <fm25v02_read>
								phase_temp = phase_temp&0xFE;
 800cd84:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cd88:	b2db      	uxtb	r3, r3
 800cd8a:	f023 0301 	bic.w	r3, r3, #1
 800cd8e:	b2db      	uxtb	r3, r3
 800cd90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
								fm25v02_write(2*LIGHTING_STATUS_REG+1, phase_temp);
 800cd94:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cd98:	b2db      	uxtb	r3, r3
 800cd9a:	4619      	mov	r1, r3
 800cd9c:	f242 0063 	movw	r0, #8291	; 0x2063
 800cda0:	f009 ff7e 	bl	8016ca0 <fm25v02_write>
								status_registers.lighting_status_reg = status_registers.lighting_status_reg&0xFFFE;
 800cda4:	4b0a      	ldr	r3, [pc, #40]	; (800cdd0 <ThreadGetCurrentTask+0x7c0>)
 800cda6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cdaa:	f023 0301 	bic.w	r3, r3, #1
 800cdae:	b29a      	uxth	r2, r3
 800cdb0:	4b07      	ldr	r3, [pc, #28]	; (800cdd0 <ThreadGetCurrentTask+0x7c0>)
 800cdb2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
								osMutexRelease(Fm25v02MutexHandle);
 800cdb6:	4b07      	ldr	r3, [pc, #28]	; (800cdd4 <ThreadGetCurrentTask+0x7c4>)
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	4618      	mov	r0, r3
 800cdbc:	f7fb fdfc 	bl	80089b8 <osMutexRelease>
								LED3_OFF();
 800cdc0:	f00a f870 	bl	8016ea4 <LED3_OFF>
 800cdc4:	e05d      	b.n	800ce82 <ThreadGetCurrentTask+0x872>
 800cdc6:	bf00      	nop
 800cdc8:	40021c00 	.word	0x40021c00
 800cdcc:	2000a234 	.word	0x2000a234
 800cdd0:	2000a174 	.word	0x2000a174
 800cdd4:	20009af8 	.word	0x20009af8
						}
					}

				}

				else if(HAL_GPIO_ReadPin(GPIOH, GPIO_PIN_4) == GPIO_PIN_SET) // если есть наличие фазы А1
 800cdd8:	2110      	movs	r1, #16
 800cdda:	4880      	ldr	r0, [pc, #512]	; (800cfdc <ThreadGetCurrentTask+0x9cc>)
 800cddc:	f7f7 f828 	bl	8003e30 <HAL_GPIO_ReadPin>
 800cde0:	4603      	mov	r3, r0
 800cde2:	2b01      	cmp	r3, #1
 800cde4:	d14d      	bne.n	800ce82 <ThreadGetCurrentTask+0x872>
				{
					phase_a1_alarm_state = 0;
 800cde6:	2300      	movs	r3, #0
 800cde8:	833b      	strh	r3, [r7, #24]
					phase_a1_off_state = 0;
 800cdea:	2300      	movs	r3, #0
 800cdec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

					if(phase_a1_on_state<5)
 800cdf0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800cdf4:	b2db      	uxtb	r3, r3
 800cdf6:	2b04      	cmp	r3, #4
 800cdf8:	d843      	bhi.n	800ce82 <ThreadGetCurrentTask+0x872>
					{
						phase_a1_on_state++;
 800cdfa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800cdfe:	b2db      	uxtb	r3, r3
 800ce00:	3301      	adds	r3, #1
 800ce02:	b2db      	uxtb	r3, r3
 800ce04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
						if(phase_a1_on_state>=5)
 800ce08:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ce0c:	b2db      	uxtb	r3, r3
 800ce0e:	2b04      	cmp	r3, #4
 800ce10:	d937      	bls.n	800ce82 <ThreadGetCurrentTask+0x872>
						{

							phase_a1_on_state = 0; // выставляем среднее значение между 0 и 10
 800ce12:	2300      	movs	r3, #0
 800ce14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

							if( ((status_registers.lighting_status_reg)&0x0001) == 0x0000 )
 800ce18:	4b71      	ldr	r3, [pc, #452]	; (800cfe0 <ThreadGetCurrentTask+0x9d0>)
 800ce1a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ce1e:	f003 0301 	and.w	r3, r3, #1
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d12d      	bne.n	800ce82 <ThreadGetCurrentTask+0x872>
							{
								osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800ce26:	4b6f      	ldr	r3, [pc, #444]	; (800cfe4 <ThreadGetCurrentTask+0x9d4>)
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	f04f 31ff 	mov.w	r1, #4294967295
 800ce2e:	4618      	mov	r0, r3
 800ce30:	f7fb fd74 	bl	800891c <osMutexWait>
								fm25v02_read(2*LIGHTING_STATUS_REG+1, &phase_temp); // читаем значение регистра статуса освещения
 800ce34:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800ce38:	4619      	mov	r1, r3
 800ce3a:	f242 0063 	movw	r0, #8291	; 0x2063
 800ce3e:	f009 fef5 	bl	8016c2c <fm25v02_read>
								phase_temp = phase_temp|0x01; // устанавливаем 0-й бит статуса фазы А1
 800ce42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ce46:	b2db      	uxtb	r3, r3
 800ce48:	f043 0301 	orr.w	r3, r3, #1
 800ce4c:	b2db      	uxtb	r3, r3
 800ce4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
								fm25v02_write(2*LIGHTING_STATUS_REG+1, phase_temp); // записываем младший байт регистра статуса освещения
 800ce52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ce56:	b2db      	uxtb	r3, r3
 800ce58:	4619      	mov	r1, r3
 800ce5a:	f242 0063 	movw	r0, #8291	; 0x2063
 800ce5e:	f009 ff1f 	bl	8016ca0 <fm25v02_write>
								status_registers.lighting_status_reg = status_registers.lighting_status_reg|0x0001; // выставляем бит фазы А1 в переменной регистра статуса освещения
 800ce62:	4b5f      	ldr	r3, [pc, #380]	; (800cfe0 <ThreadGetCurrentTask+0x9d0>)
 800ce64:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ce68:	f043 0301 	orr.w	r3, r3, #1
 800ce6c:	b29a      	uxth	r2, r3
 800ce6e:	4b5c      	ldr	r3, [pc, #368]	; (800cfe0 <ThreadGetCurrentTask+0x9d0>)
 800ce70:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
								osMutexRelease(Fm25v02MutexHandle);
 800ce74:	4b5b      	ldr	r3, [pc, #364]	; (800cfe4 <ThreadGetCurrentTask+0x9d4>)
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	4618      	mov	r0, r3
 800ce7a:	f7fb fd9d 	bl	80089b8 <osMutexRelease>
								LED3_ON();
 800ce7e:	f00a f81d 	bl	8016ebc <LED3_ON>

					}

				}

				if( HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_11) == GPIO_PIN_RESET ) // если нет наличия фазы А2
 800ce82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ce86:	4858      	ldr	r0, [pc, #352]	; (800cfe8 <ThreadGetCurrentTask+0x9d8>)
 800ce88:	f7f6 ffd2 	bl	8003e30 <HAL_GPIO_ReadPin>
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	f040 80ae 	bne.w	800cff0 <ThreadGetCurrentTask+0x9e0>
				{
					if( (((control_registers.light_control_reg)&0x0010) == 0x0010) && (((control_registers.light_control_reg)&0x0001) == 0x0001) ) // если контроль второй линии включен и если в управляющем регистре освещения выставлен бит включения фазы А
 800ce94:	4b55      	ldr	r3, [pc, #340]	; (800cfec <ThreadGetCurrentTask+0x9dc>)
 800ce96:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ce9a:	f003 0310 	and.w	r3, r3, #16
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d04c      	beq.n	800cf3c <ThreadGetCurrentTask+0x92c>
 800cea2:	4b52      	ldr	r3, [pc, #328]	; (800cfec <ThreadGetCurrentTask+0x9dc>)
 800cea4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800cea8:	f003 0301 	and.w	r3, r3, #1
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d045      	beq.n	800cf3c <ThreadGetCurrentTask+0x92c>
					{
						if(phase_a2_alarm_state<3000)
 800ceb0:	8afb      	ldrh	r3, [r7, #22]
 800ceb2:	b29b      	uxth	r3, r3
 800ceb4:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800ceb8:	4293      	cmp	r3, r2
 800ceba:	d83f      	bhi.n	800cf3c <ThreadGetCurrentTask+0x92c>
						{
							phase_a2_alarm_state++;
 800cebc:	8afb      	ldrh	r3, [r7, #22]
 800cebe:	b29b      	uxth	r3, r3
 800cec0:	3301      	adds	r3, #1
 800cec2:	b29b      	uxth	r3, r3
 800cec4:	82fb      	strh	r3, [r7, #22]
							if(phase_a2_alarm_state==3000)
 800cec6:	8afb      	ldrh	r3, [r7, #22]
 800cec8:	b29b      	uxth	r3, r3
 800ceca:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800cece:	4293      	cmp	r3, r2
 800ced0:	d134      	bne.n	800cf3c <ThreadGetCurrentTask+0x92c>
							{
								phase_a2_alarm_state = 0; // выставляем среднее значение между 0 и 10
 800ced2:	2300      	movs	r3, #0
 800ced4:	82fb      	strh	r3, [r7, #22]

								if( ((status_registers.lighting_alarm_reg)&0x0008) == 0x0000 ) // проверяем наличие бита аварии фазы А1, если бит не выставлен, устанавливаем бит
 800ced6:	4b42      	ldr	r3, [pc, #264]	; (800cfe0 <ThreadGetCurrentTask+0x9d0>)
 800ced8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800cedc:	f003 0308 	and.w	r3, r3, #8
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d12b      	bne.n	800cf3c <ThreadGetCurrentTask+0x92c>
								{
									osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800cee4:	4b3f      	ldr	r3, [pc, #252]	; (800cfe4 <ThreadGetCurrentTask+0x9d4>)
 800cee6:	681b      	ldr	r3, [r3, #0]
 800cee8:	f04f 31ff 	mov.w	r1, #4294967295
 800ceec:	4618      	mov	r0, r3
 800ceee:	f7fb fd15 	bl	800891c <osMutexWait>
									fm25v02_read(2*LIGHTING_ALARM_REG+1, &phase_temp); // читаем значение из старшего байта регистра аварий освещения
 800cef2:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800cef6:	4619      	mov	r1, r3
 800cef8:	f242 0065 	movw	r0, #8293	; 0x2065
 800cefc:	f009 fe96 	bl	8016c2c <fm25v02_read>
									phase_temp = phase_temp|0x08; // устанавливаем 0-й бит статуса фазы А1
 800cf00:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cf04:	b2db      	uxtb	r3, r3
 800cf06:	f043 0308 	orr.w	r3, r3, #8
 800cf0a:	b2db      	uxtb	r3, r3
 800cf0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
									fm25v02_write(2*LIGHTING_ALARM_REG+1, phase_temp); // записываем младший байт регистра аварий освещения
 800cf10:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cf14:	b2db      	uxtb	r3, r3
 800cf16:	4619      	mov	r1, r3
 800cf18:	f242 0065 	movw	r0, #8293	; 0x2065
 800cf1c:	f009 fec0 	bl	8016ca0 <fm25v02_write>
									status_registers.lighting_alarm_reg = status_registers.lighting_alarm_reg|0x0008; // выставляем бит аварии фазы А1 в переменной регистра аварий освещения
 800cf20:	4b2f      	ldr	r3, [pc, #188]	; (800cfe0 <ThreadGetCurrentTask+0x9d0>)
 800cf22:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800cf26:	f043 0308 	orr.w	r3, r3, #8
 800cf2a:	b29a      	uxth	r2, r3
 800cf2c:	4b2c      	ldr	r3, [pc, #176]	; (800cfe0 <ThreadGetCurrentTask+0x9d0>)
 800cf2e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
									osMutexRelease(Fm25v02MutexHandle);
 800cf32:	4b2c      	ldr	r3, [pc, #176]	; (800cfe4 <ThreadGetCurrentTask+0x9d4>)
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	4618      	mov	r0, r3
 800cf38:	f7fb fd3e 	bl	80089b8 <osMutexRelease>

							}
						}
					}

					phase_a2_on_state = 0;
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

					if(phase_a2_off_state<200)
 800cf42:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800cf46:	b2db      	uxtb	r3, r3
 800cf48:	2bc7      	cmp	r3, #199	; 0xc7
 800cf4a:	f200 80a7 	bhi.w	800d09c <ThreadGetCurrentTask+0xa8c>
					{
						phase_a2_off_state++;
 800cf4e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800cf52:	b2db      	uxtb	r3, r3
 800cf54:	3301      	adds	r3, #1
 800cf56:	b2db      	uxtb	r3, r3
 800cf58:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
						if(phase_a2_off_state >= 200)
 800cf5c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800cf60:	b2db      	uxtb	r3, r3
 800cf62:	2bc7      	cmp	r3, #199	; 0xc7
 800cf64:	f240 809a 	bls.w	800d09c <ThreadGetCurrentTask+0xa8c>
						{
							phase_a2_off_state = 0;
 800cf68:	2300      	movs	r3, #0
 800cf6a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
							if( ((status_registers.lighting_status_reg)&0x0008) == 0x0008 )
 800cf6e:	4b1c      	ldr	r3, [pc, #112]	; (800cfe0 <ThreadGetCurrentTask+0x9d0>)
 800cf70:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cf74:	f003 0308 	and.w	r3, r3, #8
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	f000 808f 	beq.w	800d09c <ThreadGetCurrentTask+0xa8c>
							{
								osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800cf7e:	4b19      	ldr	r3, [pc, #100]	; (800cfe4 <ThreadGetCurrentTask+0x9d4>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	f04f 31ff 	mov.w	r1, #4294967295
 800cf86:	4618      	mov	r0, r3
 800cf88:	f7fb fcc8 	bl	800891c <osMutexWait>
								fm25v02_read(2*LIGHTING_STATUS_REG+1, &phase_temp);
 800cf8c:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800cf90:	4619      	mov	r1, r3
 800cf92:	f242 0063 	movw	r0, #8291	; 0x2063
 800cf96:	f009 fe49 	bl	8016c2c <fm25v02_read>
								phase_temp = phase_temp&0xF7;
 800cf9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cf9e:	b2db      	uxtb	r3, r3
 800cfa0:	f023 0308 	bic.w	r3, r3, #8
 800cfa4:	b2db      	uxtb	r3, r3
 800cfa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
								fm25v02_write(2*LIGHTING_STATUS_REG+1, phase_temp);
 800cfaa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800cfae:	b2db      	uxtb	r3, r3
 800cfb0:	4619      	mov	r1, r3
 800cfb2:	f242 0063 	movw	r0, #8291	; 0x2063
 800cfb6:	f009 fe73 	bl	8016ca0 <fm25v02_write>
								status_registers.lighting_status_reg = status_registers.lighting_status_reg&0xFFF7;
 800cfba:	4b09      	ldr	r3, [pc, #36]	; (800cfe0 <ThreadGetCurrentTask+0x9d0>)
 800cfbc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800cfc0:	f023 0308 	bic.w	r3, r3, #8
 800cfc4:	b29a      	uxth	r2, r3
 800cfc6:	4b06      	ldr	r3, [pc, #24]	; (800cfe0 <ThreadGetCurrentTask+0x9d0>)
 800cfc8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
								osMutexRelease(Fm25v02MutexHandle);
 800cfcc:	4b05      	ldr	r3, [pc, #20]	; (800cfe4 <ThreadGetCurrentTask+0x9d4>)
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	f7fb fcf1 	bl	80089b8 <osMutexRelease>
								LED6_OFF();
 800cfd6:	f009 ffad 	bl	8016f34 <LED6_OFF>
 800cfda:	e05f      	b.n	800d09c <ThreadGetCurrentTask+0xa8c>
 800cfdc:	40021c00 	.word	0x40021c00
 800cfe0:	2000a174 	.word	0x2000a174
 800cfe4:	20009af8 	.word	0x20009af8
 800cfe8:	40021400 	.word	0x40021400
 800cfec:	2000a234 	.word	0x2000a234
							}
						}
					}

				}
				else if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_11) == GPIO_PIN_SET) // если есть наличие фазы А2
 800cff0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800cff4:	487c      	ldr	r0, [pc, #496]	; (800d1e8 <ThreadGetCurrentTask+0xbd8>)
 800cff6:	f7f6 ff1b 	bl	8003e30 <HAL_GPIO_ReadPin>
 800cffa:	4603      	mov	r3, r0
 800cffc:	2b01      	cmp	r3, #1
 800cffe:	d14d      	bne.n	800d09c <ThreadGetCurrentTask+0xa8c>
				{

					phase_a2_alarm_state = 0;
 800d000:	2300      	movs	r3, #0
 800d002:	82fb      	strh	r3, [r7, #22]
					phase_a2_off_state = 0;
 800d004:	2300      	movs	r3, #0
 800d006:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

					if(phase_a2_on_state<5)
 800d00a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800d00e:	b2db      	uxtb	r3, r3
 800d010:	2b04      	cmp	r3, #4
 800d012:	d843      	bhi.n	800d09c <ThreadGetCurrentTask+0xa8c>
					{
						phase_a2_on_state++;
 800d014:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800d018:	b2db      	uxtb	r3, r3
 800d01a:	3301      	adds	r3, #1
 800d01c:	b2db      	uxtb	r3, r3
 800d01e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
						if(phase_a2_on_state>=5)
 800d022:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800d026:	b2db      	uxtb	r3, r3
 800d028:	2b04      	cmp	r3, #4
 800d02a:	d937      	bls.n	800d09c <ThreadGetCurrentTask+0xa8c>
						{

							phase_a2_on_state = 0; // выставляем среднее значение между 0 и 10
 800d02c:	2300      	movs	r3, #0
 800d02e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

							if( ((status_registers.lighting_status_reg)&0x0008) == 0x0000 )
 800d032:	4b6e      	ldr	r3, [pc, #440]	; (800d1ec <ThreadGetCurrentTask+0xbdc>)
 800d034:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d038:	f003 0308 	and.w	r3, r3, #8
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d12d      	bne.n	800d09c <ThreadGetCurrentTask+0xa8c>
							{
								osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800d040:	4b6b      	ldr	r3, [pc, #428]	; (800d1f0 <ThreadGetCurrentTask+0xbe0>)
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	f04f 31ff 	mov.w	r1, #4294967295
 800d048:	4618      	mov	r0, r3
 800d04a:	f7fb fc67 	bl	800891c <osMutexWait>
								fm25v02_read(2*LIGHTING_STATUS_REG+1, &phase_temp); // читаем значение регистра статуса освещения
 800d04e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800d052:	4619      	mov	r1, r3
 800d054:	f242 0063 	movw	r0, #8291	; 0x2063
 800d058:	f009 fde8 	bl	8016c2c <fm25v02_read>
								phase_temp = phase_temp|0x08; // устанавливаем 0-й бит статуса фазы А1
 800d05c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d060:	b2db      	uxtb	r3, r3
 800d062:	f043 0308 	orr.w	r3, r3, #8
 800d066:	b2db      	uxtb	r3, r3
 800d068:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
								fm25v02_write(2*LIGHTING_STATUS_REG+1, phase_temp); // записываем младший байт регистра статуса освещения
 800d06c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d070:	b2db      	uxtb	r3, r3
 800d072:	4619      	mov	r1, r3
 800d074:	f242 0063 	movw	r0, #8291	; 0x2063
 800d078:	f009 fe12 	bl	8016ca0 <fm25v02_write>
								status_registers.lighting_status_reg = status_registers.lighting_status_reg|0x0008; // выставляем бит фазы А1 в переменной регистра статуса освещения
 800d07c:	4b5b      	ldr	r3, [pc, #364]	; (800d1ec <ThreadGetCurrentTask+0xbdc>)
 800d07e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d082:	f043 0308 	orr.w	r3, r3, #8
 800d086:	b29a      	uxth	r2, r3
 800d088:	4b58      	ldr	r3, [pc, #352]	; (800d1ec <ThreadGetCurrentTask+0xbdc>)
 800d08a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
								osMutexRelease(Fm25v02MutexHandle);
 800d08e:	4b58      	ldr	r3, [pc, #352]	; (800d1f0 <ThreadGetCurrentTask+0xbe0>)
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	4618      	mov	r0, r3
 800d094:	f7fb fc90 	bl	80089b8 <osMutexRelease>
								LED6_ON();
 800d098:	f009 ff58 	bl	8016f4c <LED6_ON>
					}

				}


				if( HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_12) == GPIO_PIN_RESET ) // если нет наличия фазы В1
 800d09c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d0a0:	4851      	ldr	r0, [pc, #324]	; (800d1e8 <ThreadGetCurrentTask+0xbd8>)
 800d0a2:	f7f6 fec5 	bl	8003e30 <HAL_GPIO_ReadPin>
 800d0a6:	4603      	mov	r3, r0
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	f040 80a5 	bne.w	800d1f8 <ThreadGetCurrentTask+0xbe8>
				{
					if( ((control_registers.light_control_reg)&0x0002) == 0x0002 ) // если в управляющем регистре освещения выставлен бит включения фазы В
 800d0ae:	4b51      	ldr	r3, [pc, #324]	; (800d1f4 <ThreadGetCurrentTask+0xbe4>)
 800d0b0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d0b4:	f003 0302 	and.w	r3, r3, #2
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d045      	beq.n	800d148 <ThreadGetCurrentTask+0xb38>
					{
						if(phase_b1_alarm_state<3000)
 800d0bc:	8abb      	ldrh	r3, [r7, #20]
 800d0be:	b29b      	uxth	r3, r3
 800d0c0:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800d0c4:	4293      	cmp	r3, r2
 800d0c6:	d83f      	bhi.n	800d148 <ThreadGetCurrentTask+0xb38>
						{
							phase_b1_alarm_state++;
 800d0c8:	8abb      	ldrh	r3, [r7, #20]
 800d0ca:	b29b      	uxth	r3, r3
 800d0cc:	3301      	adds	r3, #1
 800d0ce:	b29b      	uxth	r3, r3
 800d0d0:	82bb      	strh	r3, [r7, #20]
							if(phase_b1_alarm_state==3000)
 800d0d2:	8abb      	ldrh	r3, [r7, #20]
 800d0d4:	b29b      	uxth	r3, r3
 800d0d6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800d0da:	4293      	cmp	r3, r2
 800d0dc:	d134      	bne.n	800d148 <ThreadGetCurrentTask+0xb38>
							{
								phase_b1_alarm_state = 0; // выставляем среднее значение между 0 и 10
 800d0de:	2300      	movs	r3, #0
 800d0e0:	82bb      	strh	r3, [r7, #20]

								if( ((status_registers.lighting_alarm_reg)&0x0002) == 0x0000 ) // проверяем наличие бита аварии фазы А1, если бит не выставлен, устанавливаем бит
 800d0e2:	4b42      	ldr	r3, [pc, #264]	; (800d1ec <ThreadGetCurrentTask+0xbdc>)
 800d0e4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d0e8:	f003 0302 	and.w	r3, r3, #2
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d12b      	bne.n	800d148 <ThreadGetCurrentTask+0xb38>
								{
									osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800d0f0:	4b3f      	ldr	r3, [pc, #252]	; (800d1f0 <ThreadGetCurrentTask+0xbe0>)
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	f04f 31ff 	mov.w	r1, #4294967295
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	f7fb fc0f 	bl	800891c <osMutexWait>
									fm25v02_read(2*LIGHTING_ALARM_REG+1, &phase_temp); // читаем значение из старшего байта регистра аварий освещения
 800d0fe:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800d102:	4619      	mov	r1, r3
 800d104:	f242 0065 	movw	r0, #8293	; 0x2065
 800d108:	f009 fd90 	bl	8016c2c <fm25v02_read>
									phase_temp = phase_temp|0x02; // устанавливаем 0-й бит статуса фазы А1
 800d10c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d110:	b2db      	uxtb	r3, r3
 800d112:	f043 0302 	orr.w	r3, r3, #2
 800d116:	b2db      	uxtb	r3, r3
 800d118:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
									fm25v02_write(2*LIGHTING_ALARM_REG+1, phase_temp); // записываем младший байт регистра аварий освещения
 800d11c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d120:	b2db      	uxtb	r3, r3
 800d122:	4619      	mov	r1, r3
 800d124:	f242 0065 	movw	r0, #8293	; 0x2065
 800d128:	f009 fdba 	bl	8016ca0 <fm25v02_write>
									status_registers.lighting_alarm_reg = status_registers.lighting_alarm_reg|0x0002; // выставляем бит аварии фазы А1 в переменной регистра аварий освещения
 800d12c:	4b2f      	ldr	r3, [pc, #188]	; (800d1ec <ThreadGetCurrentTask+0xbdc>)
 800d12e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d132:	f043 0302 	orr.w	r3, r3, #2
 800d136:	b29a      	uxth	r2, r3
 800d138:	4b2c      	ldr	r3, [pc, #176]	; (800d1ec <ThreadGetCurrentTask+0xbdc>)
 800d13a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
									osMutexRelease(Fm25v02MutexHandle);
 800d13e:	4b2c      	ldr	r3, [pc, #176]	; (800d1f0 <ThreadGetCurrentTask+0xbe0>)
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	4618      	mov	r0, r3
 800d144:	f7fb fc38 	bl	80089b8 <osMutexRelease>

							}
						}
					}

					phase_b1_on_state = 0;
 800d148:	2300      	movs	r3, #0
 800d14a:	f887 3020 	strb.w	r3, [r7, #32]

					if(phase_b1_off_state<200)
 800d14e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d152:	b2db      	uxtb	r3, r3
 800d154:	2bc7      	cmp	r3, #199	; 0xc7
 800d156:	f200 80a5 	bhi.w	800d2a4 <ThreadGetCurrentTask+0xc94>
					{
						phase_b1_off_state++;
 800d15a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d15e:	b2db      	uxtb	r3, r3
 800d160:	3301      	adds	r3, #1
 800d162:	b2db      	uxtb	r3, r3
 800d164:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
						if(phase_b1_off_state >= 200)
 800d168:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d16c:	b2db      	uxtb	r3, r3
 800d16e:	2bc7      	cmp	r3, #199	; 0xc7
 800d170:	f240 8098 	bls.w	800d2a4 <ThreadGetCurrentTask+0xc94>
						{
							phase_b1_off_state = 0;
 800d174:	2300      	movs	r3, #0
 800d176:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
							if( ((status_registers.lighting_status_reg)&0x0002) == 0x0002 )
 800d17a:	4b1c      	ldr	r3, [pc, #112]	; (800d1ec <ThreadGetCurrentTask+0xbdc>)
 800d17c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d180:	f003 0302 	and.w	r3, r3, #2
 800d184:	2b00      	cmp	r3, #0
 800d186:	f000 808d 	beq.w	800d2a4 <ThreadGetCurrentTask+0xc94>
							{
								osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800d18a:	4b19      	ldr	r3, [pc, #100]	; (800d1f0 <ThreadGetCurrentTask+0xbe0>)
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	f04f 31ff 	mov.w	r1, #4294967295
 800d192:	4618      	mov	r0, r3
 800d194:	f7fb fbc2 	bl	800891c <osMutexWait>
								fm25v02_read(2*LIGHTING_STATUS_REG+1, &phase_temp);
 800d198:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800d19c:	4619      	mov	r1, r3
 800d19e:	f242 0063 	movw	r0, #8291	; 0x2063
 800d1a2:	f009 fd43 	bl	8016c2c <fm25v02_read>
								phase_temp = phase_temp&0xFD;
 800d1a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d1aa:	b2db      	uxtb	r3, r3
 800d1ac:	f023 0302 	bic.w	r3, r3, #2
 800d1b0:	b2db      	uxtb	r3, r3
 800d1b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
								fm25v02_write(2*LIGHTING_STATUS_REG+1, phase_temp);
 800d1b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d1ba:	b2db      	uxtb	r3, r3
 800d1bc:	4619      	mov	r1, r3
 800d1be:	f242 0063 	movw	r0, #8291	; 0x2063
 800d1c2:	f009 fd6d 	bl	8016ca0 <fm25v02_write>
								status_registers.lighting_status_reg = status_registers.lighting_status_reg&0xFFFD;
 800d1c6:	4b09      	ldr	r3, [pc, #36]	; (800d1ec <ThreadGetCurrentTask+0xbdc>)
 800d1c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d1cc:	f023 0302 	bic.w	r3, r3, #2
 800d1d0:	b29a      	uxth	r2, r3
 800d1d2:	4b06      	ldr	r3, [pc, #24]	; (800d1ec <ThreadGetCurrentTask+0xbdc>)
 800d1d4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
								osMutexRelease(Fm25v02MutexHandle);
 800d1d8:	4b05      	ldr	r3, [pc, #20]	; (800d1f0 <ThreadGetCurrentTask+0xbe0>)
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	4618      	mov	r0, r3
 800d1de:	f7fb fbeb 	bl	80089b8 <osMutexRelease>
								LED4_OFF();
 800d1e2:	f009 fe77 	bl	8016ed4 <LED4_OFF>
 800d1e6:	e05d      	b.n	800d2a4 <ThreadGetCurrentTask+0xc94>
 800d1e8:	40021400 	.word	0x40021400
 800d1ec:	2000a174 	.word	0x2000a174
 800d1f0:	20009af8 	.word	0x20009af8
 800d1f4:	2000a234 	.word	0x2000a234
							}
						}
					}
				}
				else if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_12) == GPIO_PIN_SET) // если есть наличие фазы В1
 800d1f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800d1fc:	487f      	ldr	r0, [pc, #508]	; (800d3fc <ThreadGetCurrentTask+0xdec>)
 800d1fe:	f7f6 fe17 	bl	8003e30 <HAL_GPIO_ReadPin>
 800d202:	4603      	mov	r3, r0
 800d204:	2b01      	cmp	r3, #1
 800d206:	d14d      	bne.n	800d2a4 <ThreadGetCurrentTask+0xc94>
				{
					phase_b1_alarm_state = 0;
 800d208:	2300      	movs	r3, #0
 800d20a:	82bb      	strh	r3, [r7, #20]
					phase_b1_off_state = 0;
 800d20c:	2300      	movs	r3, #0
 800d20e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

					if(phase_b1_on_state<5)
 800d212:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d216:	b2db      	uxtb	r3, r3
 800d218:	2b04      	cmp	r3, #4
 800d21a:	d843      	bhi.n	800d2a4 <ThreadGetCurrentTask+0xc94>
					{
						phase_b1_on_state++;
 800d21c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d220:	b2db      	uxtb	r3, r3
 800d222:	3301      	adds	r3, #1
 800d224:	b2db      	uxtb	r3, r3
 800d226:	f887 3020 	strb.w	r3, [r7, #32]
						if(phase_b1_on_state>=5)
 800d22a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d22e:	b2db      	uxtb	r3, r3
 800d230:	2b04      	cmp	r3, #4
 800d232:	d937      	bls.n	800d2a4 <ThreadGetCurrentTask+0xc94>
						{

							phase_b1_on_state = 0; // выставляем среднее значение между 0 и 10
 800d234:	2300      	movs	r3, #0
 800d236:	f887 3020 	strb.w	r3, [r7, #32]

							if( ((status_registers.lighting_status_reg)&0x0002) == 0x0000 )
 800d23a:	4b71      	ldr	r3, [pc, #452]	; (800d400 <ThreadGetCurrentTask+0xdf0>)
 800d23c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d240:	f003 0302 	and.w	r3, r3, #2
 800d244:	2b00      	cmp	r3, #0
 800d246:	d12d      	bne.n	800d2a4 <ThreadGetCurrentTask+0xc94>
							{
								osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800d248:	4b6e      	ldr	r3, [pc, #440]	; (800d404 <ThreadGetCurrentTask+0xdf4>)
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	f04f 31ff 	mov.w	r1, #4294967295
 800d250:	4618      	mov	r0, r3
 800d252:	f7fb fb63 	bl	800891c <osMutexWait>
								fm25v02_read(2*LIGHTING_STATUS_REG+1, &phase_temp); // читаем значение регистра статуса освещения
 800d256:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800d25a:	4619      	mov	r1, r3
 800d25c:	f242 0063 	movw	r0, #8291	; 0x2063
 800d260:	f009 fce4 	bl	8016c2c <fm25v02_read>
								phase_temp = phase_temp|0x02; // устанавливаем 0-й бит статуса фазы А1
 800d264:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d268:	b2db      	uxtb	r3, r3
 800d26a:	f043 0302 	orr.w	r3, r3, #2
 800d26e:	b2db      	uxtb	r3, r3
 800d270:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
								fm25v02_write(2*LIGHTING_STATUS_REG+1, phase_temp); // записываем младший байт регистра статуса освещения
 800d274:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d278:	b2db      	uxtb	r3, r3
 800d27a:	4619      	mov	r1, r3
 800d27c:	f242 0063 	movw	r0, #8291	; 0x2063
 800d280:	f009 fd0e 	bl	8016ca0 <fm25v02_write>
								status_registers.lighting_status_reg = status_registers.lighting_status_reg|0x0002; // выставляем бит фазы А1 в переменной регистра статуса освещения
 800d284:	4b5e      	ldr	r3, [pc, #376]	; (800d400 <ThreadGetCurrentTask+0xdf0>)
 800d286:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d28a:	f043 0302 	orr.w	r3, r3, #2
 800d28e:	b29a      	uxth	r2, r3
 800d290:	4b5b      	ldr	r3, [pc, #364]	; (800d400 <ThreadGetCurrentTask+0xdf0>)
 800d292:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
								osMutexRelease(Fm25v02MutexHandle);
 800d296:	4b5b      	ldr	r3, [pc, #364]	; (800d404 <ThreadGetCurrentTask+0xdf4>)
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	4618      	mov	r0, r3
 800d29c:	f7fb fb8c 	bl	80089b8 <osMutexRelease>
								LED4_ON();
 800d2a0:	f009 fe24 	bl	8016eec <LED4_ON>

						}
					}
				}

				if( HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_13) == GPIO_PIN_RESET ) // если нет наличия фазы В2
 800d2a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d2a8:	4854      	ldr	r0, [pc, #336]	; (800d3fc <ThreadGetCurrentTask+0xdec>)
 800d2aa:	f7f6 fdc1 	bl	8003e30 <HAL_GPIO_ReadPin>
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	f040 80ab 	bne.w	800d40c <ThreadGetCurrentTask+0xdfc>
				{
					if( (((control_registers.light_control_reg)&0x0010) == 0x0010) && (((control_registers.light_control_reg)&0x0002) == 0x0002) ) // если контроль второй линии включен и если в управляющем регистре освещения выставлен бит включения фазы В
 800d2b6:	4b54      	ldr	r3, [pc, #336]	; (800d408 <ThreadGetCurrentTask+0xdf8>)
 800d2b8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d2bc:	f003 0310 	and.w	r3, r3, #16
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d04c      	beq.n	800d35e <ThreadGetCurrentTask+0xd4e>
 800d2c4:	4b50      	ldr	r3, [pc, #320]	; (800d408 <ThreadGetCurrentTask+0xdf8>)
 800d2c6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d2ca:	f003 0302 	and.w	r3, r3, #2
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d045      	beq.n	800d35e <ThreadGetCurrentTask+0xd4e>
					{
						if(phase_b2_alarm_state<3000)
 800d2d2:	8a7b      	ldrh	r3, [r7, #18]
 800d2d4:	b29b      	uxth	r3, r3
 800d2d6:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800d2da:	4293      	cmp	r3, r2
 800d2dc:	d83f      	bhi.n	800d35e <ThreadGetCurrentTask+0xd4e>
						{
							phase_b2_alarm_state++;
 800d2de:	8a7b      	ldrh	r3, [r7, #18]
 800d2e0:	b29b      	uxth	r3, r3
 800d2e2:	3301      	adds	r3, #1
 800d2e4:	b29b      	uxth	r3, r3
 800d2e6:	827b      	strh	r3, [r7, #18]
							if(phase_b2_alarm_state==3000)
 800d2e8:	8a7b      	ldrh	r3, [r7, #18]
 800d2ea:	b29b      	uxth	r3, r3
 800d2ec:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800d2f0:	4293      	cmp	r3, r2
 800d2f2:	d134      	bne.n	800d35e <ThreadGetCurrentTask+0xd4e>
							{
								phase_b2_alarm_state = 0; // выставляем среднее значение между 0 и 10
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	827b      	strh	r3, [r7, #18]

								if( ((status_registers.lighting_alarm_reg)&0x0010) == 0x0000 ) // проверяем наличие бита аварии фазы А1, если бит не выставлен, устанавливаем бит
 800d2f8:	4b41      	ldr	r3, [pc, #260]	; (800d400 <ThreadGetCurrentTask+0xdf0>)
 800d2fa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d2fe:	f003 0310 	and.w	r3, r3, #16
 800d302:	2b00      	cmp	r3, #0
 800d304:	d12b      	bne.n	800d35e <ThreadGetCurrentTask+0xd4e>
								{
									osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800d306:	4b3f      	ldr	r3, [pc, #252]	; (800d404 <ThreadGetCurrentTask+0xdf4>)
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	f04f 31ff 	mov.w	r1, #4294967295
 800d30e:	4618      	mov	r0, r3
 800d310:	f7fb fb04 	bl	800891c <osMutexWait>
									fm25v02_read(2*LIGHTING_ALARM_REG+1, &phase_temp); // читаем значение из старшего байта регистра аварий освещения
 800d314:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800d318:	4619      	mov	r1, r3
 800d31a:	f242 0065 	movw	r0, #8293	; 0x2065
 800d31e:	f009 fc85 	bl	8016c2c <fm25v02_read>
									phase_temp = phase_temp|0x10; // устанавливаем 0-й бит статуса фазы А1
 800d322:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d326:	b2db      	uxtb	r3, r3
 800d328:	f043 0310 	orr.w	r3, r3, #16
 800d32c:	b2db      	uxtb	r3, r3
 800d32e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
									fm25v02_write(2*LIGHTING_ALARM_REG+1, phase_temp); // записываем младший байт регистра аварий освещения
 800d332:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d336:	b2db      	uxtb	r3, r3
 800d338:	4619      	mov	r1, r3
 800d33a:	f242 0065 	movw	r0, #8293	; 0x2065
 800d33e:	f009 fcaf 	bl	8016ca0 <fm25v02_write>
									status_registers.lighting_alarm_reg = status_registers.lighting_alarm_reg|0x0010; // выставляем бит аварии фазы А1 в переменной регистра аварий освещения
 800d342:	4b2f      	ldr	r3, [pc, #188]	; (800d400 <ThreadGetCurrentTask+0xdf0>)
 800d344:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d348:	f043 0310 	orr.w	r3, r3, #16
 800d34c:	b29a      	uxth	r2, r3
 800d34e:	4b2c      	ldr	r3, [pc, #176]	; (800d400 <ThreadGetCurrentTask+0xdf0>)
 800d350:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
									osMutexRelease(Fm25v02MutexHandle);
 800d354:	4b2b      	ldr	r3, [pc, #172]	; (800d404 <ThreadGetCurrentTask+0xdf4>)
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	4618      	mov	r0, r3
 800d35a:	f7fb fb2d 	bl	80089b8 <osMutexRelease>

							}
						}
					}

					phase_b2_on_state = 0;
 800d35e:	2300      	movs	r3, #0
 800d360:	77fb      	strb	r3, [r7, #31]

					if(phase_b2_off_state<200)
 800d362:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d366:	b2db      	uxtb	r3, r3
 800d368:	2bc7      	cmp	r3, #199	; 0xc7
 800d36a:	f200 80a0 	bhi.w	800d4ae <ThreadGetCurrentTask+0xe9e>
					{
						phase_b2_off_state++;
 800d36e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d372:	b2db      	uxtb	r3, r3
 800d374:	3301      	adds	r3, #1
 800d376:	b2db      	uxtb	r3, r3
 800d378:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						if(phase_b2_off_state >= 200)
 800d37c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d380:	b2db      	uxtb	r3, r3
 800d382:	2bc7      	cmp	r3, #199	; 0xc7
 800d384:	f240 8093 	bls.w	800d4ae <ThreadGetCurrentTask+0xe9e>
						{
							phase_b2_off_state = 0;
 800d388:	2300      	movs	r3, #0
 800d38a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
							if( ((status_registers.lighting_status_reg)&0x0010) == 0x0010 )
 800d38e:	4b1c      	ldr	r3, [pc, #112]	; (800d400 <ThreadGetCurrentTask+0xdf0>)
 800d390:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d394:	f003 0310 	and.w	r3, r3, #16
 800d398:	2b00      	cmp	r3, #0
 800d39a:	f000 8088 	beq.w	800d4ae <ThreadGetCurrentTask+0xe9e>
							{
								osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800d39e:	4b19      	ldr	r3, [pc, #100]	; (800d404 <ThreadGetCurrentTask+0xdf4>)
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	f04f 31ff 	mov.w	r1, #4294967295
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	f7fb fab8 	bl	800891c <osMutexWait>
								fm25v02_read(2*LIGHTING_STATUS_REG+1, &phase_temp);
 800d3ac:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800d3b0:	4619      	mov	r1, r3
 800d3b2:	f242 0063 	movw	r0, #8291	; 0x2063
 800d3b6:	f009 fc39 	bl	8016c2c <fm25v02_read>
								phase_temp = phase_temp&0xEF;
 800d3ba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d3be:	b2db      	uxtb	r3, r3
 800d3c0:	f023 0310 	bic.w	r3, r3, #16
 800d3c4:	b2db      	uxtb	r3, r3
 800d3c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
								fm25v02_write(2*LIGHTING_STATUS_REG+1, phase_temp);
 800d3ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d3ce:	b2db      	uxtb	r3, r3
 800d3d0:	4619      	mov	r1, r3
 800d3d2:	f242 0063 	movw	r0, #8291	; 0x2063
 800d3d6:	f009 fc63 	bl	8016ca0 <fm25v02_write>
								status_registers.lighting_status_reg = status_registers.lighting_status_reg&0xFFEF;
 800d3da:	4b09      	ldr	r3, [pc, #36]	; (800d400 <ThreadGetCurrentTask+0xdf0>)
 800d3dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d3e0:	f023 0310 	bic.w	r3, r3, #16
 800d3e4:	b29a      	uxth	r2, r3
 800d3e6:	4b06      	ldr	r3, [pc, #24]	; (800d400 <ThreadGetCurrentTask+0xdf0>)
 800d3e8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
								osMutexRelease(Fm25v02MutexHandle);
 800d3ec:	4b05      	ldr	r3, [pc, #20]	; (800d404 <ThreadGetCurrentTask+0xdf4>)
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	f7fb fae1 	bl	80089b8 <osMutexRelease>
								LED7_OFF();
 800d3f6:	f009 fdb5 	bl	8016f64 <LED7_OFF>
 800d3fa:	e058      	b.n	800d4ae <ThreadGetCurrentTask+0xe9e>
 800d3fc:	40021400 	.word	0x40021400
 800d400:	2000a174 	.word	0x2000a174
 800d404:	20009af8 	.word	0x20009af8
 800d408:	2000a234 	.word	0x2000a234
							}
						}
					}
				}
				else if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_13) == GPIO_PIN_SET) // если есть наличие фазы В2
 800d40c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d410:	4879      	ldr	r0, [pc, #484]	; (800d5f8 <ThreadGetCurrentTask+0xfe8>)
 800d412:	f7f6 fd0d 	bl	8003e30 <HAL_GPIO_ReadPin>
 800d416:	4603      	mov	r3, r0
 800d418:	2b01      	cmp	r3, #1
 800d41a:	d148      	bne.n	800d4ae <ThreadGetCurrentTask+0xe9e>
				{
					phase_b2_alarm_state = 0;
 800d41c:	2300      	movs	r3, #0
 800d41e:	827b      	strh	r3, [r7, #18]
					phase_b2_off_state = 0;
 800d420:	2300      	movs	r3, #0
 800d422:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

					if(phase_b2_on_state<5)
 800d426:	7ffb      	ldrb	r3, [r7, #31]
 800d428:	b2db      	uxtb	r3, r3
 800d42a:	2b04      	cmp	r3, #4
 800d42c:	d83f      	bhi.n	800d4ae <ThreadGetCurrentTask+0xe9e>
					{
						phase_b2_on_state++;
 800d42e:	7ffb      	ldrb	r3, [r7, #31]
 800d430:	b2db      	uxtb	r3, r3
 800d432:	3301      	adds	r3, #1
 800d434:	b2db      	uxtb	r3, r3
 800d436:	77fb      	strb	r3, [r7, #31]
						if(phase_b2_on_state>=5)
 800d438:	7ffb      	ldrb	r3, [r7, #31]
 800d43a:	b2db      	uxtb	r3, r3
 800d43c:	2b04      	cmp	r3, #4
 800d43e:	d936      	bls.n	800d4ae <ThreadGetCurrentTask+0xe9e>
						{

							phase_b2_on_state = 0; // выставляем среднее значение между 0 и 10
 800d440:	2300      	movs	r3, #0
 800d442:	77fb      	strb	r3, [r7, #31]

							if( ((status_registers.lighting_status_reg)&0x0010) == 0x0000 )
 800d444:	4b6d      	ldr	r3, [pc, #436]	; (800d5fc <ThreadGetCurrentTask+0xfec>)
 800d446:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d44a:	f003 0310 	and.w	r3, r3, #16
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d12d      	bne.n	800d4ae <ThreadGetCurrentTask+0xe9e>
							{
								osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800d452:	4b6b      	ldr	r3, [pc, #428]	; (800d600 <ThreadGetCurrentTask+0xff0>)
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	f04f 31ff 	mov.w	r1, #4294967295
 800d45a:	4618      	mov	r0, r3
 800d45c:	f7fb fa5e 	bl	800891c <osMutexWait>
								fm25v02_read(2*LIGHTING_STATUS_REG+1, &phase_temp); // читаем значение регистра статуса освещения
 800d460:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800d464:	4619      	mov	r1, r3
 800d466:	f242 0063 	movw	r0, #8291	; 0x2063
 800d46a:	f009 fbdf 	bl	8016c2c <fm25v02_read>
								phase_temp = phase_temp|0x10; // устанавливаем 0-й бит статуса фазы А1
 800d46e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d472:	b2db      	uxtb	r3, r3
 800d474:	f043 0310 	orr.w	r3, r3, #16
 800d478:	b2db      	uxtb	r3, r3
 800d47a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
								fm25v02_write(2*LIGHTING_STATUS_REG+1, phase_temp); // записываем младший байт регистра статуса освещения
 800d47e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d482:	b2db      	uxtb	r3, r3
 800d484:	4619      	mov	r1, r3
 800d486:	f242 0063 	movw	r0, #8291	; 0x2063
 800d48a:	f009 fc09 	bl	8016ca0 <fm25v02_write>
								status_registers.lighting_status_reg = status_registers.lighting_status_reg|0x0010; // выставляем бит фазы А1 в переменной регистра статуса освещения
 800d48e:	4b5b      	ldr	r3, [pc, #364]	; (800d5fc <ThreadGetCurrentTask+0xfec>)
 800d490:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d494:	f043 0310 	orr.w	r3, r3, #16
 800d498:	b29a      	uxth	r2, r3
 800d49a:	4b58      	ldr	r3, [pc, #352]	; (800d5fc <ThreadGetCurrentTask+0xfec>)
 800d49c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
								osMutexRelease(Fm25v02MutexHandle);
 800d4a0:	4b57      	ldr	r3, [pc, #348]	; (800d600 <ThreadGetCurrentTask+0xff0>)
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	f7fb fa87 	bl	80089b8 <osMutexRelease>
								LED7_ON();
 800d4aa:	f009 fd67 	bl	8016f7c <LED7_ON>
						}
					}
				}


				if( HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_14) == GPIO_PIN_RESET ) // если нет наличия фазы С1
 800d4ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800d4b2:	4851      	ldr	r0, [pc, #324]	; (800d5f8 <ThreadGetCurrentTask+0xfe8>)
 800d4b4:	f7f6 fcbc 	bl	8003e30 <HAL_GPIO_ReadPin>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	f040 80a4 	bne.w	800d608 <ThreadGetCurrentTask+0xff8>
				{
					if( ((control_registers.light_control_reg)&0x0004) == 0x0004 ) // если в управляющем регистре освещения выставлен бит включения фазы С
 800d4c0:	4b50      	ldr	r3, [pc, #320]	; (800d604 <ThreadGetCurrentTask+0xff4>)
 800d4c2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d4c6:	f003 0304 	and.w	r3, r3, #4
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d045      	beq.n	800d55a <ThreadGetCurrentTask+0xf4a>
					{
						if(phase_c1_alarm_state<3000)
 800d4ce:	8a3b      	ldrh	r3, [r7, #16]
 800d4d0:	b29b      	uxth	r3, r3
 800d4d2:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800d4d6:	4293      	cmp	r3, r2
 800d4d8:	d83f      	bhi.n	800d55a <ThreadGetCurrentTask+0xf4a>
						{
							phase_c1_alarm_state++;
 800d4da:	8a3b      	ldrh	r3, [r7, #16]
 800d4dc:	b29b      	uxth	r3, r3
 800d4de:	3301      	adds	r3, #1
 800d4e0:	b29b      	uxth	r3, r3
 800d4e2:	823b      	strh	r3, [r7, #16]
							if(phase_c1_alarm_state==3000)
 800d4e4:	8a3b      	ldrh	r3, [r7, #16]
 800d4e6:	b29b      	uxth	r3, r3
 800d4e8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800d4ec:	4293      	cmp	r3, r2
 800d4ee:	d134      	bne.n	800d55a <ThreadGetCurrentTask+0xf4a>
							{
								phase_c1_alarm_state = 0; // выставляем среднее значение между 0 и 10
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	823b      	strh	r3, [r7, #16]

								if( ((status_registers.lighting_alarm_reg)&0x0004) == 0x0000 ) // проверяем наличие бита аварии фазы А1, если бит не выставлен, устанавливаем бит
 800d4f4:	4b41      	ldr	r3, [pc, #260]	; (800d5fc <ThreadGetCurrentTask+0xfec>)
 800d4f6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d4fa:	f003 0304 	and.w	r3, r3, #4
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d12b      	bne.n	800d55a <ThreadGetCurrentTask+0xf4a>
								{
									osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800d502:	4b3f      	ldr	r3, [pc, #252]	; (800d600 <ThreadGetCurrentTask+0xff0>)
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	f04f 31ff 	mov.w	r1, #4294967295
 800d50a:	4618      	mov	r0, r3
 800d50c:	f7fb fa06 	bl	800891c <osMutexWait>
									fm25v02_read(2*LIGHTING_ALARM_REG+1, &phase_temp); // читаем значение из старшего байта регистра аварий освещения
 800d510:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800d514:	4619      	mov	r1, r3
 800d516:	f242 0065 	movw	r0, #8293	; 0x2065
 800d51a:	f009 fb87 	bl	8016c2c <fm25v02_read>
									phase_temp = phase_temp|0x04; // устанавливаем 0-й бит статуса фазы А1
 800d51e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d522:	b2db      	uxtb	r3, r3
 800d524:	f043 0304 	orr.w	r3, r3, #4
 800d528:	b2db      	uxtb	r3, r3
 800d52a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
									fm25v02_write(2*LIGHTING_ALARM_REG+1, phase_temp); // записываем младший байт регистра аварий освещения
 800d52e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d532:	b2db      	uxtb	r3, r3
 800d534:	4619      	mov	r1, r3
 800d536:	f242 0065 	movw	r0, #8293	; 0x2065
 800d53a:	f009 fbb1 	bl	8016ca0 <fm25v02_write>
									status_registers.lighting_alarm_reg = status_registers.lighting_alarm_reg|0x0004; // выставляем бит аварии фазы А1 в переменной регистра аварий освещения
 800d53e:	4b2f      	ldr	r3, [pc, #188]	; (800d5fc <ThreadGetCurrentTask+0xfec>)
 800d540:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d544:	f043 0304 	orr.w	r3, r3, #4
 800d548:	b29a      	uxth	r2, r3
 800d54a:	4b2c      	ldr	r3, [pc, #176]	; (800d5fc <ThreadGetCurrentTask+0xfec>)
 800d54c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
									osMutexRelease(Fm25v02MutexHandle);
 800d550:	4b2b      	ldr	r3, [pc, #172]	; (800d600 <ThreadGetCurrentTask+0xff0>)
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	4618      	mov	r0, r3
 800d556:	f7fb fa2f 	bl	80089b8 <osMutexRelease>

							}
						}
					}

					phase_c1_on_state = 0;
 800d55a:	2300      	movs	r3, #0
 800d55c:	77bb      	strb	r3, [r7, #30]

					if(phase_c1_off_state<200)
 800d55e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d562:	b2db      	uxtb	r3, r3
 800d564:	2bc7      	cmp	r3, #199	; 0xc7
 800d566:	f200 80a0 	bhi.w	800d6aa <ThreadGetCurrentTask+0x109a>
					{
						phase_c1_off_state++;
 800d56a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d56e:	b2db      	uxtb	r3, r3
 800d570:	3301      	adds	r3, #1
 800d572:	b2db      	uxtb	r3, r3
 800d574:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						if(phase_c1_off_state >= 200)
 800d578:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d57c:	b2db      	uxtb	r3, r3
 800d57e:	2bc7      	cmp	r3, #199	; 0xc7
 800d580:	f240 8093 	bls.w	800d6aa <ThreadGetCurrentTask+0x109a>
						{
							phase_c1_off_state = 0;
 800d584:	2300      	movs	r3, #0
 800d586:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
							if( ((status_registers.lighting_status_reg)&0x0004) == 0x0004 )
 800d58a:	4b1c      	ldr	r3, [pc, #112]	; (800d5fc <ThreadGetCurrentTask+0xfec>)
 800d58c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d590:	f003 0304 	and.w	r3, r3, #4
 800d594:	2b00      	cmp	r3, #0
 800d596:	f000 8088 	beq.w	800d6aa <ThreadGetCurrentTask+0x109a>
							{
								osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800d59a:	4b19      	ldr	r3, [pc, #100]	; (800d600 <ThreadGetCurrentTask+0xff0>)
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	f04f 31ff 	mov.w	r1, #4294967295
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	f7fb f9ba 	bl	800891c <osMutexWait>
								fm25v02_read(2*LIGHTING_STATUS_REG+1, &phase_temp);
 800d5a8:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800d5ac:	4619      	mov	r1, r3
 800d5ae:	f242 0063 	movw	r0, #8291	; 0x2063
 800d5b2:	f009 fb3b 	bl	8016c2c <fm25v02_read>
								phase_temp = phase_temp&0xFB;
 800d5b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d5ba:	b2db      	uxtb	r3, r3
 800d5bc:	f023 0304 	bic.w	r3, r3, #4
 800d5c0:	b2db      	uxtb	r3, r3
 800d5c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
								fm25v02_write(2*LIGHTING_STATUS_REG+1, phase_temp);
 800d5c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d5ca:	b2db      	uxtb	r3, r3
 800d5cc:	4619      	mov	r1, r3
 800d5ce:	f242 0063 	movw	r0, #8291	; 0x2063
 800d5d2:	f009 fb65 	bl	8016ca0 <fm25v02_write>
								status_registers.lighting_status_reg = status_registers.lighting_status_reg&0xFFFB;
 800d5d6:	4b09      	ldr	r3, [pc, #36]	; (800d5fc <ThreadGetCurrentTask+0xfec>)
 800d5d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d5dc:	f023 0304 	bic.w	r3, r3, #4
 800d5e0:	b29a      	uxth	r2, r3
 800d5e2:	4b06      	ldr	r3, [pc, #24]	; (800d5fc <ThreadGetCurrentTask+0xfec>)
 800d5e4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
								osMutexRelease(Fm25v02MutexHandle);
 800d5e8:	4b05      	ldr	r3, [pc, #20]	; (800d600 <ThreadGetCurrentTask+0xff0>)
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	f7fb f9e3 	bl	80089b8 <osMutexRelease>
								LED5_OFF();
 800d5f2:	f009 fc87 	bl	8016f04 <LED5_OFF>
 800d5f6:	e058      	b.n	800d6aa <ThreadGetCurrentTask+0x109a>
 800d5f8:	40021400 	.word	0x40021400
 800d5fc:	2000a174 	.word	0x2000a174
 800d600:	20009af8 	.word	0x20009af8
 800d604:	2000a234 	.word	0x2000a234
							}
						}
					}
				}

				else if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_14) == GPIO_PIN_SET) // если есть наличие фазы С1
 800d608:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800d60c:	487d      	ldr	r0, [pc, #500]	; (800d804 <ThreadGetCurrentTask+0x11f4>)
 800d60e:	f7f6 fc0f 	bl	8003e30 <HAL_GPIO_ReadPin>
 800d612:	4603      	mov	r3, r0
 800d614:	2b01      	cmp	r3, #1
 800d616:	d148      	bne.n	800d6aa <ThreadGetCurrentTask+0x109a>
				{
					phase_c1_alarm_state = 0;
 800d618:	2300      	movs	r3, #0
 800d61a:	823b      	strh	r3, [r7, #16]
					phase_c1_off_state = 0;
 800d61c:	2300      	movs	r3, #0
 800d61e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

					if(phase_c1_on_state<5)
 800d622:	7fbb      	ldrb	r3, [r7, #30]
 800d624:	b2db      	uxtb	r3, r3
 800d626:	2b04      	cmp	r3, #4
 800d628:	d83f      	bhi.n	800d6aa <ThreadGetCurrentTask+0x109a>
					{
						phase_c1_on_state++;
 800d62a:	7fbb      	ldrb	r3, [r7, #30]
 800d62c:	b2db      	uxtb	r3, r3
 800d62e:	3301      	adds	r3, #1
 800d630:	b2db      	uxtb	r3, r3
 800d632:	77bb      	strb	r3, [r7, #30]
						if(phase_c1_on_state>=5)
 800d634:	7fbb      	ldrb	r3, [r7, #30]
 800d636:	b2db      	uxtb	r3, r3
 800d638:	2b04      	cmp	r3, #4
 800d63a:	d936      	bls.n	800d6aa <ThreadGetCurrentTask+0x109a>
						{

							phase_c1_on_state = 0; // выставляем среднее значение между 0 и 10
 800d63c:	2300      	movs	r3, #0
 800d63e:	77bb      	strb	r3, [r7, #30]

							if( ((status_registers.lighting_status_reg)&0x0004) == 0x0000 )
 800d640:	4b71      	ldr	r3, [pc, #452]	; (800d808 <ThreadGetCurrentTask+0x11f8>)
 800d642:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d646:	f003 0304 	and.w	r3, r3, #4
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d12d      	bne.n	800d6aa <ThreadGetCurrentTask+0x109a>
							{
								osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800d64e:	4b6f      	ldr	r3, [pc, #444]	; (800d80c <ThreadGetCurrentTask+0x11fc>)
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	f04f 31ff 	mov.w	r1, #4294967295
 800d656:	4618      	mov	r0, r3
 800d658:	f7fb f960 	bl	800891c <osMutexWait>
								fm25v02_read(2*LIGHTING_STATUS_REG+1, &phase_temp); // читаем значение регистра статуса освещения
 800d65c:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800d660:	4619      	mov	r1, r3
 800d662:	f242 0063 	movw	r0, #8291	; 0x2063
 800d666:	f009 fae1 	bl	8016c2c <fm25v02_read>
								phase_temp = phase_temp|0x04; // устанавливаем 0-й бит статуса фазы А1
 800d66a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d66e:	b2db      	uxtb	r3, r3
 800d670:	f043 0304 	orr.w	r3, r3, #4
 800d674:	b2db      	uxtb	r3, r3
 800d676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
								fm25v02_write(2*LIGHTING_STATUS_REG+1, phase_temp); // записываем младший байт регистра статуса освещения
 800d67a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d67e:	b2db      	uxtb	r3, r3
 800d680:	4619      	mov	r1, r3
 800d682:	f242 0063 	movw	r0, #8291	; 0x2063
 800d686:	f009 fb0b 	bl	8016ca0 <fm25v02_write>
								status_registers.lighting_status_reg = status_registers.lighting_status_reg|0x0004; // выставляем бит фазы А1 в переменной регистра статуса освещения
 800d68a:	4b5f      	ldr	r3, [pc, #380]	; (800d808 <ThreadGetCurrentTask+0x11f8>)
 800d68c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d690:	f043 0304 	orr.w	r3, r3, #4
 800d694:	b29a      	uxth	r2, r3
 800d696:	4b5c      	ldr	r3, [pc, #368]	; (800d808 <ThreadGetCurrentTask+0x11f8>)
 800d698:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
								osMutexRelease(Fm25v02MutexHandle);
 800d69c:	4b5b      	ldr	r3, [pc, #364]	; (800d80c <ThreadGetCurrentTask+0x11fc>)
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	f7fb f989 	bl	80089b8 <osMutexRelease>
								LED5_ON();
 800d6a6:	f009 fc39 	bl	8016f1c <LED5_ON>
						}
					}
				}


				if( HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_15) == GPIO_PIN_RESET ) // если нет наличия фазы С2
 800d6aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d6ae:	4855      	ldr	r0, [pc, #340]	; (800d804 <ThreadGetCurrentTask+0x11f4>)
 800d6b0:	f7f6 fbbe 	bl	8003e30 <HAL_GPIO_ReadPin>
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	f040 80ac 	bne.w	800d814 <ThreadGetCurrentTask+0x1204>
				{
					if( (((control_registers.light_control_reg)&0x0010) == 0x0010) && (((control_registers.light_control_reg)&0x0004) == 0x0004) ) // если контроль второй линии включен и если в управляющем регистре освещения выставлен бит включения фазы С
 800d6bc:	4b54      	ldr	r3, [pc, #336]	; (800d810 <ThreadGetCurrentTask+0x1200>)
 800d6be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d6c2:	f003 0310 	and.w	r3, r3, #16
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d04c      	beq.n	800d764 <ThreadGetCurrentTask+0x1154>
 800d6ca:	4b51      	ldr	r3, [pc, #324]	; (800d810 <ThreadGetCurrentTask+0x1200>)
 800d6cc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d6d0:	f003 0304 	and.w	r3, r3, #4
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d045      	beq.n	800d764 <ThreadGetCurrentTask+0x1154>
					{
						if(phase_c2_alarm_state<3000)
 800d6d8:	89fb      	ldrh	r3, [r7, #14]
 800d6da:	b29b      	uxth	r3, r3
 800d6dc:	f640 32b7 	movw	r2, #2999	; 0xbb7
 800d6e0:	4293      	cmp	r3, r2
 800d6e2:	d83f      	bhi.n	800d764 <ThreadGetCurrentTask+0x1154>
						{
							phase_c2_alarm_state++;
 800d6e4:	89fb      	ldrh	r3, [r7, #14]
 800d6e6:	b29b      	uxth	r3, r3
 800d6e8:	3301      	adds	r3, #1
 800d6ea:	b29b      	uxth	r3, r3
 800d6ec:	81fb      	strh	r3, [r7, #14]
							if(phase_c2_alarm_state==3000)
 800d6ee:	89fb      	ldrh	r3, [r7, #14]
 800d6f0:	b29b      	uxth	r3, r3
 800d6f2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800d6f6:	4293      	cmp	r3, r2
 800d6f8:	d134      	bne.n	800d764 <ThreadGetCurrentTask+0x1154>
							{
								phase_c2_alarm_state = 0; // выставляем среднее значение между 0 и 10
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	81fb      	strh	r3, [r7, #14]

								if( ((status_registers.lighting_alarm_reg)&0x0020) == 0x0000 ) // проверяем наличие бита аварии фазы А1, если бит не выставлен, устанавливаем бит
 800d6fe:	4b42      	ldr	r3, [pc, #264]	; (800d808 <ThreadGetCurrentTask+0x11f8>)
 800d700:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d704:	f003 0320 	and.w	r3, r3, #32
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d12b      	bne.n	800d764 <ThreadGetCurrentTask+0x1154>
								{
									osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800d70c:	4b3f      	ldr	r3, [pc, #252]	; (800d80c <ThreadGetCurrentTask+0x11fc>)
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	f04f 31ff 	mov.w	r1, #4294967295
 800d714:	4618      	mov	r0, r3
 800d716:	f7fb f901 	bl	800891c <osMutexWait>
									fm25v02_read(2*LIGHTING_ALARM_REG+1, &phase_temp); // читаем значение из старшего байта регистра аварий освещения
 800d71a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800d71e:	4619      	mov	r1, r3
 800d720:	f242 0065 	movw	r0, #8293	; 0x2065
 800d724:	f009 fa82 	bl	8016c2c <fm25v02_read>
									phase_temp = phase_temp|0x20; // устанавливаем 0-й бит статуса фазы А1
 800d728:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d72c:	b2db      	uxtb	r3, r3
 800d72e:	f043 0320 	orr.w	r3, r3, #32
 800d732:	b2db      	uxtb	r3, r3
 800d734:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
									fm25v02_write(2*LIGHTING_ALARM_REG+1, phase_temp); // записываем младший байт регистра аварий освещения
 800d738:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d73c:	b2db      	uxtb	r3, r3
 800d73e:	4619      	mov	r1, r3
 800d740:	f242 0065 	movw	r0, #8293	; 0x2065
 800d744:	f009 faac 	bl	8016ca0 <fm25v02_write>
									status_registers.lighting_alarm_reg = status_registers.lighting_alarm_reg|0x0020; // выставляем бит аварии фазы А1 в переменной регистра аварий освещения
 800d748:	4b2f      	ldr	r3, [pc, #188]	; (800d808 <ThreadGetCurrentTask+0x11f8>)
 800d74a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d74e:	f043 0320 	orr.w	r3, r3, #32
 800d752:	b29a      	uxth	r2, r3
 800d754:	4b2c      	ldr	r3, [pc, #176]	; (800d808 <ThreadGetCurrentTask+0x11f8>)
 800d756:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
									osMutexRelease(Fm25v02MutexHandle);
 800d75a:	4b2c      	ldr	r3, [pc, #176]	; (800d80c <ThreadGetCurrentTask+0x11fc>)
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	4618      	mov	r0, r3
 800d760:	f7fb f92a 	bl	80089b8 <osMutexRelease>

							}
						}
					}

					phase_c2_on_state = 0;
 800d764:	2300      	movs	r3, #0
 800d766:	777b      	strb	r3, [r7, #29]

					if(phase_c2_off_state<200)
 800d768:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d76c:	b2db      	uxtb	r3, r3
 800d76e:	2bc7      	cmp	r3, #199	; 0xc7
 800d770:	f200 80a1 	bhi.w	800d8b6 <ThreadGetCurrentTask+0x12a6>
					{
						phase_c2_off_state++;
 800d774:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d778:	b2db      	uxtb	r3, r3
 800d77a:	3301      	adds	r3, #1
 800d77c:	b2db      	uxtb	r3, r3
 800d77e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
						if(phase_c2_off_state >= 200)
 800d782:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800d786:	b2db      	uxtb	r3, r3
 800d788:	2bc7      	cmp	r3, #199	; 0xc7
 800d78a:	f240 8094 	bls.w	800d8b6 <ThreadGetCurrentTask+0x12a6>
						{
							phase_c2_off_state = 0;
 800d78e:	2300      	movs	r3, #0
 800d790:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
							if( ((status_registers.lighting_status_reg)&0x0020) == 0x0020 )
 800d794:	4b1c      	ldr	r3, [pc, #112]	; (800d808 <ThreadGetCurrentTask+0x11f8>)
 800d796:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d79a:	f003 0320 	and.w	r3, r3, #32
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	f000 8089 	beq.w	800d8b6 <ThreadGetCurrentTask+0x12a6>
							{
								osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800d7a4:	4b19      	ldr	r3, [pc, #100]	; (800d80c <ThreadGetCurrentTask+0x11fc>)
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	f04f 31ff 	mov.w	r1, #4294967295
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	f7fb f8b5 	bl	800891c <osMutexWait>
								fm25v02_read(2*LIGHTING_STATUS_REG+1, &phase_temp);
 800d7b2:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800d7b6:	4619      	mov	r1, r3
 800d7b8:	f242 0063 	movw	r0, #8291	; 0x2063
 800d7bc:	f009 fa36 	bl	8016c2c <fm25v02_read>
								phase_temp = phase_temp&0xDF;
 800d7c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d7c4:	b2db      	uxtb	r3, r3
 800d7c6:	f023 0320 	bic.w	r3, r3, #32
 800d7ca:	b2db      	uxtb	r3, r3
 800d7cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
								fm25v02_write(2*LIGHTING_STATUS_REG+1, phase_temp);
 800d7d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d7d4:	b2db      	uxtb	r3, r3
 800d7d6:	4619      	mov	r1, r3
 800d7d8:	f242 0063 	movw	r0, #8291	; 0x2063
 800d7dc:	f009 fa60 	bl	8016ca0 <fm25v02_write>
								status_registers.lighting_status_reg = status_registers.lighting_status_reg&0xFFDF;
 800d7e0:	4b09      	ldr	r3, [pc, #36]	; (800d808 <ThreadGetCurrentTask+0x11f8>)
 800d7e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d7e6:	f023 0320 	bic.w	r3, r3, #32
 800d7ea:	b29a      	uxth	r2, r3
 800d7ec:	4b06      	ldr	r3, [pc, #24]	; (800d808 <ThreadGetCurrentTask+0x11f8>)
 800d7ee:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
								osMutexRelease(Fm25v02MutexHandle);
 800d7f2:	4b06      	ldr	r3, [pc, #24]	; (800d80c <ThreadGetCurrentTask+0x11fc>)
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	f7fb f8de 	bl	80089b8 <osMutexRelease>
								LED8_OFF();
 800d7fc:	f009 fbca 	bl	8016f94 <LED8_OFF>
 800d800:	e059      	b.n	800d8b6 <ThreadGetCurrentTask+0x12a6>
 800d802:	bf00      	nop
 800d804:	40021400 	.word	0x40021400
 800d808:	2000a174 	.word	0x2000a174
 800d80c:	20009af8 	.word	0x20009af8
 800d810:	2000a234 	.word	0x2000a234
							}
						}
					}
				}
				else if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_15) == GPIO_PIN_SET) // если нет наличия фазы С2
 800d814:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d818:	48a2      	ldr	r0, [pc, #648]	; (800daa4 <ThreadGetCurrentTask+0x1494>)
 800d81a:	f7f6 fb09 	bl	8003e30 <HAL_GPIO_ReadPin>
 800d81e:	4603      	mov	r3, r0
 800d820:	2b01      	cmp	r3, #1
 800d822:	d148      	bne.n	800d8b6 <ThreadGetCurrentTask+0x12a6>
				{
					phase_c2_alarm_state = 0;
 800d824:	2300      	movs	r3, #0
 800d826:	81fb      	strh	r3, [r7, #14]
					phase_c2_off_state = 0;
 800d828:	2300      	movs	r3, #0
 800d82a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

					if(phase_c2_on_state<5)
 800d82e:	7f7b      	ldrb	r3, [r7, #29]
 800d830:	b2db      	uxtb	r3, r3
 800d832:	2b04      	cmp	r3, #4
 800d834:	d83f      	bhi.n	800d8b6 <ThreadGetCurrentTask+0x12a6>
					{
						phase_c2_on_state++;
 800d836:	7f7b      	ldrb	r3, [r7, #29]
 800d838:	b2db      	uxtb	r3, r3
 800d83a:	3301      	adds	r3, #1
 800d83c:	b2db      	uxtb	r3, r3
 800d83e:	777b      	strb	r3, [r7, #29]
						if(phase_c2_on_state>=5)
 800d840:	7f7b      	ldrb	r3, [r7, #29]
 800d842:	b2db      	uxtb	r3, r3
 800d844:	2b04      	cmp	r3, #4
 800d846:	d936      	bls.n	800d8b6 <ThreadGetCurrentTask+0x12a6>
						{

							phase_c2_on_state = 0; // выставляем среднее значение между 0 и 10
 800d848:	2300      	movs	r3, #0
 800d84a:	777b      	strb	r3, [r7, #29]

							if( ((status_registers.lighting_status_reg)&0x0020) == 0x0000 )
 800d84c:	4b96      	ldr	r3, [pc, #600]	; (800daa8 <ThreadGetCurrentTask+0x1498>)
 800d84e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d852:	f003 0320 	and.w	r3, r3, #32
 800d856:	2b00      	cmp	r3, #0
 800d858:	d12d      	bne.n	800d8b6 <ThreadGetCurrentTask+0x12a6>
							{
								osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800d85a:	4b94      	ldr	r3, [pc, #592]	; (800daac <ThreadGetCurrentTask+0x149c>)
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	f04f 31ff 	mov.w	r1, #4294967295
 800d862:	4618      	mov	r0, r3
 800d864:	f7fb f85a 	bl	800891c <osMutexWait>
								fm25v02_read(2*LIGHTING_STATUS_REG+1, &phase_temp); // читаем значение регистра статуса освещения
 800d868:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800d86c:	4619      	mov	r1, r3
 800d86e:	f242 0063 	movw	r0, #8291	; 0x2063
 800d872:	f009 f9db 	bl	8016c2c <fm25v02_read>
								phase_temp = phase_temp|0x20; // устанавливаем 0-й бит статуса фазы А1
 800d876:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d87a:	b2db      	uxtb	r3, r3
 800d87c:	f043 0320 	orr.w	r3, r3, #32
 800d880:	b2db      	uxtb	r3, r3
 800d882:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
								fm25v02_write(2*LIGHTING_STATUS_REG+1, phase_temp); // записываем младший байт регистра статуса освещения
 800d886:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d88a:	b2db      	uxtb	r3, r3
 800d88c:	4619      	mov	r1, r3
 800d88e:	f242 0063 	movw	r0, #8291	; 0x2063
 800d892:	f009 fa05 	bl	8016ca0 <fm25v02_write>
								status_registers.lighting_status_reg = status_registers.lighting_status_reg|0x0020; // выставляем бит фазы А1 в переменной регистра статуса освещения
 800d896:	4b84      	ldr	r3, [pc, #528]	; (800daa8 <ThreadGetCurrentTask+0x1498>)
 800d898:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d89c:	f043 0320 	orr.w	r3, r3, #32
 800d8a0:	b29a      	uxth	r2, r3
 800d8a2:	4b81      	ldr	r3, [pc, #516]	; (800daa8 <ThreadGetCurrentTask+0x1498>)
 800d8a4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
								osMutexRelease(Fm25v02MutexHandle);
 800d8a8:	4b80      	ldr	r3, [pc, #512]	; (800daac <ThreadGetCurrentTask+0x149c>)
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	f7fb f883 	bl	80089b8 <osMutexRelease>
								LED8_ON();
 800d8b2:	f009 fb7b 	bl	8016fac <LED8_ON>
						}
					}
				}
				*/

				if( HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_0) == GPIO_PIN_RESET ) // если пин каскада сброшен
 800d8b6:	2101      	movs	r1, #1
 800d8b8:	487d      	ldr	r0, [pc, #500]	; (800dab0 <ThreadGetCurrentTask+0x14a0>)
 800d8ba:	f7f6 fab9 	bl	8003e30 <HAL_GPIO_ReadPin>
 800d8be:	4603      	mov	r3, r0
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	f040 80f9 	bne.w	800dab8 <ThreadGetCurrentTask+0x14a8>
				{

					cascade_on_state = 0;
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	773b      	strb	r3, [r7, #28]

					if(cascade_off_state<200)
 800d8ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d8ce:	b2db      	uxtb	r3, r3
 800d8d0:	2bc7      	cmp	r3, #199	; 0xc7
 800d8d2:	f200 81e1 	bhi.w	800dc98 <ThreadGetCurrentTask+0x1688>
					{
						cascade_off_state++;
 800d8d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d8da:	b2db      	uxtb	r3, r3
 800d8dc:	3301      	adds	r3, #1
 800d8de:	b2db      	uxtb	r3, r3
 800d8e0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

						if(cascade_off_state >= 200)
 800d8e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d8e8:	b2db      	uxtb	r3, r3
 800d8ea:	2bc7      	cmp	r3, #199	; 0xc7
 800d8ec:	f240 81d4 	bls.w	800dc98 <ThreadGetCurrentTask+0x1688>
						{
							cascade_off_state = 0;
 800d8f0:	2300      	movs	r3, #0
 800d8f2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
								osMutexRelease(Fm25v02MutexHandle);
								LED3_OFF();
							}
							*/

							if( ((status_registers.lighting_status_reg)&0x0040) == 0x0040 )
 800d8f6:	4b6c      	ldr	r3, [pc, #432]	; (800daa8 <ThreadGetCurrentTask+0x1498>)
 800d8f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d8fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d900:	2b00      	cmp	r3, #0
 800d902:	d02b      	beq.n	800d95c <ThreadGetCurrentTask+0x134c>
							{
								osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800d904:	4b69      	ldr	r3, [pc, #420]	; (800daac <ThreadGetCurrentTask+0x149c>)
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	f04f 31ff 	mov.w	r1, #4294967295
 800d90c:	4618      	mov	r0, r3
 800d90e:	f7fb f805 	bl	800891c <osMutexWait>
								fm25v02_read(2*LIGHTING_STATUS_REG+1, &phase_temp);
 800d912:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800d916:	4619      	mov	r1, r3
 800d918:	f242 0063 	movw	r0, #8291	; 0x2063
 800d91c:	f009 f986 	bl	8016c2c <fm25v02_read>
								phase_temp = phase_temp&0xBF;
 800d920:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d924:	b2db      	uxtb	r3, r3
 800d926:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d92a:	b2db      	uxtb	r3, r3
 800d92c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
								fm25v02_write(2*LIGHTING_STATUS_REG+1, phase_temp);
 800d930:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d934:	b2db      	uxtb	r3, r3
 800d936:	4619      	mov	r1, r3
 800d938:	f242 0063 	movw	r0, #8291	; 0x2063
 800d93c:	f009 f9b0 	bl	8016ca0 <fm25v02_write>
								status_registers.lighting_status_reg = (status_registers.lighting_status_reg)&0xFFBF;
 800d940:	4b59      	ldr	r3, [pc, #356]	; (800daa8 <ThreadGetCurrentTask+0x1498>)
 800d942:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d946:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d94a:	b29a      	uxth	r2, r3
 800d94c:	4b56      	ldr	r3, [pc, #344]	; (800daa8 <ThreadGetCurrentTask+0x1498>)
 800d94e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
								osMutexRelease(Fm25v02MutexHandle);
 800d952:	4b56      	ldr	r3, [pc, #344]	; (800daac <ThreadGetCurrentTask+0x149c>)
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	4618      	mov	r0, r3
 800d958:	f7fb f82e 	bl	80089b8 <osMutexRelease>
							}

							if( ((control_registers.light_control_reg)&0x0008) == 0x0008 ) // если контроль каскада включен
 800d95c:	4b55      	ldr	r3, [pc, #340]	; (800dab4 <ThreadGetCurrentTask+0x14a4>)
 800d95e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d962:	f003 0308 	and.w	r3, r3, #8
 800d966:	2b00      	cmp	r3, #0
 800d968:	f000 8196 	beq.w	800dc98 <ThreadGetCurrentTask+0x1688>
							{
								if( ((control_registers.light_control_reg)&0x0001) == 0x0001 )
 800d96c:	4b51      	ldr	r3, [pc, #324]	; (800dab4 <ThreadGetCurrentTask+0x14a4>)
 800d96e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d972:	f003 0301 	and.w	r3, r3, #1
 800d976:	2b00      	cmp	r3, #0
 800d978:	d02b      	beq.n	800d9d2 <ThreadGetCurrentTask+0x13c2>
								{
									osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800d97a:	4b4c      	ldr	r3, [pc, #304]	; (800daac <ThreadGetCurrentTask+0x149c>)
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	f04f 31ff 	mov.w	r1, #4294967295
 800d982:	4618      	mov	r0, r3
 800d984:	f7fa ffca 	bl	800891c <osMutexWait>
									fm25v02_read(2*LIGHT_CONTROL_REG+1, &phase_temp); // читаем значение из старшего байта регистра управления освещением
 800d988:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800d98c:	4619      	mov	r1, r3
 800d98e:	f242 1083 	movw	r0, #8579	; 0x2183
 800d992:	f009 f94b 	bl	8016c2c <fm25v02_read>
									phase_temp = phase_temp&0xFE;
 800d996:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d99a:	b2db      	uxtb	r3, r3
 800d99c:	f023 0301 	bic.w	r3, r3, #1
 800d9a0:	b2db      	uxtb	r3, r3
 800d9a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
									fm25v02_write(2*LIGHT_CONTROL_REG+1, phase_temp); // записываем младший байт регистра управления освещением
 800d9a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d9aa:	b2db      	uxtb	r3, r3
 800d9ac:	4619      	mov	r1, r3
 800d9ae:	f242 1083 	movw	r0, #8579	; 0x2183
 800d9b2:	f009 f975 	bl	8016ca0 <fm25v02_write>
									control_registers.light_control_reg = (control_registers.light_control_reg)&0xFFFE;
 800d9b6:	4b3f      	ldr	r3, [pc, #252]	; (800dab4 <ThreadGetCurrentTask+0x14a4>)
 800d9b8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d9bc:	f023 0301 	bic.w	r3, r3, #1
 800d9c0:	b29a      	uxth	r2, r3
 800d9c2:	4b3c      	ldr	r3, [pc, #240]	; (800dab4 <ThreadGetCurrentTask+0x14a4>)
 800d9c4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
									osMutexRelease(Fm25v02MutexHandle);
 800d9c8:	4b38      	ldr	r3, [pc, #224]	; (800daac <ThreadGetCurrentTask+0x149c>)
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	f7fa fff3 	bl	80089b8 <osMutexRelease>
								}
								if( ((control_registers.light_control_reg)&0x0002) == 0x0002 )
 800d9d2:	4b38      	ldr	r3, [pc, #224]	; (800dab4 <ThreadGetCurrentTask+0x14a4>)
 800d9d4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d9d8:	f003 0302 	and.w	r3, r3, #2
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d02b      	beq.n	800da38 <ThreadGetCurrentTask+0x1428>
								{
									osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800d9e0:	4b32      	ldr	r3, [pc, #200]	; (800daac <ThreadGetCurrentTask+0x149c>)
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	f04f 31ff 	mov.w	r1, #4294967295
 800d9e8:	4618      	mov	r0, r3
 800d9ea:	f7fa ff97 	bl	800891c <osMutexWait>
									fm25v02_read(2*LIGHT_CONTROL_REG+1, &phase_temp); // читаем значение из старшего байта регистра управления освещением
 800d9ee:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800d9f2:	4619      	mov	r1, r3
 800d9f4:	f242 1083 	movw	r0, #8579	; 0x2183
 800d9f8:	f009 f918 	bl	8016c2c <fm25v02_read>
									phase_temp = phase_temp&0xFD;
 800d9fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800da00:	b2db      	uxtb	r3, r3
 800da02:	f023 0302 	bic.w	r3, r3, #2
 800da06:	b2db      	uxtb	r3, r3
 800da08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
									fm25v02_write(2*LIGHT_CONTROL_REG+1, phase_temp); // записываем младший байт регистра управления освещением
 800da0c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800da10:	b2db      	uxtb	r3, r3
 800da12:	4619      	mov	r1, r3
 800da14:	f242 1083 	movw	r0, #8579	; 0x2183
 800da18:	f009 f942 	bl	8016ca0 <fm25v02_write>
									control_registers.light_control_reg = (control_registers.light_control_reg)&0xFFFD;
 800da1c:	4b25      	ldr	r3, [pc, #148]	; (800dab4 <ThreadGetCurrentTask+0x14a4>)
 800da1e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800da22:	f023 0302 	bic.w	r3, r3, #2
 800da26:	b29a      	uxth	r2, r3
 800da28:	4b22      	ldr	r3, [pc, #136]	; (800dab4 <ThreadGetCurrentTask+0x14a4>)
 800da2a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
									osMutexRelease(Fm25v02MutexHandle);
 800da2e:	4b1f      	ldr	r3, [pc, #124]	; (800daac <ThreadGetCurrentTask+0x149c>)
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	4618      	mov	r0, r3
 800da34:	f7fa ffc0 	bl	80089b8 <osMutexRelease>
								}
								if( ((control_registers.light_control_reg)&0x0004) == 0x0004 )
 800da38:	4b1e      	ldr	r3, [pc, #120]	; (800dab4 <ThreadGetCurrentTask+0x14a4>)
 800da3a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800da3e:	f003 0304 	and.w	r3, r3, #4
 800da42:	2b00      	cmp	r3, #0
 800da44:	f000 8128 	beq.w	800dc98 <ThreadGetCurrentTask+0x1688>
								{
									osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800da48:	4b18      	ldr	r3, [pc, #96]	; (800daac <ThreadGetCurrentTask+0x149c>)
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	f04f 31ff 	mov.w	r1, #4294967295
 800da50:	4618      	mov	r0, r3
 800da52:	f7fa ff63 	bl	800891c <osMutexWait>
									fm25v02_read(2*LIGHT_CONTROL_REG+1, &phase_temp); // читаем значение из старшего байта регистра управления освещением
 800da56:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800da5a:	4619      	mov	r1, r3
 800da5c:	f242 1083 	movw	r0, #8579	; 0x2183
 800da60:	f009 f8e4 	bl	8016c2c <fm25v02_read>
									phase_temp = phase_temp&0xFB;
 800da64:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800da68:	b2db      	uxtb	r3, r3
 800da6a:	f023 0304 	bic.w	r3, r3, #4
 800da6e:	b2db      	uxtb	r3, r3
 800da70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
									fm25v02_write(2*LIGHT_CONTROL_REG+1, phase_temp); // записываем младший байт регистра управления освещением
 800da74:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800da78:	b2db      	uxtb	r3, r3
 800da7a:	4619      	mov	r1, r3
 800da7c:	f242 1083 	movw	r0, #8579	; 0x2183
 800da80:	f009 f90e 	bl	8016ca0 <fm25v02_write>
									control_registers.light_control_reg = (control_registers.light_control_reg)&0xFFFB;
 800da84:	4b0b      	ldr	r3, [pc, #44]	; (800dab4 <ThreadGetCurrentTask+0x14a4>)
 800da86:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800da8a:	f023 0304 	bic.w	r3, r3, #4
 800da8e:	b29a      	uxth	r2, r3
 800da90:	4b08      	ldr	r3, [pc, #32]	; (800dab4 <ThreadGetCurrentTask+0x14a4>)
 800da92:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
									osMutexRelease(Fm25v02MutexHandle);
 800da96:	4b05      	ldr	r3, [pc, #20]	; (800daac <ThreadGetCurrentTask+0x149c>)
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	4618      	mov	r0, r3
 800da9c:	f7fa ff8c 	bl	80089b8 <osMutexRelease>
 800daa0:	e0fa      	b.n	800dc98 <ThreadGetCurrentTask+0x1688>
 800daa2:	bf00      	nop
 800daa4:	40021400 	.word	0x40021400
 800daa8:	2000a174 	.word	0x2000a174
 800daac:	20009af8 	.word	0x20009af8
 800dab0:	40021800 	.word	0x40021800
 800dab4:	2000a234 	.word	0x2000a234
						}
					}

				}

				else if(HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_0) == GPIO_PIN_SET) // если пин каскада установлен
 800dab8:	2101      	movs	r1, #1
 800daba:	48a0      	ldr	r0, [pc, #640]	; (800dd3c <ThreadGetCurrentTask+0x172c>)
 800dabc:	f7f6 f9b8 	bl	8003e30 <HAL_GPIO_ReadPin>
 800dac0:	4603      	mov	r3, r0
 800dac2:	2b01      	cmp	r3, #1
 800dac4:	f040 80e8 	bne.w	800dc98 <ThreadGetCurrentTask+0x1688>
				{
					//phase_a1_alarm_state = 0;
					cascade_off_state = 0;
 800dac8:	2300      	movs	r3, #0
 800daca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

					if(cascade_on_state<5)
 800dace:	7f3b      	ldrb	r3, [r7, #28]
 800dad0:	b2db      	uxtb	r3, r3
 800dad2:	2b04      	cmp	r3, #4
 800dad4:	f200 80e0 	bhi.w	800dc98 <ThreadGetCurrentTask+0x1688>
					{
						cascade_on_state++;
 800dad8:	7f3b      	ldrb	r3, [r7, #28]
 800dada:	b2db      	uxtb	r3, r3
 800dadc:	3301      	adds	r3, #1
 800dade:	b2db      	uxtb	r3, r3
 800dae0:	773b      	strb	r3, [r7, #28]
						if(cascade_on_state>=5)
 800dae2:	7f3b      	ldrb	r3, [r7, #28]
 800dae4:	b2db      	uxtb	r3, r3
 800dae6:	2b04      	cmp	r3, #4
 800dae8:	f240 80d6 	bls.w	800dc98 <ThreadGetCurrentTask+0x1688>
						{

							cascade_on_state = 0; // выставляем среднее значение между 0 и 10
 800daec:	2300      	movs	r3, #0
 800daee:	773b      	strb	r3, [r7, #28]
								osMutexRelease(Fm25v02MutexHandle);
								LED3_ON();
							}
							*/

							if( ((status_registers.lighting_status_reg)&0x0040) == 0x0000 )
 800daf0:	4b93      	ldr	r3, [pc, #588]	; (800dd40 <ThreadGetCurrentTask+0x1730>)
 800daf2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800daf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d12b      	bne.n	800db56 <ThreadGetCurrentTask+0x1546>
							{
								osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800dafe:	4b91      	ldr	r3, [pc, #580]	; (800dd44 <ThreadGetCurrentTask+0x1734>)
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	f04f 31ff 	mov.w	r1, #4294967295
 800db06:	4618      	mov	r0, r3
 800db08:	f7fa ff08 	bl	800891c <osMutexWait>
								fm25v02_read(2*LIGHTING_STATUS_REG+1, &phase_temp); // читаем значение регистра статуса освещения
 800db0c:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800db10:	4619      	mov	r1, r3
 800db12:	f242 0063 	movw	r0, #8291	; 0x2063
 800db16:	f009 f889 	bl	8016c2c <fm25v02_read>
								phase_temp = phase_temp|0x40;
 800db1a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800db1e:	b2db      	uxtb	r3, r3
 800db20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db24:	b2db      	uxtb	r3, r3
 800db26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
								fm25v02_write(2*LIGHTING_STATUS_REG+1, phase_temp); // записываем младший байт регистра статуса освещения
 800db2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800db2e:	b2db      	uxtb	r3, r3
 800db30:	4619      	mov	r1, r3
 800db32:	f242 0063 	movw	r0, #8291	; 0x2063
 800db36:	f009 f8b3 	bl	8016ca0 <fm25v02_write>
								status_registers.lighting_status_reg = status_registers.lighting_status_reg|0x0040;
 800db3a:	4b81      	ldr	r3, [pc, #516]	; (800dd40 <ThreadGetCurrentTask+0x1730>)
 800db3c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800db40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db44:	b29a      	uxth	r2, r3
 800db46:	4b7e      	ldr	r3, [pc, #504]	; (800dd40 <ThreadGetCurrentTask+0x1730>)
 800db48:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
								osMutexRelease(Fm25v02MutexHandle);
 800db4c:	4b7d      	ldr	r3, [pc, #500]	; (800dd44 <ThreadGetCurrentTask+0x1734>)
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	4618      	mov	r0, r3
 800db52:	f7fa ff31 	bl	80089b8 <osMutexRelease>
							}

							if( ((control_registers.light_control_reg)&0x0008) == 0x0008 ) // если контроль каскада включен
 800db56:	4b7c      	ldr	r3, [pc, #496]	; (800dd48 <ThreadGetCurrentTask+0x1738>)
 800db58:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800db5c:	f003 0308 	and.w	r3, r3, #8
 800db60:	2b00      	cmp	r3, #0
 800db62:	f000 8099 	beq.w	800dc98 <ThreadGetCurrentTask+0x1688>
							{
								if( ((control_registers.light_control_reg)&0x0001) == 0x0000 )
 800db66:	4b78      	ldr	r3, [pc, #480]	; (800dd48 <ThreadGetCurrentTask+0x1738>)
 800db68:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800db6c:	f003 0301 	and.w	r3, r3, #1
 800db70:	2b00      	cmp	r3, #0
 800db72:	d12b      	bne.n	800dbcc <ThreadGetCurrentTask+0x15bc>
								{
									osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800db74:	4b73      	ldr	r3, [pc, #460]	; (800dd44 <ThreadGetCurrentTask+0x1734>)
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	f04f 31ff 	mov.w	r1, #4294967295
 800db7c:	4618      	mov	r0, r3
 800db7e:	f7fa fecd 	bl	800891c <osMutexWait>
									fm25v02_read(2*LIGHT_CONTROL_REG+1, &phase_temp); // читаем значение из старшего байта регистра управления освещением
 800db82:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800db86:	4619      	mov	r1, r3
 800db88:	f242 1083 	movw	r0, #8579	; 0x2183
 800db8c:	f009 f84e 	bl	8016c2c <fm25v02_read>
									phase_temp = phase_temp|0x01;
 800db90:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800db94:	b2db      	uxtb	r3, r3
 800db96:	f043 0301 	orr.w	r3, r3, #1
 800db9a:	b2db      	uxtb	r3, r3
 800db9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
									fm25v02_write(2*LIGHT_CONTROL_REG+1, phase_temp); // записываем младший байт регистра управления освещением
 800dba0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dba4:	b2db      	uxtb	r3, r3
 800dba6:	4619      	mov	r1, r3
 800dba8:	f242 1083 	movw	r0, #8579	; 0x2183
 800dbac:	f009 f878 	bl	8016ca0 <fm25v02_write>
									control_registers.light_control_reg = control_registers.light_control_reg|0x01;
 800dbb0:	4b65      	ldr	r3, [pc, #404]	; (800dd48 <ThreadGetCurrentTask+0x1738>)
 800dbb2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800dbb6:	f043 0301 	orr.w	r3, r3, #1
 800dbba:	b29a      	uxth	r2, r3
 800dbbc:	4b62      	ldr	r3, [pc, #392]	; (800dd48 <ThreadGetCurrentTask+0x1738>)
 800dbbe:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
									osMutexRelease(Fm25v02MutexHandle);
 800dbc2:	4b60      	ldr	r3, [pc, #384]	; (800dd44 <ThreadGetCurrentTask+0x1734>)
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	f7fa fef6 	bl	80089b8 <osMutexRelease>
								}
								if( ((control_registers.light_control_reg)&0x0002) == 0x0000 )
 800dbcc:	4b5e      	ldr	r3, [pc, #376]	; (800dd48 <ThreadGetCurrentTask+0x1738>)
 800dbce:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800dbd2:	f003 0302 	and.w	r3, r3, #2
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d12b      	bne.n	800dc32 <ThreadGetCurrentTask+0x1622>
								{
									osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800dbda:	4b5a      	ldr	r3, [pc, #360]	; (800dd44 <ThreadGetCurrentTask+0x1734>)
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	f04f 31ff 	mov.w	r1, #4294967295
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	f7fa fe9a 	bl	800891c <osMutexWait>
									fm25v02_read(2*LIGHT_CONTROL_REG+1, &phase_temp); // читаем значение из старшего байта регистра управления освещением
 800dbe8:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800dbec:	4619      	mov	r1, r3
 800dbee:	f242 1083 	movw	r0, #8579	; 0x2183
 800dbf2:	f009 f81b 	bl	8016c2c <fm25v02_read>
									phase_temp = phase_temp|0x02;
 800dbf6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dbfa:	b2db      	uxtb	r3, r3
 800dbfc:	f043 0302 	orr.w	r3, r3, #2
 800dc00:	b2db      	uxtb	r3, r3
 800dc02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
									fm25v02_write(2*LIGHT_CONTROL_REG+1, phase_temp); // записываем младший байт регистра управления освещением
 800dc06:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dc0a:	b2db      	uxtb	r3, r3
 800dc0c:	4619      	mov	r1, r3
 800dc0e:	f242 1083 	movw	r0, #8579	; 0x2183
 800dc12:	f009 f845 	bl	8016ca0 <fm25v02_write>
									control_registers.light_control_reg = control_registers.light_control_reg|0x02;
 800dc16:	4b4c      	ldr	r3, [pc, #304]	; (800dd48 <ThreadGetCurrentTask+0x1738>)
 800dc18:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800dc1c:	f043 0302 	orr.w	r3, r3, #2
 800dc20:	b29a      	uxth	r2, r3
 800dc22:	4b49      	ldr	r3, [pc, #292]	; (800dd48 <ThreadGetCurrentTask+0x1738>)
 800dc24:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
									osMutexRelease(Fm25v02MutexHandle);
 800dc28:	4b46      	ldr	r3, [pc, #280]	; (800dd44 <ThreadGetCurrentTask+0x1734>)
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	f7fa fec3 	bl	80089b8 <osMutexRelease>
								}
								if( ((control_registers.light_control_reg)&0x0004) == 0x0000 )
 800dc32:	4b45      	ldr	r3, [pc, #276]	; (800dd48 <ThreadGetCurrentTask+0x1738>)
 800dc34:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800dc38:	f003 0304 	and.w	r3, r3, #4
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d12b      	bne.n	800dc98 <ThreadGetCurrentTask+0x1688>
								{
									osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800dc40:	4b40      	ldr	r3, [pc, #256]	; (800dd44 <ThreadGetCurrentTask+0x1734>)
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	f04f 31ff 	mov.w	r1, #4294967295
 800dc48:	4618      	mov	r0, r3
 800dc4a:	f7fa fe67 	bl	800891c <osMutexWait>
									fm25v02_read(2*LIGHT_CONTROL_REG+1, &phase_temp); // читаем значение из старшего байта регистра управления освещением
 800dc4e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800dc52:	4619      	mov	r1, r3
 800dc54:	f242 1083 	movw	r0, #8579	; 0x2183
 800dc58:	f008 ffe8 	bl	8016c2c <fm25v02_read>
									phase_temp = phase_temp|0x04;
 800dc5c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dc60:	b2db      	uxtb	r3, r3
 800dc62:	f043 0304 	orr.w	r3, r3, #4
 800dc66:	b2db      	uxtb	r3, r3
 800dc68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
									fm25v02_write(2*LIGHT_CONTROL_REG+1, phase_temp); // записываем младший байт регистра управления освещением
 800dc6c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dc70:	b2db      	uxtb	r3, r3
 800dc72:	4619      	mov	r1, r3
 800dc74:	f242 1083 	movw	r0, #8579	; 0x2183
 800dc78:	f009 f812 	bl	8016ca0 <fm25v02_write>
									control_registers.light_control_reg = control_registers.light_control_reg|0x04;
 800dc7c:	4b32      	ldr	r3, [pc, #200]	; (800dd48 <ThreadGetCurrentTask+0x1738>)
 800dc7e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800dc82:	f043 0304 	orr.w	r3, r3, #4
 800dc86:	b29a      	uxth	r2, r3
 800dc88:	4b2f      	ldr	r3, [pc, #188]	; (800dd48 <ThreadGetCurrentTask+0x1738>)
 800dc8a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
									osMutexRelease(Fm25v02MutexHandle);
 800dc8e:	4b2d      	ldr	r3, [pc, #180]	; (800dd44 <ThreadGetCurrentTask+0x1734>)
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	4618      	mov	r0, r3
 800dc94:	f7fa fe90 	bl	80089b8 <osMutexRelease>
					}

				}


				if( HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_1) == GPIO_PIN_RESET ) // если сброшен пин двери освещения
 800dc98:	2102      	movs	r1, #2
 800dc9a:	4828      	ldr	r0, [pc, #160]	; (800dd3c <ThreadGetCurrentTask+0x172c>)
 800dc9c:	f7f6 f8c8 	bl	8003e30 <HAL_GPIO_ReadPin>
 800dca0:	4603      	mov	r3, r0
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d152      	bne.n	800dd4c <ThreadGetCurrentTask+0x173c>
				{

					if(door_off_state<50)
 800dca6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dcaa:	b2db      	uxtb	r3, r3
 800dcac:	2b31      	cmp	r3, #49	; 0x31
 800dcae:	f200 8099 	bhi.w	800dde4 <ThreadGetCurrentTask+0x17d4>
					{
						door_off_state++;
 800dcb2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dcb6:	b2db      	uxtb	r3, r3
 800dcb8:	3301      	adds	r3, #1
 800dcba:	b2db      	uxtb	r3, r3
 800dcbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
						if(door_off_state == 50)
 800dcc0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dcc4:	b2db      	uxtb	r3, r3
 800dcc6:	2b32      	cmp	r3, #50	; 0x32
 800dcc8:	f040 808c 	bne.w	800dde4 <ThreadGetCurrentTask+0x17d4>
						{
							door_off_state = 0;
 800dccc:	2300      	movs	r3, #0
 800dcce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
							if( ((status_registers.lighting_status_reg)&0x0080) == 0x0080 )
 800dcd2:	4b1b      	ldr	r3, [pc, #108]	; (800dd40 <ThreadGetCurrentTask+0x1730>)
 800dcd4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dcd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	f000 8081 	beq.w	800dde4 <ThreadGetCurrentTask+0x17d4>
							{
								osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800dce2:	4b18      	ldr	r3, [pc, #96]	; (800dd44 <ThreadGetCurrentTask+0x1734>)
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	f04f 31ff 	mov.w	r1, #4294967295
 800dcea:	4618      	mov	r0, r3
 800dcec:	f7fa fe16 	bl	800891c <osMutexWait>
								fm25v02_read(2*LIGHTING_STATUS_REG+1, &phase_temp);
 800dcf0:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800dcf4:	4619      	mov	r1, r3
 800dcf6:	f242 0063 	movw	r0, #8291	; 0x2063
 800dcfa:	f008 ff97 	bl	8016c2c <fm25v02_read>
								phase_temp = phase_temp&0x7F;
 800dcfe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dd02:	b2db      	uxtb	r3, r3
 800dd04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd08:	b2db      	uxtb	r3, r3
 800dd0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
								fm25v02_write(2*LIGHTING_STATUS_REG+1, phase_temp);
 800dd0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800dd12:	b2db      	uxtb	r3, r3
 800dd14:	4619      	mov	r1, r3
 800dd16:	f242 0063 	movw	r0, #8291	; 0x2063
 800dd1a:	f008 ffc1 	bl	8016ca0 <fm25v02_write>
								status_registers.lighting_status_reg = status_registers.lighting_status_reg&0xFF7F;
 800dd1e:	4b08      	ldr	r3, [pc, #32]	; (800dd40 <ThreadGetCurrentTask+0x1730>)
 800dd20:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dd24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dd28:	b29a      	uxth	r2, r3
 800dd2a:	4b05      	ldr	r3, [pc, #20]	; (800dd40 <ThreadGetCurrentTask+0x1730>)
 800dd2c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
								osMutexRelease(Fm25v02MutexHandle);
 800dd30:	4b04      	ldr	r3, [pc, #16]	; (800dd44 <ThreadGetCurrentTask+0x1734>)
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	4618      	mov	r0, r3
 800dd36:	f7fa fe3f 	bl	80089b8 <osMutexRelease>
 800dd3a:	e053      	b.n	800dde4 <ThreadGetCurrentTask+0x17d4>
 800dd3c:	40021800 	.word	0x40021800
 800dd40:	2000a174 	.word	0x2000a174
 800dd44:	20009af8 	.word	0x20009af8
 800dd48:	2000a234 	.word	0x2000a234
							}
						}
					}
				}
				else if(HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_1) == GPIO_PIN_SET) // если установлен пин двери освещения
 800dd4c:	2102      	movs	r1, #2
 800dd4e:	4853      	ldr	r0, [pc, #332]	; (800de9c <ThreadGetCurrentTask+0x188c>)
 800dd50:	f7f6 f86e 	bl	8003e30 <HAL_GPIO_ReadPin>
 800dd54:	4603      	mov	r3, r0
 800dd56:	2b01      	cmp	r3, #1
 800dd58:	d144      	bne.n	800dde4 <ThreadGetCurrentTask+0x17d4>
				{

					door_off_state = 0;
 800dd5a:	2300      	movs	r3, #0
 800dd5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

					if(door_on_state<10)
 800dd60:	7efb      	ldrb	r3, [r7, #27]
 800dd62:	b2db      	uxtb	r3, r3
 800dd64:	2b09      	cmp	r3, #9
 800dd66:	d83d      	bhi.n	800dde4 <ThreadGetCurrentTask+0x17d4>
					{
						door_on_state++;
 800dd68:	7efb      	ldrb	r3, [r7, #27]
 800dd6a:	b2db      	uxtb	r3, r3
 800dd6c:	3301      	adds	r3, #1
 800dd6e:	b2db      	uxtb	r3, r3
 800dd70:	76fb      	strb	r3, [r7, #27]

						if(door_on_state==10)
 800dd72:	7efb      	ldrb	r3, [r7, #27]
 800dd74:	b2db      	uxtb	r3, r3
 800dd76:	2b0a      	cmp	r3, #10
 800dd78:	d134      	bne.n	800dde4 <ThreadGetCurrentTask+0x17d4>
						{
							door_on_state = 0;
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	76fb      	strb	r3, [r7, #27]

							if( ((status_registers.lighting_status_reg)&0x0080) == 0x0000 )
 800dd7e:	4b48      	ldr	r3, [pc, #288]	; (800dea0 <ThreadGetCurrentTask+0x1890>)
 800dd80:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dd84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d12b      	bne.n	800dde4 <ThreadGetCurrentTask+0x17d4>
							{
								osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800dd8c:	4b45      	ldr	r3, [pc, #276]	; (800dea4 <ThreadGetCurrentTask+0x1894>)
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	f04f 31ff 	mov.w	r1, #4294967295
 800dd94:	4618      	mov	r0, r3
 800dd96:	f7fa fdc1 	bl	800891c <osMutexWait>
								fm25v02_read(2*LIGHTING_STATUS_REG+1, &phase_temp);
 800dd9a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800dd9e:	4619      	mov	r1, r3
 800dda0:	f242 0063 	movw	r0, #8291	; 0x2063
 800dda4:	f008 ff42 	bl	8016c2c <fm25v02_read>
								phase_temp = phase_temp|0x80;
 800dda8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ddac:	b2db      	uxtb	r3, r3
 800ddae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ddb2:	b2db      	uxtb	r3, r3
 800ddb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
								fm25v02_write(2*LIGHTING_STATUS_REG+1, phase_temp);
 800ddb8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ddbc:	b2db      	uxtb	r3, r3
 800ddbe:	4619      	mov	r1, r3
 800ddc0:	f242 0063 	movw	r0, #8291	; 0x2063
 800ddc4:	f008 ff6c 	bl	8016ca0 <fm25v02_write>
								status_registers.lighting_status_reg = status_registers.lighting_status_reg|0x0080;
 800ddc8:	4b35      	ldr	r3, [pc, #212]	; (800dea0 <ThreadGetCurrentTask+0x1890>)
 800ddca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ddce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ddd2:	b29a      	uxth	r2, r3
 800ddd4:	4b32      	ldr	r3, [pc, #200]	; (800dea0 <ThreadGetCurrentTask+0x1890>)
 800ddd6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
								osMutexRelease(Fm25v02MutexHandle);
 800ddda:	4b32      	ldr	r3, [pc, #200]	; (800dea4 <ThreadGetCurrentTask+0x1894>)
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	4618      	mov	r0, r3
 800dde0:	f7fa fdea 	bl	80089b8 <osMutexRelease>

			//break;

		//}

				if(control_registers.lighting_switching_reg == LIGHTING_ON) // если функция освещения включена
 800dde4:	4b30      	ldr	r3, [pc, #192]	; (800dea8 <ThreadGetCurrentTask+0x1898>)
 800dde6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ddea:	2b01      	cmp	r3, #1
 800ddec:	d144      	bne.n	800de78 <ThreadGetCurrentTask+0x1868>
				{
					switch(control_registers.light_control_reg&0x01) // проверяем бит фазы А
 800ddee:	4b2e      	ldr	r3, [pc, #184]	; (800dea8 <ThreadGetCurrentTask+0x1898>)
 800ddf0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ddf4:	f003 0301 	and.w	r3, r3, #1
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d002      	beq.n	800de02 <ThreadGetCurrentTask+0x17f2>
 800ddfc:	2b01      	cmp	r3, #1
 800ddfe:	d003      	beq.n	800de08 <ThreadGetCurrentTask+0x17f8>
 800de00:	e00c      	b.n	800de1c <ThreadGetCurrentTask+0x180c>
					{
						case(PHASE_A_SWITCH_OFF): // если выставлен бит на выключение фазы А

							PHASE_A_OFF(); // выключаем фазу А
 800de02:	f009 f8eb 	bl	8016fdc <PHASE_A_OFF>

						break;
 800de06:	e009      	b.n	800de1c <ThreadGetCurrentTask+0x180c>
						case(PHASE_A_SWITCH_ON): // если выставлен бит на включение фазы А

							if( ((status_registers.lighting_status_reg)&0x0001) == 0x0000 ) // если на фазе А1 нет напряжения
 800de08:	4b25      	ldr	r3, [pc, #148]	; (800dea0 <ThreadGetCurrentTask+0x1890>)
 800de0a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800de0e:	f003 0301 	and.w	r3, r3, #1
 800de12:	2b00      	cmp	r3, #0
 800de14:	d101      	bne.n	800de1a <ThreadGetCurrentTask+0x180a>
							{
								PHASE_A_ON(); // включаем фазу А
 800de16:	f009 f8d5 	bl	8016fc4 <PHASE_A_ON>
							}

						break;
 800de1a:	bf00      	nop
					}
					switch(control_registers.light_control_reg&0x02) // проверяем бит фазы В
 800de1c:	4b22      	ldr	r3, [pc, #136]	; (800dea8 <ThreadGetCurrentTask+0x1898>)
 800de1e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800de22:	f003 0302 	and.w	r3, r3, #2
 800de26:	2b00      	cmp	r3, #0
 800de28:	d002      	beq.n	800de30 <ThreadGetCurrentTask+0x1820>
 800de2a:	2b02      	cmp	r3, #2
 800de2c:	d003      	beq.n	800de36 <ThreadGetCurrentTask+0x1826>
 800de2e:	e00c      	b.n	800de4a <ThreadGetCurrentTask+0x183a>
					{

						case(PHASE_B_SWITCH_OFF): // если выставлен бит на выключение фазы В

							PHASE_B_OFF(); // выключаем фазу А
 800de30:	f009 f8ec 	bl	801700c <PHASE_B_OFF>

						break;
 800de34:	e009      	b.n	800de4a <ThreadGetCurrentTask+0x183a>

						case(PHASE_B_SWITCH_ON): //если выставлен бит на включение фазы В

							if( ((status_registers.lighting_status_reg)&0x0002) == 0x0000 ) // если на фазе В1 нет напряжения
 800de36:	4b1a      	ldr	r3, [pc, #104]	; (800dea0 <ThreadGetCurrentTask+0x1890>)
 800de38:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800de3c:	f003 0302 	and.w	r3, r3, #2
 800de40:	2b00      	cmp	r3, #0
 800de42:	d101      	bne.n	800de48 <ThreadGetCurrentTask+0x1838>
							{
								PHASE_B_ON(); // включаем фазу А
 800de44:	f009 f8d6 	bl	8016ff4 <PHASE_B_ON>
							}

						break;
 800de48:	bf00      	nop

					}
					switch(control_registers.light_control_reg&0x04) // проверяяем бит фазы С
 800de4a:	4b17      	ldr	r3, [pc, #92]	; (800dea8 <ThreadGetCurrentTask+0x1898>)
 800de4c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800de50:	f003 0304 	and.w	r3, r3, #4
 800de54:	2b00      	cmp	r3, #0
 800de56:	d002      	beq.n	800de5e <ThreadGetCurrentTask+0x184e>
 800de58:	2b04      	cmp	r3, #4
 800de5a:	d003      	beq.n	800de64 <ThreadGetCurrentTask+0x1854>
 800de5c:	e019      	b.n	800de92 <ThreadGetCurrentTask+0x1882>
					{

						case(PHASE_C_SWITCH_OFF): // если выставлен бит на выключение фазы С

							PHASE_C_OFF(); // выключаем фазу А
 800de5e:	f009 f8ed 	bl	801703c <PHASE_C_OFF>

						break;
 800de62:	e016      	b.n	800de92 <ThreadGetCurrentTask+0x1882>

						case(PHASE_C_SWITCH_ON): // если выставлен бит на включение фазы С

							if( ((status_registers.lighting_status_reg)&0x0004) == 0x0000 ) // если на фазе В1 нет напряжения
 800de64:	4b0e      	ldr	r3, [pc, #56]	; (800dea0 <ThreadGetCurrentTask+0x1890>)
 800de66:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800de6a:	f003 0304 	and.w	r3, r3, #4
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d10e      	bne.n	800de90 <ThreadGetCurrentTask+0x1880>
							{
								PHASE_C_ON(); // включаем фазу А
 800de72:	f009 f8d7 	bl	8017024 <PHASE_C_ON>
							}

						break;
 800de76:	e00b      	b.n	800de90 <ThreadGetCurrentTask+0x1880>

					}
				}
				else if(control_registers.lighting_switching_reg == LIGHTING_OFF) // если функция освещения выключена
 800de78:	4b0b      	ldr	r3, [pc, #44]	; (800dea8 <ThreadGetCurrentTask+0x1898>)
 800de7a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d107      	bne.n	800de92 <ThreadGetCurrentTask+0x1882>
				{

					PHASE_A_OFF(); // отключаем фазу А
 800de82:	f009 f8ab 	bl	8016fdc <PHASE_A_OFF>

					PHASE_B_OFF(); // отключаем фазу В
 800de86:	f009 f8c1 	bl	801700c <PHASE_B_OFF>

					PHASE_C_OFF(); // отключаем фазу С
 800de8a:	f009 f8d7 	bl	801703c <PHASE_C_OFF>
 800de8e:	e000      	b.n	800de92 <ThreadGetCurrentTask+0x1882>
						break;
 800de90:	bf00      	nop

				}

		osDelay(1);
 800de92:	2001      	movs	r0, #1
 800de94:	f7fa fc61 	bl	800875a <osDelay>
					if(cur_a > (control_registers.max_current_phase_a)*10 ) // проверяем если значение тока превысило максимальное значение тока фазы А
 800de98:	f7fe bc11 	b.w	800c6be <ThreadGetCurrentTask+0xae>
 800de9c:	40021800 	.word	0x40021800
 800dea0:	2000a174 	.word	0x2000a174
 800dea4:	20009af8 	.word	0x20009af8
 800dea8:	2000a234 	.word	0x2000a234

0800deac <ThreadM95Task>:
uint8_t test_h;
uint8_t test_l;


void ThreadM95Task(void const * argument)
{
 800deac:	b590      	push	{r4, r7, lr}
 800deae:	b085      	sub	sp, #20
 800deb0:	af02      	add	r7, sp, #8
 800deb2:	6078      	str	r0, [r7, #4]

	osThreadSuspend(M95TaskHandle);
 800deb4:	4bbe      	ldr	r3, [pc, #760]	; (800e1b0 <ThreadM95Task+0x304>)
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	4618      	mov	r0, r3
 800deba:	f7fa ff45 	bl	8008d48 <osThreadSuspend>
	osSemaphoreWait(TransmissionStateHandle, osWaitForever); // обнуляем семафор, при создании семафора его значение равно 1
 800debe:	4bbd      	ldr	r3, [pc, #756]	; (800e1b4 <ThreadM95Task+0x308>)
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	f04f 31ff 	mov.w	r1, #4294967295
 800dec6:	4618      	mov	r0, r3
 800dec8:	f7fa fdde 	bl	8008a88 <osSemaphoreWait>
	osSemaphoreWait(ReceiveStateHandle, osWaitForever); // обнуляем семафор, при создании семафора его значение равно 1
 800decc:	4bba      	ldr	r3, [pc, #744]	; (800e1b8 <ThreadM95Task+0x30c>)
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	f04f 31ff 	mov.w	r1, #4294967295
 800ded4:	4618      	mov	r0, r3
 800ded6:	f7fa fdd7 	bl	8008a88 <osSemaphoreWait>

	osTimerStart(Ring_Center_TimerHandle, 60000); // запускаем таймер для перезагрузки по его окончанию
 800deda:	4bb8      	ldr	r3, [pc, #736]	; (800e1bc <ThreadM95Task+0x310>)
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	f64e 2160 	movw	r1, #60000	; 0xea60
 800dee2:	4618      	mov	r0, r3
 800dee4:	f7fa fc82 	bl	80087ec <osTimerStart>

		}
	}
	*/

	osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800dee8:	4bb5      	ldr	r3, [pc, #724]	; (800e1c0 <ThreadM95Task+0x314>)
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	f04f 31ff 	mov.w	r1, #4294967295
 800def0:	4618      	mov	r0, r3
 800def2:	f7fa fd13 	bl	800891c <osMutexWait>
	fm25v02_write(2*VERSION_REG, 0x01);
 800def6:	2101      	movs	r1, #1
 800def8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800defc:	f008 fed0 	bl	8016ca0 <fm25v02_write>
	fm25v02_write(2*VERSION_REG+1, 0x0E);
 800df00:	210e      	movs	r1, #14
 800df02:	f242 0001 	movw	r0, #8193	; 0x2001
 800df06:	f008 fecb 	bl	8016ca0 <fm25v02_write>
	osMutexRelease(Fm25v02MutexHandle);
 800df0a:	4bad      	ldr	r3, [pc, #692]	; (800e1c0 <ThreadM95Task+0x314>)
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	4618      	mov	r0, r3
 800df10:	f7fa fd52 	bl	80089b8 <osMutexRelease>


	for(;;)
	{

		osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800df14:	4baa      	ldr	r3, [pc, #680]	; (800e1c0 <ThreadM95Task+0x314>)
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	f04f 31ff 	mov.w	r1, #4294967295
 800df1c:	4618      	mov	r0, r3
 800df1e:	f7fa fcfd 	bl	800891c <osMutexWait>

		fm25v02_read(2*IP_1_REG+1, &ip1); // читаем значение IP адреса сервера из памяти
 800df22:	49a8      	ldr	r1, [pc, #672]	; (800e1c4 <ThreadM95Task+0x318>)
 800df24:	f242 105f 	movw	r0, #8543	; 0x215f
 800df28:	f008 fe80 	bl	8016c2c <fm25v02_read>
		fm25v02_read(2*IP_2_REG+1, &ip2);
 800df2c:	49a6      	ldr	r1, [pc, #664]	; (800e1c8 <ThreadM95Task+0x31c>)
 800df2e:	f242 1061 	movw	r0, #8545	; 0x2161
 800df32:	f008 fe7b 	bl	8016c2c <fm25v02_read>
		fm25v02_read(2*IP_3_REG+1, &ip3);
 800df36:	49a5      	ldr	r1, [pc, #660]	; (800e1cc <ThreadM95Task+0x320>)
 800df38:	f242 1063 	movw	r0, #8547	; 0x2163
 800df3c:	f008 fe76 	bl	8016c2c <fm25v02_read>
		fm25v02_read(2*IP_4_REG+1, &ip4);
 800df40:	49a3      	ldr	r1, [pc, #652]	; (800e1d0 <ThreadM95Task+0x324>)
 800df42:	f242 1065 	movw	r0, #8549	; 0x2165
 800df46:	f008 fe71 	bl	8016c2c <fm25v02_read>
		fm25v02_read(2*PORT_HIGH_REG+1, &port_high_reg); // читаем значение старшего байта порта сервера
 800df4a:	49a2      	ldr	r1, [pc, #648]	; (800e1d4 <ThreadM95Task+0x328>)
 800df4c:	f242 1067 	movw	r0, #8551	; 0x2167
 800df50:	f008 fe6c 	bl	8016c2c <fm25v02_read>
		fm25v02_read(2*PORT_LOW_REG+1, &port_low_reg); // читаем занчение младшего байта порта сервера
 800df54:	49a0      	ldr	r1, [pc, #640]	; (800e1d8 <ThreadM95Task+0x32c>)
 800df56:	f242 1069 	movw	r0, #8553	; 0x2169
 800df5a:	f008 fe67 	bl	8016c2c <fm25v02_read>

		osMutexRelease(Fm25v02MutexHandle);
 800df5e:	4b98      	ldr	r3, [pc, #608]	; (800e1c0 <ThreadM95Task+0x314>)
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	4618      	mov	r0, r3
 800df64:	f7fa fd28 	bl	80089b8 <osMutexRelease>

		port = (((uint16_t)port_high_reg)<<8)|((uint16_t)port_low_reg); // вычисляем общее значение регистра порта
 800df68:	4b9a      	ldr	r3, [pc, #616]	; (800e1d4 <ThreadM95Task+0x328>)
 800df6a:	781b      	ldrb	r3, [r3, #0]
 800df6c:	b2db      	uxtb	r3, r3
 800df6e:	021b      	lsls	r3, r3, #8
 800df70:	b21a      	sxth	r2, r3
 800df72:	4b99      	ldr	r3, [pc, #612]	; (800e1d8 <ThreadM95Task+0x32c>)
 800df74:	781b      	ldrb	r3, [r3, #0]
 800df76:	b2db      	uxtb	r3, r3
 800df78:	b21b      	sxth	r3, r3
 800df7a:	4313      	orrs	r3, r2
 800df7c:	b21b      	sxth	r3, r3
 800df7e:	b29a      	uxth	r2, r3
 800df80:	4b96      	ldr	r3, [pc, #600]	; (800e1dc <ThreadM95Task+0x330>)
 800df82:	801a      	strh	r2, [r3, #0]

		if ( (ip1==0)&&(ip2==0)&&(ip3==0)&&(ip4==0)&&(port==0) ) // Если значения ip адреса сервера и его номера порта при инициализации нулевые, то выставляем их значения по умолчанию
 800df84:	4b8f      	ldr	r3, [pc, #572]	; (800e1c4 <ThreadM95Task+0x318>)
 800df86:	781b      	ldrb	r3, [r3, #0]
 800df88:	b2db      	uxtb	r3, r3
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d123      	bne.n	800dfd6 <ThreadM95Task+0x12a>
 800df8e:	4b8e      	ldr	r3, [pc, #568]	; (800e1c8 <ThreadM95Task+0x31c>)
 800df90:	781b      	ldrb	r3, [r3, #0]
 800df92:	b2db      	uxtb	r3, r3
 800df94:	2b00      	cmp	r3, #0
 800df96:	d11e      	bne.n	800dfd6 <ThreadM95Task+0x12a>
 800df98:	4b8c      	ldr	r3, [pc, #560]	; (800e1cc <ThreadM95Task+0x320>)
 800df9a:	781b      	ldrb	r3, [r3, #0]
 800df9c:	b2db      	uxtb	r3, r3
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d119      	bne.n	800dfd6 <ThreadM95Task+0x12a>
 800dfa2:	4b8b      	ldr	r3, [pc, #556]	; (800e1d0 <ThreadM95Task+0x324>)
 800dfa4:	781b      	ldrb	r3, [r3, #0]
 800dfa6:	b2db      	uxtb	r3, r3
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d114      	bne.n	800dfd6 <ThreadM95Task+0x12a>
 800dfac:	4b8b      	ldr	r3, [pc, #556]	; (800e1dc <ThreadM95Task+0x330>)
 800dfae:	881b      	ldrh	r3, [r3, #0]
 800dfb0:	b29b      	uxth	r3, r3
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d10f      	bne.n	800dfd6 <ThreadM95Task+0x12a>
		{
			// сервер сигнализации
			ip1 = 195;    // значение по умолчанию
 800dfb6:	4b83      	ldr	r3, [pc, #524]	; (800e1c4 <ThreadM95Task+0x318>)
 800dfb8:	22c3      	movs	r2, #195	; 0xc3
 800dfba:	701a      	strb	r2, [r3, #0]
			ip2 = 208;    // значение по умолчанию
 800dfbc:	4b82      	ldr	r3, [pc, #520]	; (800e1c8 <ThreadM95Task+0x31c>)
 800dfbe:	22d0      	movs	r2, #208	; 0xd0
 800dfc0:	701a      	strb	r2, [r3, #0]
			ip3 = 163;    // значение по умолчанию
 800dfc2:	4b82      	ldr	r3, [pc, #520]	; (800e1cc <ThreadM95Task+0x320>)
 800dfc4:	22a3      	movs	r2, #163	; 0xa3
 800dfc6:	701a      	strb	r2, [r3, #0]
			ip4 = 67;     // значение по умолчанию
 800dfc8:	4b81      	ldr	r3, [pc, #516]	; (800e1d0 <ThreadM95Task+0x324>)
 800dfca:	2243      	movs	r2, #67	; 0x43
 800dfcc:	701a      	strb	r2, [r3, #0]
			port = 35050; // значение по умолчанию
 800dfce:	4b83      	ldr	r3, [pc, #524]	; (800e1dc <ThreadM95Task+0x330>)
 800dfd0:	f648 02ea 	movw	r2, #35050	; 0x88ea
 800dfd4:	801a      	strh	r2, [r3, #0]
			//ip4 = 67;     // значение по умолчанию
			//port = 35070; // значение по умолчанию
		}


		osMutexWait(UartMutexHandle, osWaitForever);
 800dfd6:	4b82      	ldr	r3, [pc, #520]	; (800e1e0 <ThreadM95Task+0x334>)
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	f04f 31ff 	mov.w	r1, #4294967295
 800dfde:	4618      	mov	r0, r3
 800dfe0:	f7fa fc9c 	bl	800891c <osMutexWait>

		if(AT()==AT_ERROR) // два раза проверяем, есть ли ответ на команду АТ, если нет, включаем питание
 800dfe4:	f009 f912 	bl	801720c <AT>
 800dfe8:	4603      	mov	r3, r0
 800dfea:	2b01      	cmp	r3, #1
 800dfec:	d106      	bne.n	800dffc <ThreadM95Task+0x150>
		{
			if(AT()==AT_ERROR)
 800dfee:	f009 f90d 	bl	801720c <AT>
 800dff2:	4603      	mov	r3, r0
 800dff4:	2b01      	cmp	r3, #1
 800dff6:	d101      	bne.n	800dffc <ThreadM95Task+0x150>
			{
				m95_power_on();
 800dff8:	f009 f860 	bl	80170bc <m95_power_on>
			}
		}

		if( ATE0() == AT_OK )
 800dffc:	f009 f8b0 	bl	8017160 <ATE0>
		{

		}

		osMutexRelease(UartMutexHandle);
 800e000:	4b77      	ldr	r3, [pc, #476]	; (800e1e0 <ThreadM95Task+0x334>)
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	4618      	mov	r0, r3
 800e006:	f7fa fcd7 	bl	80089b8 <osMutexRelease>

		osMutexWait(UartMutexHandle, osWaitForever);
 800e00a:	4b75      	ldr	r3, [pc, #468]	; (800e1e0 <ThreadM95Task+0x334>)
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	f04f 31ff 	mov.w	r1, #4294967295
 800e012:	4618      	mov	r0, r3
 800e014:	f7fa fc82 	bl	800891c <osMutexWait>

		switch(AT_QISTATE())
 800e018:	f00a f8d2 	bl	80181c0 <AT_QISTATE>
 800e01c:	4603      	mov	r3, r0
 800e01e:	3b01      	subs	r3, #1
 800e020:	2b0b      	cmp	r3, #11
 800e022:	f200 814d 	bhi.w	800e2c0 <ThreadM95Task+0x414>
 800e026:	a201      	add	r2, pc, #4	; (adr r2, 800e02c <ThreadM95Task+0x180>)
 800e028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e02c:	0800e2c1 	.word	0x0800e2c1
 800e030:	0800e05d 	.word	0x0800e05d
 800e034:	0800e15d 	.word	0x0800e15d
 800e038:	0800e2c1 	.word	0x0800e2c1
 800e03c:	0800e167 	.word	0x0800e167
 800e040:	0800e171 	.word	0x0800e171
 800e044:	0800e2b7 	.word	0x0800e2b7
 800e048:	0800e2c1 	.word	0x0800e2c1
 800e04c:	0800e2c1 	.word	0x0800e2c1
 800e050:	0800e1f9 	.word	0x0800e1f9
 800e054:	0800e235 	.word	0x0800e235
 800e058:	0800e22b 	.word	0x0800e22b
		{
			case IP_INITIAL:

				LED1_OFF();
 800e05c:	f008 ff0a 	bl	8016e74 <LED1_OFF>
				if( AT_QIMUX(0) == AT_OK )
 800e060:	2000      	movs	r0, #0
 800e062:	f009 feef 	bl	8017e44 <AT_QIMUX>
				{

				}
				if( AT_COPS() == AT_OK )
 800e066:	f009 fd2f 	bl	8017ac8 <AT_COPS>
				{

				}
				if(	AT_QCCID(&id2[0], &id1[0]) == AT_OK ) // читаем CCID сим-карты
 800e06a:	495e      	ldr	r1, [pc, #376]	; (800e1e4 <ThreadM95Task+0x338>)
 800e06c:	485e      	ldr	r0, [pc, #376]	; (800e1e8 <ThreadM95Task+0x33c>)
 800e06e:	f009 f9a1 	bl	80173b4 <AT_QCCID>
 800e072:	4603      	mov	r3, r0
 800e074:	2b00      	cmp	r3, #0
 800e076:	d16b      	bne.n	800e150 <ThreadM95Task+0x2a4>
				{
					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800e078:	4b51      	ldr	r3, [pc, #324]	; (800e1c0 <ThreadM95Task+0x314>)
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	f04f 31ff 	mov.w	r1, #4294967295
 800e080:	4618      	mov	r0, r3
 800e082:	f7fa fc4b 	bl	800891c <osMutexWait>
					//fm25v02_fast_write(ICCID_NUMBER_REG1, &id2[0], 8); // записываем в регистры CCID сим-карты
					fm25v02_write(2*ICCID_NUMBER_REG1, 0x00);
 800e086:	2100      	movs	r1, #0
 800e088:	f242 00b0 	movw	r0, #8368	; 0x20b0
 800e08c:	f008 fe08 	bl	8016ca0 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG1+1, id2[0]);
 800e090:	4b55      	ldr	r3, [pc, #340]	; (800e1e8 <ThreadM95Task+0x33c>)
 800e092:	781b      	ldrb	r3, [r3, #0]
 800e094:	4619      	mov	r1, r3
 800e096:	f242 00b1 	movw	r0, #8369	; 0x20b1
 800e09a:	f008 fe01 	bl	8016ca0 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG2, 0x00);
 800e09e:	2100      	movs	r1, #0
 800e0a0:	f242 00b2 	movw	r0, #8370	; 0x20b2
 800e0a4:	f008 fdfc 	bl	8016ca0 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG2+1, id2[1]);
 800e0a8:	4b4f      	ldr	r3, [pc, #316]	; (800e1e8 <ThreadM95Task+0x33c>)
 800e0aa:	785b      	ldrb	r3, [r3, #1]
 800e0ac:	4619      	mov	r1, r3
 800e0ae:	f242 00b3 	movw	r0, #8371	; 0x20b3
 800e0b2:	f008 fdf5 	bl	8016ca0 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG3, 0x00);
 800e0b6:	2100      	movs	r1, #0
 800e0b8:	f242 00b4 	movw	r0, #8372	; 0x20b4
 800e0bc:	f008 fdf0 	bl	8016ca0 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG3+1, id2[2]);
 800e0c0:	4b49      	ldr	r3, [pc, #292]	; (800e1e8 <ThreadM95Task+0x33c>)
 800e0c2:	789b      	ldrb	r3, [r3, #2]
 800e0c4:	4619      	mov	r1, r3
 800e0c6:	f242 00b5 	movw	r0, #8373	; 0x20b5
 800e0ca:	f008 fde9 	bl	8016ca0 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG4, 0x00);
 800e0ce:	2100      	movs	r1, #0
 800e0d0:	f242 00b6 	movw	r0, #8374	; 0x20b6
 800e0d4:	f008 fde4 	bl	8016ca0 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG4+1, id2[3]);
 800e0d8:	4b43      	ldr	r3, [pc, #268]	; (800e1e8 <ThreadM95Task+0x33c>)
 800e0da:	78db      	ldrb	r3, [r3, #3]
 800e0dc:	4619      	mov	r1, r3
 800e0de:	f242 00b7 	movw	r0, #8375	; 0x20b7
 800e0e2:	f008 fddd 	bl	8016ca0 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG5, 0x00);
 800e0e6:	2100      	movs	r1, #0
 800e0e8:	f242 00b8 	movw	r0, #8376	; 0x20b8
 800e0ec:	f008 fdd8 	bl	8016ca0 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG5+1, id2[4]);
 800e0f0:	4b3d      	ldr	r3, [pc, #244]	; (800e1e8 <ThreadM95Task+0x33c>)
 800e0f2:	791b      	ldrb	r3, [r3, #4]
 800e0f4:	4619      	mov	r1, r3
 800e0f6:	f242 00b9 	movw	r0, #8377	; 0x20b9
 800e0fa:	f008 fdd1 	bl	8016ca0 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG6, 0x00);
 800e0fe:	2100      	movs	r1, #0
 800e100:	f242 00ba 	movw	r0, #8378	; 0x20ba
 800e104:	f008 fdcc 	bl	8016ca0 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG6+1, id2[5]);
 800e108:	4b37      	ldr	r3, [pc, #220]	; (800e1e8 <ThreadM95Task+0x33c>)
 800e10a:	795b      	ldrb	r3, [r3, #5]
 800e10c:	4619      	mov	r1, r3
 800e10e:	f242 00bb 	movw	r0, #8379	; 0x20bb
 800e112:	f008 fdc5 	bl	8016ca0 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG7, 0x00);
 800e116:	2100      	movs	r1, #0
 800e118:	f242 00bc 	movw	r0, #8380	; 0x20bc
 800e11c:	f008 fdc0 	bl	8016ca0 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG7+1, id2[6]);
 800e120:	4b31      	ldr	r3, [pc, #196]	; (800e1e8 <ThreadM95Task+0x33c>)
 800e122:	799b      	ldrb	r3, [r3, #6]
 800e124:	4619      	mov	r1, r3
 800e126:	f242 00bd 	movw	r0, #8381	; 0x20bd
 800e12a:	f008 fdb9 	bl	8016ca0 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG8, 0x00);
 800e12e:	2100      	movs	r1, #0
 800e130:	f242 00be 	movw	r0, #8382	; 0x20be
 800e134:	f008 fdb4 	bl	8016ca0 <fm25v02_write>
					fm25v02_write(2*ICCID_NUMBER_REG8+1, id2[7]);
 800e138:	4b2b      	ldr	r3, [pc, #172]	; (800e1e8 <ThreadM95Task+0x33c>)
 800e13a:	79db      	ldrb	r3, [r3, #7]
 800e13c:	4619      	mov	r1, r3
 800e13e:	f242 00bf 	movw	r0, #8383	; 0x20bf
 800e142:	f008 fdad 	bl	8016ca0 <fm25v02_write>
					osMutexRelease(Fm25v02MutexHandle);
 800e146:	4b1e      	ldr	r3, [pc, #120]	; (800e1c0 <ThreadM95Task+0x314>)
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	4618      	mov	r0, r3
 800e14c:	f7fa fc34 	bl	80089b8 <osMutexRelease>
				}

				if(AT_QIREGAPP("mts.internet.ru", "mts", "mts") == AT_OK)
 800e150:	4a26      	ldr	r2, [pc, #152]	; (800e1ec <ThreadM95Task+0x340>)
 800e152:	4926      	ldr	r1, [pc, #152]	; (800e1ec <ThreadM95Task+0x340>)
 800e154:	4826      	ldr	r0, [pc, #152]	; (800e1f0 <ThreadM95Task+0x344>)
 800e156:	f009 fee3 	bl	8017f20 <AT_QIREGAPP>
				{

				}

			break;
 800e15a:	e0b6      	b.n	800e2ca <ThreadM95Task+0x41e>

			case IP_START:

				LED1_OFF();
 800e15c:	f008 fe8a 	bl	8016e74 <LED1_OFF>
				if(AT_QIACT()!=AT_OK)
 800e160:	f009 ff5a 	bl	8018018 <AT_QIACT>
				{

				}

			break;
 800e164:	e0b1      	b.n	800e2ca <ThreadM95Task+0x41e>

			case IP_IND:

				LED1_OFF();
 800e166:	f008 fe85 	bl	8016e74 <LED1_OFF>
				if(AT_QIDEACT()!=AT_OK)
 800e16a:	f009 ffbf 	bl	80180ec <AT_QIDEACT>
				{

				}

			break;
 800e16e:	e0ac      	b.n	800e2ca <ThreadM95Task+0x41e>

			case IP_GPRSACT:

				LED1_OFF();
 800e170:	f008 fe80 	bl	8016e74 <LED1_OFF>
				if( AT_QIOPEN("TCP", ip1, ip2, ip3, ip4, port) == AT_OK )
 800e174:	4b13      	ldr	r3, [pc, #76]	; (800e1c4 <ThreadM95Task+0x318>)
 800e176:	781b      	ldrb	r3, [r3, #0]
 800e178:	b2d9      	uxtb	r1, r3
 800e17a:	4b13      	ldr	r3, [pc, #76]	; (800e1c8 <ThreadM95Task+0x31c>)
 800e17c:	781b      	ldrb	r3, [r3, #0]
 800e17e:	b2d8      	uxtb	r0, r3
 800e180:	4b12      	ldr	r3, [pc, #72]	; (800e1cc <ThreadM95Task+0x320>)
 800e182:	781b      	ldrb	r3, [r3, #0]
 800e184:	b2dc      	uxtb	r4, r3
 800e186:	4b12      	ldr	r3, [pc, #72]	; (800e1d0 <ThreadM95Task+0x324>)
 800e188:	781b      	ldrb	r3, [r3, #0]
 800e18a:	b2db      	uxtb	r3, r3
 800e18c:	4a13      	ldr	r2, [pc, #76]	; (800e1dc <ThreadM95Task+0x330>)
 800e18e:	8812      	ldrh	r2, [r2, #0]
 800e190:	b292      	uxth	r2, r2
 800e192:	9201      	str	r2, [sp, #4]
 800e194:	9300      	str	r3, [sp, #0]
 800e196:	4623      	mov	r3, r4
 800e198:	4602      	mov	r2, r0
 800e19a:	4816      	ldr	r0, [pc, #88]	; (800e1f4 <ThreadM95Task+0x348>)
 800e19c:	f009 fcf0 	bl	8017b80 <AT_QIOPEN>
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	f000 808e 	beq.w	800e2c4 <ThreadM95Task+0x418>
				{

				}
				else
				{
					LED1_OFF();
 800e1a8:	f008 fe64 	bl	8016e74 <LED1_OFF>
				}

			break;
 800e1ac:	e08a      	b.n	800e2c4 <ThreadM95Task+0x418>
 800e1ae:	bf00      	nop
 800e1b0:	20009948 	.word	0x20009948
 800e1b4:	20009d9c 	.word	0x20009d9c
 800e1b8:	20009db4 	.word	0x20009db4
 800e1bc:	20009700 	.word	0x20009700
 800e1c0:	20009af8 	.word	0x20009af8
 800e1c4:	20007ffc 	.word	0x20007ffc
 800e1c8:	20007ffd 	.word	0x20007ffd
 800e1cc:	20007ffe 	.word	0x20007ffe
 800e1d0:	20007fff 	.word	0x20007fff
 800e1d4:	20008000 	.word	0x20008000
 800e1d8:	20008001 	.word	0x20008001
 800e1dc:	20008002 	.word	0x20008002
 800e1e0:	200096f8 	.word	0x200096f8
 800e1e4:	20009e68 	.word	0x20009e68
 800e1e8:	20009e5c 	.word	0x20009e5c
 800e1ec:	0801bf30 	.word	0x0801bf30
 800e1f0:	0801bf34 	.word	0x0801bf34
 800e1f4:	0801bf44 	.word	0x0801bf44

			case IP_CLOSE:
				//osThreadSuspend(CallRingCenterTaskHandle);
				LED1_OFF();
 800e1f8:	f008 fe3c 	bl	8016e74 <LED1_OFF>
				if( AT_QIOPEN("TCP", ip1 , ip2, ip3, ip4, port) == AT_OK )
 800e1fc:	4b38      	ldr	r3, [pc, #224]	; (800e2e0 <ThreadM95Task+0x434>)
 800e1fe:	781b      	ldrb	r3, [r3, #0]
 800e200:	b2d9      	uxtb	r1, r3
 800e202:	4b38      	ldr	r3, [pc, #224]	; (800e2e4 <ThreadM95Task+0x438>)
 800e204:	781b      	ldrb	r3, [r3, #0]
 800e206:	b2d8      	uxtb	r0, r3
 800e208:	4b37      	ldr	r3, [pc, #220]	; (800e2e8 <ThreadM95Task+0x43c>)
 800e20a:	781b      	ldrb	r3, [r3, #0]
 800e20c:	b2dc      	uxtb	r4, r3
 800e20e:	4b37      	ldr	r3, [pc, #220]	; (800e2ec <ThreadM95Task+0x440>)
 800e210:	781b      	ldrb	r3, [r3, #0]
 800e212:	b2db      	uxtb	r3, r3
 800e214:	4a36      	ldr	r2, [pc, #216]	; (800e2f0 <ThreadM95Task+0x444>)
 800e216:	8812      	ldrh	r2, [r2, #0]
 800e218:	b292      	uxth	r2, r2
 800e21a:	9201      	str	r2, [sp, #4]
 800e21c:	9300      	str	r3, [sp, #0]
 800e21e:	4623      	mov	r3, r4
 800e220:	4602      	mov	r2, r0
 800e222:	4834      	ldr	r0, [pc, #208]	; (800e2f4 <ThreadM95Task+0x448>)
 800e224:	f009 fcac 	bl	8017b80 <AT_QIOPEN>
				else
				{

				}

			break;
 800e228:	e04f      	b.n	800e2ca <ThreadM95Task+0x41e>

			case PDP_DEACT:

				LED1_OFF();
 800e22a:	f008 fe23 	bl	8016e74 <LED1_OFF>
				if(AT_QIACT()!=AT_OK)
 800e22e:	f009 fef3 	bl	8018018 <AT_QIACT>
				{

				}
			break;
 800e232:	e04a      	b.n	800e2ca <ThreadM95Task+0x41e>

			case CONNECT_OK: // Если соединение установлено

				//osTimerStart(Ring_Center_TimerHandle, 60000); // запускаем таймер и обнуляем его при каждом ответе о соединении.
				//osThreadResume(CallRingCenterTaskHandle); // пробуждаем процесс запроса к серверу
				LED1_ON();
 800e234:	f008 fe2a 	bl	8016e8c <LED1_ON>
				if( AT_COPS() == AT_OK )
 800e238:	f009 fc46 	bl	8017ac8 <AT_COPS>
				{

				}
				if( AT_CSQ(&level) == AT_OK )
 800e23c:	482e      	ldr	r0, [pc, #184]	; (800e2f8 <ThreadM95Task+0x44c>)
 800e23e:	f009 f83b 	bl	80172b8 <AT_CSQ>
 800e242:	4603      	mov	r3, r0
 800e244:	2b00      	cmp	r3, #0
 800e246:	d117      	bne.n	800e278 <ThreadM95Task+0x3cc>
				{
					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800e248:	4b2c      	ldr	r3, [pc, #176]	; (800e2fc <ThreadM95Task+0x450>)
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	f04f 31ff 	mov.w	r1, #4294967295
 800e250:	4618      	mov	r0, r3
 800e252:	f7fa fb63 	bl	800891c <osMutexWait>
					fm25v02_write(2*SIGNAL_LEVEL_REG, 0x00);
 800e256:	2100      	movs	r1, #0
 800e258:	f242 00a6 	movw	r0, #8358	; 0x20a6
 800e25c:	f008 fd20 	bl	8016ca0 <fm25v02_write>
					fm25v02_write(2*SIGNAL_LEVEL_REG+1, level);
 800e260:	4b25      	ldr	r3, [pc, #148]	; (800e2f8 <ThreadM95Task+0x44c>)
 800e262:	781b      	ldrb	r3, [r3, #0]
 800e264:	4619      	mov	r1, r3
 800e266:	f242 00a7 	movw	r0, #8359	; 0x20a7
 800e26a:	f008 fd19 	bl	8016ca0 <fm25v02_write>
					osMutexRelease(Fm25v02MutexHandle);
 800e26e:	4b23      	ldr	r3, [pc, #140]	; (800e2fc <ThreadM95Task+0x450>)
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	4618      	mov	r0, r3
 800e274:	f7fa fba0 	bl	80089b8 <osMutexRelease>
				}
				if( request_state == 0)
 800e278:	4b21      	ldr	r3, [pc, #132]	; (800e300 <ThreadM95Task+0x454>)
 800e27a:	781b      	ldrb	r3, [r3, #0]
 800e27c:	b2db      	uxtb	r3, r3
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d122      	bne.n	800e2c8 <ThreadM95Task+0x41c>
				{
					request_state = 1;
 800e282:	4b1f      	ldr	r3, [pc, #124]	; (800e300 <ThreadM95Task+0x454>)
 800e284:	2201      	movs	r2, #1
 800e286:	701a      	strb	r2, [r3, #0]
					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800e288:	4b1c      	ldr	r3, [pc, #112]	; (800e2fc <ThreadM95Task+0x450>)
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	f04f 31ff 	mov.w	r1, #4294967295
 800e290:	4618      	mov	r0, r3
 800e292:	f7fa fb43 	bl	800891c <osMutexWait>
					fm25v02_write(2*GPRS_CALL_REG, 0x00);
 800e296:	2100      	movs	r1, #0
 800e298:	f242 106e 	movw	r0, #8558	; 0x216e
 800e29c:	f008 fd00 	bl	8016ca0 <fm25v02_write>
					fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 800e2a0:	2101      	movs	r1, #1
 800e2a2:	f242 106f 	movw	r0, #8559	; 0x216f
 800e2a6:	f008 fcfb 	bl	8016ca0 <fm25v02_write>
					osMutexRelease(Fm25v02MutexHandle);
 800e2aa:	4b14      	ldr	r3, [pc, #80]	; (800e2fc <ThreadM95Task+0x450>)
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	f7fa fb82 	bl	80089b8 <osMutexRelease>

					//}

				//}

			break;
 800e2b4:	e008      	b.n	800e2c8 <ThreadM95Task+0x41c>

			case IP_STATUS:

				LED1_OFF();
 800e2b6:	f008 fddd 	bl	8016e74 <LED1_OFF>
				m95_power_off();
 800e2ba:	f008 ff1b 	bl	80170f4 <m95_power_off>
				//else
				//{

				//}

			break;
 800e2be:	e004      	b.n	800e2ca <ThreadM95Task+0x41e>

			break;

			default:

			break;
 800e2c0:	bf00      	nop
 800e2c2:	e002      	b.n	800e2ca <ThreadM95Task+0x41e>
			break;
 800e2c4:	bf00      	nop
 800e2c6:	e000      	b.n	800e2ca <ThreadM95Task+0x41e>
			break;
 800e2c8:	bf00      	nop

		}

		osMutexRelease(UartMutexHandle);
 800e2ca:	4b0e      	ldr	r3, [pc, #56]	; (800e304 <ThreadM95Task+0x458>)
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	f7fa fb72 	bl	80089b8 <osMutexRelease>
		if(AT_QIMODE(0) == AT_OK){}
		if(AT_QIHEAD(1) == AT_OK){}
		if(AT_QISHOWPT(0) == AT_OK){}
		*/

		osDelay(1000);
 800e2d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800e2d8:	f7fa fa3f 	bl	800875a <osDelay>
		osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800e2dc:	e61a      	b.n	800df14 <ThreadM95Task+0x68>
 800e2de:	bf00      	nop
 800e2e0:	20007ffc 	.word	0x20007ffc
 800e2e4:	20007ffd 	.word	0x20007ffd
 800e2e8:	20007ffe 	.word	0x20007ffe
 800e2ec:	20007fff 	.word	0x20007fff
 800e2f0:	20008002 	.word	0x20008002
 800e2f4:	0801bf44 	.word	0x0801bf44
 800e2f8:	2000a05c 	.word	0x2000a05c
 800e2fc:	20009af8 	.word	0x20009af8
 800e300:	20008004 	.word	0x20008004
 800e304:	200096f8 	.word	0x200096f8

0800e308 <__NVIC_SystemReset>:
{
 800e308:	b480      	push	{r7}
 800e30a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800e30c:	f3bf 8f4f 	dsb	sy
}
 800e310:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800e312:	4b06      	ldr	r3, [pc, #24]	; (800e32c <__NVIC_SystemReset+0x24>)
 800e314:	68db      	ldr	r3, [r3, #12]
 800e316:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800e31a:	4904      	ldr	r1, [pc, #16]	; (800e32c <__NVIC_SystemReset+0x24>)
 800e31c:	4b04      	ldr	r3, [pc, #16]	; (800e330 <__NVIC_SystemReset+0x28>)
 800e31e:	4313      	orrs	r3, r2
 800e320:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800e322:	f3bf 8f4f 	dsb	sy
}
 800e326:	bf00      	nop
    __NOP();
 800e328:	bf00      	nop
 800e32a:	e7fd      	b.n	800e328 <__NVIC_SystemReset+0x20>
 800e32c:	e000ed00 	.word	0xe000ed00
 800e330:	05fa0004 	.word	0x05fa0004
 800e334:	00000000 	.word	0x00000000

0800e338 <ThreadMainTask>:
unsigned char sensor_id;



void ThreadMainTask(void const * argument)
{
 800e338:	b590      	push	{r4, r7, lr}
 800e33a:	b087      	sub	sp, #28
 800e33c:	af02      	add	r7, sp, #8
 800e33e:	6078      	str	r0, [r7, #4]





	osThreadSuspend(MainTaskHandle); // ждем пока не будут вычитаны регистры и не получен статус фаз А1,А2,В1,В2,С1,С2
 800e340:	4b54      	ldr	r3, [pc, #336]	; (800e494 <ThreadMainTask+0x15c>)
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	4618      	mov	r0, r3
 800e346:	f7fa fcff 	bl	8008d48 <osThreadSuspend>

	time_on_counter = (control_registers.delay_on_sensor_reg + 1); // выставляем значения, чтобы не происходило переключений освещения после сброса контроллера
 800e34a:	4b53      	ldr	r3, [pc, #332]	; (800e498 <ThreadMainTask+0x160>)
 800e34c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e350:	3301      	adds	r3, #1
 800e352:	b29a      	uxth	r2, r3
 800e354:	4b51      	ldr	r3, [pc, #324]	; (800e49c <ThreadMainTask+0x164>)
 800e356:	801a      	strh	r2, [r3, #0]
	time_off_counter = (control_registers.delay_off_sensor_reg + 1);
 800e358:	4b4f      	ldr	r3, [pc, #316]	; (800e498 <ThreadMainTask+0x160>)
 800e35a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e35e:	3301      	adds	r3, #1
 800e360:	b29a      	uxth	r2, r3
 800e362:	4b4f      	ldr	r3, [pc, #316]	; (800e4a0 <ThreadMainTask+0x168>)
 800e364:	801a      	strh	r2, [r3, #0]


	for(;;)
	{

		if( HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0) == GPIO_PIN_SET ) // проверяем если есть наличие единицы на пине PFO микросхемы TPS3306-15
 800e366:	2101      	movs	r1, #1
 800e368:	484e      	ldr	r0, [pc, #312]	; (800e4a4 <ThreadMainTask+0x16c>)
 800e36a:	f7f5 fd61 	bl	8003e30 <HAL_GPIO_ReadPin>
 800e36e:	4603      	mov	r3, r0
 800e370:	2b01      	cmp	r3, #1
 800e372:	f040 809f 	bne.w	800e4b4 <ThreadMainTask+0x17c>
		{
			if(status_registers.power_on_reg == 0) // если основного питания до этого не было, записываем в регистр наличия питания 1
 800e376:	4b4c      	ldr	r3, [pc, #304]	; (800e4a8 <ThreadMainTask+0x170>)
 800e378:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d14c      	bne.n	800e418 <ThreadMainTask+0xe0>
			{
				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800e37e:	4b4b      	ldr	r3, [pc, #300]	; (800e4ac <ThreadMainTask+0x174>)
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	f04f 31ff 	mov.w	r1, #4294967295
 800e386:	4618      	mov	r0, r3
 800e388:	f7fa fac8 	bl	800891c <osMutexWait>
				fm25v02_write(2*POWER_ON_REG, 0x00);
 800e38c:	2100      	movs	r1, #0
 800e38e:	f242 0022 	movw	r0, #8226	; 0x2022
 800e392:	f008 fc85 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*POWER_ON_REG+1, 1);
 800e396:	2101      	movs	r1, #1
 800e398:	f242 0023 	movw	r0, #8227	; 0x2023
 800e39c:	f008 fc80 	bl	8016ca0 <fm25v02_write>
				status_registers.power_on_reg = 1;
 800e3a0:	4b41      	ldr	r3, [pc, #260]	; (800e4a8 <ThreadMainTask+0x170>)
 800e3a2:	2201      	movs	r2, #1
 800e3a4:	845a      	strh	r2, [r3, #34]	; 0x22
				osMutexRelease(Fm25v02MutexHandle);
 800e3a6:	4b41      	ldr	r3, [pc, #260]	; (800e4ac <ThreadMainTask+0x174>)
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	f7fa fb04 	bl	80089b8 <osMutexRelease>

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800e3b0:	4b3e      	ldr	r3, [pc, #248]	; (800e4ac <ThreadMainTask+0x174>)
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	f04f 31ff 	mov.w	r1, #4294967295
 800e3b8:	4618      	mov	r0, r3
 800e3ba:	f7fa faaf 	bl	800891c <osMutexWait>
				fm25v02_write(2*GPRS_CALL_REG, 0x00);
 800e3be:	2100      	movs	r1, #0
 800e3c0:	f242 106e 	movw	r0, #8558	; 0x216e
 800e3c4:	f008 fc6c 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 800e3c8:	2101      	movs	r1, #1
 800e3ca:	f242 106f 	movw	r0, #8559	; 0x216f
 800e3ce:	f008 fc67 	bl	8016ca0 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 800e3d2:	4b36      	ldr	r3, [pc, #216]	; (800e4ac <ThreadMainTask+0x174>)
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f7fa faee 	bl	80089b8 <osMutexRelease>

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800e3dc:	4b33      	ldr	r3, [pc, #204]	; (800e4ac <ThreadMainTask+0x174>)
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	f04f 31ff 	mov.w	r1, #4294967295
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	f7fa fa99 	bl	800891c <osMutexWait>
				fm25v02_write(2*SYSTEM_STATUS_REG, 0x00);
 800e3ea:	2100      	movs	r1, #0
 800e3ec:	f242 0020 	movw	r0, #8224	; 0x2020
 800e3f0:	f008 fc56 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*SYSTEM_STATUS_REG+1, POWER_ON);
 800e3f4:	2101      	movs	r1, #1
 800e3f6:	f242 0021 	movw	r0, #8225	; 0x2021
 800e3fa:	f008 fc51 	bl	8016ca0 <fm25v02_write>
				status_registers.system_status_reg = POWER_ON;
 800e3fe:	4b2a      	ldr	r3, [pc, #168]	; (800e4a8 <ThreadMainTask+0x170>)
 800e400:	2201      	movs	r2, #1
 800e402:	841a      	strh	r2, [r3, #32]
				osMutexRelease(Fm25v02MutexHandle);
 800e404:	4b29      	ldr	r3, [pc, #164]	; (800e4ac <ThreadMainTask+0x174>)
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	4618      	mov	r0, r3
 800e40a:	f7fa fad5 	bl	80089b8 <osMutexRelease>

				osThreadResume(EventWriteTaskHandle);
 800e40e:	4b28      	ldr	r3, [pc, #160]	; (800e4b0 <ThreadMainTask+0x178>)
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	4618      	mov	r0, r3
 800e414:	f7fa fca4 	bl	8008d60 <osThreadResume>
			}

			if(status_registers.power_on_lighting_reg == 0) // если основного питания до этого не было, записываем в регистр наличия питания освещения 1
 800e418:	4b23      	ldr	r3, [pc, #140]	; (800e4a8 <ThreadMainTask+0x170>)
 800e41a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	f040 80d5 	bne.w	800e5cc <ThreadMainTask+0x294>
			{
				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800e422:	4b22      	ldr	r3, [pc, #136]	; (800e4ac <ThreadMainTask+0x174>)
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	f04f 31ff 	mov.w	r1, #4294967295
 800e42a:	4618      	mov	r0, r3
 800e42c:	f7fa fa76 	bl	800891c <osMutexWait>
				fm25v02_write(2*POWER_ON_LIGHTING_REG, 0x00);
 800e430:	2100      	movs	r1, #0
 800e432:	f242 0026 	movw	r0, #8230	; 0x2026
 800e436:	f008 fc33 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*POWER_ON_LIGHTING_REG+1, 1);
 800e43a:	2101      	movs	r1, #1
 800e43c:	f242 0027 	movw	r0, #8231	; 0x2027
 800e440:	f008 fc2e 	bl	8016ca0 <fm25v02_write>
				status_registers.power_on_lighting_reg = 1;
 800e444:	4b18      	ldr	r3, [pc, #96]	; (800e4a8 <ThreadMainTask+0x170>)
 800e446:	2201      	movs	r2, #1
 800e448:	84da      	strh	r2, [r3, #38]	; 0x26
				osMutexRelease(Fm25v02MutexHandle);
 800e44a:	4b18      	ldr	r3, [pc, #96]	; (800e4ac <ThreadMainTask+0x174>)
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	4618      	mov	r0, r3
 800e450:	f7fa fab2 	bl	80089b8 <osMutexRelease>
				//osMutexWait(Fm25v02MutexHandle, osWaitForever);
				//fm25v02_write(2*GPRS_CALL_REG, 0x00);
				//fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
				//osMutexRelease(Fm25v02MutexHandle);

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800e454:	4b15      	ldr	r3, [pc, #84]	; (800e4ac <ThreadMainTask+0x174>)
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	f04f 31ff 	mov.w	r1, #4294967295
 800e45c:	4618      	mov	r0, r3
 800e45e:	f7fa fa5d 	bl	800891c <osMutexWait>
				fm25v02_write(2*SYSTEM_STATUS_REG, 0x00);
 800e462:	2100      	movs	r1, #0
 800e464:	f242 0020 	movw	r0, #8224	; 0x2020
 800e468:	f008 fc1a 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*SYSTEM_STATUS_REG+1, POWER_ON);
 800e46c:	2101      	movs	r1, #1
 800e46e:	f242 0021 	movw	r0, #8225	; 0x2021
 800e472:	f008 fc15 	bl	8016ca0 <fm25v02_write>
				status_registers.system_status_reg = POWER_ON;
 800e476:	4b0c      	ldr	r3, [pc, #48]	; (800e4a8 <ThreadMainTask+0x170>)
 800e478:	2201      	movs	r2, #1
 800e47a:	841a      	strh	r2, [r3, #32]
				osMutexRelease(Fm25v02MutexHandle);
 800e47c:	4b0b      	ldr	r3, [pc, #44]	; (800e4ac <ThreadMainTask+0x174>)
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	4618      	mov	r0, r3
 800e482:	f7fa fa99 	bl	80089b8 <osMutexRelease>

				osThreadResume(EventWriteTaskHandle);
 800e486:	4b0a      	ldr	r3, [pc, #40]	; (800e4b0 <ThreadMainTask+0x178>)
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	4618      	mov	r0, r3
 800e48c:	f7fa fc68 	bl	8008d60 <osThreadResume>
 800e490:	e09c      	b.n	800e5cc <ThreadMainTask+0x294>
 800e492:	bf00      	nop
 800e494:	20009774 	.word	0x20009774
 800e498:	2000a234 	.word	0x2000a234
 800e49c:	20008006 	.word	0x20008006
 800e4a0:	20008008 	.word	0x20008008
 800e4a4:	40021000 	.word	0x40021000
 800e4a8:	2000a174 	.word	0x2000a174
 800e4ac:	20009af8 	.word	0x20009af8
 800e4b0:	200096f4 	.word	0x200096f4
			}
		}
		else // если на пине PFO микросхемы TPS3306-15 нет наличия единицы
		{
			if(status_registers.power_on_reg == 1)
 800e4b4:	4b8b      	ldr	r3, [pc, #556]	; (800e6e4 <ThreadMainTask+0x3ac>)
 800e4b6:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e4b8:	2b01      	cmp	r3, #1
 800e4ba:	d14c      	bne.n	800e556 <ThreadMainTask+0x21e>
			{
				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800e4bc:	4b8a      	ldr	r3, [pc, #552]	; (800e6e8 <ThreadMainTask+0x3b0>)
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	f04f 31ff 	mov.w	r1, #4294967295
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	f7fa fa29 	bl	800891c <osMutexWait>
				fm25v02_write(2*POWER_ON_REG, 0x00);
 800e4ca:	2100      	movs	r1, #0
 800e4cc:	f242 0022 	movw	r0, #8226	; 0x2022
 800e4d0:	f008 fbe6 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*POWER_ON_REG+1, 0x00);
 800e4d4:	2100      	movs	r1, #0
 800e4d6:	f242 0023 	movw	r0, #8227	; 0x2023
 800e4da:	f008 fbe1 	bl	8016ca0 <fm25v02_write>
				status_registers.power_on_reg = 0;
 800e4de:	4b81      	ldr	r3, [pc, #516]	; (800e6e4 <ThreadMainTask+0x3ac>)
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	845a      	strh	r2, [r3, #34]	; 0x22
				osMutexRelease(Fm25v02MutexHandle);
 800e4e4:	4b80      	ldr	r3, [pc, #512]	; (800e6e8 <ThreadMainTask+0x3b0>)
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	f7fa fa65 	bl	80089b8 <osMutexRelease>

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800e4ee:	4b7e      	ldr	r3, [pc, #504]	; (800e6e8 <ThreadMainTask+0x3b0>)
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	f04f 31ff 	mov.w	r1, #4294967295
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	f7fa fa10 	bl	800891c <osMutexWait>
				fm25v02_write(2*GPRS_CALL_REG, 0x00);
 800e4fc:	2100      	movs	r1, #0
 800e4fe:	f242 106e 	movw	r0, #8558	; 0x216e
 800e502:	f008 fbcd 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 800e506:	2101      	movs	r1, #1
 800e508:	f242 106f 	movw	r0, #8559	; 0x216f
 800e50c:	f008 fbc8 	bl	8016ca0 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 800e510:	4b75      	ldr	r3, [pc, #468]	; (800e6e8 <ThreadMainTask+0x3b0>)
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	4618      	mov	r0, r3
 800e516:	f7fa fa4f 	bl	80089b8 <osMutexRelease>

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800e51a:	4b73      	ldr	r3, [pc, #460]	; (800e6e8 <ThreadMainTask+0x3b0>)
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	f04f 31ff 	mov.w	r1, #4294967295
 800e522:	4618      	mov	r0, r3
 800e524:	f7fa f9fa 	bl	800891c <osMutexWait>
				fm25v02_write(2*SYSTEM_STATUS_REG, 0x00);
 800e528:	2100      	movs	r1, #0
 800e52a:	f242 0020 	movw	r0, #8224	; 0x2020
 800e52e:	f008 fbb7 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*SYSTEM_STATUS_REG+1, POWER_OFF);
 800e532:	2102      	movs	r1, #2
 800e534:	f242 0021 	movw	r0, #8225	; 0x2021
 800e538:	f008 fbb2 	bl	8016ca0 <fm25v02_write>
				status_registers.system_status_reg = POWER_OFF;
 800e53c:	4b69      	ldr	r3, [pc, #420]	; (800e6e4 <ThreadMainTask+0x3ac>)
 800e53e:	2202      	movs	r2, #2
 800e540:	841a      	strh	r2, [r3, #32]
				osMutexRelease(Fm25v02MutexHandle);
 800e542:	4b69      	ldr	r3, [pc, #420]	; (800e6e8 <ThreadMainTask+0x3b0>)
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	4618      	mov	r0, r3
 800e548:	f7fa fa36 	bl	80089b8 <osMutexRelease>

				osThreadResume(EventWriteTaskHandle);
 800e54c:	4b67      	ldr	r3, [pc, #412]	; (800e6ec <ThreadMainTask+0x3b4>)
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	4618      	mov	r0, r3
 800e552:	f7fa fc05 	bl	8008d60 <osThreadResume>
			}

			if(status_registers.power_on_lighting_reg == 1)
 800e556:	4b63      	ldr	r3, [pc, #396]	; (800e6e4 <ThreadMainTask+0x3ac>)
 800e558:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e55a:	2b01      	cmp	r3, #1
 800e55c:	d136      	bne.n	800e5cc <ThreadMainTask+0x294>
			{
				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800e55e:	4b62      	ldr	r3, [pc, #392]	; (800e6e8 <ThreadMainTask+0x3b0>)
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	f04f 31ff 	mov.w	r1, #4294967295
 800e566:	4618      	mov	r0, r3
 800e568:	f7fa f9d8 	bl	800891c <osMutexWait>
				fm25v02_write(2*POWER_ON_LIGHTING_REG, 0x00);
 800e56c:	2100      	movs	r1, #0
 800e56e:	f242 0026 	movw	r0, #8230	; 0x2026
 800e572:	f008 fb95 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*POWER_ON_LIGHTING_REG+1, 0x00);
 800e576:	2100      	movs	r1, #0
 800e578:	f242 0027 	movw	r0, #8231	; 0x2027
 800e57c:	f008 fb90 	bl	8016ca0 <fm25v02_write>
				status_registers.power_on_lighting_reg = 0;
 800e580:	4b58      	ldr	r3, [pc, #352]	; (800e6e4 <ThreadMainTask+0x3ac>)
 800e582:	2200      	movs	r2, #0
 800e584:	84da      	strh	r2, [r3, #38]	; 0x26
				osMutexRelease(Fm25v02MutexHandle);
 800e586:	4b58      	ldr	r3, [pc, #352]	; (800e6e8 <ThreadMainTask+0x3b0>)
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	4618      	mov	r0, r3
 800e58c:	f7fa fa14 	bl	80089b8 <osMutexRelease>
				//osMutexWait(Fm25v02MutexHandle, osWaitForever);
				//fm25v02_write(2*GPRS_CALL_REG, 0x00);
				//fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
				//osMutexRelease(Fm25v02MutexHandle);

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800e590:	4b55      	ldr	r3, [pc, #340]	; (800e6e8 <ThreadMainTask+0x3b0>)
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	f04f 31ff 	mov.w	r1, #4294967295
 800e598:	4618      	mov	r0, r3
 800e59a:	f7fa f9bf 	bl	800891c <osMutexWait>
				fm25v02_write(2*SYSTEM_STATUS_REG, 0x00);
 800e59e:	2100      	movs	r1, #0
 800e5a0:	f242 0020 	movw	r0, #8224	; 0x2020
 800e5a4:	f008 fb7c 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*SYSTEM_STATUS_REG+1, POWER_OFF);
 800e5a8:	2102      	movs	r1, #2
 800e5aa:	f242 0021 	movw	r0, #8225	; 0x2021
 800e5ae:	f008 fb77 	bl	8016ca0 <fm25v02_write>
				status_registers.system_status_reg = POWER_OFF;
 800e5b2:	4b4c      	ldr	r3, [pc, #304]	; (800e6e4 <ThreadMainTask+0x3ac>)
 800e5b4:	2202      	movs	r2, #2
 800e5b6:	841a      	strh	r2, [r3, #32]
				osMutexRelease(Fm25v02MutexHandle);
 800e5b8:	4b4b      	ldr	r3, [pc, #300]	; (800e6e8 <ThreadMainTask+0x3b0>)
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	4618      	mov	r0, r3
 800e5be:	f7fa f9fb 	bl	80089b8 <osMutexRelease>

				osThreadResume(EventWriteTaskHandle);
 800e5c2:	4b4a      	ldr	r3, [pc, #296]	; (800e6ec <ThreadMainTask+0x3b4>)
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	f7fa fbca 	bl	8008d60 <osThreadResume>

			break;
		}
		*/

		switch(control_registers.time_update_reg) // проверяем значение переменной обновления времени
 800e5cc:	4b48      	ldr	r3, [pc, #288]	; (800e6f0 <ThreadMainTask+0x3b8>)
 800e5ce:	8a1b      	ldrh	r3, [r3, #16]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	f000 8095 	beq.w	800e700 <ThreadMainTask+0x3c8>
 800e5d6:	2b01      	cmp	r3, #1
 800e5d8:	f040 875f 	bne.w	800f49a <ThreadMainTask+0x1162>
		{
			case(SET_TIME): // Если в регистр записана команда установить время

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800e5dc:	4b42      	ldr	r3, [pc, #264]	; (800e6e8 <ThreadMainTask+0x3b0>)
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	f04f 31ff 	mov.w	r1, #4294967295
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	f7fa f999 	bl	800891c <osMutexWait>
				fm25v02_write(2*TIME_UPDATE_REG, 0x00);
 800e5ea:	2100      	movs	r1, #0
 800e5ec:	f242 1030 	movw	r0, #8496	; 0x2130
 800e5f0:	f008 fb56 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*TIME_UPDATE_REG+1, SET_TIME_DEFAULT);
 800e5f4:	2100      	movs	r1, #0
 800e5f6:	f242 1031 	movw	r0, #8497	; 0x2131
 800e5fa:	f008 fb51 	bl	8016ca0 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 800e5fe:	4b3a      	ldr	r3, [pc, #232]	; (800e6e8 <ThreadMainTask+0x3b0>)
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	4618      	mov	r0, r3
 800e604:	f7fa f9d8 	bl	80089b8 <osMutexRelease>

				set_time.Hours = control_registers.time_hour_reg; // записываем в переменные структуры времени значения регистров управления временем
 800e608:	4b39      	ldr	r3, [pc, #228]	; (800e6f0 <ThreadMainTask+0x3b8>)
 800e60a:	8b1b      	ldrh	r3, [r3, #24]
 800e60c:	b2da      	uxtb	r2, r3
 800e60e:	4b39      	ldr	r3, [pc, #228]	; (800e6f4 <ThreadMainTask+0x3bc>)
 800e610:	701a      	strb	r2, [r3, #0]
				set_time.Minutes = control_registers.time_minute_reg;
 800e612:	4b37      	ldr	r3, [pc, #220]	; (800e6f0 <ThreadMainTask+0x3b8>)
 800e614:	8b5b      	ldrh	r3, [r3, #26]
 800e616:	b2da      	uxtb	r2, r3
 800e618:	4b36      	ldr	r3, [pc, #216]	; (800e6f4 <ThreadMainTask+0x3bc>)
 800e61a:	705a      	strb	r2, [r3, #1]
				set_time.Seconds = control_registers.time_seconds_reg;
 800e61c:	4b34      	ldr	r3, [pc, #208]	; (800e6f0 <ThreadMainTask+0x3b8>)
 800e61e:	8b9b      	ldrh	r3, [r3, #28]
 800e620:	b2da      	uxtb	r2, r3
 800e622:	4b34      	ldr	r3, [pc, #208]	; (800e6f4 <ThreadMainTask+0x3bc>)
 800e624:	709a      	strb	r2, [r3, #2]
				set_date.Date = control_registers.time_day_reg;
 800e626:	4b32      	ldr	r3, [pc, #200]	; (800e6f0 <ThreadMainTask+0x3b8>)
 800e628:	8adb      	ldrh	r3, [r3, #22]
 800e62a:	b2da      	uxtb	r2, r3
 800e62c:	4b32      	ldr	r3, [pc, #200]	; (800e6f8 <ThreadMainTask+0x3c0>)
 800e62e:	709a      	strb	r2, [r3, #2]
				set_date.Month = control_registers.time_month_reg;
 800e630:	4b2f      	ldr	r3, [pc, #188]	; (800e6f0 <ThreadMainTask+0x3b8>)
 800e632:	8a9b      	ldrh	r3, [r3, #20]
 800e634:	b2da      	uxtb	r2, r3
 800e636:	4b30      	ldr	r3, [pc, #192]	; (800e6f8 <ThreadMainTask+0x3c0>)
 800e638:	705a      	strb	r2, [r3, #1]
				set_date.Year = control_registers.time_year_reg;
 800e63a:	4b2d      	ldr	r3, [pc, #180]	; (800e6f0 <ThreadMainTask+0x3b8>)
 800e63c:	8a5b      	ldrh	r3, [r3, #18]
 800e63e:	b2da      	uxtb	r2, r3
 800e640:	4b2d      	ldr	r3, [pc, #180]	; (800e6f8 <ThreadMainTask+0x3c0>)
 800e642:	70da      	strb	r2, [r3, #3]
				set_date.WeekDay = control_registers.time_weekday_reg;
 800e644:	4b2a      	ldr	r3, [pc, #168]	; (800e6f0 <ThreadMainTask+0x3b8>)
 800e646:	8bdb      	ldrh	r3, [r3, #30]
 800e648:	b2da      	uxtb	r2, r3
 800e64a:	4b2b      	ldr	r3, [pc, #172]	; (800e6f8 <ThreadMainTask+0x3c0>)
 800e64c:	701a      	strb	r2, [r3, #0]

				set_time.Hours = RTC_ByteToBcd2(set_time.Hours); // переводим обычный формат времени в BCD
 800e64e:	4b29      	ldr	r3, [pc, #164]	; (800e6f4 <ThreadMainTask+0x3bc>)
 800e650:	781b      	ldrb	r3, [r3, #0]
 800e652:	4618      	mov	r0, r3
 800e654:	f7f7 fc71 	bl	8005f3a <RTC_ByteToBcd2>
 800e658:	4603      	mov	r3, r0
 800e65a:	461a      	mov	r2, r3
 800e65c:	4b25      	ldr	r3, [pc, #148]	; (800e6f4 <ThreadMainTask+0x3bc>)
 800e65e:	701a      	strb	r2, [r3, #0]
				set_time.Minutes = RTC_ByteToBcd2(set_time.Minutes);
 800e660:	4b24      	ldr	r3, [pc, #144]	; (800e6f4 <ThreadMainTask+0x3bc>)
 800e662:	785b      	ldrb	r3, [r3, #1]
 800e664:	4618      	mov	r0, r3
 800e666:	f7f7 fc68 	bl	8005f3a <RTC_ByteToBcd2>
 800e66a:	4603      	mov	r3, r0
 800e66c:	461a      	mov	r2, r3
 800e66e:	4b21      	ldr	r3, [pc, #132]	; (800e6f4 <ThreadMainTask+0x3bc>)
 800e670:	705a      	strb	r2, [r3, #1]
				set_time.Seconds = RTC_ByteToBcd2(set_time.Seconds);
 800e672:	4b20      	ldr	r3, [pc, #128]	; (800e6f4 <ThreadMainTask+0x3bc>)
 800e674:	789b      	ldrb	r3, [r3, #2]
 800e676:	4618      	mov	r0, r3
 800e678:	f7f7 fc5f 	bl	8005f3a <RTC_ByteToBcd2>
 800e67c:	4603      	mov	r3, r0
 800e67e:	461a      	mov	r2, r3
 800e680:	4b1c      	ldr	r3, [pc, #112]	; (800e6f4 <ThreadMainTask+0x3bc>)
 800e682:	709a      	strb	r2, [r3, #2]
				set_date.Date = RTC_ByteToBcd2(set_date.Date);
 800e684:	4b1c      	ldr	r3, [pc, #112]	; (800e6f8 <ThreadMainTask+0x3c0>)
 800e686:	789b      	ldrb	r3, [r3, #2]
 800e688:	4618      	mov	r0, r3
 800e68a:	f7f7 fc56 	bl	8005f3a <RTC_ByteToBcd2>
 800e68e:	4603      	mov	r3, r0
 800e690:	461a      	mov	r2, r3
 800e692:	4b19      	ldr	r3, [pc, #100]	; (800e6f8 <ThreadMainTask+0x3c0>)
 800e694:	709a      	strb	r2, [r3, #2]
				set_date.Month = RTC_ByteToBcd2(set_date.Month);
 800e696:	4b18      	ldr	r3, [pc, #96]	; (800e6f8 <ThreadMainTask+0x3c0>)
 800e698:	785b      	ldrb	r3, [r3, #1]
 800e69a:	4618      	mov	r0, r3
 800e69c:	f7f7 fc4d 	bl	8005f3a <RTC_ByteToBcd2>
 800e6a0:	4603      	mov	r3, r0
 800e6a2:	461a      	mov	r2, r3
 800e6a4:	4b14      	ldr	r3, [pc, #80]	; (800e6f8 <ThreadMainTask+0x3c0>)
 800e6a6:	705a      	strb	r2, [r3, #1]
				set_date.Year = RTC_ByteToBcd2(set_date.Year);
 800e6a8:	4b13      	ldr	r3, [pc, #76]	; (800e6f8 <ThreadMainTask+0x3c0>)
 800e6aa:	78db      	ldrb	r3, [r3, #3]
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	f7f7 fc44 	bl	8005f3a <RTC_ByteToBcd2>
 800e6b2:	4603      	mov	r3, r0
 800e6b4:	461a      	mov	r2, r3
 800e6b6:	4b10      	ldr	r3, [pc, #64]	; (800e6f8 <ThreadMainTask+0x3c0>)
 800e6b8:	70da      	strb	r2, [r3, #3]
				set_date.WeekDay = RTC_ByteToBcd2(set_date.WeekDay);
 800e6ba:	4b0f      	ldr	r3, [pc, #60]	; (800e6f8 <ThreadMainTask+0x3c0>)
 800e6bc:	781b      	ldrb	r3, [r3, #0]
 800e6be:	4618      	mov	r0, r3
 800e6c0:	f7f7 fc3b 	bl	8005f3a <RTC_ByteToBcd2>
 800e6c4:	4603      	mov	r3, r0
 800e6c6:	461a      	mov	r2, r3
 800e6c8:	4b0b      	ldr	r3, [pc, #44]	; (800e6f8 <ThreadMainTask+0x3c0>)
 800e6ca:	701a      	strb	r2, [r3, #0]

				HAL_RTC_SetTime(&hrtc, &set_time, RTC_FORMAT_BCD); // устанавливаем дату и время
 800e6cc:	2201      	movs	r2, #1
 800e6ce:	4909      	ldr	r1, [pc, #36]	; (800e6f4 <ThreadMainTask+0x3bc>)
 800e6d0:	480a      	ldr	r0, [pc, #40]	; (800e6fc <ThreadMainTask+0x3c4>)
 800e6d2:	f7f7 f9e3 	bl	8005a9c <HAL_RTC_SetTime>
				HAL_RTC_SetDate(&hrtc, &set_date, RTC_FORMAT_BCD);
 800e6d6:	2201      	movs	r2, #1
 800e6d8:	4907      	ldr	r1, [pc, #28]	; (800e6f8 <ThreadMainTask+0x3c0>)
 800e6da:	4808      	ldr	r0, [pc, #32]	; (800e6fc <ThreadMainTask+0x3c4>)
 800e6dc:	f7f7 fad6 	bl	8005c8c <HAL_RTC_SetDate>


			break;
 800e6e0:	f000 bedb 	b.w	800f49a <ThreadMainTask+0x1162>
 800e6e4:	2000a174 	.word	0x2000a174
 800e6e8:	20009af8 	.word	0x20009af8
 800e6ec:	200096f4 	.word	0x200096f4
 800e6f0:	2000a234 	.word	0x2000a234
 800e6f4:	20009f3c 	.word	0x20009f3c
 800e6f8:	20009f30 	.word	0x20009f30
 800e6fc:	20009ab4 	.word	0x20009ab4

			case(SET_TIME_DEFAULT): // Если в регистр не поступала команда установки времени

				HAL_RTC_GetTime(&hrtc, &current_time , RTC_FORMAT_BCD); // получаем значение даты и времени
 800e700:	2201      	movs	r2, #1
 800e702:	49bb      	ldr	r1, [pc, #748]	; (800e9f0 <ThreadMainTask+0x6b8>)
 800e704:	48bb      	ldr	r0, [pc, #748]	; (800e9f4 <ThreadMainTask+0x6bc>)
 800e706:	f7f7 fa63 	bl	8005bd0 <HAL_RTC_GetTime>
				HAL_RTC_GetDate(&hrtc, &current_date , RTC_FORMAT_BCD);
 800e70a:	2201      	movs	r2, #1
 800e70c:	49ba      	ldr	r1, [pc, #744]	; (800e9f8 <ThreadMainTask+0x6c0>)
 800e70e:	48b9      	ldr	r0, [pc, #740]	; (800e9f4 <ThreadMainTask+0x6bc>)
 800e710:	f7f7 fb40 	bl	8005d94 <HAL_RTC_GetDate>

				current_time.Hours = RTC_Bcd2ToByte(current_time.Hours); // переводим из BCD формата в обычный
 800e714:	4bb6      	ldr	r3, [pc, #728]	; (800e9f0 <ThreadMainTask+0x6b8>)
 800e716:	781b      	ldrb	r3, [r3, #0]
 800e718:	4618      	mov	r0, r3
 800e71a:	f7f7 fc2b 	bl	8005f74 <RTC_Bcd2ToByte>
 800e71e:	4603      	mov	r3, r0
 800e720:	461a      	mov	r2, r3
 800e722:	4bb3      	ldr	r3, [pc, #716]	; (800e9f0 <ThreadMainTask+0x6b8>)
 800e724:	701a      	strb	r2, [r3, #0]
				current_time.Minutes = RTC_Bcd2ToByte(current_time.Minutes);
 800e726:	4bb2      	ldr	r3, [pc, #712]	; (800e9f0 <ThreadMainTask+0x6b8>)
 800e728:	785b      	ldrb	r3, [r3, #1]
 800e72a:	4618      	mov	r0, r3
 800e72c:	f7f7 fc22 	bl	8005f74 <RTC_Bcd2ToByte>
 800e730:	4603      	mov	r3, r0
 800e732:	461a      	mov	r2, r3
 800e734:	4bae      	ldr	r3, [pc, #696]	; (800e9f0 <ThreadMainTask+0x6b8>)
 800e736:	705a      	strb	r2, [r3, #1]
				current_time.Seconds = RTC_Bcd2ToByte(current_time.Seconds);
 800e738:	4bad      	ldr	r3, [pc, #692]	; (800e9f0 <ThreadMainTask+0x6b8>)
 800e73a:	789b      	ldrb	r3, [r3, #2]
 800e73c:	4618      	mov	r0, r3
 800e73e:	f7f7 fc19 	bl	8005f74 <RTC_Bcd2ToByte>
 800e742:	4603      	mov	r3, r0
 800e744:	461a      	mov	r2, r3
 800e746:	4baa      	ldr	r3, [pc, #680]	; (800e9f0 <ThreadMainTask+0x6b8>)
 800e748:	709a      	strb	r2, [r3, #2]
				current_date.Date = RTC_Bcd2ToByte(current_date.Date);
 800e74a:	4bab      	ldr	r3, [pc, #684]	; (800e9f8 <ThreadMainTask+0x6c0>)
 800e74c:	789b      	ldrb	r3, [r3, #2]
 800e74e:	4618      	mov	r0, r3
 800e750:	f7f7 fc10 	bl	8005f74 <RTC_Bcd2ToByte>
 800e754:	4603      	mov	r3, r0
 800e756:	461a      	mov	r2, r3
 800e758:	4ba7      	ldr	r3, [pc, #668]	; (800e9f8 <ThreadMainTask+0x6c0>)
 800e75a:	709a      	strb	r2, [r3, #2]
				current_date.Month = RTC_Bcd2ToByte(current_date.Month);
 800e75c:	4ba6      	ldr	r3, [pc, #664]	; (800e9f8 <ThreadMainTask+0x6c0>)
 800e75e:	785b      	ldrb	r3, [r3, #1]
 800e760:	4618      	mov	r0, r3
 800e762:	f7f7 fc07 	bl	8005f74 <RTC_Bcd2ToByte>
 800e766:	4603      	mov	r3, r0
 800e768:	461a      	mov	r2, r3
 800e76a:	4ba3      	ldr	r3, [pc, #652]	; (800e9f8 <ThreadMainTask+0x6c0>)
 800e76c:	705a      	strb	r2, [r3, #1]
				current_date.Year = RTC_Bcd2ToByte(current_date.Year);
 800e76e:	4ba2      	ldr	r3, [pc, #648]	; (800e9f8 <ThreadMainTask+0x6c0>)
 800e770:	78db      	ldrb	r3, [r3, #3]
 800e772:	4618      	mov	r0, r3
 800e774:	f7f7 fbfe 	bl	8005f74 <RTC_Bcd2ToByte>
 800e778:	4603      	mov	r3, r0
 800e77a:	461a      	mov	r2, r3
 800e77c:	4b9e      	ldr	r3, [pc, #632]	; (800e9f8 <ThreadMainTask+0x6c0>)
 800e77e:	70da      	strb	r2, [r3, #3]
				current_date.WeekDay = RTC_Bcd2ToByte(current_date.WeekDay);
 800e780:	4b9d      	ldr	r3, [pc, #628]	; (800e9f8 <ThreadMainTask+0x6c0>)
 800e782:	781b      	ldrb	r3, [r3, #0]
 800e784:	4618      	mov	r0, r3
 800e786:	f7f7 fbf5 	bl	8005f74 <RTC_Bcd2ToByte>
 800e78a:	4603      	mov	r3, r0
 800e78c:	461a      	mov	r2, r3
 800e78e:	4b9a      	ldr	r3, [pc, #616]	; (800e9f8 <ThreadMainTask+0x6c0>)
 800e790:	701a      	strb	r2, [r3, #0]

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800e792:	4b9a      	ldr	r3, [pc, #616]	; (800e9fc <ThreadMainTask+0x6c4>)
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	f04f 31ff 	mov.w	r1, #4294967295
 800e79a:	4618      	mov	r0, r3
 800e79c:	f7fa f8be 	bl	800891c <osMutexWait>

				fm25v02_write(2*TIME_CURRENT_HOUR_REG, 0x00); // записываем в регистры значения даты и времени
 800e7a0:	2100      	movs	r1, #0
 800e7a2:	f242 0010 	movw	r0, #8208	; 0x2010
 800e7a6:	f008 fa7b 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*TIME_CURRENT_HOUR_REG+1, current_time.Hours);
 800e7aa:	4b91      	ldr	r3, [pc, #580]	; (800e9f0 <ThreadMainTask+0x6b8>)
 800e7ac:	781b      	ldrb	r3, [r3, #0]
 800e7ae:	4619      	mov	r1, r3
 800e7b0:	f242 0011 	movw	r0, #8209	; 0x2011
 800e7b4:	f008 fa74 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*TIME_CURRENT_MINUTE_REG, 0x00);
 800e7b8:	2100      	movs	r1, #0
 800e7ba:	f242 0012 	movw	r0, #8210	; 0x2012
 800e7be:	f008 fa6f 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*TIME_CURRENT_MINUTE_REG+1, current_time.Minutes);
 800e7c2:	4b8b      	ldr	r3, [pc, #556]	; (800e9f0 <ThreadMainTask+0x6b8>)
 800e7c4:	785b      	ldrb	r3, [r3, #1]
 800e7c6:	4619      	mov	r1, r3
 800e7c8:	f242 0013 	movw	r0, #8211	; 0x2013
 800e7cc:	f008 fa68 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*TIME_CURRENT_SECOND_REG, 0x00);
 800e7d0:	2100      	movs	r1, #0
 800e7d2:	f242 0014 	movw	r0, #8212	; 0x2014
 800e7d6:	f008 fa63 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*TIME_CURRENT_SECOND_REG+1, current_time.Seconds);
 800e7da:	4b85      	ldr	r3, [pc, #532]	; (800e9f0 <ThreadMainTask+0x6b8>)
 800e7dc:	789b      	ldrb	r3, [r3, #2]
 800e7de:	4619      	mov	r1, r3
 800e7e0:	f242 0015 	movw	r0, #8213	; 0x2015
 800e7e4:	f008 fa5c 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*TIME_CURRENT_DAY_REG, 0x00);
 800e7e8:	2100      	movs	r1, #0
 800e7ea:	f242 000e 	movw	r0, #8206	; 0x200e
 800e7ee:	f008 fa57 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*TIME_CURRENT_DAY_REG+1, current_date.Date);
 800e7f2:	4b81      	ldr	r3, [pc, #516]	; (800e9f8 <ThreadMainTask+0x6c0>)
 800e7f4:	789b      	ldrb	r3, [r3, #2]
 800e7f6:	4619      	mov	r1, r3
 800e7f8:	f242 000f 	movw	r0, #8207	; 0x200f
 800e7fc:	f008 fa50 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*TIME_CURRENT_MONTH_REG, 0x00);
 800e800:	2100      	movs	r1, #0
 800e802:	f242 000c 	movw	r0, #8204	; 0x200c
 800e806:	f008 fa4b 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*TIME_CURRENT_MONTH_REG+1, current_date.Month);
 800e80a:	4b7b      	ldr	r3, [pc, #492]	; (800e9f8 <ThreadMainTask+0x6c0>)
 800e80c:	785b      	ldrb	r3, [r3, #1]
 800e80e:	4619      	mov	r1, r3
 800e810:	f242 000d 	movw	r0, #8205	; 0x200d
 800e814:	f008 fa44 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*TIME_CURRENT_YEAR_REG, 0x00);
 800e818:	2100      	movs	r1, #0
 800e81a:	f242 000a 	movw	r0, #8202	; 0x200a
 800e81e:	f008 fa3f 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*TIME_CURRENT_YEAR_REG+1, current_date.Year);
 800e822:	4b75      	ldr	r3, [pc, #468]	; (800e9f8 <ThreadMainTask+0x6c0>)
 800e824:	78db      	ldrb	r3, [r3, #3]
 800e826:	4619      	mov	r1, r3
 800e828:	f242 000b 	movw	r0, #8203	; 0x200b
 800e82c:	f008 fa38 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*TIME_CURRENT_WEEKDAY_REG, 0x00);
 800e830:	2100      	movs	r1, #0
 800e832:	f242 0016 	movw	r0, #8214	; 0x2016
 800e836:	f008 fa33 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*TIME_CURRENT_WEEKDAY_REG+1, current_date.WeekDay);
 800e83a:	4b6f      	ldr	r3, [pc, #444]	; (800e9f8 <ThreadMainTask+0x6c0>)
 800e83c:	781b      	ldrb	r3, [r3, #0]
 800e83e:	4619      	mov	r1, r3
 800e840:	f242 0017 	movw	r0, #8215	; 0x2017
 800e844:	f008 fa2c 	bl	8016ca0 <fm25v02_write>

				osMutexRelease(Fm25v02MutexHandle);
 800e848:	4b6c      	ldr	r3, [pc, #432]	; (800e9fc <ThreadMainTask+0x6c4>)
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	4618      	mov	r0, r3
 800e84e:	f7fa f8b3 	bl	80089b8 <osMutexRelease>

				status_registers.time_current_hour_reg = current_time.Hours;
 800e852:	4b67      	ldr	r3, [pc, #412]	; (800e9f0 <ThreadMainTask+0x6b8>)
 800e854:	781b      	ldrb	r3, [r3, #0]
 800e856:	b29a      	uxth	r2, r3
 800e858:	4b69      	ldr	r3, [pc, #420]	; (800ea00 <ThreadMainTask+0x6c8>)
 800e85a:	821a      	strh	r2, [r3, #16]
				status_registers.time_current_minute_reg = current_time.Minutes;
 800e85c:	4b64      	ldr	r3, [pc, #400]	; (800e9f0 <ThreadMainTask+0x6b8>)
 800e85e:	785b      	ldrb	r3, [r3, #1]
 800e860:	b29a      	uxth	r2, r3
 800e862:	4b67      	ldr	r3, [pc, #412]	; (800ea00 <ThreadMainTask+0x6c8>)
 800e864:	825a      	strh	r2, [r3, #18]
				status_registers.time_current_second_reg = current_time.Seconds;
 800e866:	4b62      	ldr	r3, [pc, #392]	; (800e9f0 <ThreadMainTask+0x6b8>)
 800e868:	789b      	ldrb	r3, [r3, #2]
 800e86a:	b29a      	uxth	r2, r3
 800e86c:	4b64      	ldr	r3, [pc, #400]	; (800ea00 <ThreadMainTask+0x6c8>)
 800e86e:	829a      	strh	r2, [r3, #20]
				status_registers.time_current_day_reg = current_date.Date;
 800e870:	4b61      	ldr	r3, [pc, #388]	; (800e9f8 <ThreadMainTask+0x6c0>)
 800e872:	789b      	ldrb	r3, [r3, #2]
 800e874:	b29a      	uxth	r2, r3
 800e876:	4b62      	ldr	r3, [pc, #392]	; (800ea00 <ThreadMainTask+0x6c8>)
 800e878:	81da      	strh	r2, [r3, #14]
				status_registers.time_current_month_reg = current_date.Month;
 800e87a:	4b5f      	ldr	r3, [pc, #380]	; (800e9f8 <ThreadMainTask+0x6c0>)
 800e87c:	785b      	ldrb	r3, [r3, #1]
 800e87e:	b29a      	uxth	r2, r3
 800e880:	4b5f      	ldr	r3, [pc, #380]	; (800ea00 <ThreadMainTask+0x6c8>)
 800e882:	819a      	strh	r2, [r3, #12]
				status_registers.time_current_year_reg = current_date.Year;
 800e884:	4b5c      	ldr	r3, [pc, #368]	; (800e9f8 <ThreadMainTask+0x6c0>)
 800e886:	78db      	ldrb	r3, [r3, #3]
 800e888:	b29a      	uxth	r2, r3
 800e88a:	4b5d      	ldr	r3, [pc, #372]	; (800ea00 <ThreadMainTask+0x6c8>)
 800e88c:	815a      	strh	r2, [r3, #10]
				status_registers.time_current_weekday_reg = current_date.WeekDay;
 800e88e:	4b5a      	ldr	r3, [pc, #360]	; (800e9f8 <ThreadMainTask+0x6c0>)
 800e890:	781b      	ldrb	r3, [r3, #0]
 800e892:	b29a      	uxth	r2, r3
 800e894:	4b5a      	ldr	r3, [pc, #360]	; (800ea00 <ThreadMainTask+0x6c8>)
 800e896:	82da      	strh	r2, [r3, #22]

				if( ((control_registers.light_control_reg)&0x0020) == 0x0020 ) // если включено управление по расписанию
 800e898:	4b5a      	ldr	r3, [pc, #360]	; (800ea04 <ThreadMainTask+0x6cc>)
 800e89a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e89e:	f003 0320 	and.w	r3, r3, #32
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	f000 85f8 	beq.w	800f498 <ThreadMainTask+0x1160>
				{

					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800e8a8:	4b54      	ldr	r3, [pc, #336]	; (800e9fc <ThreadMainTask+0x6c4>)
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	f04f 31ff 	mov.w	r1, #4294967295
 800e8b0:	4618      	mov	r0, r3
 800e8b2:	f7fa f833 	bl	800891c <osMutexWait>

					fm25v02_read( 2*(0x28C0+(((current_date.Month)-1)*31*16)+(((current_date.Date)-1)*16)+0)+1, &temp_time_on_1_hour);
 800e8b6:	4b50      	ldr	r3, [pc, #320]	; (800e9f8 <ThreadMainTask+0x6c0>)
 800e8b8:	785b      	ldrb	r3, [r3, #1]
 800e8ba:	1e5a      	subs	r2, r3, #1
 800e8bc:	4613      	mov	r3, r2
 800e8be:	015b      	lsls	r3, r3, #5
 800e8c0:	1a9b      	subs	r3, r3, r2
 800e8c2:	011b      	lsls	r3, r3, #4
 800e8c4:	f503 5223 	add.w	r2, r3, #10432	; 0x28c0
 800e8c8:	4b4b      	ldr	r3, [pc, #300]	; (800e9f8 <ThreadMainTask+0x6c0>)
 800e8ca:	789b      	ldrb	r3, [r3, #2]
 800e8cc:	3b01      	subs	r3, #1
 800e8ce:	011b      	lsls	r3, r3, #4
 800e8d0:	4413      	add	r3, r2
 800e8d2:	b29b      	uxth	r3, r3
 800e8d4:	005b      	lsls	r3, r3, #1
 800e8d6:	b29b      	uxth	r3, r3
 800e8d8:	3301      	adds	r3, #1
 800e8da:	b29b      	uxth	r3, r3
 800e8dc:	494a      	ldr	r1, [pc, #296]	; (800ea08 <ThreadMainTask+0x6d0>)
 800e8de:	4618      	mov	r0, r3
 800e8e0:	f008 f9a4 	bl	8016c2c <fm25v02_read>
					fm25v02_read( 2*(0x28C0+(((current_date.Month)-1)*31*16)+(((current_date.Date)-1)*16)+1)+1, &temp_time_on_1_minute);
 800e8e4:	4b44      	ldr	r3, [pc, #272]	; (800e9f8 <ThreadMainTask+0x6c0>)
 800e8e6:	785b      	ldrb	r3, [r3, #1]
 800e8e8:	1e5a      	subs	r2, r3, #1
 800e8ea:	4613      	mov	r3, r2
 800e8ec:	015b      	lsls	r3, r3, #5
 800e8ee:	1a9b      	subs	r3, r3, r2
 800e8f0:	011b      	lsls	r3, r3, #4
 800e8f2:	f503 5223 	add.w	r2, r3, #10432	; 0x28c0
 800e8f6:	4b40      	ldr	r3, [pc, #256]	; (800e9f8 <ThreadMainTask+0x6c0>)
 800e8f8:	789b      	ldrb	r3, [r3, #2]
 800e8fa:	3b01      	subs	r3, #1
 800e8fc:	011b      	lsls	r3, r3, #4
 800e8fe:	4413      	add	r3, r2
 800e900:	3301      	adds	r3, #1
 800e902:	b29b      	uxth	r3, r3
 800e904:	005b      	lsls	r3, r3, #1
 800e906:	b29b      	uxth	r3, r3
 800e908:	3301      	adds	r3, #1
 800e90a:	b29b      	uxth	r3, r3
 800e90c:	493f      	ldr	r1, [pc, #252]	; (800ea0c <ThreadMainTask+0x6d4>)
 800e90e:	4618      	mov	r0, r3
 800e910:	f008 f98c 	bl	8016c2c <fm25v02_read>
					fm25v02_read( 2*(0x28C0+(((current_date.Month)-1)*31*16)+(((current_date.Date)-1)*16)+2)+1, &temp_time_on_2_hour);
 800e914:	4b38      	ldr	r3, [pc, #224]	; (800e9f8 <ThreadMainTask+0x6c0>)
 800e916:	785b      	ldrb	r3, [r3, #1]
 800e918:	1e5a      	subs	r2, r3, #1
 800e91a:	4613      	mov	r3, r2
 800e91c:	015b      	lsls	r3, r3, #5
 800e91e:	1a9b      	subs	r3, r3, r2
 800e920:	011b      	lsls	r3, r3, #4
 800e922:	f503 5223 	add.w	r2, r3, #10432	; 0x28c0
 800e926:	4b34      	ldr	r3, [pc, #208]	; (800e9f8 <ThreadMainTask+0x6c0>)
 800e928:	789b      	ldrb	r3, [r3, #2]
 800e92a:	3b01      	subs	r3, #1
 800e92c:	011b      	lsls	r3, r3, #4
 800e92e:	4413      	add	r3, r2
 800e930:	3302      	adds	r3, #2
 800e932:	b29b      	uxth	r3, r3
 800e934:	005b      	lsls	r3, r3, #1
 800e936:	b29b      	uxth	r3, r3
 800e938:	3301      	adds	r3, #1
 800e93a:	b29b      	uxth	r3, r3
 800e93c:	4934      	ldr	r1, [pc, #208]	; (800ea10 <ThreadMainTask+0x6d8>)
 800e93e:	4618      	mov	r0, r3
 800e940:	f008 f974 	bl	8016c2c <fm25v02_read>
					fm25v02_read( 2*(0x28C0+(((current_date.Month)-1)*31*16)+(((current_date.Date)-1)*16)+3)+1, &temp_time_on_2_minute);
 800e944:	4b2c      	ldr	r3, [pc, #176]	; (800e9f8 <ThreadMainTask+0x6c0>)
 800e946:	785b      	ldrb	r3, [r3, #1]
 800e948:	1e5a      	subs	r2, r3, #1
 800e94a:	4613      	mov	r3, r2
 800e94c:	015b      	lsls	r3, r3, #5
 800e94e:	1a9b      	subs	r3, r3, r2
 800e950:	011b      	lsls	r3, r3, #4
 800e952:	f503 5223 	add.w	r2, r3, #10432	; 0x28c0
 800e956:	4b28      	ldr	r3, [pc, #160]	; (800e9f8 <ThreadMainTask+0x6c0>)
 800e958:	789b      	ldrb	r3, [r3, #2]
 800e95a:	3b01      	subs	r3, #1
 800e95c:	011b      	lsls	r3, r3, #4
 800e95e:	4413      	add	r3, r2
 800e960:	3303      	adds	r3, #3
 800e962:	b29b      	uxth	r3, r3
 800e964:	005b      	lsls	r3, r3, #1
 800e966:	b29b      	uxth	r3, r3
 800e968:	3301      	adds	r3, #1
 800e96a:	b29b      	uxth	r3, r3
 800e96c:	4929      	ldr	r1, [pc, #164]	; (800ea14 <ThreadMainTask+0x6dc>)
 800e96e:	4618      	mov	r0, r3
 800e970:	f008 f95c 	bl	8016c2c <fm25v02_read>
					fm25v02_read( 2*(0x28C0+(((current_date.Month)-1)*31*16)+(((current_date.Date)-1)*16)+4)+1, &temp_time_on_3_hour);
 800e974:	4b20      	ldr	r3, [pc, #128]	; (800e9f8 <ThreadMainTask+0x6c0>)
 800e976:	785b      	ldrb	r3, [r3, #1]
 800e978:	1e5a      	subs	r2, r3, #1
 800e97a:	4613      	mov	r3, r2
 800e97c:	015b      	lsls	r3, r3, #5
 800e97e:	1a9b      	subs	r3, r3, r2
 800e980:	011b      	lsls	r3, r3, #4
 800e982:	f503 5223 	add.w	r2, r3, #10432	; 0x28c0
 800e986:	4b1c      	ldr	r3, [pc, #112]	; (800e9f8 <ThreadMainTask+0x6c0>)
 800e988:	789b      	ldrb	r3, [r3, #2]
 800e98a:	3b01      	subs	r3, #1
 800e98c:	011b      	lsls	r3, r3, #4
 800e98e:	4413      	add	r3, r2
 800e990:	3304      	adds	r3, #4
 800e992:	b29b      	uxth	r3, r3
 800e994:	005b      	lsls	r3, r3, #1
 800e996:	b29b      	uxth	r3, r3
 800e998:	3301      	adds	r3, #1
 800e99a:	b29b      	uxth	r3, r3
 800e99c:	491e      	ldr	r1, [pc, #120]	; (800ea18 <ThreadMainTask+0x6e0>)
 800e99e:	4618      	mov	r0, r3
 800e9a0:	f008 f944 	bl	8016c2c <fm25v02_read>
					fm25v02_read( 2*(0x28C0+(((current_date.Month)-1)*31*16)+(((current_date.Date)-1)*16)+5)+1, &temp_time_on_3_minute);
 800e9a4:	4b14      	ldr	r3, [pc, #80]	; (800e9f8 <ThreadMainTask+0x6c0>)
 800e9a6:	785b      	ldrb	r3, [r3, #1]
 800e9a8:	1e5a      	subs	r2, r3, #1
 800e9aa:	4613      	mov	r3, r2
 800e9ac:	015b      	lsls	r3, r3, #5
 800e9ae:	1a9b      	subs	r3, r3, r2
 800e9b0:	011b      	lsls	r3, r3, #4
 800e9b2:	f503 5223 	add.w	r2, r3, #10432	; 0x28c0
 800e9b6:	4b10      	ldr	r3, [pc, #64]	; (800e9f8 <ThreadMainTask+0x6c0>)
 800e9b8:	789b      	ldrb	r3, [r3, #2]
 800e9ba:	3b01      	subs	r3, #1
 800e9bc:	011b      	lsls	r3, r3, #4
 800e9be:	4413      	add	r3, r2
 800e9c0:	3305      	adds	r3, #5
 800e9c2:	b29b      	uxth	r3, r3
 800e9c4:	005b      	lsls	r3, r3, #1
 800e9c6:	b29b      	uxth	r3, r3
 800e9c8:	3301      	adds	r3, #1
 800e9ca:	b29b      	uxth	r3, r3
 800e9cc:	4913      	ldr	r1, [pc, #76]	; (800ea1c <ThreadMainTask+0x6e4>)
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	f008 f92c 	bl	8016c2c <fm25v02_read>
					fm25v02_read( 2*(0x28C0+(((current_date.Month)-1)*31*16)+(((current_date.Date)-1)*16)+6)+1, &temp_time_on_4_hour);
 800e9d4:	4b08      	ldr	r3, [pc, #32]	; (800e9f8 <ThreadMainTask+0x6c0>)
 800e9d6:	785b      	ldrb	r3, [r3, #1]
 800e9d8:	1e5a      	subs	r2, r3, #1
 800e9da:	4613      	mov	r3, r2
 800e9dc:	015b      	lsls	r3, r3, #5
 800e9de:	1a9b      	subs	r3, r3, r2
 800e9e0:	011b      	lsls	r3, r3, #4
 800e9e2:	f503 5223 	add.w	r2, r3, #10432	; 0x28c0
 800e9e6:	4b04      	ldr	r3, [pc, #16]	; (800e9f8 <ThreadMainTask+0x6c0>)
 800e9e8:	789b      	ldrb	r3, [r3, #2]
 800e9ea:	3b01      	subs	r3, #1
 800e9ec:	e018      	b.n	800ea20 <ThreadMainTask+0x6e8>
 800e9ee:	bf00      	nop
 800e9f0:	20009f18 	.word	0x20009f18
 800e9f4:	20009ab4 	.word	0x20009ab4
 800e9f8:	20009f10 	.word	0x20009f10
 800e9fc:	20009af8 	.word	0x20009af8
 800ea00:	2000a174 	.word	0x2000a174
 800ea04:	2000a234 	.word	0x2000a234
 800ea08:	20009f59 	.word	0x20009f59
 800ea0c:	20009f2c 	.word	0x20009f2c
 800ea10:	20009f14 	.word	0x20009f14
 800ea14:	20009f0c 	.word	0x20009f0c
 800ea18:	20009f57 	.word	0x20009f57
 800ea1c:	20009f53 	.word	0x20009f53
 800ea20:	011b      	lsls	r3, r3, #4
 800ea22:	4413      	add	r3, r2
 800ea24:	3306      	adds	r3, #6
 800ea26:	b29b      	uxth	r3, r3
 800ea28:	005b      	lsls	r3, r3, #1
 800ea2a:	b29b      	uxth	r3, r3
 800ea2c:	3301      	adds	r3, #1
 800ea2e:	b29b      	uxth	r3, r3
 800ea30:	49bb      	ldr	r1, [pc, #748]	; (800ed20 <ThreadMainTask+0x9e8>)
 800ea32:	4618      	mov	r0, r3
 800ea34:	f008 f8fa 	bl	8016c2c <fm25v02_read>
					fm25v02_read( 2*(0x28C0+(((current_date.Month)-1)*31*16)+(((current_date.Date)-1)*16)+7)+1, &temp_time_on_4_minute);
 800ea38:	4bba      	ldr	r3, [pc, #744]	; (800ed24 <ThreadMainTask+0x9ec>)
 800ea3a:	785b      	ldrb	r3, [r3, #1]
 800ea3c:	1e5a      	subs	r2, r3, #1
 800ea3e:	4613      	mov	r3, r2
 800ea40:	015b      	lsls	r3, r3, #5
 800ea42:	1a9b      	subs	r3, r3, r2
 800ea44:	011b      	lsls	r3, r3, #4
 800ea46:	f503 5223 	add.w	r2, r3, #10432	; 0x28c0
 800ea4a:	4bb6      	ldr	r3, [pc, #728]	; (800ed24 <ThreadMainTask+0x9ec>)
 800ea4c:	789b      	ldrb	r3, [r3, #2]
 800ea4e:	3b01      	subs	r3, #1
 800ea50:	011b      	lsls	r3, r3, #4
 800ea52:	4413      	add	r3, r2
 800ea54:	3307      	adds	r3, #7
 800ea56:	b29b      	uxth	r3, r3
 800ea58:	005b      	lsls	r3, r3, #1
 800ea5a:	b29b      	uxth	r3, r3
 800ea5c:	3301      	adds	r3, #1
 800ea5e:	b29b      	uxth	r3, r3
 800ea60:	49b1      	ldr	r1, [pc, #708]	; (800ed28 <ThreadMainTask+0x9f0>)
 800ea62:	4618      	mov	r0, r3
 800ea64:	f008 f8e2 	bl	8016c2c <fm25v02_read>
					fm25v02_read( 2*(0x28C0+(((current_date.Month)-1)*31*16)+(((current_date.Date)-1)*16)+8)+1, &temp_time_off_1_hour);
 800ea68:	4bae      	ldr	r3, [pc, #696]	; (800ed24 <ThreadMainTask+0x9ec>)
 800ea6a:	785b      	ldrb	r3, [r3, #1]
 800ea6c:	1e5a      	subs	r2, r3, #1
 800ea6e:	4613      	mov	r3, r2
 800ea70:	015b      	lsls	r3, r3, #5
 800ea72:	1a9b      	subs	r3, r3, r2
 800ea74:	011b      	lsls	r3, r3, #4
 800ea76:	f503 5223 	add.w	r2, r3, #10432	; 0x28c0
 800ea7a:	4baa      	ldr	r3, [pc, #680]	; (800ed24 <ThreadMainTask+0x9ec>)
 800ea7c:	789b      	ldrb	r3, [r3, #2]
 800ea7e:	3b01      	subs	r3, #1
 800ea80:	011b      	lsls	r3, r3, #4
 800ea82:	4413      	add	r3, r2
 800ea84:	3308      	adds	r3, #8
 800ea86:	b29b      	uxth	r3, r3
 800ea88:	005b      	lsls	r3, r3, #1
 800ea8a:	b29b      	uxth	r3, r3
 800ea8c:	3301      	adds	r3, #1
 800ea8e:	b29b      	uxth	r3, r3
 800ea90:	49a6      	ldr	r1, [pc, #664]	; (800ed2c <ThreadMainTask+0x9f4>)
 800ea92:	4618      	mov	r0, r3
 800ea94:	f008 f8ca 	bl	8016c2c <fm25v02_read>
					fm25v02_read( 2*(0x28C0+(((current_date.Month)-1)*31*16)+(((current_date.Date)-1)*16)+9)+1, &temp_time_off_1_minute);
 800ea98:	4ba2      	ldr	r3, [pc, #648]	; (800ed24 <ThreadMainTask+0x9ec>)
 800ea9a:	785b      	ldrb	r3, [r3, #1]
 800ea9c:	1e5a      	subs	r2, r3, #1
 800ea9e:	4613      	mov	r3, r2
 800eaa0:	015b      	lsls	r3, r3, #5
 800eaa2:	1a9b      	subs	r3, r3, r2
 800eaa4:	011b      	lsls	r3, r3, #4
 800eaa6:	f503 5223 	add.w	r2, r3, #10432	; 0x28c0
 800eaaa:	4b9e      	ldr	r3, [pc, #632]	; (800ed24 <ThreadMainTask+0x9ec>)
 800eaac:	789b      	ldrb	r3, [r3, #2]
 800eaae:	3b01      	subs	r3, #1
 800eab0:	011b      	lsls	r3, r3, #4
 800eab2:	4413      	add	r3, r2
 800eab4:	3309      	adds	r3, #9
 800eab6:	b29b      	uxth	r3, r3
 800eab8:	005b      	lsls	r3, r3, #1
 800eaba:	b29b      	uxth	r3, r3
 800eabc:	3301      	adds	r3, #1
 800eabe:	b29b      	uxth	r3, r3
 800eac0:	499b      	ldr	r1, [pc, #620]	; (800ed30 <ThreadMainTask+0x9f8>)
 800eac2:	4618      	mov	r0, r3
 800eac4:	f008 f8b2 	bl	8016c2c <fm25v02_read>
					fm25v02_read( 2*(0x28C0+(((current_date.Month)-1)*31*16)+(((current_date.Date)-1)*16)+10)+1, &temp_time_off_2_hour);
 800eac8:	4b96      	ldr	r3, [pc, #600]	; (800ed24 <ThreadMainTask+0x9ec>)
 800eaca:	785b      	ldrb	r3, [r3, #1]
 800eacc:	1e5a      	subs	r2, r3, #1
 800eace:	4613      	mov	r3, r2
 800ead0:	015b      	lsls	r3, r3, #5
 800ead2:	1a9b      	subs	r3, r3, r2
 800ead4:	011b      	lsls	r3, r3, #4
 800ead6:	f503 5223 	add.w	r2, r3, #10432	; 0x28c0
 800eada:	4b92      	ldr	r3, [pc, #584]	; (800ed24 <ThreadMainTask+0x9ec>)
 800eadc:	789b      	ldrb	r3, [r3, #2]
 800eade:	3b01      	subs	r3, #1
 800eae0:	011b      	lsls	r3, r3, #4
 800eae2:	4413      	add	r3, r2
 800eae4:	330a      	adds	r3, #10
 800eae6:	b29b      	uxth	r3, r3
 800eae8:	005b      	lsls	r3, r3, #1
 800eaea:	b29b      	uxth	r3, r3
 800eaec:	3301      	adds	r3, #1
 800eaee:	b29b      	uxth	r3, r3
 800eaf0:	4990      	ldr	r1, [pc, #576]	; (800ed34 <ThreadMainTask+0x9fc>)
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	f008 f89a 	bl	8016c2c <fm25v02_read>
					fm25v02_read( 2*(0x28C0+(((current_date.Month)-1)*31*16)+(((current_date.Date)-1)*16)+11)+1, &temp_time_off_2_minute);
 800eaf8:	4b8a      	ldr	r3, [pc, #552]	; (800ed24 <ThreadMainTask+0x9ec>)
 800eafa:	785b      	ldrb	r3, [r3, #1]
 800eafc:	1e5a      	subs	r2, r3, #1
 800eafe:	4613      	mov	r3, r2
 800eb00:	015b      	lsls	r3, r3, #5
 800eb02:	1a9b      	subs	r3, r3, r2
 800eb04:	011b      	lsls	r3, r3, #4
 800eb06:	f503 5223 	add.w	r2, r3, #10432	; 0x28c0
 800eb0a:	4b86      	ldr	r3, [pc, #536]	; (800ed24 <ThreadMainTask+0x9ec>)
 800eb0c:	789b      	ldrb	r3, [r3, #2]
 800eb0e:	3b01      	subs	r3, #1
 800eb10:	011b      	lsls	r3, r3, #4
 800eb12:	4413      	add	r3, r2
 800eb14:	330b      	adds	r3, #11
 800eb16:	b29b      	uxth	r3, r3
 800eb18:	005b      	lsls	r3, r3, #1
 800eb1a:	b29b      	uxth	r3, r3
 800eb1c:	3301      	adds	r3, #1
 800eb1e:	b29b      	uxth	r3, r3
 800eb20:	4985      	ldr	r1, [pc, #532]	; (800ed38 <ThreadMainTask+0xa00>)
 800eb22:	4618      	mov	r0, r3
 800eb24:	f008 f882 	bl	8016c2c <fm25v02_read>
					fm25v02_read( 2*(0x28C0+(((current_date.Month)-1)*31*16)+(((current_date.Date)-1)*16)+12)+1, &temp_time_off_3_hour);
 800eb28:	4b7e      	ldr	r3, [pc, #504]	; (800ed24 <ThreadMainTask+0x9ec>)
 800eb2a:	785b      	ldrb	r3, [r3, #1]
 800eb2c:	1e5a      	subs	r2, r3, #1
 800eb2e:	4613      	mov	r3, r2
 800eb30:	015b      	lsls	r3, r3, #5
 800eb32:	1a9b      	subs	r3, r3, r2
 800eb34:	011b      	lsls	r3, r3, #4
 800eb36:	f503 5223 	add.w	r2, r3, #10432	; 0x28c0
 800eb3a:	4b7a      	ldr	r3, [pc, #488]	; (800ed24 <ThreadMainTask+0x9ec>)
 800eb3c:	789b      	ldrb	r3, [r3, #2]
 800eb3e:	3b01      	subs	r3, #1
 800eb40:	011b      	lsls	r3, r3, #4
 800eb42:	4413      	add	r3, r2
 800eb44:	330c      	adds	r3, #12
 800eb46:	b29b      	uxth	r3, r3
 800eb48:	005b      	lsls	r3, r3, #1
 800eb4a:	b29b      	uxth	r3, r3
 800eb4c:	3301      	adds	r3, #1
 800eb4e:	b29b      	uxth	r3, r3
 800eb50:	497a      	ldr	r1, [pc, #488]	; (800ed3c <ThreadMainTask+0xa04>)
 800eb52:	4618      	mov	r0, r3
 800eb54:	f008 f86a 	bl	8016c2c <fm25v02_read>
					fm25v02_read( 2*(0x28C0+(((current_date.Month)-1)*31*16)+(((current_date.Date)-1)*16)+13)+1, &temp_time_off_3_minute);
 800eb58:	4b72      	ldr	r3, [pc, #456]	; (800ed24 <ThreadMainTask+0x9ec>)
 800eb5a:	785b      	ldrb	r3, [r3, #1]
 800eb5c:	1e5a      	subs	r2, r3, #1
 800eb5e:	4613      	mov	r3, r2
 800eb60:	015b      	lsls	r3, r3, #5
 800eb62:	1a9b      	subs	r3, r3, r2
 800eb64:	011b      	lsls	r3, r3, #4
 800eb66:	f503 5223 	add.w	r2, r3, #10432	; 0x28c0
 800eb6a:	4b6e      	ldr	r3, [pc, #440]	; (800ed24 <ThreadMainTask+0x9ec>)
 800eb6c:	789b      	ldrb	r3, [r3, #2]
 800eb6e:	3b01      	subs	r3, #1
 800eb70:	011b      	lsls	r3, r3, #4
 800eb72:	4413      	add	r3, r2
 800eb74:	330d      	adds	r3, #13
 800eb76:	b29b      	uxth	r3, r3
 800eb78:	005b      	lsls	r3, r3, #1
 800eb7a:	b29b      	uxth	r3, r3
 800eb7c:	3301      	adds	r3, #1
 800eb7e:	b29b      	uxth	r3, r3
 800eb80:	496f      	ldr	r1, [pc, #444]	; (800ed40 <ThreadMainTask+0xa08>)
 800eb82:	4618      	mov	r0, r3
 800eb84:	f008 f852 	bl	8016c2c <fm25v02_read>
					fm25v02_read( 2*(0x28C0+(((current_date.Month)-1)*31*16)+(((current_date.Date)-1)*16)+14)+1, &temp_time_off_4_hour);
 800eb88:	4b66      	ldr	r3, [pc, #408]	; (800ed24 <ThreadMainTask+0x9ec>)
 800eb8a:	785b      	ldrb	r3, [r3, #1]
 800eb8c:	1e5a      	subs	r2, r3, #1
 800eb8e:	4613      	mov	r3, r2
 800eb90:	015b      	lsls	r3, r3, #5
 800eb92:	1a9b      	subs	r3, r3, r2
 800eb94:	011b      	lsls	r3, r3, #4
 800eb96:	f503 5223 	add.w	r2, r3, #10432	; 0x28c0
 800eb9a:	4b62      	ldr	r3, [pc, #392]	; (800ed24 <ThreadMainTask+0x9ec>)
 800eb9c:	789b      	ldrb	r3, [r3, #2]
 800eb9e:	3b01      	subs	r3, #1
 800eba0:	011b      	lsls	r3, r3, #4
 800eba2:	4413      	add	r3, r2
 800eba4:	330e      	adds	r3, #14
 800eba6:	b29b      	uxth	r3, r3
 800eba8:	005b      	lsls	r3, r3, #1
 800ebaa:	b29b      	uxth	r3, r3
 800ebac:	3301      	adds	r3, #1
 800ebae:	b29b      	uxth	r3, r3
 800ebb0:	4964      	ldr	r1, [pc, #400]	; (800ed44 <ThreadMainTask+0xa0c>)
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	f008 f83a 	bl	8016c2c <fm25v02_read>
					fm25v02_read( 2*(0x28C0+(((current_date.Month)-1)*31*16)+(((current_date.Date)-1)*16)+15)+1, &temp_time_off_4_minute);
 800ebb8:	4b5a      	ldr	r3, [pc, #360]	; (800ed24 <ThreadMainTask+0x9ec>)
 800ebba:	785b      	ldrb	r3, [r3, #1]
 800ebbc:	1e5a      	subs	r2, r3, #1
 800ebbe:	4613      	mov	r3, r2
 800ebc0:	015b      	lsls	r3, r3, #5
 800ebc2:	1a9b      	subs	r3, r3, r2
 800ebc4:	011b      	lsls	r3, r3, #4
 800ebc6:	f503 5223 	add.w	r2, r3, #10432	; 0x28c0
 800ebca:	4b56      	ldr	r3, [pc, #344]	; (800ed24 <ThreadMainTask+0x9ec>)
 800ebcc:	789b      	ldrb	r3, [r3, #2]
 800ebce:	3b01      	subs	r3, #1
 800ebd0:	011b      	lsls	r3, r3, #4
 800ebd2:	4413      	add	r3, r2
 800ebd4:	330f      	adds	r3, #15
 800ebd6:	b29b      	uxth	r3, r3
 800ebd8:	005b      	lsls	r3, r3, #1
 800ebda:	b29b      	uxth	r3, r3
 800ebdc:	3301      	adds	r3, #1
 800ebde:	b29b      	uxth	r3, r3
 800ebe0:	4959      	ldr	r1, [pc, #356]	; (800ed48 <ThreadMainTask+0xa10>)
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	f008 f822 	bl	8016c2c <fm25v02_read>

					osMutexRelease(Fm25v02MutexHandle);
 800ebe8:	4b58      	ldr	r3, [pc, #352]	; (800ed4c <ThreadMainTask+0xa14>)
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	4618      	mov	r0, r3
 800ebee:	f7f9 fee3 	bl	80089b8 <osMutexRelease>

					if( (((control_registers.light_control_reg)&0x0001)==0x0000) || (((control_registers.light_control_reg)&0x0002)==0x0000) || (((control_registers.light_control_reg)&0x0004)==0x0000) )
 800ebf2:	4b57      	ldr	r3, [pc, #348]	; (800ed50 <ThreadMainTask+0xa18>)
 800ebf4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ebf8:	f003 0301 	and.w	r3, r3, #1
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d00e      	beq.n	800ec1e <ThreadMainTask+0x8e6>
 800ec00:	4b53      	ldr	r3, [pc, #332]	; (800ed50 <ThreadMainTask+0xa18>)
 800ec02:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ec06:	f003 0302 	and.w	r3, r3, #2
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d007      	beq.n	800ec1e <ThreadMainTask+0x8e6>
 800ec0e:	4b50      	ldr	r3, [pc, #320]	; (800ed50 <ThreadMainTask+0xa18>)
 800ec10:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ec14:	f003 0304 	and.w	r3, r3, #4
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	f040 8225 	bne.w	800f068 <ThreadMainTask+0xd30>
					{

						if( (temp_time_on_1_hour==current_time.Hours)&&(temp_time_on_1_minute==current_time.Minutes)&&((temp_time_on_1_hour!=temp_time_off_1_hour)||(temp_time_on_1_minute!=temp_time_off_1_minute)) )
 800ec1e:	4b4d      	ldr	r3, [pc, #308]	; (800ed54 <ThreadMainTask+0xa1c>)
 800ec20:	781a      	ldrb	r2, [r3, #0]
 800ec22:	4b4d      	ldr	r3, [pc, #308]	; (800ed58 <ThreadMainTask+0xa20>)
 800ec24:	781b      	ldrb	r3, [r3, #0]
 800ec26:	429a      	cmp	r2, r3
 800ec28:	d170      	bne.n	800ed0c <ThreadMainTask+0x9d4>
 800ec2a:	4b4a      	ldr	r3, [pc, #296]	; (800ed54 <ThreadMainTask+0xa1c>)
 800ec2c:	785a      	ldrb	r2, [r3, #1]
 800ec2e:	4b4b      	ldr	r3, [pc, #300]	; (800ed5c <ThreadMainTask+0xa24>)
 800ec30:	781b      	ldrb	r3, [r3, #0]
 800ec32:	429a      	cmp	r2, r3
 800ec34:	d16a      	bne.n	800ed0c <ThreadMainTask+0x9d4>
 800ec36:	4b48      	ldr	r3, [pc, #288]	; (800ed58 <ThreadMainTask+0xa20>)
 800ec38:	781a      	ldrb	r2, [r3, #0]
 800ec3a:	4b3c      	ldr	r3, [pc, #240]	; (800ed2c <ThreadMainTask+0x9f4>)
 800ec3c:	781b      	ldrb	r3, [r3, #0]
 800ec3e:	429a      	cmp	r2, r3
 800ec40:	d105      	bne.n	800ec4e <ThreadMainTask+0x916>
 800ec42:	4b46      	ldr	r3, [pc, #280]	; (800ed5c <ThreadMainTask+0xa24>)
 800ec44:	781a      	ldrb	r2, [r3, #0]
 800ec46:	4b3a      	ldr	r3, [pc, #232]	; (800ed30 <ThreadMainTask+0x9f8>)
 800ec48:	781b      	ldrb	r3, [r3, #0]
 800ec4a:	429a      	cmp	r2, r3
 800ec4c:	d05e      	beq.n	800ed0c <ThreadMainTask+0x9d4>
						{
							osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800ec4e:	4b3f      	ldr	r3, [pc, #252]	; (800ed4c <ThreadMainTask+0xa14>)
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	f04f 31ff 	mov.w	r1, #4294967295
 800ec56:	4618      	mov	r0, r3
 800ec58:	f7f9 fe60 	bl	800891c <osMutexWait>
							fm25v02_read(2*LIGHT_CONTROL_REG+1, &temp);
 800ec5c:	f107 030f 	add.w	r3, r7, #15
 800ec60:	4619      	mov	r1, r3
 800ec62:	f242 1083 	movw	r0, #8579	; 0x2183
 800ec66:	f007 ffe1 	bl	8016c2c <fm25v02_read>
							temp = temp|0x07;
 800ec6a:	7bfb      	ldrb	r3, [r7, #15]
 800ec6c:	f043 0307 	orr.w	r3, r3, #7
 800ec70:	b2db      	uxtb	r3, r3
 800ec72:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*LIGHT_CONTROL_REG+1, temp);
 800ec74:	7bfb      	ldrb	r3, [r7, #15]
 800ec76:	4619      	mov	r1, r3
 800ec78:	f242 1083 	movw	r0, #8579	; 0x2183
 800ec7c:	f008 f810 	bl	8016ca0 <fm25v02_write>
							control_registers.light_control_reg = control_registers.light_control_reg|0x0007;
 800ec80:	4b33      	ldr	r3, [pc, #204]	; (800ed50 <ThreadMainTask+0xa18>)
 800ec82:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ec86:	f043 0307 	orr.w	r3, r3, #7
 800ec8a:	b29a      	uxth	r2, r3
 800ec8c:	4b30      	ldr	r3, [pc, #192]	; (800ed50 <ThreadMainTask+0xa18>)
 800ec8e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

							fm25v02_write(2*MONTH_LIGHTING_ON_REG, 0x00);
 800ec92:	2100      	movs	r1, #0
 800ec94:	f242 006e 	movw	r0, #8302	; 0x206e
 800ec98:	f008 f802 	bl	8016ca0 <fm25v02_write>
							temp = current_date.Month;
 800ec9c:	4b21      	ldr	r3, [pc, #132]	; (800ed24 <ThreadMainTask+0x9ec>)
 800ec9e:	785b      	ldrb	r3, [r3, #1]
 800eca0:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*MONTH_LIGHTING_ON_REG+1, temp);
 800eca2:	7bfb      	ldrb	r3, [r7, #15]
 800eca4:	4619      	mov	r1, r3
 800eca6:	f242 006f 	movw	r0, #8303	; 0x206f
 800ecaa:	f007 fff9 	bl	8016ca0 <fm25v02_write>
							fm25v02_write(2*DAY_LIGHTING_ON_REG, 0x00);
 800ecae:	2100      	movs	r1, #0
 800ecb0:	f242 0070 	movw	r0, #8304	; 0x2070
 800ecb4:	f007 fff4 	bl	8016ca0 <fm25v02_write>
							temp = current_date.Date;
 800ecb8:	4b1a      	ldr	r3, [pc, #104]	; (800ed24 <ThreadMainTask+0x9ec>)
 800ecba:	789b      	ldrb	r3, [r3, #2]
 800ecbc:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*DAY_LIGHTING_ON_REG+1, temp);
 800ecbe:	7bfb      	ldrb	r3, [r7, #15]
 800ecc0:	4619      	mov	r1, r3
 800ecc2:	f242 0071 	movw	r0, #8305	; 0x2071
 800ecc6:	f007 ffeb 	bl	8016ca0 <fm25v02_write>
							fm25v02_write(2*HOUR_LIGHTING_ON_REG+1, 0x00);
 800ecca:	2100      	movs	r1, #0
 800eccc:	f242 0073 	movw	r0, #8307	; 0x2073
 800ecd0:	f007 ffe6 	bl	8016ca0 <fm25v02_write>
							temp = current_time.Hours;
 800ecd4:	4b1f      	ldr	r3, [pc, #124]	; (800ed54 <ThreadMainTask+0xa1c>)
 800ecd6:	781b      	ldrb	r3, [r3, #0]
 800ecd8:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*HOUR_LIGHTING_ON_REG+1, temp);
 800ecda:	7bfb      	ldrb	r3, [r7, #15]
 800ecdc:	4619      	mov	r1, r3
 800ecde:	f242 0073 	movw	r0, #8307	; 0x2073
 800ece2:	f007 ffdd 	bl	8016ca0 <fm25v02_write>
							fm25v02_write(2*MINUTE_LIGHTING_ON_REG, 0x00);
 800ece6:	2100      	movs	r1, #0
 800ece8:	f242 0074 	movw	r0, #8308	; 0x2074
 800ecec:	f007 ffd8 	bl	8016ca0 <fm25v02_write>
							temp = current_time.Minutes;
 800ecf0:	4b18      	ldr	r3, [pc, #96]	; (800ed54 <ThreadMainTask+0xa1c>)
 800ecf2:	785b      	ldrb	r3, [r3, #1]
 800ecf4:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*MINUTE_LIGHTING_ON_REG+1, temp);
 800ecf6:	7bfb      	ldrb	r3, [r7, #15]
 800ecf8:	4619      	mov	r1, r3
 800ecfa:	f242 0075 	movw	r0, #8309	; 0x2075
 800ecfe:	f007 ffcf 	bl	8016ca0 <fm25v02_write>

							osMutexRelease(Fm25v02MutexHandle);
 800ed02:	4b12      	ldr	r3, [pc, #72]	; (800ed4c <ThreadMainTask+0xa14>)
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	4618      	mov	r0, r3
 800ed08:	f7f9 fe56 	bl	80089b8 <osMutexRelease>

							//LED8_TOGGLE();
						}

						if( (temp_time_on_2_hour==current_time.Hours)&&(temp_time_on_2_minute==current_time.Minutes)&&((temp_time_on_2_hour!=temp_time_off_2_hour)||(temp_time_on_2_minute!=temp_time_off_2_minute)) )
 800ed0c:	4b11      	ldr	r3, [pc, #68]	; (800ed54 <ThreadMainTask+0xa1c>)
 800ed0e:	781a      	ldrb	r2, [r3, #0]
 800ed10:	4b13      	ldr	r3, [pc, #76]	; (800ed60 <ThreadMainTask+0xa28>)
 800ed12:	781b      	ldrb	r3, [r3, #0]
 800ed14:	429a      	cmp	r2, r3
 800ed16:	f040 8094 	bne.w	800ee42 <ThreadMainTask+0xb0a>
 800ed1a:	4b0e      	ldr	r3, [pc, #56]	; (800ed54 <ThreadMainTask+0xa1c>)
 800ed1c:	785a      	ldrb	r2, [r3, #1]
 800ed1e:	e021      	b.n	800ed64 <ThreadMainTask+0xa2c>
 800ed20:	20009f50 	.word	0x20009f50
 800ed24:	20009f10 	.word	0x20009f10
 800ed28:	20009f37 	.word	0x20009f37
 800ed2c:	20009f55 	.word	0x20009f55
 800ed30:	20009f38 	.word	0x20009f38
 800ed34:	20009f51 	.word	0x20009f51
 800ed38:	20009f34 	.word	0x20009f34
 800ed3c:	20009f36 	.word	0x20009f36
 800ed40:	20009f58 	.word	0x20009f58
 800ed44:	20009f0e 	.word	0x20009f0e
 800ed48:	20009f52 	.word	0x20009f52
 800ed4c:	20009af8 	.word	0x20009af8
 800ed50:	2000a234 	.word	0x2000a234
 800ed54:	20009f18 	.word	0x20009f18
 800ed58:	20009f59 	.word	0x20009f59
 800ed5c:	20009f2c 	.word	0x20009f2c
 800ed60:	20009f14 	.word	0x20009f14
 800ed64:	4bb0      	ldr	r3, [pc, #704]	; (800f028 <ThreadMainTask+0xcf0>)
 800ed66:	781b      	ldrb	r3, [r3, #0]
 800ed68:	429a      	cmp	r2, r3
 800ed6a:	d16a      	bne.n	800ee42 <ThreadMainTask+0xb0a>
 800ed6c:	4baf      	ldr	r3, [pc, #700]	; (800f02c <ThreadMainTask+0xcf4>)
 800ed6e:	781a      	ldrb	r2, [r3, #0]
 800ed70:	4baf      	ldr	r3, [pc, #700]	; (800f030 <ThreadMainTask+0xcf8>)
 800ed72:	781b      	ldrb	r3, [r3, #0]
 800ed74:	429a      	cmp	r2, r3
 800ed76:	d105      	bne.n	800ed84 <ThreadMainTask+0xa4c>
 800ed78:	4bab      	ldr	r3, [pc, #684]	; (800f028 <ThreadMainTask+0xcf0>)
 800ed7a:	781a      	ldrb	r2, [r3, #0]
 800ed7c:	4bad      	ldr	r3, [pc, #692]	; (800f034 <ThreadMainTask+0xcfc>)
 800ed7e:	781b      	ldrb	r3, [r3, #0]
 800ed80:	429a      	cmp	r2, r3
 800ed82:	d05e      	beq.n	800ee42 <ThreadMainTask+0xb0a>
						{
							osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800ed84:	4bac      	ldr	r3, [pc, #688]	; (800f038 <ThreadMainTask+0xd00>)
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	f04f 31ff 	mov.w	r1, #4294967295
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	f7f9 fdc5 	bl	800891c <osMutexWait>
							fm25v02_read(2*LIGHT_CONTROL_REG+1, &temp);
 800ed92:	f107 030f 	add.w	r3, r7, #15
 800ed96:	4619      	mov	r1, r3
 800ed98:	f242 1083 	movw	r0, #8579	; 0x2183
 800ed9c:	f007 ff46 	bl	8016c2c <fm25v02_read>
							temp = temp|0x07;
 800eda0:	7bfb      	ldrb	r3, [r7, #15]
 800eda2:	f043 0307 	orr.w	r3, r3, #7
 800eda6:	b2db      	uxtb	r3, r3
 800eda8:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*LIGHT_CONTROL_REG+1, temp);
 800edaa:	7bfb      	ldrb	r3, [r7, #15]
 800edac:	4619      	mov	r1, r3
 800edae:	f242 1083 	movw	r0, #8579	; 0x2183
 800edb2:	f007 ff75 	bl	8016ca0 <fm25v02_write>
							control_registers.light_control_reg = control_registers.light_control_reg|0x0007;
 800edb6:	4ba1      	ldr	r3, [pc, #644]	; (800f03c <ThreadMainTask+0xd04>)
 800edb8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800edbc:	f043 0307 	orr.w	r3, r3, #7
 800edc0:	b29a      	uxth	r2, r3
 800edc2:	4b9e      	ldr	r3, [pc, #632]	; (800f03c <ThreadMainTask+0xd04>)
 800edc4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

							fm25v02_write(2*MONTH_LIGHTING_ON_REG, 0x00);
 800edc8:	2100      	movs	r1, #0
 800edca:	f242 006e 	movw	r0, #8302	; 0x206e
 800edce:	f007 ff67 	bl	8016ca0 <fm25v02_write>
							temp = current_date.Month;
 800edd2:	4b9b      	ldr	r3, [pc, #620]	; (800f040 <ThreadMainTask+0xd08>)
 800edd4:	785b      	ldrb	r3, [r3, #1]
 800edd6:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*MONTH_LIGHTING_ON_REG+1, temp);
 800edd8:	7bfb      	ldrb	r3, [r7, #15]
 800edda:	4619      	mov	r1, r3
 800eddc:	f242 006f 	movw	r0, #8303	; 0x206f
 800ede0:	f007 ff5e 	bl	8016ca0 <fm25v02_write>
							fm25v02_write(2*DAY_LIGHTING_ON_REG, 0x00);
 800ede4:	2100      	movs	r1, #0
 800ede6:	f242 0070 	movw	r0, #8304	; 0x2070
 800edea:	f007 ff59 	bl	8016ca0 <fm25v02_write>
							temp = current_date.Date;
 800edee:	4b94      	ldr	r3, [pc, #592]	; (800f040 <ThreadMainTask+0xd08>)
 800edf0:	789b      	ldrb	r3, [r3, #2]
 800edf2:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*DAY_LIGHTING_ON_REG+1, temp);
 800edf4:	7bfb      	ldrb	r3, [r7, #15]
 800edf6:	4619      	mov	r1, r3
 800edf8:	f242 0071 	movw	r0, #8305	; 0x2071
 800edfc:	f007 ff50 	bl	8016ca0 <fm25v02_write>
							fm25v02_write(2*HOUR_LIGHTING_ON_REG+1, 0x00);
 800ee00:	2100      	movs	r1, #0
 800ee02:	f242 0073 	movw	r0, #8307	; 0x2073
 800ee06:	f007 ff4b 	bl	8016ca0 <fm25v02_write>
							temp = current_time.Hours;
 800ee0a:	4b8e      	ldr	r3, [pc, #568]	; (800f044 <ThreadMainTask+0xd0c>)
 800ee0c:	781b      	ldrb	r3, [r3, #0]
 800ee0e:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*HOUR_LIGHTING_ON_REG+1, temp);
 800ee10:	7bfb      	ldrb	r3, [r7, #15]
 800ee12:	4619      	mov	r1, r3
 800ee14:	f242 0073 	movw	r0, #8307	; 0x2073
 800ee18:	f007 ff42 	bl	8016ca0 <fm25v02_write>
							fm25v02_write(2*MINUTE_LIGHTING_ON_REG, 0x00);
 800ee1c:	2100      	movs	r1, #0
 800ee1e:	f242 0074 	movw	r0, #8308	; 0x2074
 800ee22:	f007 ff3d 	bl	8016ca0 <fm25v02_write>
							temp = current_time.Minutes;
 800ee26:	4b87      	ldr	r3, [pc, #540]	; (800f044 <ThreadMainTask+0xd0c>)
 800ee28:	785b      	ldrb	r3, [r3, #1]
 800ee2a:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*MINUTE_LIGHTING_ON_REG+1, temp);
 800ee2c:	7bfb      	ldrb	r3, [r7, #15]
 800ee2e:	4619      	mov	r1, r3
 800ee30:	f242 0075 	movw	r0, #8309	; 0x2075
 800ee34:	f007 ff34 	bl	8016ca0 <fm25v02_write>

							osMutexRelease(Fm25v02MutexHandle);
 800ee38:	4b7f      	ldr	r3, [pc, #508]	; (800f038 <ThreadMainTask+0xd00>)
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	f7f9 fdbb 	bl	80089b8 <osMutexRelease>

							//LED7_TOGGLE();
						}

						if( (temp_time_on_3_hour==current_time.Hours)&&(temp_time_on_3_minute==current_time.Minutes)&&((temp_time_on_3_hour!=temp_time_off_3_hour)||(temp_time_on_3_minute!=temp_time_off_3_minute)) )
 800ee42:	4b80      	ldr	r3, [pc, #512]	; (800f044 <ThreadMainTask+0xd0c>)
 800ee44:	781a      	ldrb	r2, [r3, #0]
 800ee46:	4b80      	ldr	r3, [pc, #512]	; (800f048 <ThreadMainTask+0xd10>)
 800ee48:	781b      	ldrb	r3, [r3, #0]
 800ee4a:	429a      	cmp	r2, r3
 800ee4c:	d170      	bne.n	800ef30 <ThreadMainTask+0xbf8>
 800ee4e:	4b7d      	ldr	r3, [pc, #500]	; (800f044 <ThreadMainTask+0xd0c>)
 800ee50:	785a      	ldrb	r2, [r3, #1]
 800ee52:	4b7e      	ldr	r3, [pc, #504]	; (800f04c <ThreadMainTask+0xd14>)
 800ee54:	781b      	ldrb	r3, [r3, #0]
 800ee56:	429a      	cmp	r2, r3
 800ee58:	d16a      	bne.n	800ef30 <ThreadMainTask+0xbf8>
 800ee5a:	4b7b      	ldr	r3, [pc, #492]	; (800f048 <ThreadMainTask+0xd10>)
 800ee5c:	781a      	ldrb	r2, [r3, #0]
 800ee5e:	4b7c      	ldr	r3, [pc, #496]	; (800f050 <ThreadMainTask+0xd18>)
 800ee60:	781b      	ldrb	r3, [r3, #0]
 800ee62:	429a      	cmp	r2, r3
 800ee64:	d105      	bne.n	800ee72 <ThreadMainTask+0xb3a>
 800ee66:	4b79      	ldr	r3, [pc, #484]	; (800f04c <ThreadMainTask+0xd14>)
 800ee68:	781a      	ldrb	r2, [r3, #0]
 800ee6a:	4b7a      	ldr	r3, [pc, #488]	; (800f054 <ThreadMainTask+0xd1c>)
 800ee6c:	781b      	ldrb	r3, [r3, #0]
 800ee6e:	429a      	cmp	r2, r3
 800ee70:	d05e      	beq.n	800ef30 <ThreadMainTask+0xbf8>
						{
							osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800ee72:	4b71      	ldr	r3, [pc, #452]	; (800f038 <ThreadMainTask+0xd00>)
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	f04f 31ff 	mov.w	r1, #4294967295
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	f7f9 fd4e 	bl	800891c <osMutexWait>
							fm25v02_read(2*LIGHT_CONTROL_REG+1, &temp);
 800ee80:	f107 030f 	add.w	r3, r7, #15
 800ee84:	4619      	mov	r1, r3
 800ee86:	f242 1083 	movw	r0, #8579	; 0x2183
 800ee8a:	f007 fecf 	bl	8016c2c <fm25v02_read>
							temp = temp|0x07;
 800ee8e:	7bfb      	ldrb	r3, [r7, #15]
 800ee90:	f043 0307 	orr.w	r3, r3, #7
 800ee94:	b2db      	uxtb	r3, r3
 800ee96:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*LIGHT_CONTROL_REG+1, temp);
 800ee98:	7bfb      	ldrb	r3, [r7, #15]
 800ee9a:	4619      	mov	r1, r3
 800ee9c:	f242 1083 	movw	r0, #8579	; 0x2183
 800eea0:	f007 fefe 	bl	8016ca0 <fm25v02_write>
							control_registers.light_control_reg = control_registers.light_control_reg|0x0007;
 800eea4:	4b65      	ldr	r3, [pc, #404]	; (800f03c <ThreadMainTask+0xd04>)
 800eea6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800eeaa:	f043 0307 	orr.w	r3, r3, #7
 800eeae:	b29a      	uxth	r2, r3
 800eeb0:	4b62      	ldr	r3, [pc, #392]	; (800f03c <ThreadMainTask+0xd04>)
 800eeb2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

							fm25v02_write(2*MONTH_LIGHTING_ON_REG, 0x00);
 800eeb6:	2100      	movs	r1, #0
 800eeb8:	f242 006e 	movw	r0, #8302	; 0x206e
 800eebc:	f007 fef0 	bl	8016ca0 <fm25v02_write>
							temp = current_date.Month;
 800eec0:	4b5f      	ldr	r3, [pc, #380]	; (800f040 <ThreadMainTask+0xd08>)
 800eec2:	785b      	ldrb	r3, [r3, #1]
 800eec4:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*MONTH_LIGHTING_ON_REG+1, temp);
 800eec6:	7bfb      	ldrb	r3, [r7, #15]
 800eec8:	4619      	mov	r1, r3
 800eeca:	f242 006f 	movw	r0, #8303	; 0x206f
 800eece:	f007 fee7 	bl	8016ca0 <fm25v02_write>
							fm25v02_write(2*DAY_LIGHTING_ON_REG, 0x00);
 800eed2:	2100      	movs	r1, #0
 800eed4:	f242 0070 	movw	r0, #8304	; 0x2070
 800eed8:	f007 fee2 	bl	8016ca0 <fm25v02_write>
							temp = current_date.Date;
 800eedc:	4b58      	ldr	r3, [pc, #352]	; (800f040 <ThreadMainTask+0xd08>)
 800eede:	789b      	ldrb	r3, [r3, #2]
 800eee0:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*DAY_LIGHTING_ON_REG+1, temp);
 800eee2:	7bfb      	ldrb	r3, [r7, #15]
 800eee4:	4619      	mov	r1, r3
 800eee6:	f242 0071 	movw	r0, #8305	; 0x2071
 800eeea:	f007 fed9 	bl	8016ca0 <fm25v02_write>
							fm25v02_write(2*HOUR_LIGHTING_ON_REG+1, 0x00);
 800eeee:	2100      	movs	r1, #0
 800eef0:	f242 0073 	movw	r0, #8307	; 0x2073
 800eef4:	f007 fed4 	bl	8016ca0 <fm25v02_write>
							temp = current_time.Hours;
 800eef8:	4b52      	ldr	r3, [pc, #328]	; (800f044 <ThreadMainTask+0xd0c>)
 800eefa:	781b      	ldrb	r3, [r3, #0]
 800eefc:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*HOUR_LIGHTING_ON_REG+1, temp);
 800eefe:	7bfb      	ldrb	r3, [r7, #15]
 800ef00:	4619      	mov	r1, r3
 800ef02:	f242 0073 	movw	r0, #8307	; 0x2073
 800ef06:	f007 fecb 	bl	8016ca0 <fm25v02_write>
							fm25v02_write(2*MINUTE_LIGHTING_ON_REG, 0x00);
 800ef0a:	2100      	movs	r1, #0
 800ef0c:	f242 0074 	movw	r0, #8308	; 0x2074
 800ef10:	f007 fec6 	bl	8016ca0 <fm25v02_write>
							temp = current_time.Minutes;
 800ef14:	4b4b      	ldr	r3, [pc, #300]	; (800f044 <ThreadMainTask+0xd0c>)
 800ef16:	785b      	ldrb	r3, [r3, #1]
 800ef18:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*MINUTE_LIGHTING_ON_REG+1, temp);
 800ef1a:	7bfb      	ldrb	r3, [r7, #15]
 800ef1c:	4619      	mov	r1, r3
 800ef1e:	f242 0075 	movw	r0, #8309	; 0x2075
 800ef22:	f007 febd 	bl	8016ca0 <fm25v02_write>

							osMutexRelease(Fm25v02MutexHandle);
 800ef26:	4b44      	ldr	r3, [pc, #272]	; (800f038 <ThreadMainTask+0xd00>)
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	f7f9 fd44 	bl	80089b8 <osMutexRelease>

							//LED6_TOGGLE();
						}

						if( (temp_time_on_4_hour==current_time.Hours)&&(temp_time_on_4_minute==current_time.Minutes)&&((temp_time_on_4_hour!=temp_time_off_4_hour)||(temp_time_on_4_minute!=temp_time_off_4_minute)) )
 800ef30:	4b44      	ldr	r3, [pc, #272]	; (800f044 <ThreadMainTask+0xd0c>)
 800ef32:	781a      	ldrb	r2, [r3, #0]
 800ef34:	4b48      	ldr	r3, [pc, #288]	; (800f058 <ThreadMainTask+0xd20>)
 800ef36:	781b      	ldrb	r3, [r3, #0]
 800ef38:	429a      	cmp	r2, r3
 800ef3a:	f040 82ac 	bne.w	800f496 <ThreadMainTask+0x115e>
 800ef3e:	4b41      	ldr	r3, [pc, #260]	; (800f044 <ThreadMainTask+0xd0c>)
 800ef40:	785a      	ldrb	r2, [r3, #1]
 800ef42:	4b46      	ldr	r3, [pc, #280]	; (800f05c <ThreadMainTask+0xd24>)
 800ef44:	781b      	ldrb	r3, [r3, #0]
 800ef46:	429a      	cmp	r2, r3
 800ef48:	f040 82a5 	bne.w	800f496 <ThreadMainTask+0x115e>
 800ef4c:	4b42      	ldr	r3, [pc, #264]	; (800f058 <ThreadMainTask+0xd20>)
 800ef4e:	781a      	ldrb	r2, [r3, #0]
 800ef50:	4b43      	ldr	r3, [pc, #268]	; (800f060 <ThreadMainTask+0xd28>)
 800ef52:	781b      	ldrb	r3, [r3, #0]
 800ef54:	429a      	cmp	r2, r3
 800ef56:	d106      	bne.n	800ef66 <ThreadMainTask+0xc2e>
 800ef58:	4b40      	ldr	r3, [pc, #256]	; (800f05c <ThreadMainTask+0xd24>)
 800ef5a:	781a      	ldrb	r2, [r3, #0]
 800ef5c:	4b41      	ldr	r3, [pc, #260]	; (800f064 <ThreadMainTask+0xd2c>)
 800ef5e:	781b      	ldrb	r3, [r3, #0]
 800ef60:	429a      	cmp	r2, r3
 800ef62:	f000 8298 	beq.w	800f496 <ThreadMainTask+0x115e>
						{
							osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800ef66:	4b34      	ldr	r3, [pc, #208]	; (800f038 <ThreadMainTask+0xd00>)
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	f04f 31ff 	mov.w	r1, #4294967295
 800ef6e:	4618      	mov	r0, r3
 800ef70:	f7f9 fcd4 	bl	800891c <osMutexWait>
							fm25v02_read(2*LIGHT_CONTROL_REG+1, &temp);
 800ef74:	f107 030f 	add.w	r3, r7, #15
 800ef78:	4619      	mov	r1, r3
 800ef7a:	f242 1083 	movw	r0, #8579	; 0x2183
 800ef7e:	f007 fe55 	bl	8016c2c <fm25v02_read>
							temp = temp|0x07;
 800ef82:	7bfb      	ldrb	r3, [r7, #15]
 800ef84:	f043 0307 	orr.w	r3, r3, #7
 800ef88:	b2db      	uxtb	r3, r3
 800ef8a:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*LIGHT_CONTROL_REG+1, temp);
 800ef8c:	7bfb      	ldrb	r3, [r7, #15]
 800ef8e:	4619      	mov	r1, r3
 800ef90:	f242 1083 	movw	r0, #8579	; 0x2183
 800ef94:	f007 fe84 	bl	8016ca0 <fm25v02_write>
							control_registers.light_control_reg = control_registers.light_control_reg|0x0007;
 800ef98:	4b28      	ldr	r3, [pc, #160]	; (800f03c <ThreadMainTask+0xd04>)
 800ef9a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ef9e:	f043 0307 	orr.w	r3, r3, #7
 800efa2:	b29a      	uxth	r2, r3
 800efa4:	4b25      	ldr	r3, [pc, #148]	; (800f03c <ThreadMainTask+0xd04>)
 800efa6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

							fm25v02_write(2*MONTH_LIGHTING_ON_REG, 0x00);
 800efaa:	2100      	movs	r1, #0
 800efac:	f242 006e 	movw	r0, #8302	; 0x206e
 800efb0:	f007 fe76 	bl	8016ca0 <fm25v02_write>
							temp = current_date.Month;
 800efb4:	4b22      	ldr	r3, [pc, #136]	; (800f040 <ThreadMainTask+0xd08>)
 800efb6:	785b      	ldrb	r3, [r3, #1]
 800efb8:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*MONTH_LIGHTING_ON_REG+1, temp);
 800efba:	7bfb      	ldrb	r3, [r7, #15]
 800efbc:	4619      	mov	r1, r3
 800efbe:	f242 006f 	movw	r0, #8303	; 0x206f
 800efc2:	f007 fe6d 	bl	8016ca0 <fm25v02_write>
							fm25v02_write(2*DAY_LIGHTING_ON_REG, 0x00);
 800efc6:	2100      	movs	r1, #0
 800efc8:	f242 0070 	movw	r0, #8304	; 0x2070
 800efcc:	f007 fe68 	bl	8016ca0 <fm25v02_write>
							temp = current_date.Date;
 800efd0:	4b1b      	ldr	r3, [pc, #108]	; (800f040 <ThreadMainTask+0xd08>)
 800efd2:	789b      	ldrb	r3, [r3, #2]
 800efd4:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*DAY_LIGHTING_ON_REG+1, temp);
 800efd6:	7bfb      	ldrb	r3, [r7, #15]
 800efd8:	4619      	mov	r1, r3
 800efda:	f242 0071 	movw	r0, #8305	; 0x2071
 800efde:	f007 fe5f 	bl	8016ca0 <fm25v02_write>
							fm25v02_write(2*HOUR_LIGHTING_ON_REG+1, 0x00);
 800efe2:	2100      	movs	r1, #0
 800efe4:	f242 0073 	movw	r0, #8307	; 0x2073
 800efe8:	f007 fe5a 	bl	8016ca0 <fm25v02_write>
							temp = current_time.Hours;
 800efec:	4b15      	ldr	r3, [pc, #84]	; (800f044 <ThreadMainTask+0xd0c>)
 800efee:	781b      	ldrb	r3, [r3, #0]
 800eff0:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*HOUR_LIGHTING_ON_REG+1, temp);
 800eff2:	7bfb      	ldrb	r3, [r7, #15]
 800eff4:	4619      	mov	r1, r3
 800eff6:	f242 0073 	movw	r0, #8307	; 0x2073
 800effa:	f007 fe51 	bl	8016ca0 <fm25v02_write>
							fm25v02_write(2*MINUTE_LIGHTING_ON_REG, 0x00);
 800effe:	2100      	movs	r1, #0
 800f000:	f242 0074 	movw	r0, #8308	; 0x2074
 800f004:	f007 fe4c 	bl	8016ca0 <fm25v02_write>
							temp = current_time.Minutes;
 800f008:	4b0e      	ldr	r3, [pc, #56]	; (800f044 <ThreadMainTask+0xd0c>)
 800f00a:	785b      	ldrb	r3, [r3, #1]
 800f00c:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*MINUTE_LIGHTING_ON_REG+1, temp);
 800f00e:	7bfb      	ldrb	r3, [r7, #15]
 800f010:	4619      	mov	r1, r3
 800f012:	f242 0075 	movw	r0, #8309	; 0x2075
 800f016:	f007 fe43 	bl	8016ca0 <fm25v02_write>

							osMutexRelease(Fm25v02MutexHandle);
 800f01a:	4b07      	ldr	r3, [pc, #28]	; (800f038 <ThreadMainTask+0xd00>)
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	4618      	mov	r0, r3
 800f020:	f7f9 fcca 	bl	80089b8 <osMutexRelease>
						if( (temp_time_on_4_hour==current_time.Hours)&&(temp_time_on_4_minute==current_time.Minutes)&&((temp_time_on_4_hour!=temp_time_off_4_hour)||(temp_time_on_4_minute!=temp_time_off_4_minute)) )
 800f024:	e237      	b.n	800f496 <ThreadMainTask+0x115e>
 800f026:	bf00      	nop
 800f028:	20009f0c 	.word	0x20009f0c
 800f02c:	20009f14 	.word	0x20009f14
 800f030:	20009f51 	.word	0x20009f51
 800f034:	20009f34 	.word	0x20009f34
 800f038:	20009af8 	.word	0x20009af8
 800f03c:	2000a234 	.word	0x2000a234
 800f040:	20009f10 	.word	0x20009f10
 800f044:	20009f18 	.word	0x20009f18
 800f048:	20009f57 	.word	0x20009f57
 800f04c:	20009f53 	.word	0x20009f53
 800f050:	20009f36 	.word	0x20009f36
 800f054:	20009f58 	.word	0x20009f58
 800f058:	20009f50 	.word	0x20009f50
 800f05c:	20009f37 	.word	0x20009f37
 800f060:	20009f0e 	.word	0x20009f0e
 800f064:	20009f52 	.word	0x20009f52
						}


					}

					else if( (((control_registers.light_control_reg)&0x0001)==0x0001) || (((control_registers.light_control_reg)&0x0002)==0x0002) || (((control_registers.light_control_reg)&0x0004)==0x0004) )
 800f068:	4bbc      	ldr	r3, [pc, #752]	; (800f35c <ThreadMainTask+0x1024>)
 800f06a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f06e:	f003 0301 	and.w	r3, r3, #1
 800f072:	2b00      	cmp	r3, #0
 800f074:	d10e      	bne.n	800f094 <ThreadMainTask+0xd5c>
 800f076:	4bb9      	ldr	r3, [pc, #740]	; (800f35c <ThreadMainTask+0x1024>)
 800f078:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f07c:	f003 0302 	and.w	r3, r3, #2
 800f080:	2b00      	cmp	r3, #0
 800f082:	d107      	bne.n	800f094 <ThreadMainTask+0xd5c>
 800f084:	4bb5      	ldr	r3, [pc, #724]	; (800f35c <ThreadMainTask+0x1024>)
 800f086:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f08a:	f003 0304 	and.w	r3, r3, #4
 800f08e:	2b00      	cmp	r3, #0
 800f090:	f000 8202 	beq.w	800f498 <ThreadMainTask+0x1160>
					{

						if( (temp_time_off_1_hour==current_time.Hours)&&(temp_time_off_1_minute==current_time.Minutes)&&((temp_time_on_1_hour!=temp_time_off_1_hour)||(temp_time_on_1_minute!=temp_time_off_1_minute)) )
 800f094:	4bb2      	ldr	r3, [pc, #712]	; (800f360 <ThreadMainTask+0x1028>)
 800f096:	781a      	ldrb	r2, [r3, #0]
 800f098:	4bb2      	ldr	r3, [pc, #712]	; (800f364 <ThreadMainTask+0x102c>)
 800f09a:	781b      	ldrb	r3, [r3, #0]
 800f09c:	429a      	cmp	r2, r3
 800f09e:	d170      	bne.n	800f182 <ThreadMainTask+0xe4a>
 800f0a0:	4baf      	ldr	r3, [pc, #700]	; (800f360 <ThreadMainTask+0x1028>)
 800f0a2:	785a      	ldrb	r2, [r3, #1]
 800f0a4:	4bb0      	ldr	r3, [pc, #704]	; (800f368 <ThreadMainTask+0x1030>)
 800f0a6:	781b      	ldrb	r3, [r3, #0]
 800f0a8:	429a      	cmp	r2, r3
 800f0aa:	d16a      	bne.n	800f182 <ThreadMainTask+0xe4a>
 800f0ac:	4baf      	ldr	r3, [pc, #700]	; (800f36c <ThreadMainTask+0x1034>)
 800f0ae:	781a      	ldrb	r2, [r3, #0]
 800f0b0:	4bac      	ldr	r3, [pc, #688]	; (800f364 <ThreadMainTask+0x102c>)
 800f0b2:	781b      	ldrb	r3, [r3, #0]
 800f0b4:	429a      	cmp	r2, r3
 800f0b6:	d105      	bne.n	800f0c4 <ThreadMainTask+0xd8c>
 800f0b8:	4bad      	ldr	r3, [pc, #692]	; (800f370 <ThreadMainTask+0x1038>)
 800f0ba:	781a      	ldrb	r2, [r3, #0]
 800f0bc:	4baa      	ldr	r3, [pc, #680]	; (800f368 <ThreadMainTask+0x1030>)
 800f0be:	781b      	ldrb	r3, [r3, #0]
 800f0c0:	429a      	cmp	r2, r3
 800f0c2:	d05e      	beq.n	800f182 <ThreadMainTask+0xe4a>
						{
							osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800f0c4:	4bab      	ldr	r3, [pc, #684]	; (800f374 <ThreadMainTask+0x103c>)
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	f04f 31ff 	mov.w	r1, #4294967295
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	f7f9 fc25 	bl	800891c <osMutexWait>
							fm25v02_read(2*LIGHT_CONTROL_REG+1, &temp);
 800f0d2:	f107 030f 	add.w	r3, r7, #15
 800f0d6:	4619      	mov	r1, r3
 800f0d8:	f242 1083 	movw	r0, #8579	; 0x2183
 800f0dc:	f007 fda6 	bl	8016c2c <fm25v02_read>
							temp = temp&0xF8;
 800f0e0:	7bfb      	ldrb	r3, [r7, #15]
 800f0e2:	f023 0307 	bic.w	r3, r3, #7
 800f0e6:	b2db      	uxtb	r3, r3
 800f0e8:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*LIGHT_CONTROL_REG+1, temp);
 800f0ea:	7bfb      	ldrb	r3, [r7, #15]
 800f0ec:	4619      	mov	r1, r3
 800f0ee:	f242 1083 	movw	r0, #8579	; 0x2183
 800f0f2:	f007 fdd5 	bl	8016ca0 <fm25v02_write>
							control_registers.light_control_reg = control_registers.light_control_reg&0xFFF8;
 800f0f6:	4b99      	ldr	r3, [pc, #612]	; (800f35c <ThreadMainTask+0x1024>)
 800f0f8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f0fc:	f023 0307 	bic.w	r3, r3, #7
 800f100:	b29a      	uxth	r2, r3
 800f102:	4b96      	ldr	r3, [pc, #600]	; (800f35c <ThreadMainTask+0x1024>)
 800f104:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

							fm25v02_write(2*MONTH_LIGHTING_OFF_REG, 0x00);
 800f108:	2100      	movs	r1, #0
 800f10a:	f242 0066 	movw	r0, #8294	; 0x2066
 800f10e:	f007 fdc7 	bl	8016ca0 <fm25v02_write>
							temp = current_date.Month;
 800f112:	4b99      	ldr	r3, [pc, #612]	; (800f378 <ThreadMainTask+0x1040>)
 800f114:	785b      	ldrb	r3, [r3, #1]
 800f116:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*MONTH_LIGHTING_OFF_REG+1, temp);
 800f118:	7bfb      	ldrb	r3, [r7, #15]
 800f11a:	4619      	mov	r1, r3
 800f11c:	f242 0067 	movw	r0, #8295	; 0x2067
 800f120:	f007 fdbe 	bl	8016ca0 <fm25v02_write>
							fm25v02_write(2*DAY_LIGHTING_OFF_REG+1, 0x00);
 800f124:	2100      	movs	r1, #0
 800f126:	f242 0069 	movw	r0, #8297	; 0x2069
 800f12a:	f007 fdb9 	bl	8016ca0 <fm25v02_write>
							temp = current_date.Date;
 800f12e:	4b92      	ldr	r3, [pc, #584]	; (800f378 <ThreadMainTask+0x1040>)
 800f130:	789b      	ldrb	r3, [r3, #2]
 800f132:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*DAY_LIGHTING_OFF_REG+1, temp);
 800f134:	7bfb      	ldrb	r3, [r7, #15]
 800f136:	4619      	mov	r1, r3
 800f138:	f242 0069 	movw	r0, #8297	; 0x2069
 800f13c:	f007 fdb0 	bl	8016ca0 <fm25v02_write>
							fm25v02_write(2*HOUR_LIGHTING_OFF_REG+1, 0x00);
 800f140:	2100      	movs	r1, #0
 800f142:	f242 006b 	movw	r0, #8299	; 0x206b
 800f146:	f007 fdab 	bl	8016ca0 <fm25v02_write>
							temp = current_time.Hours;
 800f14a:	4b85      	ldr	r3, [pc, #532]	; (800f360 <ThreadMainTask+0x1028>)
 800f14c:	781b      	ldrb	r3, [r3, #0]
 800f14e:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*HOUR_LIGHTING_OFF_REG+1, temp);
 800f150:	7bfb      	ldrb	r3, [r7, #15]
 800f152:	4619      	mov	r1, r3
 800f154:	f242 006b 	movw	r0, #8299	; 0x206b
 800f158:	f007 fda2 	bl	8016ca0 <fm25v02_write>
							fm25v02_write(2*MINUTE_LIGHTING_OFF_REG+1, 0x00);
 800f15c:	2100      	movs	r1, #0
 800f15e:	f242 006d 	movw	r0, #8301	; 0x206d
 800f162:	f007 fd9d 	bl	8016ca0 <fm25v02_write>
							temp = current_time.Minutes;
 800f166:	4b7e      	ldr	r3, [pc, #504]	; (800f360 <ThreadMainTask+0x1028>)
 800f168:	785b      	ldrb	r3, [r3, #1]
 800f16a:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*MINUTE_LIGHTING_OFF_REG+1, temp);
 800f16c:	7bfb      	ldrb	r3, [r7, #15]
 800f16e:	4619      	mov	r1, r3
 800f170:	f242 006d 	movw	r0, #8301	; 0x206d
 800f174:	f007 fd94 	bl	8016ca0 <fm25v02_write>

							osMutexRelease(Fm25v02MutexHandle);
 800f178:	4b7e      	ldr	r3, [pc, #504]	; (800f374 <ThreadMainTask+0x103c>)
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	4618      	mov	r0, r3
 800f17e:	f7f9 fc1b 	bl	80089b8 <osMutexRelease>
						}

						if( (temp_time_off_2_hour==current_time.Hours)&&(temp_time_off_2_minute==current_time.Minutes)&&((temp_time_on_2_hour!=temp_time_off_2_hour)||(temp_time_on_2_minute!=temp_time_off_2_minute)) )
 800f182:	4b77      	ldr	r3, [pc, #476]	; (800f360 <ThreadMainTask+0x1028>)
 800f184:	781a      	ldrb	r2, [r3, #0]
 800f186:	4b7d      	ldr	r3, [pc, #500]	; (800f37c <ThreadMainTask+0x1044>)
 800f188:	781b      	ldrb	r3, [r3, #0]
 800f18a:	429a      	cmp	r2, r3
 800f18c:	d170      	bne.n	800f270 <ThreadMainTask+0xf38>
 800f18e:	4b74      	ldr	r3, [pc, #464]	; (800f360 <ThreadMainTask+0x1028>)
 800f190:	785a      	ldrb	r2, [r3, #1]
 800f192:	4b7b      	ldr	r3, [pc, #492]	; (800f380 <ThreadMainTask+0x1048>)
 800f194:	781b      	ldrb	r3, [r3, #0]
 800f196:	429a      	cmp	r2, r3
 800f198:	d16a      	bne.n	800f270 <ThreadMainTask+0xf38>
 800f19a:	4b7a      	ldr	r3, [pc, #488]	; (800f384 <ThreadMainTask+0x104c>)
 800f19c:	781a      	ldrb	r2, [r3, #0]
 800f19e:	4b77      	ldr	r3, [pc, #476]	; (800f37c <ThreadMainTask+0x1044>)
 800f1a0:	781b      	ldrb	r3, [r3, #0]
 800f1a2:	429a      	cmp	r2, r3
 800f1a4:	d105      	bne.n	800f1b2 <ThreadMainTask+0xe7a>
 800f1a6:	4b78      	ldr	r3, [pc, #480]	; (800f388 <ThreadMainTask+0x1050>)
 800f1a8:	781a      	ldrb	r2, [r3, #0]
 800f1aa:	4b75      	ldr	r3, [pc, #468]	; (800f380 <ThreadMainTask+0x1048>)
 800f1ac:	781b      	ldrb	r3, [r3, #0]
 800f1ae:	429a      	cmp	r2, r3
 800f1b0:	d05e      	beq.n	800f270 <ThreadMainTask+0xf38>
						{
							osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800f1b2:	4b70      	ldr	r3, [pc, #448]	; (800f374 <ThreadMainTask+0x103c>)
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	f04f 31ff 	mov.w	r1, #4294967295
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	f7f9 fbae 	bl	800891c <osMutexWait>
							fm25v02_read(2*LIGHT_CONTROL_REG+1, &temp);
 800f1c0:	f107 030f 	add.w	r3, r7, #15
 800f1c4:	4619      	mov	r1, r3
 800f1c6:	f242 1083 	movw	r0, #8579	; 0x2183
 800f1ca:	f007 fd2f 	bl	8016c2c <fm25v02_read>
							temp = temp&0xF8;
 800f1ce:	7bfb      	ldrb	r3, [r7, #15]
 800f1d0:	f023 0307 	bic.w	r3, r3, #7
 800f1d4:	b2db      	uxtb	r3, r3
 800f1d6:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*LIGHT_CONTROL_REG+1, temp);
 800f1d8:	7bfb      	ldrb	r3, [r7, #15]
 800f1da:	4619      	mov	r1, r3
 800f1dc:	f242 1083 	movw	r0, #8579	; 0x2183
 800f1e0:	f007 fd5e 	bl	8016ca0 <fm25v02_write>
							control_registers.light_control_reg = control_registers.light_control_reg&0xFFF8;
 800f1e4:	4b5d      	ldr	r3, [pc, #372]	; (800f35c <ThreadMainTask+0x1024>)
 800f1e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f1ea:	f023 0307 	bic.w	r3, r3, #7
 800f1ee:	b29a      	uxth	r2, r3
 800f1f0:	4b5a      	ldr	r3, [pc, #360]	; (800f35c <ThreadMainTask+0x1024>)
 800f1f2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

							fm25v02_write(2*MONTH_LIGHTING_OFF_REG, 0x00);
 800f1f6:	2100      	movs	r1, #0
 800f1f8:	f242 0066 	movw	r0, #8294	; 0x2066
 800f1fc:	f007 fd50 	bl	8016ca0 <fm25v02_write>
							temp = current_date.Month;
 800f200:	4b5d      	ldr	r3, [pc, #372]	; (800f378 <ThreadMainTask+0x1040>)
 800f202:	785b      	ldrb	r3, [r3, #1]
 800f204:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*MONTH_LIGHTING_OFF_REG+1, temp);
 800f206:	7bfb      	ldrb	r3, [r7, #15]
 800f208:	4619      	mov	r1, r3
 800f20a:	f242 0067 	movw	r0, #8295	; 0x2067
 800f20e:	f007 fd47 	bl	8016ca0 <fm25v02_write>
							fm25v02_write(2*DAY_LIGHTING_OFF_REG+1, 0x00);
 800f212:	2100      	movs	r1, #0
 800f214:	f242 0069 	movw	r0, #8297	; 0x2069
 800f218:	f007 fd42 	bl	8016ca0 <fm25v02_write>
							temp = current_date.Date;
 800f21c:	4b56      	ldr	r3, [pc, #344]	; (800f378 <ThreadMainTask+0x1040>)
 800f21e:	789b      	ldrb	r3, [r3, #2]
 800f220:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*DAY_LIGHTING_OFF_REG+1, temp);
 800f222:	7bfb      	ldrb	r3, [r7, #15]
 800f224:	4619      	mov	r1, r3
 800f226:	f242 0069 	movw	r0, #8297	; 0x2069
 800f22a:	f007 fd39 	bl	8016ca0 <fm25v02_write>
							fm25v02_write(2*HOUR_LIGHTING_OFF_REG+1, 0x00);
 800f22e:	2100      	movs	r1, #0
 800f230:	f242 006b 	movw	r0, #8299	; 0x206b
 800f234:	f007 fd34 	bl	8016ca0 <fm25v02_write>
							temp = current_time.Hours;
 800f238:	4b49      	ldr	r3, [pc, #292]	; (800f360 <ThreadMainTask+0x1028>)
 800f23a:	781b      	ldrb	r3, [r3, #0]
 800f23c:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*HOUR_LIGHTING_OFF_REG+1, temp);
 800f23e:	7bfb      	ldrb	r3, [r7, #15]
 800f240:	4619      	mov	r1, r3
 800f242:	f242 006b 	movw	r0, #8299	; 0x206b
 800f246:	f007 fd2b 	bl	8016ca0 <fm25v02_write>
							fm25v02_write(2*MINUTE_LIGHTING_OFF_REG+1, 0x00);
 800f24a:	2100      	movs	r1, #0
 800f24c:	f242 006d 	movw	r0, #8301	; 0x206d
 800f250:	f007 fd26 	bl	8016ca0 <fm25v02_write>
							temp = current_time.Minutes;
 800f254:	4b42      	ldr	r3, [pc, #264]	; (800f360 <ThreadMainTask+0x1028>)
 800f256:	785b      	ldrb	r3, [r3, #1]
 800f258:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*MINUTE_LIGHTING_OFF_REG+1, temp);
 800f25a:	7bfb      	ldrb	r3, [r7, #15]
 800f25c:	4619      	mov	r1, r3
 800f25e:	f242 006d 	movw	r0, #8301	; 0x206d
 800f262:	f007 fd1d 	bl	8016ca0 <fm25v02_write>

							osMutexRelease(Fm25v02MutexHandle);
 800f266:	4b43      	ldr	r3, [pc, #268]	; (800f374 <ThreadMainTask+0x103c>)
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	4618      	mov	r0, r3
 800f26c:	f7f9 fba4 	bl	80089b8 <osMutexRelease>
						}

						if( (temp_time_off_3_hour==current_time.Hours)&&(temp_time_off_3_minute==current_time.Minutes)&&((temp_time_on_3_hour!=temp_time_off_3_hour)||(temp_time_on_3_minute!=temp_time_off_3_minute)) )
 800f270:	4b3b      	ldr	r3, [pc, #236]	; (800f360 <ThreadMainTask+0x1028>)
 800f272:	781a      	ldrb	r2, [r3, #0]
 800f274:	4b45      	ldr	r3, [pc, #276]	; (800f38c <ThreadMainTask+0x1054>)
 800f276:	781b      	ldrb	r3, [r3, #0]
 800f278:	429a      	cmp	r2, r3
 800f27a:	f040 8094 	bne.w	800f3a6 <ThreadMainTask+0x106e>
 800f27e:	4b38      	ldr	r3, [pc, #224]	; (800f360 <ThreadMainTask+0x1028>)
 800f280:	785a      	ldrb	r2, [r3, #1]
 800f282:	4b43      	ldr	r3, [pc, #268]	; (800f390 <ThreadMainTask+0x1058>)
 800f284:	781b      	ldrb	r3, [r3, #0]
 800f286:	429a      	cmp	r2, r3
 800f288:	f040 808d 	bne.w	800f3a6 <ThreadMainTask+0x106e>
 800f28c:	4b41      	ldr	r3, [pc, #260]	; (800f394 <ThreadMainTask+0x105c>)
 800f28e:	781a      	ldrb	r2, [r3, #0]
 800f290:	4b3e      	ldr	r3, [pc, #248]	; (800f38c <ThreadMainTask+0x1054>)
 800f292:	781b      	ldrb	r3, [r3, #0]
 800f294:	429a      	cmp	r2, r3
 800f296:	d106      	bne.n	800f2a6 <ThreadMainTask+0xf6e>
 800f298:	4b3f      	ldr	r3, [pc, #252]	; (800f398 <ThreadMainTask+0x1060>)
 800f29a:	781a      	ldrb	r2, [r3, #0]
 800f29c:	4b3c      	ldr	r3, [pc, #240]	; (800f390 <ThreadMainTask+0x1058>)
 800f29e:	781b      	ldrb	r3, [r3, #0]
 800f2a0:	429a      	cmp	r2, r3
 800f2a2:	f000 8080 	beq.w	800f3a6 <ThreadMainTask+0x106e>
						{
							osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800f2a6:	4b33      	ldr	r3, [pc, #204]	; (800f374 <ThreadMainTask+0x103c>)
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	f04f 31ff 	mov.w	r1, #4294967295
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	f7f9 fb34 	bl	800891c <osMutexWait>
							fm25v02_read(2*LIGHT_CONTROL_REG+1, &temp);
 800f2b4:	f107 030f 	add.w	r3, r7, #15
 800f2b8:	4619      	mov	r1, r3
 800f2ba:	f242 1083 	movw	r0, #8579	; 0x2183
 800f2be:	f007 fcb5 	bl	8016c2c <fm25v02_read>
							temp = temp&0xF8;
 800f2c2:	7bfb      	ldrb	r3, [r7, #15]
 800f2c4:	f023 0307 	bic.w	r3, r3, #7
 800f2c8:	b2db      	uxtb	r3, r3
 800f2ca:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*LIGHT_CONTROL_REG+1, temp);
 800f2cc:	7bfb      	ldrb	r3, [r7, #15]
 800f2ce:	4619      	mov	r1, r3
 800f2d0:	f242 1083 	movw	r0, #8579	; 0x2183
 800f2d4:	f007 fce4 	bl	8016ca0 <fm25v02_write>
							control_registers.light_control_reg = control_registers.light_control_reg&0xFFF8;
 800f2d8:	4b20      	ldr	r3, [pc, #128]	; (800f35c <ThreadMainTask+0x1024>)
 800f2da:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f2de:	f023 0307 	bic.w	r3, r3, #7
 800f2e2:	b29a      	uxth	r2, r3
 800f2e4:	4b1d      	ldr	r3, [pc, #116]	; (800f35c <ThreadMainTask+0x1024>)
 800f2e6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

							fm25v02_write(2*MONTH_LIGHTING_OFF_REG, 0x00);
 800f2ea:	2100      	movs	r1, #0
 800f2ec:	f242 0066 	movw	r0, #8294	; 0x2066
 800f2f0:	f007 fcd6 	bl	8016ca0 <fm25v02_write>
							temp = current_date.Month;
 800f2f4:	4b20      	ldr	r3, [pc, #128]	; (800f378 <ThreadMainTask+0x1040>)
 800f2f6:	785b      	ldrb	r3, [r3, #1]
 800f2f8:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*MONTH_LIGHTING_OFF_REG+1, temp);
 800f2fa:	7bfb      	ldrb	r3, [r7, #15]
 800f2fc:	4619      	mov	r1, r3
 800f2fe:	f242 0067 	movw	r0, #8295	; 0x2067
 800f302:	f007 fccd 	bl	8016ca0 <fm25v02_write>
							fm25v02_write(2*DAY_LIGHTING_OFF_REG+1, 0x00);
 800f306:	2100      	movs	r1, #0
 800f308:	f242 0069 	movw	r0, #8297	; 0x2069
 800f30c:	f007 fcc8 	bl	8016ca0 <fm25v02_write>
							temp = current_date.Date;
 800f310:	4b19      	ldr	r3, [pc, #100]	; (800f378 <ThreadMainTask+0x1040>)
 800f312:	789b      	ldrb	r3, [r3, #2]
 800f314:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*DAY_LIGHTING_OFF_REG+1, temp);
 800f316:	7bfb      	ldrb	r3, [r7, #15]
 800f318:	4619      	mov	r1, r3
 800f31a:	f242 0069 	movw	r0, #8297	; 0x2069
 800f31e:	f007 fcbf 	bl	8016ca0 <fm25v02_write>
							fm25v02_write(2*HOUR_LIGHTING_OFF_REG+1, 0x00);
 800f322:	2100      	movs	r1, #0
 800f324:	f242 006b 	movw	r0, #8299	; 0x206b
 800f328:	f007 fcba 	bl	8016ca0 <fm25v02_write>
							temp = current_time.Hours;
 800f32c:	4b0c      	ldr	r3, [pc, #48]	; (800f360 <ThreadMainTask+0x1028>)
 800f32e:	781b      	ldrb	r3, [r3, #0]
 800f330:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*HOUR_LIGHTING_OFF_REG+1, temp);
 800f332:	7bfb      	ldrb	r3, [r7, #15]
 800f334:	4619      	mov	r1, r3
 800f336:	f242 006b 	movw	r0, #8299	; 0x206b
 800f33a:	f007 fcb1 	bl	8016ca0 <fm25v02_write>
							fm25v02_write(2*MINUTE_LIGHTING_OFF_REG+1, 0x00);
 800f33e:	2100      	movs	r1, #0
 800f340:	f242 006d 	movw	r0, #8301	; 0x206d
 800f344:	f007 fcac 	bl	8016ca0 <fm25v02_write>
							temp = current_time.Minutes;
 800f348:	4b05      	ldr	r3, [pc, #20]	; (800f360 <ThreadMainTask+0x1028>)
 800f34a:	785b      	ldrb	r3, [r3, #1]
 800f34c:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*MINUTE_LIGHTING_OFF_REG+1, temp);
 800f34e:	7bfb      	ldrb	r3, [r7, #15]
 800f350:	4619      	mov	r1, r3
 800f352:	f242 006d 	movw	r0, #8301	; 0x206d
 800f356:	f007 fca3 	bl	8016ca0 <fm25v02_write>
 800f35a:	e01f      	b.n	800f39c <ThreadMainTask+0x1064>
 800f35c:	2000a234 	.word	0x2000a234
 800f360:	20009f18 	.word	0x20009f18
 800f364:	20009f55 	.word	0x20009f55
 800f368:	20009f38 	.word	0x20009f38
 800f36c:	20009f59 	.word	0x20009f59
 800f370:	20009f2c 	.word	0x20009f2c
 800f374:	20009af8 	.word	0x20009af8
 800f378:	20009f10 	.word	0x20009f10
 800f37c:	20009f51 	.word	0x20009f51
 800f380:	20009f34 	.word	0x20009f34
 800f384:	20009f14 	.word	0x20009f14
 800f388:	20009f0c 	.word	0x20009f0c
 800f38c:	20009f36 	.word	0x20009f36
 800f390:	20009f58 	.word	0x20009f58
 800f394:	20009f57 	.word	0x20009f57
 800f398:	20009f53 	.word	0x20009f53

							osMutexRelease(Fm25v02MutexHandle);
 800f39c:	4b4d      	ldr	r3, [pc, #308]	; (800f4d4 <ThreadMainTask+0x119c>)
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	f7f9 fb09 	bl	80089b8 <osMutexRelease>
						}

						if( (temp_time_off_4_hour==current_time.Hours)&&(temp_time_off_4_minute==current_time.Minutes)&&((temp_time_on_4_hour!=temp_time_off_4_hour)||(temp_time_on_4_minute!=temp_time_off_4_minute)) )
 800f3a6:	4b4c      	ldr	r3, [pc, #304]	; (800f4d8 <ThreadMainTask+0x11a0>)
 800f3a8:	781a      	ldrb	r2, [r3, #0]
 800f3aa:	4b4c      	ldr	r3, [pc, #304]	; (800f4dc <ThreadMainTask+0x11a4>)
 800f3ac:	781b      	ldrb	r3, [r3, #0]
 800f3ae:	429a      	cmp	r2, r3
 800f3b0:	d172      	bne.n	800f498 <ThreadMainTask+0x1160>
 800f3b2:	4b49      	ldr	r3, [pc, #292]	; (800f4d8 <ThreadMainTask+0x11a0>)
 800f3b4:	785a      	ldrb	r2, [r3, #1]
 800f3b6:	4b4a      	ldr	r3, [pc, #296]	; (800f4e0 <ThreadMainTask+0x11a8>)
 800f3b8:	781b      	ldrb	r3, [r3, #0]
 800f3ba:	429a      	cmp	r2, r3
 800f3bc:	d16c      	bne.n	800f498 <ThreadMainTask+0x1160>
 800f3be:	4b49      	ldr	r3, [pc, #292]	; (800f4e4 <ThreadMainTask+0x11ac>)
 800f3c0:	781a      	ldrb	r2, [r3, #0]
 800f3c2:	4b46      	ldr	r3, [pc, #280]	; (800f4dc <ThreadMainTask+0x11a4>)
 800f3c4:	781b      	ldrb	r3, [r3, #0]
 800f3c6:	429a      	cmp	r2, r3
 800f3c8:	d105      	bne.n	800f3d6 <ThreadMainTask+0x109e>
 800f3ca:	4b47      	ldr	r3, [pc, #284]	; (800f4e8 <ThreadMainTask+0x11b0>)
 800f3cc:	781a      	ldrb	r2, [r3, #0]
 800f3ce:	4b44      	ldr	r3, [pc, #272]	; (800f4e0 <ThreadMainTask+0x11a8>)
 800f3d0:	781b      	ldrb	r3, [r3, #0]
 800f3d2:	429a      	cmp	r2, r3
 800f3d4:	d060      	beq.n	800f498 <ThreadMainTask+0x1160>
						{
							osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800f3d6:	4b3f      	ldr	r3, [pc, #252]	; (800f4d4 <ThreadMainTask+0x119c>)
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	f04f 31ff 	mov.w	r1, #4294967295
 800f3de:	4618      	mov	r0, r3
 800f3e0:	f7f9 fa9c 	bl	800891c <osMutexWait>
							fm25v02_read(2*LIGHT_CONTROL_REG+1, &temp);
 800f3e4:	f107 030f 	add.w	r3, r7, #15
 800f3e8:	4619      	mov	r1, r3
 800f3ea:	f242 1083 	movw	r0, #8579	; 0x2183
 800f3ee:	f007 fc1d 	bl	8016c2c <fm25v02_read>
							temp = temp&0xF8;
 800f3f2:	7bfb      	ldrb	r3, [r7, #15]
 800f3f4:	f023 0307 	bic.w	r3, r3, #7
 800f3f8:	b2db      	uxtb	r3, r3
 800f3fa:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*LIGHT_CONTROL_REG+1, temp);
 800f3fc:	7bfb      	ldrb	r3, [r7, #15]
 800f3fe:	4619      	mov	r1, r3
 800f400:	f242 1083 	movw	r0, #8579	; 0x2183
 800f404:	f007 fc4c 	bl	8016ca0 <fm25v02_write>
							control_registers.light_control_reg = control_registers.light_control_reg&0xFFF8;
 800f408:	4b38      	ldr	r3, [pc, #224]	; (800f4ec <ThreadMainTask+0x11b4>)
 800f40a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800f40e:	f023 0307 	bic.w	r3, r3, #7
 800f412:	b29a      	uxth	r2, r3
 800f414:	4b35      	ldr	r3, [pc, #212]	; (800f4ec <ThreadMainTask+0x11b4>)
 800f416:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

							fm25v02_write(2*MONTH_LIGHTING_OFF_REG, 0x00);
 800f41a:	2100      	movs	r1, #0
 800f41c:	f242 0066 	movw	r0, #8294	; 0x2066
 800f420:	f007 fc3e 	bl	8016ca0 <fm25v02_write>
							temp = current_date.Month;
 800f424:	4b32      	ldr	r3, [pc, #200]	; (800f4f0 <ThreadMainTask+0x11b8>)
 800f426:	785b      	ldrb	r3, [r3, #1]
 800f428:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*MONTH_LIGHTING_OFF_REG+1, temp);
 800f42a:	7bfb      	ldrb	r3, [r7, #15]
 800f42c:	4619      	mov	r1, r3
 800f42e:	f242 0067 	movw	r0, #8295	; 0x2067
 800f432:	f007 fc35 	bl	8016ca0 <fm25v02_write>
							fm25v02_write(2*DAY_LIGHTING_OFF_REG+1, 0x00);
 800f436:	2100      	movs	r1, #0
 800f438:	f242 0069 	movw	r0, #8297	; 0x2069
 800f43c:	f007 fc30 	bl	8016ca0 <fm25v02_write>
							temp = current_date.Date;
 800f440:	4b2b      	ldr	r3, [pc, #172]	; (800f4f0 <ThreadMainTask+0x11b8>)
 800f442:	789b      	ldrb	r3, [r3, #2]
 800f444:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*DAY_LIGHTING_OFF_REG+1, temp);
 800f446:	7bfb      	ldrb	r3, [r7, #15]
 800f448:	4619      	mov	r1, r3
 800f44a:	f242 0069 	movw	r0, #8297	; 0x2069
 800f44e:	f007 fc27 	bl	8016ca0 <fm25v02_write>
							fm25v02_write(2*HOUR_LIGHTING_OFF_REG+1, 0x00);
 800f452:	2100      	movs	r1, #0
 800f454:	f242 006b 	movw	r0, #8299	; 0x206b
 800f458:	f007 fc22 	bl	8016ca0 <fm25v02_write>
							temp = current_time.Hours;
 800f45c:	4b1e      	ldr	r3, [pc, #120]	; (800f4d8 <ThreadMainTask+0x11a0>)
 800f45e:	781b      	ldrb	r3, [r3, #0]
 800f460:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*HOUR_LIGHTING_OFF_REG+1, temp);
 800f462:	7bfb      	ldrb	r3, [r7, #15]
 800f464:	4619      	mov	r1, r3
 800f466:	f242 006b 	movw	r0, #8299	; 0x206b
 800f46a:	f007 fc19 	bl	8016ca0 <fm25v02_write>
							fm25v02_write(2*MINUTE_LIGHTING_OFF_REG+1, 0x00);
 800f46e:	2100      	movs	r1, #0
 800f470:	f242 006d 	movw	r0, #8301	; 0x206d
 800f474:	f007 fc14 	bl	8016ca0 <fm25v02_write>
							temp = current_time.Minutes;
 800f478:	4b17      	ldr	r3, [pc, #92]	; (800f4d8 <ThreadMainTask+0x11a0>)
 800f47a:	785b      	ldrb	r3, [r3, #1]
 800f47c:	73fb      	strb	r3, [r7, #15]
							fm25v02_write(2*MINUTE_LIGHTING_OFF_REG+1, temp);
 800f47e:	7bfb      	ldrb	r3, [r7, #15]
 800f480:	4619      	mov	r1, r3
 800f482:	f242 006d 	movw	r0, #8301	; 0x206d
 800f486:	f007 fc0b 	bl	8016ca0 <fm25v02_write>

							osMutexRelease(Fm25v02MutexHandle);
 800f48a:	4b12      	ldr	r3, [pc, #72]	; (800f4d4 <ThreadMainTask+0x119c>)
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	4618      	mov	r0, r3
 800f490:	f7f9 fa92 	bl	80089b8 <osMutexRelease>


					}
				}

			break;
 800f494:	e000      	b.n	800f498 <ThreadMainTask+0x1160>
						if( (temp_time_on_4_hour==current_time.Hours)&&(temp_time_on_4_minute==current_time.Minutes)&&((temp_time_on_4_hour!=temp_time_off_4_hour)||(temp_time_on_4_minute!=temp_time_off_4_minute)) )
 800f496:	bf00      	nop
			break;
 800f498:	bf00      	nop

		}

		switch(control_registers.reset_control_reg) // удаленная перезагрузка контроллера
 800f49a:	4b14      	ldr	r3, [pc, #80]	; (800f4ec <ThreadMainTask+0x11b4>)
 800f49c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800f49e:	2b01      	cmp	r3, #1
 800f4a0:	d128      	bne.n	800f4f4 <ThreadMainTask+0x11bc>
		{
			case(1):
				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800f4a2:	4b0c      	ldr	r3, [pc, #48]	; (800f4d4 <ThreadMainTask+0x119c>)
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	f04f 31ff 	mov.w	r1, #4294967295
 800f4aa:	4618      	mov	r0, r3
 800f4ac:	f7f9 fa36 	bl	800891c <osMutexWait>
				fm25v02_write(2*RESET_CONTROL_REG, 0);
 800f4b0:	2100      	movs	r1, #0
 800f4b2:	f242 105a 	movw	r0, #8538	; 0x215a
 800f4b6:	f007 fbf3 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*RESET_CONTROL_REG+1, 0);
 800f4ba:	2100      	movs	r1, #0
 800f4bc:	f242 105b 	movw	r0, #8539	; 0x215b
 800f4c0:	f007 fbee 	bl	8016ca0 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 800f4c4:	4b03      	ldr	r3, [pc, #12]	; (800f4d4 <ThreadMainTask+0x119c>)
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	f7f9 fa75 	bl	80089b8 <osMutexRelease>
				NVIC_SystemReset();
 800f4ce:	f7fe ff1b 	bl	800e308 <__NVIC_SystemReset>
 800f4d2:	bf00      	nop
 800f4d4:	20009af8 	.word	0x20009af8
 800f4d8:	20009f18 	.word	0x20009f18
 800f4dc:	20009f0e 	.word	0x20009f0e
 800f4e0:	20009f52 	.word	0x20009f52
 800f4e4:	20009f50 	.word	0x20009f50
 800f4e8:	20009f37 	.word	0x20009f37
 800f4ec:	2000a234 	.word	0x2000a234
 800f4f0:	20009f10 	.word	0x20009f10
			break;

		}

		switch(control_registers.alarm_loop_clear_reg) // сбросить сработавшие шлейфы
 800f4f4:	4bf2      	ldr	r3, [pc, #968]	; (800f8c0 <ThreadMainTask+0x1588>)
 800f4f6:	895b      	ldrh	r3, [r3, #10]
 800f4f8:	2b01      	cmp	r3, #1
 800f4fa:	d13b      	bne.n	800f574 <ThreadMainTask+0x123c>
		{
			case(1):
				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800f4fc:	4bf1      	ldr	r3, [pc, #964]	; (800f8c4 <ThreadMainTask+0x158c>)
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	f04f 31ff 	mov.w	r1, #4294967295
 800f504:	4618      	mov	r0, r3
 800f506:	f7f9 fa09 	bl	800891c <osMutexWait>
				fm25v02_write(2*ALARM_LOOP_CLEAR_REG, 0);
 800f50a:	2100      	movs	r1, #0
 800f50c:	f242 102a 	movw	r0, #8490	; 0x212a
 800f510:	f007 fbc6 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*ALARM_LOOP_CLEAR_REG+1, 0);
 800f514:	2100      	movs	r1, #0
 800f516:	f242 102b 	movw	r0, #8491	; 0x212b
 800f51a:	f007 fbc1 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*ALARM_LOOP_REG, 0);
 800f51e:	2100      	movs	r1, #0
 800f520:	f242 0008 	movw	r0, #8200	; 0x2008
 800f524:	f007 fbbc 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*ALARM_LOOP_REG+1, 0);
 800f528:	2100      	movs	r1, #0
 800f52a:	f242 0009 	movw	r0, #8201	; 0x2009
 800f52e:	f007 fbb7 	bl	8016ca0 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 800f532:	4be4      	ldr	r3, [pc, #912]	; (800f8c4 <ThreadMainTask+0x158c>)
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	4618      	mov	r0, r3
 800f538:	f7f9 fa3e 	bl	80089b8 <osMutexRelease>

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800f53c:	4be1      	ldr	r3, [pc, #900]	; (800f8c4 <ThreadMainTask+0x158c>)
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	f04f 31ff 	mov.w	r1, #4294967295
 800f544:	4618      	mov	r0, r3
 800f546:	f7f9 f9e9 	bl	800891c <osMutexWait>
				fm25v02_write(2*GPRS_CALL_REG, 0x00);
 800f54a:	2100      	movs	r1, #0
 800f54c:	f242 106e 	movw	r0, #8558	; 0x216e
 800f550:	f007 fba6 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 800f554:	2101      	movs	r1, #1
 800f556:	f242 106f 	movw	r0, #8559	; 0x216f
 800f55a:	f007 fba1 	bl	8016ca0 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 800f55e:	4bd9      	ldr	r3, [pc, #868]	; (800f8c4 <ThreadMainTask+0x158c>)
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	4618      	mov	r0, r3
 800f564:	f7f9 fa28 	bl	80089b8 <osMutexRelease>

				osThreadResume(EventWriteTaskHandle);
 800f568:	4bd7      	ldr	r3, [pc, #860]	; (800f8c8 <ThreadMainTask+0x1590>)
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	4618      	mov	r0, r3
 800f56e:	f7f9 fbf7 	bl	8008d60 <osThreadResume>

			break;
 800f572:	bf00      	nop

		}

		switch(control_registers.false_loop_clear_reg) // сбросить неисправные шлейфы
 800f574:	4bd2      	ldr	r3, [pc, #840]	; (800f8c0 <ThreadMainTask+0x1588>)
 800f576:	899b      	ldrh	r3, [r3, #12]
 800f578:	2b01      	cmp	r3, #1
 800f57a:	f040 821a 	bne.w	800f9b2 <ThreadMainTask+0x167a>
		{
			case(1):
				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800f57e:	4bd1      	ldr	r3, [pc, #836]	; (800f8c4 <ThreadMainTask+0x158c>)
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	f04f 31ff 	mov.w	r1, #4294967295
 800f586:	4618      	mov	r0, r3
 800f588:	f7f9 f9c8 	bl	800891c <osMutexWait>
				fm25v02_write(2*FALSE_LOOP_CLEAR_REG, 0);
 800f58c:	2100      	movs	r1, #0
 800f58e:	f242 102c 	movw	r0, #8492	; 0x212c
 800f592:	f007 fb85 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*FALSE_LOOP_CLEAR_REG+1, 0);
 800f596:	2100      	movs	r1, #0
 800f598:	f242 102d 	movw	r0, #8493	; 0x212d
 800f59c:	f007 fb80 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*ERROR_LOOP_REG, 0);
 800f5a0:	2100      	movs	r1, #0
 800f5a2:	f242 0006 	movw	r0, #8198	; 0x2006
 800f5a6:	f007 fb7b 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*ERROR_LOOP_REG+1, 0);
 800f5aa:	2100      	movs	r1, #0
 800f5ac:	f242 0007 	movw	r0, #8199	; 0x2007
 800f5b0:	f007 fb76 	bl	8016ca0 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 800f5b4:	4bc3      	ldr	r3, [pc, #780]	; (800f8c4 <ThreadMainTask+0x158c>)
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	f7f9 f9fd 	bl	80089b8 <osMutexRelease>
				//osMutexRelease(Fm25v02MutexHandle);

				//osThreadResume(EventWriteTaskHandle);
				//osTimerStart(Ring_Center_TimerHandle, 1);

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800f5be:	4bc1      	ldr	r3, [pc, #772]	; (800f8c4 <ThreadMainTask+0x158c>)
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	f04f 31ff 	mov.w	r1, #4294967295
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	f7f9 f9a8 	bl	800891c <osMutexWait>

				fm25v02_write(2*CE_303_ERROR_REG, 0);
 800f5cc:	2100      	movs	r1, #0
 800f5ce:	f242 003c 	movw	r0, #8252	; 0x203c
 800f5d2:	f007 fb65 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_ERROR_REG+1, 0);
 800f5d6:	2100      	movs	r1, #0
 800f5d8:	f242 003d 	movw	r0, #8253	; 0x203d
 800f5dc:	f007 fb60 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_A_REG, 0);
 800f5e0:	2100      	movs	r1, #0
 800f5e2:	f242 003e 	movw	r0, #8254	; 0x203e
 800f5e6:	f007 fb5b 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_A_REG+1, 0);
 800f5ea:	2100      	movs	r1, #0
 800f5ec:	f242 003f 	movw	r0, #8255	; 0x203f
 800f5f0:	f007 fb56 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_B_REG, 0);
 800f5f4:	2100      	movs	r1, #0
 800f5f6:	f44f 5001 	mov.w	r0, #8256	; 0x2040
 800f5fa:	f007 fb51 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_B_REG+1, 0);
 800f5fe:	2100      	movs	r1, #0
 800f600:	f242 0041 	movw	r0, #8257	; 0x2041
 800f604:	f007 fb4c 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_C_REG, 0);
 800f608:	2100      	movs	r1, #0
 800f60a:	f242 0042 	movw	r0, #8258	; 0x2042
 800f60e:	f007 fb47 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_C_REG+1, 0);
 800f612:	2100      	movs	r1, #0
 800f614:	f242 0043 	movw	r0, #8259	; 0x2043
 800f618:	f007 fb42 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_A_REG, 0);
 800f61c:	2100      	movs	r1, #0
 800f61e:	f242 0044 	movw	r0, #8260	; 0x2044
 800f622:	f007 fb3d 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_A_REG+1, 0);
 800f626:	2100      	movs	r1, #0
 800f628:	f242 0045 	movw	r0, #8261	; 0x2045
 800f62c:	f007 fb38 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_B_REG, 0);
 800f630:	2100      	movs	r1, #0
 800f632:	f242 0046 	movw	r0, #8262	; 0x2046
 800f636:	f007 fb33 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_B_REG+1, 0);
 800f63a:	2100      	movs	r1, #0
 800f63c:	f242 0047 	movw	r0, #8263	; 0x2047
 800f640:	f007 fb2e 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_C_REG, 0);
 800f644:	2100      	movs	r1, #0
 800f646:	f242 0048 	movw	r0, #8264	; 0x2048
 800f64a:	f007 fb29 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_C_REG+1, 0);
 800f64e:	2100      	movs	r1, #0
 800f650:	f242 0049 	movw	r0, #8265	; 0x2049
 800f654:	f007 fb24 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_A_REG, 0);
 800f658:	2100      	movs	r1, #0
 800f65a:	f242 004a 	movw	r0, #8266	; 0x204a
 800f65e:	f007 fb1f 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_A_REG+1, 0);
 800f662:	2100      	movs	r1, #0
 800f664:	f242 004b 	movw	r0, #8267	; 0x204b
 800f668:	f007 fb1a 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_B_REG, 0);
 800f66c:	2100      	movs	r1, #0
 800f66e:	f242 004c 	movw	r0, #8268	; 0x204c
 800f672:	f007 fb15 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_B_REG+1, 0);
 800f676:	2100      	movs	r1, #0
 800f678:	f242 004d 	movw	r0, #8269	; 0x204d
 800f67c:	f007 fb10 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_C_REG, 0);
 800f680:	2100      	movs	r1, #0
 800f682:	f242 004e 	movw	r0, #8270	; 0x204e
 800f686:	f007 fb0b 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_C_REG+1, 0);
 800f68a:	2100      	movs	r1, #0
 800f68c:	f242 004f 	movw	r0, #8271	; 0x204f
 800f690:	f007 fb06 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_A_REG, 0);
 800f694:	2100      	movs	r1, #0
 800f696:	f242 0050 	movw	r0, #8272	; 0x2050
 800f69a:	f007 fb01 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_A_REG+1, 0);
 800f69e:	2100      	movs	r1, #0
 800f6a0:	f242 0051 	movw	r0, #8273	; 0x2051
 800f6a4:	f007 fafc 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_B_REG, 0);
 800f6a8:	2100      	movs	r1, #0
 800f6aa:	f242 0052 	movw	r0, #8274	; 0x2052
 800f6ae:	f007 faf7 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_B_REG+1, 0);
 800f6b2:	2100      	movs	r1, #0
 800f6b4:	f242 0053 	movw	r0, #8275	; 0x2053
 800f6b8:	f007 faf2 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_C_REG, 0);
 800f6bc:	2100      	movs	r1, #0
 800f6be:	f242 0054 	movw	r0, #8276	; 0x2054
 800f6c2:	f007 faed 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_C_REG+1, 0);
 800f6c6:	2100      	movs	r1, #0
 800f6c8:	f242 0055 	movw	r0, #8277	; 0x2055
 800f6cc:	f007 fae8 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_A_REG, 0);
 800f6d0:	2100      	movs	r1, #0
 800f6d2:	f242 0056 	movw	r0, #8278	; 0x2056
 800f6d6:	f007 fae3 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_A_REG+1, 0);
 800f6da:	2100      	movs	r1, #0
 800f6dc:	f242 0057 	movw	r0, #8279	; 0x2057
 800f6e0:	f007 fade 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_B_REG, 0);
 800f6e4:	2100      	movs	r1, #0
 800f6e6:	f242 0058 	movw	r0, #8280	; 0x2058
 800f6ea:	f007 fad9 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_B_REG+1, 0);
 800f6ee:	2100      	movs	r1, #0
 800f6f0:	f242 0059 	movw	r0, #8281	; 0x2059
 800f6f4:	f007 fad4 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_C_REG, 0);
 800f6f8:	2100      	movs	r1, #0
 800f6fa:	f242 005a 	movw	r0, #8282	; 0x205a
 800f6fe:	f007 facf 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_C_REG+1, 0);
 800f702:	2100      	movs	r1, #0
 800f704:	f242 005b 	movw	r0, #8283	; 0x205b
 800f708:	f007 faca 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_A_REG, 0);
 800f70c:	2100      	movs	r1, #0
 800f70e:	f242 005c 	movw	r0, #8284	; 0x205c
 800f712:	f007 fac5 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_A_REG+1, 0);
 800f716:	2100      	movs	r1, #0
 800f718:	f242 005d 	movw	r0, #8285	; 0x205d
 800f71c:	f007 fac0 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_B_REG, 0);
 800f720:	2100      	movs	r1, #0
 800f722:	f242 005e 	movw	r0, #8286	; 0x205e
 800f726:	f007 fabb 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_B_REG+1, 0);
 800f72a:	2100      	movs	r1, #0
 800f72c:	f242 005f 	movw	r0, #8287	; 0x205f
 800f730:	f007 fab6 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_C_REG, 0);
 800f734:	2100      	movs	r1, #0
 800f736:	f242 0060 	movw	r0, #8288	; 0x2060
 800f73a:	f007 fab1 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_C_REG+1, 0);
 800f73e:	2100      	movs	r1, #0
 800f740:	f242 0061 	movw	r0, #8289	; 0x2061
 800f744:	f007 faac 	bl	8016ca0 <fm25v02_write>

				fm25v02_write(2*LIGHTING_STATUS_REG, 0);
 800f748:	2100      	movs	r1, #0
 800f74a:	f242 0062 	movw	r0, #8290	; 0x2062
 800f74e:	f007 faa7 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*LIGHTING_STATUS_REG+1, 0);
 800f752:	2100      	movs	r1, #0
 800f754:	f242 0063 	movw	r0, #8291	; 0x2063
 800f758:	f007 faa2 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*LIGHTING_ALARM_REG, 0);
 800f75c:	2100      	movs	r1, #0
 800f75e:	f242 0064 	movw	r0, #8292	; 0x2064
 800f762:	f007 fa9d 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*LIGHTING_ALARM_REG+1, 0);
 800f766:	2100      	movs	r1, #0
 800f768:	f242 0065 	movw	r0, #8293	; 0x2065
 800f76c:	f007 fa98 	bl	8016ca0 <fm25v02_write>

				fm25v02_write(2*MONTH_LIGHTING_OFF_REG, 0);
 800f770:	2100      	movs	r1, #0
 800f772:	f242 0066 	movw	r0, #8294	; 0x2066
 800f776:	f007 fa93 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*MONTH_LIGHTING_OFF_REG+1, 0);
 800f77a:	2100      	movs	r1, #0
 800f77c:	f242 0067 	movw	r0, #8295	; 0x2067
 800f780:	f007 fa8e 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*DAY_LIGHTING_OFF_REG, 0);
 800f784:	2100      	movs	r1, #0
 800f786:	f242 0068 	movw	r0, #8296	; 0x2068
 800f78a:	f007 fa89 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*DAY_LIGHTING_OFF_REG+1, 0);
 800f78e:	2100      	movs	r1, #0
 800f790:	f242 0069 	movw	r0, #8297	; 0x2069
 800f794:	f007 fa84 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*HOUR_LIGHTING_OFF_REG, 0);
 800f798:	2100      	movs	r1, #0
 800f79a:	f242 006a 	movw	r0, #8298	; 0x206a
 800f79e:	f007 fa7f 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*HOUR_LIGHTING_OFF_REG+1, 0);
 800f7a2:	2100      	movs	r1, #0
 800f7a4:	f242 006b 	movw	r0, #8299	; 0x206b
 800f7a8:	f007 fa7a 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*MINUTE_LIGHTING_OFF_REG, 0);
 800f7ac:	2100      	movs	r1, #0
 800f7ae:	f242 006c 	movw	r0, #8300	; 0x206c
 800f7b2:	f007 fa75 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*MINUTE_LIGHTING_OFF_REG+1, 0);
 800f7b6:	2100      	movs	r1, #0
 800f7b8:	f242 006d 	movw	r0, #8301	; 0x206d
 800f7bc:	f007 fa70 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*MONTH_LIGHTING_ON_REG, 0);
 800f7c0:	2100      	movs	r1, #0
 800f7c2:	f242 006e 	movw	r0, #8302	; 0x206e
 800f7c6:	f007 fa6b 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*MONTH_LIGHTING_ON_REG+1, 0);
 800f7ca:	2100      	movs	r1, #0
 800f7cc:	f242 006f 	movw	r0, #8303	; 0x206f
 800f7d0:	f007 fa66 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*DAY_LIGHTING_ON_REG, 0);
 800f7d4:	2100      	movs	r1, #0
 800f7d6:	f242 0070 	movw	r0, #8304	; 0x2070
 800f7da:	f007 fa61 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*DAY_LIGHTING_ON_REG+1, 0);
 800f7de:	2100      	movs	r1, #0
 800f7e0:	f242 0071 	movw	r0, #8305	; 0x2071
 800f7e4:	f007 fa5c 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*HOUR_LIGHTING_ON_REG, 0);
 800f7e8:	2100      	movs	r1, #0
 800f7ea:	f242 0072 	movw	r0, #8306	; 0x2072
 800f7ee:	f007 fa57 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*HOUR_LIGHTING_ON_REG+1, 0);
 800f7f2:	2100      	movs	r1, #0
 800f7f4:	f242 0073 	movw	r0, #8307	; 0x2073
 800f7f8:	f007 fa52 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*MINUTE_LIGHTING_ON_REG, 0);
 800f7fc:	2100      	movs	r1, #0
 800f7fe:	f242 0074 	movw	r0, #8308	; 0x2074
 800f802:	f007 fa4d 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*MINUTE_LIGHTING_ON_REG+1, 0);
 800f806:	2100      	movs	r1, #0
 800f808:	f242 0075 	movw	r0, #8309	; 0x2075
 800f80c:	f007 fa48 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_H_REG, 0);
 800f810:	2100      	movs	r1, #0
 800f812:	f242 0082 	movw	r0, #8322	; 0x2082
 800f816:	f007 fa43 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_H_REG+1, 0);
 800f81a:	2100      	movs	r1, #0
 800f81c:	f242 0083 	movw	r0, #8323	; 0x2083
 800f820:	f007 fa3e 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_L_REG, 0);
 800f824:	2100      	movs	r1, #0
 800f826:	f242 0084 	movw	r0, #8324	; 0x2084
 800f82a:	f007 fa39 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_L_REG+1, 0);
 800f82e:	2100      	movs	r1, #0
 800f830:	f242 0085 	movw	r0, #8325	; 0x2085
 800f834:	f007 fa34 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_M_REG, 0);
 800f838:	2100      	movs	r1, #0
 800f83a:	f242 0086 	movw	r0, #8326	; 0x2086
 800f83e:	f007 fa2f 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_M_REG+1, 0);
 800f842:	2100      	movs	r1, #0
 800f844:	f242 0087 	movw	r0, #8327	; 0x2087
 800f848:	f007 fa2a 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_H_REG, 0);
 800f84c:	2100      	movs	r1, #0
 800f84e:	f242 0088 	movw	r0, #8328	; 0x2088
 800f852:	f007 fa25 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_H_REG+1, 0);
 800f856:	2100      	movs	r1, #0
 800f858:	f242 0089 	movw	r0, #8329	; 0x2089
 800f85c:	f007 fa20 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_L_REG, 0);
 800f860:	2100      	movs	r1, #0
 800f862:	f242 008a 	movw	r0, #8330	; 0x208a
 800f866:	f007 fa1b 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_L_REG+1, 0);
 800f86a:	2100      	movs	r1, #0
 800f86c:	f242 008b 	movw	r0, #8331	; 0x208b
 800f870:	f007 fa16 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_MIL_REG, 0);
 800f874:	2100      	movs	r1, #0
 800f876:	f242 008c 	movw	r0, #8332	; 0x208c
 800f87a:	f007 fa11 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_MIL_REG+1, 0);
 800f87e:	2100      	movs	r1, #0
 800f880:	f242 008d 	movw	r0, #8333	; 0x208d
 800f884:	f007 fa0c 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_H_REG, 0);
 800f888:	2100      	movs	r1, #0
 800f88a:	f242 008e 	movw	r0, #8334	; 0x208e
 800f88e:	f007 fa07 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_H_REG+1, 0);
 800f892:	2100      	movs	r1, #0
 800f894:	f242 008f 	movw	r0, #8335	; 0x208f
 800f898:	f007 fa02 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_L_REG, 0);
 800f89c:	2100      	movs	r1, #0
 800f89e:	f242 0090 	movw	r0, #8336	; 0x2090
 800f8a2:	f007 f9fd 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_L_REG+1, 0);
 800f8a6:	2100      	movs	r1, #0
 800f8a8:	f242 0091 	movw	r0, #8337	; 0x2091
 800f8ac:	f007 f9f8 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_MIL_REG, 0);
 800f8b0:	2100      	movs	r1, #0
 800f8b2:	f242 0092 	movw	r0, #8338	; 0x2092
 800f8b6:	f007 f9f3 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_MIL_REG+1, 0);
 800f8ba:	2100      	movs	r1, #0
 800f8bc:	e006      	b.n	800f8cc <ThreadMainTask+0x1594>
 800f8be:	bf00      	nop
 800f8c0:	2000a234 	.word	0x2000a234
 800f8c4:	20009af8 	.word	0x20009af8
 800f8c8:	200096f4 	.word	0x200096f4
 800f8cc:	f242 0093 	movw	r0, #8339	; 0x2093
 800f8d0:	f007 f9e6 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_H_REG, 0);
 800f8d4:	2100      	movs	r1, #0
 800f8d6:	f242 0094 	movw	r0, #8340	; 0x2094
 800f8da:	f007 f9e1 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_H_REG+1, 0);
 800f8de:	2100      	movs	r1, #0
 800f8e0:	f242 0095 	movw	r0, #8341	; 0x2095
 800f8e4:	f007 f9dc 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_L_REG, 0);
 800f8e8:	2100      	movs	r1, #0
 800f8ea:	f242 0096 	movw	r0, #8342	; 0x2096
 800f8ee:	f007 f9d7 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_L_REG+1, 0);
 800f8f2:	2100      	movs	r1, #0
 800f8f4:	f242 0097 	movw	r0, #8343	; 0x2097
 800f8f8:	f007 f9d2 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_MIL_REG, 0);
 800f8fc:	2100      	movs	r1, #0
 800f8fe:	f242 0098 	movw	r0, #8344	; 0x2098
 800f902:	f007 f9cd 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_MIL_REG+1, 0);
 800f906:	2100      	movs	r1, #0
 800f908:	f242 0099 	movw	r0, #8345	; 0x2099
 800f90c:	f007 f9c8 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF4_POWER_H_REG, 0);
 800f910:	2100      	movs	r1, #0
 800f912:	f242 009a 	movw	r0, #8346	; 0x209a
 800f916:	f007 f9c3 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF4_POWER_H_REG+1, 0);
 800f91a:	2100      	movs	r1, #0
 800f91c:	f242 009b 	movw	r0, #8347	; 0x209b
 800f920:	f007 f9be 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF4_POWER_L_REG, 0);
 800f924:	2100      	movs	r1, #0
 800f926:	f242 009c 	movw	r0, #8348	; 0x209c
 800f92a:	f007 f9b9 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF4_POWER_L_REG+1, 0);
 800f92e:	2100      	movs	r1, #0
 800f930:	f242 009d 	movw	r0, #8349	; 0x209d
 800f934:	f007 f9b4 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF4_POWER_MIL_REG, 0);
 800f938:	2100      	movs	r1, #0
 800f93a:	f242 009e 	movw	r0, #8350	; 0x209e
 800f93e:	f007 f9af 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF4_POWER_MIL_REG+1, 0);
 800f942:	2100      	movs	r1, #0
 800f944:	f242 009f 	movw	r0, #8351	; 0x209f
 800f948:	f007 f9aa 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF5_POWER_H_REG, 0);
 800f94c:	2100      	movs	r1, #0
 800f94e:	f242 00a0 	movw	r0, #8352	; 0x20a0
 800f952:	f007 f9a5 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF5_POWER_H_REG+1, 0);
 800f956:	2100      	movs	r1, #0
 800f958:	f242 00a1 	movw	r0, #8353	; 0x20a1
 800f95c:	f007 f9a0 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF5_POWER_L_REG, 0);
 800f960:	2100      	movs	r1, #0
 800f962:	f242 00a2 	movw	r0, #8354	; 0x20a2
 800f966:	f007 f99b 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF5_POWER_L_REG+1, 0);
 800f96a:	2100      	movs	r1, #0
 800f96c:	f242 00a3 	movw	r0, #8355	; 0x20a3
 800f970:	f007 f996 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF5_POWER_MIL_REG, 0);
 800f974:	2100      	movs	r1, #0
 800f976:	f242 00a4 	movw	r0, #8356	; 0x20a4
 800f97a:	f007 f991 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF5_POWER_MIL_REG+1, 0);
 800f97e:	2100      	movs	r1, #0
 800f980:	f242 00a5 	movw	r0, #8357	; 0x20a5
 800f984:	f007 f98c 	bl	8016ca0 <fm25v02_write>

				fm25v02_write(2*LIGHT_CONTROL_REG, 0);
 800f988:	2100      	movs	r1, #0
 800f98a:	f242 1082 	movw	r0, #8578	; 0x2182
 800f98e:	f007 f987 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*LIGHT_CONTROL_REG+1, 0);
 800f992:	2100      	movs	r1, #0
 800f994:	f242 1083 	movw	r0, #8579	; 0x2183
 800f998:	f007 f982 	bl	8016ca0 <fm25v02_write>

				osMutexRelease(Fm25v02MutexHandle);
 800f99c:	4bba      	ldr	r3, [pc, #744]	; (800fc88 <ThreadMainTask+0x1950>)
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	f7f9 f809 	bl	80089b8 <osMutexRelease>

				osThreadResume(EventWriteTaskHandle);
 800f9a6:	4bb9      	ldr	r3, [pc, #740]	; (800fc8c <ThreadMainTask+0x1954>)
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	f7f9 f9d8 	bl	8008d60 <osThreadResume>

			break;
 800f9b0:	bf00      	nop

		}


		switch(control_registers.event_read_reg)
 800f9b2:	4bb7      	ldr	r3, [pc, #732]	; (800fc90 <ThreadMainTask+0x1958>)
 800f9b4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f9b6:	2b01      	cmp	r3, #1
 800f9b8:	d12a      	bne.n	800fa10 <ThreadMainTask+0x16d8>
		{
			case(1):

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800f9ba:	4bb3      	ldr	r3, [pc, #716]	; (800fc88 <ThreadMainTask+0x1950>)
 800f9bc:	681b      	ldr	r3, [r3, #0]
 800f9be:	f04f 31ff 	mov.w	r1, #4294967295
 800f9c2:	4618      	mov	r0, r3
 800f9c4:	f7f8 ffaa 	bl	800891c <osMutexWait>
				fm25v02_write(2*EVENT_READ_REG, 0);
 800f9c8:	2100      	movs	r1, #0
 800f9ca:	f242 1044 	movw	r0, #8516	; 0x2144
 800f9ce:	f007 f967 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*EVENT_READ_REG+1, 0);
 800f9d2:	2100      	movs	r1, #0
 800f9d4:	f242 1045 	movw	r0, #8517	; 0x2145
 800f9d8:	f007 f962 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*ADDRESS_LAST_EVENT_H_REG, 0x00);
 800f9dc:	2100      	movs	r1, #0
 800f9de:	f242 001c 	movw	r0, #8220	; 0x201c
 800f9e2:	f007 f95d 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*ADDRESS_LAST_EVENT_H_REG+1, 0x20);
 800f9e6:	2120      	movs	r1, #32
 800f9e8:	f242 001d 	movw	r0, #8221	; 0x201d
 800f9ec:	f007 f958 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*ADDRESS_LAST_EVENT_L_REG, 0x00);
 800f9f0:	2100      	movs	r1, #0
 800f9f2:	f242 001e 	movw	r0, #8222	; 0x201e
 800f9f6:	f007 f953 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*ADDRESS_LAST_EVENT_L_REG+1, 0x00);
 800f9fa:	2100      	movs	r1, #0
 800f9fc:	f242 001f 	movw	r0, #8223	; 0x201f
 800fa00:	f007 f94e 	bl	8016ca0 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 800fa04:	4ba0      	ldr	r3, [pc, #640]	; (800fc88 <ThreadMainTask+0x1950>)
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	4618      	mov	r0, r3
 800fa0a:	f7f8 ffd5 	bl	80089b8 <osMutexRelease>

			break;
 800fa0e:	bf00      	nop

		}

*/

		if(control_registers.lighting_switching_reg == LIGHTING_ON) // если функция освещения включена
 800fa10:	4b9f      	ldr	r3, [pc, #636]	; (800fc90 <ThreadMainTask+0x1958>)
 800fa12:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800fa16:	2b01      	cmp	r3, #1
 800fa18:	d12d      	bne.n	800fa76 <ThreadMainTask+0x173e>
		{
			switch(control_registers.lighting_alarm_reset_reg)
 800fa1a:	4b9d      	ldr	r3, [pc, #628]	; (800fc90 <ThreadMainTask+0x1958>)
 800fa1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800fa20:	2b01      	cmp	r3, #1
 800fa22:	d129      	bne.n	800fa78 <ThreadMainTask+0x1740>
			{
				case(1):
					osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800fa24:	4b98      	ldr	r3, [pc, #608]	; (800fc88 <ThreadMainTask+0x1950>)
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	f04f 31ff 	mov.w	r1, #4294967295
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	f7f8 ff75 	bl	800891c <osMutexWait>
					fm25v02_write(2*LIGHTING_ALARM_RESET_REG, 0x00);
 800fa32:	2100      	movs	r1, #0
 800fa34:	f242 1084 	movw	r0, #8580	; 0x2184
 800fa38:	f007 f932 	bl	8016ca0 <fm25v02_write>
					fm25v02_write(2*LIGHTING_ALARM_RESET_REG+1, 0x00);
 800fa3c:	2100      	movs	r1, #0
 800fa3e:	f242 1085 	movw	r0, #8581	; 0x2185
 800fa42:	f007 f92d 	bl	8016ca0 <fm25v02_write>
					control_registers.lighting_alarm_reset_reg = 0x00;
 800fa46:	4b92      	ldr	r3, [pc, #584]	; (800fc90 <ThreadMainTask+0x1958>)
 800fa48:	2200      	movs	r2, #0
 800fa4a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
					fm25v02_write(2*LIGHTING_ALARM_REG, 0x00);
 800fa4e:	2100      	movs	r1, #0
 800fa50:	f242 0064 	movw	r0, #8292	; 0x2064
 800fa54:	f007 f924 	bl	8016ca0 <fm25v02_write>
					fm25v02_write(2*LIGHTING_ALARM_REG+1, 0x00);
 800fa58:	2100      	movs	r1, #0
 800fa5a:	f242 0065 	movw	r0, #8293	; 0x2065
 800fa5e:	f007 f91f 	bl	8016ca0 <fm25v02_write>
					status_registers.lighting_alarm_reg = 0x00;
 800fa62:	4b8c      	ldr	r3, [pc, #560]	; (800fc94 <ThreadMainTask+0x195c>)
 800fa64:	2200      	movs	r2, #0
 800fa66:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
					osMutexRelease(Fm25v02MutexHandle);
 800fa6a:	4b87      	ldr	r3, [pc, #540]	; (800fc88 <ThreadMainTask+0x1950>)
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	4618      	mov	r0, r3
 800fa70:	f7f8 ffa2 	bl	80089b8 <osMutexRelease>
				break;
 800fa74:	e000      	b.n	800fa78 <ThreadMainTask+0x1740>
			}
		}
 800fa76:	bf00      	nop

		if(1)
		{
			osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800fa78:	4b83      	ldr	r3, [pc, #524]	; (800fc88 <ThreadMainTask+0x1950>)
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	f04f 31ff 	mov.w	r1, #4294967295
 800fa80:	4618      	mov	r0, r3
 800fa82:	f7f8 ff4b 	bl	800891c <osMutexWait>
			fm25v02_write(2*CURRENT_PHASE_A_REG, (uint8_t)((cur_a>>8)&0x00FF) );
 800fa86:	4b84      	ldr	r3, [pc, #528]	; (800fc98 <ThreadMainTask+0x1960>)
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	0a1b      	lsrs	r3, r3, #8
 800fa8c:	b2db      	uxtb	r3, r3
 800fa8e:	4619      	mov	r1, r3
 800fa90:	f242 0076 	movw	r0, #8310	; 0x2076
 800fa94:	f007 f904 	bl	8016ca0 <fm25v02_write>
			fm25v02_write(2*CURRENT_PHASE_A_REG+1, (uint8_t)(cur_a&0x00FF) );
 800fa98:	4b7f      	ldr	r3, [pc, #508]	; (800fc98 <ThreadMainTask+0x1960>)
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	b2db      	uxtb	r3, r3
 800fa9e:	4619      	mov	r1, r3
 800faa0:	f242 0077 	movw	r0, #8311	; 0x2077
 800faa4:	f007 f8fc 	bl	8016ca0 <fm25v02_write>
			fm25v02_write(2*CURRENT_PHASE_B_REG, (uint8_t)((cur_b>>8)&0x00FF) );
 800faa8:	4b7c      	ldr	r3, [pc, #496]	; (800fc9c <ThreadMainTask+0x1964>)
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	0a1b      	lsrs	r3, r3, #8
 800faae:	b2db      	uxtb	r3, r3
 800fab0:	4619      	mov	r1, r3
 800fab2:	f242 0078 	movw	r0, #8312	; 0x2078
 800fab6:	f007 f8f3 	bl	8016ca0 <fm25v02_write>
			fm25v02_write(2*CURRENT_PHASE_B_REG+1, (uint8_t)(cur_b&0x00FF) );
 800faba:	4b78      	ldr	r3, [pc, #480]	; (800fc9c <ThreadMainTask+0x1964>)
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	b2db      	uxtb	r3, r3
 800fac0:	4619      	mov	r1, r3
 800fac2:	f242 0079 	movw	r0, #8313	; 0x2079
 800fac6:	f007 f8eb 	bl	8016ca0 <fm25v02_write>
			fm25v02_write(2*CURRENT_PHASE_C_REG, (uint8_t)((cur_c>>8)&0x00FF) );
 800faca:	4b75      	ldr	r3, [pc, #468]	; (800fca0 <ThreadMainTask+0x1968>)
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	0a1b      	lsrs	r3, r3, #8
 800fad0:	b2db      	uxtb	r3, r3
 800fad2:	4619      	mov	r1, r3
 800fad4:	f242 007a 	movw	r0, #8314	; 0x207a
 800fad8:	f007 f8e2 	bl	8016ca0 <fm25v02_write>
			fm25v02_write(2*CURRENT_PHASE_C_REG+1, (uint8_t)(cur_c&0x00FF) );
 800fadc:	4b70      	ldr	r3, [pc, #448]	; (800fca0 <ThreadMainTask+0x1968>)
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	b2db      	uxtb	r3, r3
 800fae2:	4619      	mov	r1, r3
 800fae4:	f242 007b 	movw	r0, #8315	; 0x207b
 800fae8:	f007 f8da 	bl	8016ca0 <fm25v02_write>
			osMutexRelease(Fm25v02MutexHandle);
 800faec:	4b66      	ldr	r3, [pc, #408]	; (800fc88 <ThreadMainTask+0x1950>)
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	4618      	mov	r0, r3
 800faf2:	f7f8 ff61 	bl	80089b8 <osMutexRelease>

			status_registers.current_phase_a_reg = cur_a;
 800faf6:	4b68      	ldr	r3, [pc, #416]	; (800fc98 <ThreadMainTask+0x1960>)
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	b29a      	uxth	r2, r3
 800fafc:	4b65      	ldr	r3, [pc, #404]	; (800fc94 <ThreadMainTask+0x195c>)
 800fafe:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
			status_registers.current_phase_b_reg = cur_b;
 800fb02:	4b66      	ldr	r3, [pc, #408]	; (800fc9c <ThreadMainTask+0x1964>)
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	b29a      	uxth	r2, r3
 800fb08:	4b62      	ldr	r3, [pc, #392]	; (800fc94 <ThreadMainTask+0x195c>)
 800fb0a:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
			status_registers.current_phase_c_reg = cur_c;
 800fb0e:	4b64      	ldr	r3, [pc, #400]	; (800fca0 <ThreadMainTask+0x1968>)
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	b29a      	uxth	r2, r3
 800fb14:	4b5f      	ldr	r3, [pc, #380]	; (800fc94 <ThreadMainTask+0x195c>)
 800fb16:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
		}

		if(1)
		{
			if( TSL2561_getID(&sensor_id) == true)
 800fb1a:	4862      	ldr	r0, [pc, #392]	; (800fca4 <ThreadMainTask+0x196c>)
 800fb1c:	f00a fbdc 	bl	801a2d8 <TSL2561_getID>
 800fb20:	4603      	mov	r3, r0
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d03b      	beq.n	800fb9e <ThreadMainTask+0x1866>
			{
				//TSL2561_setPowerDown();
				//HAL_Delay(1000);
				//while( TSL2561_getID(&sensor_id) == true){}
				d_state2 = TSL2561_setTiming_ms(gain, time,&ms);
 800fb26:	4b60      	ldr	r3, [pc, #384]	; (800fca8 <ThreadMainTask+0x1970>)
 800fb28:	781b      	ldrb	r3, [r3, #0]
 800fb2a:	4a60      	ldr	r2, [pc, #384]	; (800fcac <ThreadMainTask+0x1974>)
 800fb2c:	7811      	ldrb	r1, [r2, #0]
 800fb2e:	4a60      	ldr	r2, [pc, #384]	; (800fcb0 <ThreadMainTask+0x1978>)
 800fb30:	4618      	mov	r0, r3
 800fb32:	f00a fa16 	bl	8019f62 <TSL2561_setTiming_ms>
 800fb36:	4603      	mov	r3, r0
 800fb38:	461a      	mov	r2, r3
 800fb3a:	4b5e      	ldr	r3, [pc, #376]	; (800fcb4 <ThreadMainTask+0x197c>)
 800fb3c:	701a      	strb	r2, [r3, #0]
				TSL2561_setPowerUp();
 800fb3e:	f00a f9c9 	bl	8019ed4 <TSL2561_setPowerUp>
				//HAL_Delay(1000);
				//while( TSL2561_getID(&sensor_id) == false){}
				d_state1 = TSL2561_getData(&data0, &data2);
 800fb42:	495d      	ldr	r1, [pc, #372]	; (800fcb8 <ThreadMainTask+0x1980>)
 800fb44:	485d      	ldr	r0, [pc, #372]	; (800fcbc <ThreadMainTask+0x1984>)
 800fb46:	f00a fa39 	bl	8019fbc <TSL2561_getData>
 800fb4a:	4603      	mov	r3, r0
 800fb4c:	461a      	mov	r2, r3
 800fb4e:	4b5c      	ldr	r3, [pc, #368]	; (800fcc0 <ThreadMainTask+0x1988>)
 800fb50:	701a      	strb	r2, [r3, #0]
				if( TSL2561_getLux(gain, ms, data0, data2, &lux) == 1)
 800fb52:	4b55      	ldr	r3, [pc, #340]	; (800fca8 <ThreadMainTask+0x1970>)
 800fb54:	781b      	ldrb	r3, [r3, #0]
 800fb56:	461c      	mov	r4, r3
 800fb58:	4b55      	ldr	r3, [pc, #340]	; (800fcb0 <ThreadMainTask+0x1978>)
 800fb5a:	6819      	ldr	r1, [r3, #0]
 800fb5c:	4b57      	ldr	r3, [pc, #348]	; (800fcbc <ThreadMainTask+0x1984>)
 800fb5e:	681a      	ldr	r2, [r3, #0]
 800fb60:	4b55      	ldr	r3, [pc, #340]	; (800fcb8 <ThreadMainTask+0x1980>)
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	4857      	ldr	r0, [pc, #348]	; (800fcc4 <ThreadMainTask+0x198c>)
 800fb66:	9000      	str	r0, [sp, #0]
 800fb68:	4620      	mov	r0, r4
 800fb6a:	f00a fa45 	bl	8019ff8 <TSL2561_getLux>
 800fb6e:	4603      	mov	r3, r0
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d00d      	beq.n	800fb90 <ThreadMainTask+0x1858>
				{
					data_lux = lux/1.8;
 800fb74:	4b53      	ldr	r3, [pc, #332]	; (800fcc4 <ThreadMainTask+0x198c>)
 800fb76:	e9d3 0100 	ldrd	r0, r1, [r3]
 800fb7a:	a33f      	add	r3, pc, #252	; (adr r3, 800fc78 <ThreadMainTask+0x1940>)
 800fb7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb80:	f7f0 fe64 	bl	800084c <__aeabi_ddiv>
 800fb84:	4602      	mov	r2, r0
 800fb86:	460b      	mov	r3, r1
 800fb88:	494f      	ldr	r1, [pc, #316]	; (800fcc8 <ThreadMainTask+0x1990>)
 800fb8a:	e9c1 2300 	strd	r2, r3, [r1]
 800fb8e:	e00c      	b.n	800fbaa <ThreadMainTask+0x1872>
					//data_lux = 2000;
				}
				else
				{
					data_lux = 40000;
 800fb90:	494d      	ldr	r1, [pc, #308]	; (800fcc8 <ThreadMainTask+0x1990>)
 800fb92:	a33b      	add	r3, pc, #236	; (adr r3, 800fc80 <ThreadMainTask+0x1948>)
 800fb94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb98:	e9c1 2300 	strd	r2, r3, [r1]
 800fb9c:	e005      	b.n	800fbaa <ThreadMainTask+0x1872>
				}

			}
			else
			{
				HAL_I2C_DeInit(&hi2c1);
 800fb9e:	484b      	ldr	r0, [pc, #300]	; (800fccc <ThreadMainTask+0x1994>)
 800fba0:	f7f4 fad6 	bl	8004150 <HAL_I2C_DeInit>
				HAL_I2C_Init(&hi2c1);
 800fba4:	4849      	ldr	r0, [pc, #292]	; (800fccc <ThreadMainTask+0x1994>)
 800fba6:	f7f4 f98f 	bl	8003ec8 <HAL_I2C_Init>
			}


		}

		if( ((control_registers.light_control_reg)&0x0040) == 0x0040 ) // если включено управление по датчику освещенности
 800fbaa:	4b39      	ldr	r3, [pc, #228]	; (800fc90 <ThreadMainTask+0x1958>)
 800fbac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800fbb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	f000 81f5 	beq.w	800ffa4 <ThreadMainTask+0x1c6c>
		{
			if( data_lux > control_registers.lighting_threshold_off_reg )
 800fbba:	4b35      	ldr	r3, [pc, #212]	; (800fc90 <ThreadMainTask+0x1958>)
 800fbbc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fbc0:	4618      	mov	r0, r3
 800fbc2:	f7f0 fcaf 	bl	8000524 <__aeabi_i2d>
 800fbc6:	4b40      	ldr	r3, [pc, #256]	; (800fcc8 <ThreadMainTask+0x1990>)
 800fbc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbcc:	f7f0 ff86 	bl	8000adc <__aeabi_dcmplt>
 800fbd0:	4603      	mov	r3, r0
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	f000 80f2 	beq.w	800fdbc <ThreadMainTask+0x1a84>
			{
				//time_on_counter = 0;

				if(time_off_counter < control_registers.delay_off_sensor_reg)
 800fbd8:	4b2d      	ldr	r3, [pc, #180]	; (800fc90 <ThreadMainTask+0x1958>)
 800fbda:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 800fbde:	4b3c      	ldr	r3, [pc, #240]	; (800fcd0 <ThreadMainTask+0x1998>)
 800fbe0:	881b      	ldrh	r3, [r3, #0]
 800fbe2:	b29b      	uxth	r3, r3
 800fbe4:	429a      	cmp	r2, r3
 800fbe6:	d907      	bls.n	800fbf8 <ThreadMainTask+0x18c0>
				{
					time_off_counter++;
 800fbe8:	4b39      	ldr	r3, [pc, #228]	; (800fcd0 <ThreadMainTask+0x1998>)
 800fbea:	881b      	ldrh	r3, [r3, #0]
 800fbec:	b29b      	uxth	r3, r3
 800fbee:	3301      	adds	r3, #1
 800fbf0:	b29a      	uxth	r2, r3
 800fbf2:	4b37      	ldr	r3, [pc, #220]	; (800fcd0 <ThreadMainTask+0x1998>)
 800fbf4:	801a      	strh	r2, [r3, #0]
 800fbf6:	e0f2      	b.n	800fdde <ThreadMainTask+0x1aa6>
				}
				else if(time_off_counter == control_registers.delay_off_sensor_reg)
 800fbf8:	4b25      	ldr	r3, [pc, #148]	; (800fc90 <ThreadMainTask+0x1958>)
 800fbfa:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 800fbfe:	4b34      	ldr	r3, [pc, #208]	; (800fcd0 <ThreadMainTask+0x1998>)
 800fc00:	881b      	ldrh	r3, [r3, #0]
 800fc02:	b29b      	uxth	r3, r3
 800fc04:	429a      	cmp	r2, r3
 800fc06:	f040 80ea 	bne.w	800fdde <ThreadMainTask+0x1aa6>
				{
					time_off_counter++;
 800fc0a:	4b31      	ldr	r3, [pc, #196]	; (800fcd0 <ThreadMainTask+0x1998>)
 800fc0c:	881b      	ldrh	r3, [r3, #0]
 800fc0e:	b29b      	uxth	r3, r3
 800fc10:	3301      	adds	r3, #1
 800fc12:	b29a      	uxth	r2, r3
 800fc14:	4b2e      	ldr	r3, [pc, #184]	; (800fcd0 <ThreadMainTask+0x1998>)
 800fc16:	801a      	strh	r2, [r3, #0]
					//time_on_counter = 0;

					if(((control_registers.light_control_reg)&0x0001)==0x0001) // если включена фаза А, выключаем фазу А
 800fc18:	4b1d      	ldr	r3, [pc, #116]	; (800fc90 <ThreadMainTask+0x1958>)
 800fc1a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800fc1e:	f003 0301 	and.w	r3, r3, #1
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d056      	beq.n	800fcd4 <ThreadMainTask+0x199c>
					{
						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800fc26:	4b18      	ldr	r3, [pc, #96]	; (800fc88 <ThreadMainTask+0x1950>)
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	f04f 31ff 	mov.w	r1, #4294967295
 800fc2e:	4618      	mov	r0, r3
 800fc30:	f7f8 fe74 	bl	800891c <osMutexWait>
						fm25v02_read(2*LIGHT_CONTROL_REG+1, &temp);
 800fc34:	f107 030f 	add.w	r3, r7, #15
 800fc38:	4619      	mov	r1, r3
 800fc3a:	f242 1083 	movw	r0, #8579	; 0x2183
 800fc3e:	f006 fff5 	bl	8016c2c <fm25v02_read>
						temp = temp&0xFE;
 800fc42:	7bfb      	ldrb	r3, [r7, #15]
 800fc44:	f023 0301 	bic.w	r3, r3, #1
 800fc48:	b2db      	uxtb	r3, r3
 800fc4a:	73fb      	strb	r3, [r7, #15]
						fm25v02_write(2*LIGHT_CONTROL_REG+1, temp);
 800fc4c:	7bfb      	ldrb	r3, [r7, #15]
 800fc4e:	4619      	mov	r1, r3
 800fc50:	f242 1083 	movw	r0, #8579	; 0x2183
 800fc54:	f007 f824 	bl	8016ca0 <fm25v02_write>
						control_registers.light_control_reg = control_registers.light_control_reg&0xFFFE;
 800fc58:	4b0d      	ldr	r3, [pc, #52]	; (800fc90 <ThreadMainTask+0x1958>)
 800fc5a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800fc5e:	f023 0301 	bic.w	r3, r3, #1
 800fc62:	b29a      	uxth	r2, r3
 800fc64:	4b0a      	ldr	r3, [pc, #40]	; (800fc90 <ThreadMainTask+0x1958>)
 800fc66:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
						osMutexRelease(Fm25v02MutexHandle);
 800fc6a:	4b07      	ldr	r3, [pc, #28]	; (800fc88 <ThreadMainTask+0x1950>)
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	4618      	mov	r0, r3
 800fc70:	f7f8 fea2 	bl	80089b8 <osMutexRelease>
 800fc74:	e035      	b.n	800fce2 <ThreadMainTask+0x19aa>
 800fc76:	bf00      	nop
 800fc78:	cccccccd 	.word	0xcccccccd
 800fc7c:	3ffccccc 	.word	0x3ffccccc
 800fc80:	00000000 	.word	0x00000000
 800fc84:	40e38800 	.word	0x40e38800
 800fc88:	20009af8 	.word	0x20009af8
 800fc8c:	200096f4 	.word	0x200096f4
 800fc90:	2000a234 	.word	0x2000a234
 800fc94:	2000a174 	.word	0x2000a174
 800fc98:	200096ec 	.word	0x200096ec
 800fc9c:	20009bfc 	.word	0x20009bfc
 800fca0:	20009940 	.word	0x20009940
 800fca4:	20009f56 	.word	0x20009f56
 800fca8:	20000876 	.word	0x20000876
 800fcac:	20000000 	.word	0x20000000
 800fcb0:	200096fc 	.word	0x200096fc
 800fcb4:	20009f35 	.word	0x20009f35
 800fcb8:	20008238 	.word	0x20008238
 800fcbc:	20009ad4 	.word	0x20009ad4
 800fcc0:	20009f39 	.word	0x20009f39
 800fcc4:	20009938 	.word	0x20009938
 800fcc8:	20009d90 	.word	0x20009d90
 800fccc:	20008280 	.word	0x20008280
 800fcd0:	20008008 	.word	0x20008008
					}
					else
					{
						time_on_counter = (control_registers.delay_on_sensor_reg + 1);
 800fcd4:	4bb6      	ldr	r3, [pc, #728]	; (800ffb0 <ThreadMainTask+0x1c78>)
 800fcd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fcda:	3301      	adds	r3, #1
 800fcdc:	b29a      	uxth	r2, r3
 800fcde:	4bb5      	ldr	r3, [pc, #724]	; (800ffb4 <ThreadMainTask+0x1c7c>)
 800fce0:	801a      	strh	r2, [r3, #0]
					}
					if(((control_registers.light_control_reg)&0x0002)==0x0002) // если включена фаза В, выключаем фазу В
 800fce2:	4bb3      	ldr	r3, [pc, #716]	; (800ffb0 <ThreadMainTask+0x1c78>)
 800fce4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800fce8:	f003 0302 	and.w	r3, r3, #2
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d027      	beq.n	800fd40 <ThreadMainTask+0x1a08>
					{
						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800fcf0:	4bb1      	ldr	r3, [pc, #708]	; (800ffb8 <ThreadMainTask+0x1c80>)
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	f04f 31ff 	mov.w	r1, #4294967295
 800fcf8:	4618      	mov	r0, r3
 800fcfa:	f7f8 fe0f 	bl	800891c <osMutexWait>
						fm25v02_read(2*LIGHT_CONTROL_REG+1, &temp);
 800fcfe:	f107 030f 	add.w	r3, r7, #15
 800fd02:	4619      	mov	r1, r3
 800fd04:	f242 1083 	movw	r0, #8579	; 0x2183
 800fd08:	f006 ff90 	bl	8016c2c <fm25v02_read>
						temp = temp&0xFD;
 800fd0c:	7bfb      	ldrb	r3, [r7, #15]
 800fd0e:	f023 0302 	bic.w	r3, r3, #2
 800fd12:	b2db      	uxtb	r3, r3
 800fd14:	73fb      	strb	r3, [r7, #15]
						fm25v02_write(2*LIGHT_CONTROL_REG+1, temp);
 800fd16:	7bfb      	ldrb	r3, [r7, #15]
 800fd18:	4619      	mov	r1, r3
 800fd1a:	f242 1083 	movw	r0, #8579	; 0x2183
 800fd1e:	f006 ffbf 	bl	8016ca0 <fm25v02_write>
						control_registers.light_control_reg = control_registers.light_control_reg&0xFFFD;
 800fd22:	4ba3      	ldr	r3, [pc, #652]	; (800ffb0 <ThreadMainTask+0x1c78>)
 800fd24:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800fd28:	f023 0302 	bic.w	r3, r3, #2
 800fd2c:	b29a      	uxth	r2, r3
 800fd2e:	4ba0      	ldr	r3, [pc, #640]	; (800ffb0 <ThreadMainTask+0x1c78>)
 800fd30:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
						osMutexRelease(Fm25v02MutexHandle);
 800fd34:	4ba0      	ldr	r3, [pc, #640]	; (800ffb8 <ThreadMainTask+0x1c80>)
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	4618      	mov	r0, r3
 800fd3a:	f7f8 fe3d 	bl	80089b8 <osMutexRelease>
 800fd3e:	e006      	b.n	800fd4e <ThreadMainTask+0x1a16>
					}
					else
					{
						time_on_counter = (control_registers.delay_on_sensor_reg + 1);
 800fd40:	4b9b      	ldr	r3, [pc, #620]	; (800ffb0 <ThreadMainTask+0x1c78>)
 800fd42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fd46:	3301      	adds	r3, #1
 800fd48:	b29a      	uxth	r2, r3
 800fd4a:	4b9a      	ldr	r3, [pc, #616]	; (800ffb4 <ThreadMainTask+0x1c7c>)
 800fd4c:	801a      	strh	r2, [r3, #0]
					}
					if(((control_registers.light_control_reg)&0x0004)==0x0004) // если включена фаза С, выключаем фазу С
 800fd4e:	4b98      	ldr	r3, [pc, #608]	; (800ffb0 <ThreadMainTask+0x1c78>)
 800fd50:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800fd54:	f003 0304 	and.w	r3, r3, #4
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d027      	beq.n	800fdac <ThreadMainTask+0x1a74>
					{
						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800fd5c:	4b96      	ldr	r3, [pc, #600]	; (800ffb8 <ThreadMainTask+0x1c80>)
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	f04f 31ff 	mov.w	r1, #4294967295
 800fd64:	4618      	mov	r0, r3
 800fd66:	f7f8 fdd9 	bl	800891c <osMutexWait>
						fm25v02_read(2*LIGHT_CONTROL_REG+1, &temp);
 800fd6a:	f107 030f 	add.w	r3, r7, #15
 800fd6e:	4619      	mov	r1, r3
 800fd70:	f242 1083 	movw	r0, #8579	; 0x2183
 800fd74:	f006 ff5a 	bl	8016c2c <fm25v02_read>
						temp = temp&0xFB;
 800fd78:	7bfb      	ldrb	r3, [r7, #15]
 800fd7a:	f023 0304 	bic.w	r3, r3, #4
 800fd7e:	b2db      	uxtb	r3, r3
 800fd80:	73fb      	strb	r3, [r7, #15]
						fm25v02_write(2*LIGHT_CONTROL_REG+1, temp);
 800fd82:	7bfb      	ldrb	r3, [r7, #15]
 800fd84:	4619      	mov	r1, r3
 800fd86:	f242 1083 	movw	r0, #8579	; 0x2183
 800fd8a:	f006 ff89 	bl	8016ca0 <fm25v02_write>
						control_registers.light_control_reg = control_registers.light_control_reg|0xFFFB;
 800fd8e:	4b88      	ldr	r3, [pc, #544]	; (800ffb0 <ThreadMainTask+0x1c78>)
 800fd90:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800fd94:	f063 0304 	orn	r3, r3, #4
 800fd98:	b29a      	uxth	r2, r3
 800fd9a:	4b85      	ldr	r3, [pc, #532]	; (800ffb0 <ThreadMainTask+0x1c78>)
 800fd9c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
						osMutexRelease(Fm25v02MutexHandle);
 800fda0:	4b85      	ldr	r3, [pc, #532]	; (800ffb8 <ThreadMainTask+0x1c80>)
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	4618      	mov	r0, r3
 800fda6:	f7f8 fe07 	bl	80089b8 <osMutexRelease>
 800fdaa:	e018      	b.n	800fdde <ThreadMainTask+0x1aa6>
					}
					else
					{
						time_on_counter = (control_registers.delay_on_sensor_reg + 1);
 800fdac:	4b80      	ldr	r3, [pc, #512]	; (800ffb0 <ThreadMainTask+0x1c78>)
 800fdae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fdb2:	3301      	adds	r3, #1
 800fdb4:	b29a      	uxth	r2, r3
 800fdb6:	4b7f      	ldr	r3, [pc, #508]	; (800ffb4 <ThreadMainTask+0x1c7c>)
 800fdb8:	801a      	strh	r2, [r3, #0]
 800fdba:	e010      	b.n	800fdde <ThreadMainTask+0x1aa6>
					}
				}

			}

			else if( data_lux <= control_registers.lighting_threshold_off_reg )
 800fdbc:	4b7c      	ldr	r3, [pc, #496]	; (800ffb0 <ThreadMainTask+0x1c78>)
 800fdbe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	f7f0 fbae 	bl	8000524 <__aeabi_i2d>
 800fdc8:	4b7c      	ldr	r3, [pc, #496]	; (800ffbc <ThreadMainTask+0x1c84>)
 800fdca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdce:	f7f0 fe99 	bl	8000b04 <__aeabi_dcmpge>
 800fdd2:	4603      	mov	r3, r0
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d002      	beq.n	800fdde <ThreadMainTask+0x1aa6>
			{
				time_off_counter = 0;
 800fdd8:	4b79      	ldr	r3, [pc, #484]	; (800ffc0 <ThreadMainTask+0x1c88>)
 800fdda:	2200      	movs	r2, #0
 800fddc:	801a      	strh	r2, [r3, #0]
				//{
					//time_on_counter = 0;
				//}
			}

			if( data_lux < control_registers.lighting_threshold_on_reg )
 800fdde:	4b74      	ldr	r3, [pc, #464]	; (800ffb0 <ThreadMainTask+0x1c78>)
 800fde0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800fde4:	4618      	mov	r0, r3
 800fde6:	f7f0 fb9d 	bl	8000524 <__aeabi_i2d>
 800fdea:	4b74      	ldr	r3, [pc, #464]	; (800ffbc <ThreadMainTask+0x1c84>)
 800fdec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdf0:	f7f0 fe92 	bl	8000b18 <__aeabi_dcmpgt>
 800fdf4:	4603      	mov	r3, r0
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	f000 80c3 	beq.w	800ff82 <ThreadMainTask+0x1c4a>
			{
				//time_off_counter = 0;

				if(time_on_counter < control_registers.delay_on_sensor_reg)
 800fdfc:	4b6c      	ldr	r3, [pc, #432]	; (800ffb0 <ThreadMainTask+0x1c78>)
 800fdfe:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800fe02:	4b6c      	ldr	r3, [pc, #432]	; (800ffb4 <ThreadMainTask+0x1c7c>)
 800fe04:	881b      	ldrh	r3, [r3, #0]
 800fe06:	b29b      	uxth	r3, r3
 800fe08:	429a      	cmp	r2, r3
 800fe0a:	d907      	bls.n	800fe1c <ThreadMainTask+0x1ae4>
				{
					time_on_counter++;
 800fe0c:	4b69      	ldr	r3, [pc, #420]	; (800ffb4 <ThreadMainTask+0x1c7c>)
 800fe0e:	881b      	ldrh	r3, [r3, #0]
 800fe10:	b29b      	uxth	r3, r3
 800fe12:	3301      	adds	r3, #1
 800fe14:	b29a      	uxth	r2, r3
 800fe16:	4b67      	ldr	r3, [pc, #412]	; (800ffb4 <ThreadMainTask+0x1c7c>)
 800fe18:	801a      	strh	r2, [r3, #0]
 800fe1a:	e0c3      	b.n	800ffa4 <ThreadMainTask+0x1c6c>
				}
				else if( time_on_counter == control_registers.delay_on_sensor_reg )
 800fe1c:	4b64      	ldr	r3, [pc, #400]	; (800ffb0 <ThreadMainTask+0x1c78>)
 800fe1e:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800fe22:	4b64      	ldr	r3, [pc, #400]	; (800ffb4 <ThreadMainTask+0x1c7c>)
 800fe24:	881b      	ldrh	r3, [r3, #0]
 800fe26:	b29b      	uxth	r3, r3
 800fe28:	429a      	cmp	r2, r3
 800fe2a:	f040 80bb 	bne.w	800ffa4 <ThreadMainTask+0x1c6c>
				{
					time_on_counter++;
 800fe2e:	4b61      	ldr	r3, [pc, #388]	; (800ffb4 <ThreadMainTask+0x1c7c>)
 800fe30:	881b      	ldrh	r3, [r3, #0]
 800fe32:	b29b      	uxth	r3, r3
 800fe34:	3301      	adds	r3, #1
 800fe36:	b29a      	uxth	r2, r3
 800fe38:	4b5e      	ldr	r3, [pc, #376]	; (800ffb4 <ThreadMainTask+0x1c7c>)
 800fe3a:	801a      	strh	r2, [r3, #0]
					//time_off_counter = 0;

					if(((control_registers.light_control_reg)&0x0001)==0x0000) // если выключена фаза А, включаем фазу А
 800fe3c:	4b5c      	ldr	r3, [pc, #368]	; (800ffb0 <ThreadMainTask+0x1c78>)
 800fe3e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800fe42:	f003 0301 	and.w	r3, r3, #1
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d127      	bne.n	800fe9a <ThreadMainTask+0x1b62>
					{
						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800fe4a:	4b5b      	ldr	r3, [pc, #364]	; (800ffb8 <ThreadMainTask+0x1c80>)
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	f04f 31ff 	mov.w	r1, #4294967295
 800fe52:	4618      	mov	r0, r3
 800fe54:	f7f8 fd62 	bl	800891c <osMutexWait>
						fm25v02_read(2*LIGHT_CONTROL_REG+1, &temp);
 800fe58:	f107 030f 	add.w	r3, r7, #15
 800fe5c:	4619      	mov	r1, r3
 800fe5e:	f242 1083 	movw	r0, #8579	; 0x2183
 800fe62:	f006 fee3 	bl	8016c2c <fm25v02_read>
						temp = temp|0x01;
 800fe66:	7bfb      	ldrb	r3, [r7, #15]
 800fe68:	f043 0301 	orr.w	r3, r3, #1
 800fe6c:	b2db      	uxtb	r3, r3
 800fe6e:	73fb      	strb	r3, [r7, #15]
						fm25v02_write(2*LIGHT_CONTROL_REG+1, temp);
 800fe70:	7bfb      	ldrb	r3, [r7, #15]
 800fe72:	4619      	mov	r1, r3
 800fe74:	f242 1083 	movw	r0, #8579	; 0x2183
 800fe78:	f006 ff12 	bl	8016ca0 <fm25v02_write>
						control_registers.light_control_reg = control_registers.light_control_reg|0x0001;
 800fe7c:	4b4c      	ldr	r3, [pc, #304]	; (800ffb0 <ThreadMainTask+0x1c78>)
 800fe7e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800fe82:	f043 0301 	orr.w	r3, r3, #1
 800fe86:	b29a      	uxth	r2, r3
 800fe88:	4b49      	ldr	r3, [pc, #292]	; (800ffb0 <ThreadMainTask+0x1c78>)
 800fe8a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
						osMutexRelease(Fm25v02MutexHandle);
 800fe8e:	4b4a      	ldr	r3, [pc, #296]	; (800ffb8 <ThreadMainTask+0x1c80>)
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	4618      	mov	r0, r3
 800fe94:	f7f8 fd90 	bl	80089b8 <osMutexRelease>
 800fe98:	e006      	b.n	800fea8 <ThreadMainTask+0x1b70>
					}
					else
					{
						time_off_counter = (control_registers.delay_off_sensor_reg + 1);
 800fe9a:	4b45      	ldr	r3, [pc, #276]	; (800ffb0 <ThreadMainTask+0x1c78>)
 800fe9c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800fea0:	3301      	adds	r3, #1
 800fea2:	b29a      	uxth	r2, r3
 800fea4:	4b46      	ldr	r3, [pc, #280]	; (800ffc0 <ThreadMainTask+0x1c88>)
 800fea6:	801a      	strh	r2, [r3, #0]
					}
					if(((control_registers.light_control_reg)&0x0002)==0x0000) // если выключена фаза В, включаем фазу В
 800fea8:	4b41      	ldr	r3, [pc, #260]	; (800ffb0 <ThreadMainTask+0x1c78>)
 800feaa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800feae:	f003 0302 	and.w	r3, r3, #2
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d127      	bne.n	800ff06 <ThreadMainTask+0x1bce>
					{
						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800feb6:	4b40      	ldr	r3, [pc, #256]	; (800ffb8 <ThreadMainTask+0x1c80>)
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	f04f 31ff 	mov.w	r1, #4294967295
 800febe:	4618      	mov	r0, r3
 800fec0:	f7f8 fd2c 	bl	800891c <osMutexWait>
						fm25v02_read(2*LIGHT_CONTROL_REG+1, &temp);
 800fec4:	f107 030f 	add.w	r3, r7, #15
 800fec8:	4619      	mov	r1, r3
 800feca:	f242 1083 	movw	r0, #8579	; 0x2183
 800fece:	f006 fead 	bl	8016c2c <fm25v02_read>
						temp = temp|0x02;
 800fed2:	7bfb      	ldrb	r3, [r7, #15]
 800fed4:	f043 0302 	orr.w	r3, r3, #2
 800fed8:	b2db      	uxtb	r3, r3
 800feda:	73fb      	strb	r3, [r7, #15]
						fm25v02_write(2*LIGHT_CONTROL_REG+1, temp);
 800fedc:	7bfb      	ldrb	r3, [r7, #15]
 800fede:	4619      	mov	r1, r3
 800fee0:	f242 1083 	movw	r0, #8579	; 0x2183
 800fee4:	f006 fedc 	bl	8016ca0 <fm25v02_write>
						control_registers.light_control_reg = control_registers.light_control_reg|0x0002;
 800fee8:	4b31      	ldr	r3, [pc, #196]	; (800ffb0 <ThreadMainTask+0x1c78>)
 800feea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800feee:	f043 0302 	orr.w	r3, r3, #2
 800fef2:	b29a      	uxth	r2, r3
 800fef4:	4b2e      	ldr	r3, [pc, #184]	; (800ffb0 <ThreadMainTask+0x1c78>)
 800fef6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
						osMutexRelease(Fm25v02MutexHandle);
 800fefa:	4b2f      	ldr	r3, [pc, #188]	; (800ffb8 <ThreadMainTask+0x1c80>)
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	4618      	mov	r0, r3
 800ff00:	f7f8 fd5a 	bl	80089b8 <osMutexRelease>
 800ff04:	e006      	b.n	800ff14 <ThreadMainTask+0x1bdc>
					}
					else
					{
						time_off_counter = (control_registers.delay_off_sensor_reg + 1);
 800ff06:	4b2a      	ldr	r3, [pc, #168]	; (800ffb0 <ThreadMainTask+0x1c78>)
 800ff08:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ff0c:	3301      	adds	r3, #1
 800ff0e:	b29a      	uxth	r2, r3
 800ff10:	4b2b      	ldr	r3, [pc, #172]	; (800ffc0 <ThreadMainTask+0x1c88>)
 800ff12:	801a      	strh	r2, [r3, #0]
					}
					if(((control_registers.light_control_reg)&0x0004)==0x0000) // если выключена фаза С, включаем фазу С
 800ff14:	4b26      	ldr	r3, [pc, #152]	; (800ffb0 <ThreadMainTask+0x1c78>)
 800ff16:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ff1a:	f003 0304 	and.w	r3, r3, #4
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d127      	bne.n	800ff72 <ThreadMainTask+0x1c3a>
					{
						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 800ff22:	4b25      	ldr	r3, [pc, #148]	; (800ffb8 <ThreadMainTask+0x1c80>)
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	f04f 31ff 	mov.w	r1, #4294967295
 800ff2a:	4618      	mov	r0, r3
 800ff2c:	f7f8 fcf6 	bl	800891c <osMutexWait>
						fm25v02_read(2*LIGHT_CONTROL_REG+1, &temp);
 800ff30:	f107 030f 	add.w	r3, r7, #15
 800ff34:	4619      	mov	r1, r3
 800ff36:	f242 1083 	movw	r0, #8579	; 0x2183
 800ff3a:	f006 fe77 	bl	8016c2c <fm25v02_read>
						temp = temp|0x04;
 800ff3e:	7bfb      	ldrb	r3, [r7, #15]
 800ff40:	f043 0304 	orr.w	r3, r3, #4
 800ff44:	b2db      	uxtb	r3, r3
 800ff46:	73fb      	strb	r3, [r7, #15]
						fm25v02_write(2*LIGHT_CONTROL_REG+1, temp);
 800ff48:	7bfb      	ldrb	r3, [r7, #15]
 800ff4a:	4619      	mov	r1, r3
 800ff4c:	f242 1083 	movw	r0, #8579	; 0x2183
 800ff50:	f006 fea6 	bl	8016ca0 <fm25v02_write>
						control_registers.light_control_reg = control_registers.light_control_reg|0x0004;
 800ff54:	4b16      	ldr	r3, [pc, #88]	; (800ffb0 <ThreadMainTask+0x1c78>)
 800ff56:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ff5a:	f043 0304 	orr.w	r3, r3, #4
 800ff5e:	b29a      	uxth	r2, r3
 800ff60:	4b13      	ldr	r3, [pc, #76]	; (800ffb0 <ThreadMainTask+0x1c78>)
 800ff62:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
						osMutexRelease(Fm25v02MutexHandle);
 800ff66:	4b14      	ldr	r3, [pc, #80]	; (800ffb8 <ThreadMainTask+0x1c80>)
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	4618      	mov	r0, r3
 800ff6c:	f7f8 fd24 	bl	80089b8 <osMutexRelease>
 800ff70:	e018      	b.n	800ffa4 <ThreadMainTask+0x1c6c>
					}
					else
					{
						time_off_counter = (control_registers.delay_off_sensor_reg + 1);
 800ff72:	4b0f      	ldr	r3, [pc, #60]	; (800ffb0 <ThreadMainTask+0x1c78>)
 800ff74:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ff78:	3301      	adds	r3, #1
 800ff7a:	b29a      	uxth	r2, r3
 800ff7c:	4b10      	ldr	r3, [pc, #64]	; (800ffc0 <ThreadMainTask+0x1c88>)
 800ff7e:	801a      	strh	r2, [r3, #0]
 800ff80:	e010      	b.n	800ffa4 <ThreadMainTask+0x1c6c>
					}
				}

			}
			else if( data_lux >= control_registers.lighting_threshold_on_reg )
 800ff82:	4b0b      	ldr	r3, [pc, #44]	; (800ffb0 <ThreadMainTask+0x1c78>)
 800ff84:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800ff88:	4618      	mov	r0, r3
 800ff8a:	f7f0 facb 	bl	8000524 <__aeabi_i2d>
 800ff8e:	4b0b      	ldr	r3, [pc, #44]	; (800ffbc <ThreadMainTask+0x1c84>)
 800ff90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff94:	f7f0 fdac 	bl	8000af0 <__aeabi_dcmple>
 800ff98:	4603      	mov	r3, r0
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d002      	beq.n	800ffa4 <ThreadMainTask+0x1c6c>
			{
				time_on_counter = 0;
 800ff9e:	4b05      	ldr	r3, [pc, #20]	; (800ffb4 <ThreadMainTask+0x1c7c>)
 800ffa0:	2200      	movs	r2, #0
 800ffa2:	801a      	strh	r2, [r3, #0]


		}


		osDelay(500);
 800ffa4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ffa8:	f7f8 fbd7 	bl	800875a <osDelay>
		if( HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0) == GPIO_PIN_SET ) // проверяем если есть наличие единицы на пине PFO микросхемы TPS3306-15
 800ffac:	f7fe b9db 	b.w	800e366 <ThreadMainTask+0x2e>
 800ffb0:	2000a234 	.word	0x2000a234
 800ffb4:	20008006 	.word	0x20008006
 800ffb8:	20009af8 	.word	0x20009af8
 800ffbc:	20009d90 	.word	0x20009d90
 800ffc0:	20008008 	.word	0x20008008

0800ffc4 <ThreadMeterTask>:

uint8_t meter_temp;


void ThreadMeterTask(void const * argument)
{
 800ffc4:	b580      	push	{r7, lr}
 800ffc6:	b082      	sub	sp, #8
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	6078      	str	r0, [r7, #4]


	osSemaphoreWait(RS485TransmissionStateHandle, osWaitForever); // обнуляем семафор, при создании семафора его значение равно 1
 800ffcc:	4b25      	ldr	r3, [pc, #148]	; (8010064 <ThreadMeterTask+0xa0>)
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	f04f 31ff 	mov.w	r1, #4294967295
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	f7f8 fd57 	bl	8008a88 <osSemaphoreWait>

	osMutexWait(Fm25v02MutexHandle, osWaitForever); // тестово обнуляем регистр ошибки опроса счетчика
 800ffda:	4b23      	ldr	r3, [pc, #140]	; (8010068 <ThreadMeterTask+0xa4>)
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	f04f 31ff 	mov.w	r1, #4294967295
 800ffe2:	4618      	mov	r0, r3
 800ffe4:	f7f8 fc9a 	bl	800891c <osMutexWait>
	fm25v02_write(2*CE_303_ERROR_REG, 0x00);
 800ffe8:	2100      	movs	r1, #0
 800ffea:	f242 003c 	movw	r0, #8252	; 0x203c
 800ffee:	f006 fe57 	bl	8016ca0 <fm25v02_write>
	fm25v02_write(2*CE_303_ERROR_REG+1, 0x00);
 800fff2:	2100      	movs	r1, #0
 800fff4:	f242 003d 	movw	r0, #8253	; 0x203d
 800fff8:	f006 fe52 	bl	8016ca0 <fm25v02_write>
	osMutexRelease(Fm25v02MutexHandle);
 800fffc:	4b1a      	ldr	r3, [pc, #104]	; (8010068 <ThreadMeterTask+0xa4>)
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	4618      	mov	r0, r3
 8010002:	f7f8 fcd9 	bl	80089b8 <osMutexRelease>



	for(;;)
	{
		if(control_registers.meter_polling_reg == 1)
 8010006:	4b19      	ldr	r3, [pc, #100]	; (801006c <ThreadMeterTask+0xa8>)
 8010008:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 801000a:	2b01      	cmp	r3, #1
 801000c:	d124      	bne.n	8010058 <ThreadMeterTask+0x94>
		{
			osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801000e:	4b16      	ldr	r3, [pc, #88]	; (8010068 <ThreadMeterTask+0xa4>)
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	f04f 31ff 	mov.w	r1, #4294967295
 8010016:	4618      	mov	r0, r3
 8010018:	f7f8 fc80 	bl	800891c <osMutexWait>
			fm25v02_read(2*METER_ID_LOW_REG+1, &meter_temp); // вычитываем значение регистра номера счетчика и записываем его в переменную буфера.
 801001c:	4914      	ldr	r1, [pc, #80]	; (8010070 <ThreadMeterTask+0xac>)
 801001e:	f242 106d 	movw	r0, #8557	; 0x216d
 8010022:	f006 fe03 	bl	8016c2c <fm25v02_read>

			osMutexRelease(Fm25v02MutexHandle);
 8010026:	4b10      	ldr	r3, [pc, #64]	; (8010068 <ThreadMeterTask+0xa4>)
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	4618      	mov	r0, r3
 801002c:	f7f8 fcc4 	bl	80089b8 <osMutexRelease>

			ce303_voltage(meter_temp); // читаем напряжение
 8010030:	4b0f      	ldr	r3, [pc, #60]	; (8010070 <ThreadMeterTask+0xac>)
 8010032:	781b      	ldrb	r3, [r3, #0]
 8010034:	4618      	mov	r0, r3
 8010036:	f000 fcdb 	bl	80109f0 <ce303_voltage>
			ce303_current(meter_temp); // читаем ток
 801003a:	4b0d      	ldr	r3, [pc, #52]	; (8010070 <ThreadMeterTask+0xac>)
 801003c:	781b      	ldrb	r3, [r3, #0]
 801003e:	4618      	mov	r0, r3
 8010040:	f001 ff22 	bl	8011e88 <ce303_current>
			ce303_power(meter_temp); // читаем мощность
 8010044:	4b0a      	ldr	r3, [pc, #40]	; (8010070 <ThreadMeterTask+0xac>)
 8010046:	781b      	ldrb	r3, [r3, #0]
 8010048:	4618      	mov	r0, r3
 801004a:	f003 f967 	bl	801331c <ce303_power>
			ce303_tarif(meter_temp); // читаем тарифы
 801004e:	4b08      	ldr	r3, [pc, #32]	; (8010070 <ThreadMeterTask+0xac>)
 8010050:	781b      	ldrb	r3, [r3, #0]
 8010052:	4618      	mov	r0, r3
 8010054:	f004 fbae 	bl	80147b4 <ce303_tarif>
		}


		osDelay(2000);
 8010058:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 801005c:	f7f8 fb7d 	bl	800875a <osDelay>
		if(control_registers.meter_polling_reg == 1)
 8010060:	e7d1      	b.n	8010006 <ThreadMeterTask+0x42>
 8010062:	bf00      	nop
 8010064:	20009ad8 	.word	0x20009ad8
 8010068:	20009af8 	.word	0x20009af8
 801006c:	2000a234 	.word	0x2000a234
 8010070:	20009f5a 	.word	0x20009f5a

08010074 <ThreadModbusPacketTask>:
volatile uint8_t phase_b_control_state = 0; // переменная статуса включения фазы В
volatile uint8_t phase_c_control_state = 0; // переменная статуса включения фазы С


void ThreadModbusPacketTask(void const * argument)
{
 8010074:	b580      	push	{r7, lr}
 8010076:	b084      	sub	sp, #16
 8010078:	af00      	add	r7, sp, #0
 801007a:	6078      	str	r0, [r7, #4]
	uint8_t temp_h1;
	uint8_t temp_l1;

	osSemaphoreWait(ModbusPacketReceiveHandle, osWaitForever); // обнуляем семафор, при создании семафора его значение равно 1
 801007c:	4b88      	ldr	r3, [pc, #544]	; (80102a0 <ThreadModbusPacketTask+0x22c>)
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	f04f 31ff 	mov.w	r1, #4294967295
 8010084:	4618      	mov	r0, r3
 8010086:	f7f8 fcff 	bl	8008a88 <osSemaphoreWait>



	for(;;)
	{
		osSemaphoreWait(ModbusPacketReceiveHandle, osWaitForever);
 801008a:	4b85      	ldr	r3, [pc, #532]	; (80102a0 <ThreadModbusPacketTask+0x22c>)
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	f04f 31ff 	mov.w	r1, #4294967295
 8010092:	4618      	mov	r0, r3
 8010094:	f7f8 fcf8 	bl	8008a88 <osSemaphoreWait>

		switch(modbus_buffer[modbus_packet_number1][1]) // проверяем тип поступившей команды MODBUS и формируем соответствующий ответ
 8010098:	4b82      	ldr	r3, [pc, #520]	; (80102a4 <ThreadModbusPacketTask+0x230>)
 801009a:	781b      	ldrb	r3, [r3, #0]
 801009c:	4a82      	ldr	r2, [pc, #520]	; (80102a8 <ThreadModbusPacketTask+0x234>)
 801009e:	021b      	lsls	r3, r3, #8
 80100a0:	4413      	add	r3, r2
 80100a2:	3301      	adds	r3, #1
 80100a4:	781b      	ldrb	r3, [r3, #0]
 80100a6:	2b03      	cmp	r3, #3
 80100a8:	d003      	beq.n	80100b2 <ThreadModbusPacketTask+0x3e>
 80100aa:	2b10      	cmp	r3, #16
 80100ac:	f000 80ad 	beq.w	801020a <ThreadModbusPacketTask+0x196>
 80100b0:	e1f0      	b.n	8010494 <ThreadModbusPacketTask+0x420>
		{
			case(0x03): // чтение регистра

				modbus_address = (((((uint16_t)modbus_buffer[modbus_packet_number1][2])<<8)&0xFF00)|(((uint16_t)modbus_buffer[modbus_packet_number1][3])&0xFF)); // считаем адрес регистра для чтения
 80100b2:	4b7c      	ldr	r3, [pc, #496]	; (80102a4 <ThreadModbusPacketTask+0x230>)
 80100b4:	781b      	ldrb	r3, [r3, #0]
 80100b6:	4a7c      	ldr	r2, [pc, #496]	; (80102a8 <ThreadModbusPacketTask+0x234>)
 80100b8:	021b      	lsls	r3, r3, #8
 80100ba:	4413      	add	r3, r2
 80100bc:	3302      	adds	r3, #2
 80100be:	781b      	ldrb	r3, [r3, #0]
 80100c0:	021b      	lsls	r3, r3, #8
 80100c2:	b21a      	sxth	r2, r3
 80100c4:	4b77      	ldr	r3, [pc, #476]	; (80102a4 <ThreadModbusPacketTask+0x230>)
 80100c6:	781b      	ldrb	r3, [r3, #0]
 80100c8:	4977      	ldr	r1, [pc, #476]	; (80102a8 <ThreadModbusPacketTask+0x234>)
 80100ca:	021b      	lsls	r3, r3, #8
 80100cc:	440b      	add	r3, r1
 80100ce:	3303      	adds	r3, #3
 80100d0:	781b      	ldrb	r3, [r3, #0]
 80100d2:	b21b      	sxth	r3, r3
 80100d4:	4313      	orrs	r3, r2
 80100d6:	b21b      	sxth	r3, r3
 80100d8:	b29a      	uxth	r2, r3
 80100da:	4b74      	ldr	r3, [pc, #464]	; (80102ac <ThreadModbusPacketTask+0x238>)
 80100dc:	801a      	strh	r2, [r3, #0]
				modbus_size = (((((uint16_t)modbus_buffer[modbus_packet_number1][4])<<8)&0xFF00)|(((uint16_t)modbus_buffer[modbus_packet_number1][5])&0xFF)); //  считаем количество регистров для чтения
 80100de:	4b71      	ldr	r3, [pc, #452]	; (80102a4 <ThreadModbusPacketTask+0x230>)
 80100e0:	781b      	ldrb	r3, [r3, #0]
 80100e2:	4a71      	ldr	r2, [pc, #452]	; (80102a8 <ThreadModbusPacketTask+0x234>)
 80100e4:	021b      	lsls	r3, r3, #8
 80100e6:	4413      	add	r3, r2
 80100e8:	3304      	adds	r3, #4
 80100ea:	781b      	ldrb	r3, [r3, #0]
 80100ec:	021b      	lsls	r3, r3, #8
 80100ee:	b21a      	sxth	r2, r3
 80100f0:	4b6c      	ldr	r3, [pc, #432]	; (80102a4 <ThreadModbusPacketTask+0x230>)
 80100f2:	781b      	ldrb	r3, [r3, #0]
 80100f4:	496c      	ldr	r1, [pc, #432]	; (80102a8 <ThreadModbusPacketTask+0x234>)
 80100f6:	021b      	lsls	r3, r3, #8
 80100f8:	440b      	add	r3, r1
 80100fa:	3305      	adds	r3, #5
 80100fc:	781b      	ldrb	r3, [r3, #0]
 80100fe:	b21b      	sxth	r3, r3
 8010100:	4313      	orrs	r3, r2
 8010102:	b21b      	sxth	r3, r3
 8010104:	b29a      	uxth	r2, r3
 8010106:	4b6a      	ldr	r3, [pc, #424]	; (80102b0 <ThreadModbusPacketTask+0x23c>)
 8010108:	801a      	strh	r2, [r3, #0]
					}
					*/

				// обработка пакета чтения 16-битного регистра modbus

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801010a:	4b6a      	ldr	r3, [pc, #424]	; (80102b4 <ThreadModbusPacketTask+0x240>)
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	f04f 31ff 	mov.w	r1, #4294967295
 8010112:	4618      	mov	r0, r3
 8010114:	f7f8 fc02 	bl	800891c <osMutexWait>
				fm25v02_fast_read( 2*modbus_address , &buf_out[0] , 2*modbus_size); // читаем из памяти необходимое количество регистров
 8010118:	4b64      	ldr	r3, [pc, #400]	; (80102ac <ThreadModbusPacketTask+0x238>)
 801011a:	881b      	ldrh	r3, [r3, #0]
 801011c:	005b      	lsls	r3, r3, #1
 801011e:	b298      	uxth	r0, r3
 8010120:	4b63      	ldr	r3, [pc, #396]	; (80102b0 <ThreadModbusPacketTask+0x23c>)
 8010122:	881b      	ldrh	r3, [r3, #0]
 8010124:	005b      	lsls	r3, r3, #1
 8010126:	b29b      	uxth	r3, r3
 8010128:	461a      	mov	r2, r3
 801012a:	4963      	ldr	r1, [pc, #396]	; (80102b8 <ThreadModbusPacketTask+0x244>)
 801012c:	f006 fe28 	bl	8016d80 <fm25v02_fast_read>
				osMutexRelease(Fm25v02MutexHandle);
 8010130:	4b60      	ldr	r3, [pc, #384]	; (80102b4 <ThreadModbusPacketTask+0x240>)
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	4618      	mov	r0, r3
 8010136:	f7f8 fc3f 	bl	80089b8 <osMutexRelease>

				buf_out1[0] = 0x01;
 801013a:	4b60      	ldr	r3, [pc, #384]	; (80102bc <ThreadModbusPacketTask+0x248>)
 801013c:	2201      	movs	r2, #1
 801013e:	701a      	strb	r2, [r3, #0]
				buf_out1[1] = 0x03;
 8010140:	4b5e      	ldr	r3, [pc, #376]	; (80102bc <ThreadModbusPacketTask+0x248>)
 8010142:	2203      	movs	r2, #3
 8010144:	705a      	strb	r2, [r3, #1]
				buf_out1[2] = 2*modbus_size;
 8010146:	4b5a      	ldr	r3, [pc, #360]	; (80102b0 <ThreadModbusPacketTask+0x23c>)
 8010148:	881b      	ldrh	r3, [r3, #0]
 801014a:	b2db      	uxtb	r3, r3
 801014c:	005b      	lsls	r3, r3, #1
 801014e:	b2da      	uxtb	r2, r3
 8010150:	4b5a      	ldr	r3, [pc, #360]	; (80102bc <ThreadModbusPacketTask+0x248>)
 8010152:	709a      	strb	r2, [r3, #2]
				for(uint8_t i=0; i<modbus_size; i++)
 8010154:	2300      	movs	r3, #0
 8010156:	73fb      	strb	r3, [r7, #15]
 8010158:	e015      	b.n	8010186 <ThreadModbusPacketTask+0x112>
				{
					buf_out1[2*i+3] = buf_out[2*i];
 801015a:	7bfb      	ldrb	r3, [r7, #15]
 801015c:	005a      	lsls	r2, r3, #1
 801015e:	7bfb      	ldrb	r3, [r7, #15]
 8010160:	005b      	lsls	r3, r3, #1
 8010162:	3303      	adds	r3, #3
 8010164:	4954      	ldr	r1, [pc, #336]	; (80102b8 <ThreadModbusPacketTask+0x244>)
 8010166:	5c89      	ldrb	r1, [r1, r2]
 8010168:	4a54      	ldr	r2, [pc, #336]	; (80102bc <ThreadModbusPacketTask+0x248>)
 801016a:	54d1      	strb	r1, [r2, r3]
					buf_out1[2*i+4] = buf_out[2*i+1];
 801016c:	7bfb      	ldrb	r3, [r7, #15]
 801016e:	005b      	lsls	r3, r3, #1
 8010170:	1c5a      	adds	r2, r3, #1
 8010172:	7bfb      	ldrb	r3, [r7, #15]
 8010174:	3302      	adds	r3, #2
 8010176:	005b      	lsls	r3, r3, #1
 8010178:	494f      	ldr	r1, [pc, #316]	; (80102b8 <ThreadModbusPacketTask+0x244>)
 801017a:	5c89      	ldrb	r1, [r1, r2]
 801017c:	4a4f      	ldr	r2, [pc, #316]	; (80102bc <ThreadModbusPacketTask+0x248>)
 801017e:	54d1      	strb	r1, [r2, r3]
				for(uint8_t i=0; i<modbus_size; i++)
 8010180:	7bfb      	ldrb	r3, [r7, #15]
 8010182:	3301      	adds	r3, #1
 8010184:	73fb      	strb	r3, [r7, #15]
 8010186:	7bfb      	ldrb	r3, [r7, #15]
 8010188:	b29a      	uxth	r2, r3
 801018a:	4b49      	ldr	r3, [pc, #292]	; (80102b0 <ThreadModbusPacketTask+0x23c>)
 801018c:	881b      	ldrh	r3, [r3, #0]
 801018e:	429a      	cmp	r2, r3
 8010190:	d3e3      	bcc.n	801015a <ThreadModbusPacketTask+0xe6>
				}
				crc_temp = CRC16(&buf_out1[0], 3+2*modbus_size);
 8010192:	4b47      	ldr	r3, [pc, #284]	; (80102b0 <ThreadModbusPacketTask+0x23c>)
 8010194:	881b      	ldrh	r3, [r3, #0]
 8010196:	005b      	lsls	r3, r3, #1
 8010198:	3303      	adds	r3, #3
 801019a:	4619      	mov	r1, r3
 801019c:	4847      	ldr	r0, [pc, #284]	; (80102bc <ThreadModbusPacketTask+0x248>)
 801019e:	f009 fe67 	bl	8019e70 <CRC16>
 80101a2:	4603      	mov	r3, r0
 80101a4:	4a46      	ldr	r2, [pc, #280]	; (80102c0 <ThreadModbusPacketTask+0x24c>)
 80101a6:	6013      	str	r3, [r2, #0]
				buf_out1[2*modbus_size+3] = (uint8_t)(crc_temp&0x00FF);
 80101a8:	4b45      	ldr	r3, [pc, #276]	; (80102c0 <ThreadModbusPacketTask+0x24c>)
 80101aa:	681a      	ldr	r2, [r3, #0]
 80101ac:	4b40      	ldr	r3, [pc, #256]	; (80102b0 <ThreadModbusPacketTask+0x23c>)
 80101ae:	881b      	ldrh	r3, [r3, #0]
 80101b0:	005b      	lsls	r3, r3, #1
 80101b2:	3303      	adds	r3, #3
 80101b4:	b2d1      	uxtb	r1, r2
 80101b6:	4a41      	ldr	r2, [pc, #260]	; (80102bc <ThreadModbusPacketTask+0x248>)
 80101b8:	54d1      	strb	r1, [r2, r3]
				buf_out1[2*modbus_size+4] = (uint8_t)((crc_temp>>8)&0x00FF);
 80101ba:	4b41      	ldr	r3, [pc, #260]	; (80102c0 <ThreadModbusPacketTask+0x24c>)
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	0a1a      	lsrs	r2, r3, #8
 80101c0:	4b3b      	ldr	r3, [pc, #236]	; (80102b0 <ThreadModbusPacketTask+0x23c>)
 80101c2:	881b      	ldrh	r3, [r3, #0]
 80101c4:	3302      	adds	r3, #2
 80101c6:	005b      	lsls	r3, r3, #1
 80101c8:	b2d1      	uxtb	r1, r2
 80101ca:	4a3c      	ldr	r2, [pc, #240]	; (80102bc <ThreadModbusPacketTask+0x248>)
 80101cc:	54d1      	strb	r1, [r2, r3]

				osMutexWait(UartMutexHandle, osWaitForever);
 80101ce:	4b3d      	ldr	r3, [pc, #244]	; (80102c4 <ThreadModbusPacketTask+0x250>)
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	f04f 31ff 	mov.w	r1, #4294967295
 80101d6:	4618      	mov	r0, r3
 80101d8:	f7f8 fba0 	bl	800891c <osMutexWait>
				if( AT_QISEND(&buf_out1[0], 2*modbus_size+5) != AT_OK )
 80101dc:	4b34      	ldr	r3, [pc, #208]	; (80102b0 <ThreadModbusPacketTask+0x23c>)
 80101de:	881b      	ldrh	r3, [r3, #0]
 80101e0:	005b      	lsls	r3, r3, #1
 80101e2:	b29b      	uxth	r3, r3
 80101e4:	3305      	adds	r3, #5
 80101e6:	b29b      	uxth	r3, r3
 80101e8:	4619      	mov	r1, r3
 80101ea:	4834      	ldr	r0, [pc, #208]	; (80102bc <ThreadModbusPacketTask+0x248>)
 80101ec:	f007 fd96 	bl	8017d1c <AT_QISEND>
				{
					//LED7_ON();
				}
				osMutexRelease(UartMutexHandle);
 80101f0:	4b34      	ldr	r3, [pc, #208]	; (80102c4 <ThreadModbusPacketTask+0x250>)
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	4618      	mov	r0, r3
 80101f6:	f7f8 fbdf 	bl	80089b8 <osMutexRelease>
				{
					//osTimerStop(Ring_Center_TimerHandle);
					//osTimerStart(Ring_Center_TimerHandle, 300000);
				}

				osTimerStart(Ring_Center_TimerHandle, 60000);// перезапускаем таймер перезагрузки
 80101fa:	4b33      	ldr	r3, [pc, #204]	; (80102c8 <ThreadModbusPacketTask+0x254>)
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	f64e 2160 	movw	r1, #60000	; 0xea60
 8010202:	4618      	mov	r0, r3
 8010204:	f7f8 faf2 	bl	80087ec <osTimerStart>


			break;
 8010208:	e144      	b.n	8010494 <ThreadModbusPacketTask+0x420>

			case(0x10): // запись нескольких регистров

				modbus_address = (((((uint16_t)modbus_buffer[modbus_packet_number1][2])<<8)&0xFF00)|(((uint16_t)modbus_buffer[modbus_packet_number1][3])&0xFF)); // считаем адрес регистра для записи
 801020a:	4b26      	ldr	r3, [pc, #152]	; (80102a4 <ThreadModbusPacketTask+0x230>)
 801020c:	781b      	ldrb	r3, [r3, #0]
 801020e:	4a26      	ldr	r2, [pc, #152]	; (80102a8 <ThreadModbusPacketTask+0x234>)
 8010210:	021b      	lsls	r3, r3, #8
 8010212:	4413      	add	r3, r2
 8010214:	3302      	adds	r3, #2
 8010216:	781b      	ldrb	r3, [r3, #0]
 8010218:	021b      	lsls	r3, r3, #8
 801021a:	b21a      	sxth	r2, r3
 801021c:	4b21      	ldr	r3, [pc, #132]	; (80102a4 <ThreadModbusPacketTask+0x230>)
 801021e:	781b      	ldrb	r3, [r3, #0]
 8010220:	4921      	ldr	r1, [pc, #132]	; (80102a8 <ThreadModbusPacketTask+0x234>)
 8010222:	021b      	lsls	r3, r3, #8
 8010224:	440b      	add	r3, r1
 8010226:	3303      	adds	r3, #3
 8010228:	781b      	ldrb	r3, [r3, #0]
 801022a:	b21b      	sxth	r3, r3
 801022c:	4313      	orrs	r3, r2
 801022e:	b21b      	sxth	r3, r3
 8010230:	b29a      	uxth	r2, r3
 8010232:	4b1e      	ldr	r3, [pc, #120]	; (80102ac <ThreadModbusPacketTask+0x238>)
 8010234:	801a      	strh	r2, [r3, #0]
				modbus_size = (((((uint16_t)modbus_buffer[modbus_packet_number1][4])<<8)&0xFF00)|(((uint16_t)modbus_buffer[modbus_packet_number1][5])&0xFF)); //  считаем количество регистров для чтения
 8010236:	4b1b      	ldr	r3, [pc, #108]	; (80102a4 <ThreadModbusPacketTask+0x230>)
 8010238:	781b      	ldrb	r3, [r3, #0]
 801023a:	4a1b      	ldr	r2, [pc, #108]	; (80102a8 <ThreadModbusPacketTask+0x234>)
 801023c:	021b      	lsls	r3, r3, #8
 801023e:	4413      	add	r3, r2
 8010240:	3304      	adds	r3, #4
 8010242:	781b      	ldrb	r3, [r3, #0]
 8010244:	021b      	lsls	r3, r3, #8
 8010246:	b21a      	sxth	r2, r3
 8010248:	4b16      	ldr	r3, [pc, #88]	; (80102a4 <ThreadModbusPacketTask+0x230>)
 801024a:	781b      	ldrb	r3, [r3, #0]
 801024c:	4916      	ldr	r1, [pc, #88]	; (80102a8 <ThreadModbusPacketTask+0x234>)
 801024e:	021b      	lsls	r3, r3, #8
 8010250:	440b      	add	r3, r1
 8010252:	3305      	adds	r3, #5
 8010254:	781b      	ldrb	r3, [r3, #0]
 8010256:	b21b      	sxth	r3, r3
 8010258:	4313      	orrs	r3, r2
 801025a:	b21b      	sxth	r3, r3
 801025c:	b29a      	uxth	r2, r3
 801025e:	4b14      	ldr	r3, [pc, #80]	; (80102b0 <ThreadModbusPacketTask+0x23c>)
 8010260:	801a      	strh	r2, [r3, #0]

				if( !( (modbus_address>=0x1000) && (modbus_address<=0x108F) ) && !( (modbus_address<0x1000) && (modbus_address+modbus_size>0x1000) ) ) // модбас адресс не должен находиться в области статусных регистров, а также запись не должна затрагивать статусные регистры
 8010262:	4b12      	ldr	r3, [pc, #72]	; (80102ac <ThreadModbusPacketTask+0x238>)
 8010264:	881b      	ldrh	r3, [r3, #0]
 8010266:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801026a:	d306      	bcc.n	801027a <ThreadModbusPacketTask+0x206>
 801026c:	4b0f      	ldr	r3, [pc, #60]	; (80102ac <ThreadModbusPacketTask+0x238>)
 801026e:	881b      	ldrh	r3, [r3, #0]
 8010270:	f241 028f 	movw	r2, #4239	; 0x108f
 8010274:	4293      	cmp	r3, r2
 8010276:	f240 810c 	bls.w	8010492 <ThreadModbusPacketTask+0x41e>
 801027a:	4b0c      	ldr	r3, [pc, #48]	; (80102ac <ThreadModbusPacketTask+0x238>)
 801027c:	881b      	ldrh	r3, [r3, #0]
 801027e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010282:	d209      	bcs.n	8010298 <ThreadModbusPacketTask+0x224>
 8010284:	4b09      	ldr	r3, [pc, #36]	; (80102ac <ThreadModbusPacketTask+0x238>)
 8010286:	881b      	ldrh	r3, [r3, #0]
 8010288:	461a      	mov	r2, r3
 801028a:	4b09      	ldr	r3, [pc, #36]	; (80102b0 <ThreadModbusPacketTask+0x23c>)
 801028c:	881b      	ldrh	r3, [r3, #0]
 801028e:	4413      	add	r3, r2
 8010290:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010294:	f300 80fd 	bgt.w	8010492 <ThreadModbusPacketTask+0x41e>

					*/

					// обработка пакета записи 16-битного регистра modbus

					for(uint8_t a=0; a<(modbus_buffer[modbus_packet_number1][6])/2; a++)
 8010298:	2300      	movs	r3, #0
 801029a:	73bb      	strb	r3, [r7, #14]
 801029c:	e053      	b.n	8010346 <ThreadModbusPacketTask+0x2d2>
 801029e:	bf00      	nop
 80102a0:	20009a4c 	.word	0x20009a4c
 80102a4:	2000800b 	.word	0x2000800b
 80102a8:	200082ec 	.word	0x200082ec
 80102ac:	2000a160 	.word	0x2000a160
 80102b0:	2000a162 	.word	0x2000a162
 80102b4:	20009af8 	.word	0x20009af8
 80102b8:	2000a060 	.word	0x2000a060
 80102bc:	20009f5c 	.word	0x20009f5c
 80102c0:	2000a170 	.word	0x2000a170
 80102c4:	200096f8 	.word	0x200096f8
 80102c8:	20009700 	.word	0x20009700
					{
						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 80102cc:	4b73      	ldr	r3, [pc, #460]	; (801049c <ThreadModbusPacketTask+0x428>)
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	f04f 31ff 	mov.w	r1, #4294967295
 80102d4:	4618      	mov	r0, r3
 80102d6:	f7f8 fb21 	bl	800891c <osMutexWait>
						fm25v02_fast_write( (2*modbus_address+2*a), &modbus_buffer[modbus_packet_number1][7+a*2], 1 );
 80102da:	4b71      	ldr	r3, [pc, #452]	; (80104a0 <ThreadModbusPacketTask+0x42c>)
 80102dc:	881b      	ldrh	r3, [r3, #0]
 80102de:	461a      	mov	r2, r3
 80102e0:	7bbb      	ldrb	r3, [r7, #14]
 80102e2:	4413      	add	r3, r2
 80102e4:	b29b      	uxth	r3, r3
 80102e6:	005b      	lsls	r3, r3, #1
 80102e8:	b298      	uxth	r0, r3
 80102ea:	4b6e      	ldr	r3, [pc, #440]	; (80104a4 <ThreadModbusPacketTask+0x430>)
 80102ec:	781b      	ldrb	r3, [r3, #0]
 80102ee:	461a      	mov	r2, r3
 80102f0:	7bbb      	ldrb	r3, [r7, #14]
 80102f2:	005b      	lsls	r3, r3, #1
 80102f4:	3307      	adds	r3, #7
 80102f6:	0212      	lsls	r2, r2, #8
 80102f8:	4413      	add	r3, r2
 80102fa:	4a6b      	ldr	r2, [pc, #428]	; (80104a8 <ThreadModbusPacketTask+0x434>)
 80102fc:	4413      	add	r3, r2
 80102fe:	2201      	movs	r2, #1
 8010300:	4619      	mov	r1, r3
 8010302:	f006 fd19 	bl	8016d38 <fm25v02_fast_write>
						fm25v02_fast_write( (2*modbus_address+2*a+1), &modbus_buffer[modbus_packet_number1][8+a*2], 1 );
 8010306:	4b66      	ldr	r3, [pc, #408]	; (80104a0 <ThreadModbusPacketTask+0x42c>)
 8010308:	881b      	ldrh	r3, [r3, #0]
 801030a:	461a      	mov	r2, r3
 801030c:	7bbb      	ldrb	r3, [r7, #14]
 801030e:	4413      	add	r3, r2
 8010310:	b29b      	uxth	r3, r3
 8010312:	005b      	lsls	r3, r3, #1
 8010314:	b29b      	uxth	r3, r3
 8010316:	3301      	adds	r3, #1
 8010318:	b298      	uxth	r0, r3
 801031a:	4b62      	ldr	r3, [pc, #392]	; (80104a4 <ThreadModbusPacketTask+0x430>)
 801031c:	781b      	ldrb	r3, [r3, #0]
 801031e:	461a      	mov	r2, r3
 8010320:	7bbb      	ldrb	r3, [r7, #14]
 8010322:	3304      	adds	r3, #4
 8010324:	005b      	lsls	r3, r3, #1
 8010326:	0212      	lsls	r2, r2, #8
 8010328:	4413      	add	r3, r2
 801032a:	4a5f      	ldr	r2, [pc, #380]	; (80104a8 <ThreadModbusPacketTask+0x434>)
 801032c:	4413      	add	r3, r2
 801032e:	2201      	movs	r2, #1
 8010330:	4619      	mov	r1, r3
 8010332:	f006 fd01 	bl	8016d38 <fm25v02_fast_write>
						osMutexRelease(Fm25v02MutexHandle);
 8010336:	4b59      	ldr	r3, [pc, #356]	; (801049c <ThreadModbusPacketTask+0x428>)
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	4618      	mov	r0, r3
 801033c:	f7f8 fb3c 	bl	80089b8 <osMutexRelease>
					for(uint8_t a=0; a<(modbus_buffer[modbus_packet_number1][6])/2; a++)
 8010340:	7bbb      	ldrb	r3, [r7, #14]
 8010342:	3301      	adds	r3, #1
 8010344:	73bb      	strb	r3, [r7, #14]
 8010346:	4b57      	ldr	r3, [pc, #348]	; (80104a4 <ThreadModbusPacketTask+0x430>)
 8010348:	781b      	ldrb	r3, [r3, #0]
 801034a:	4a57      	ldr	r2, [pc, #348]	; (80104a8 <ThreadModbusPacketTask+0x434>)
 801034c:	021b      	lsls	r3, r3, #8
 801034e:	4413      	add	r3, r2
 8010350:	3306      	adds	r3, #6
 8010352:	781b      	ldrb	r3, [r3, #0]
 8010354:	085b      	lsrs	r3, r3, #1
 8010356:	b2db      	uxtb	r3, r3
 8010358:	7bba      	ldrb	r2, [r7, #14]
 801035a:	429a      	cmp	r2, r3
 801035c:	d3b6      	bcc.n	80102cc <ThreadModbusPacketTask+0x258>
					}

					buf_out1[0] = 0x01;
 801035e:	4b53      	ldr	r3, [pc, #332]	; (80104ac <ThreadModbusPacketTask+0x438>)
 8010360:	2201      	movs	r2, #1
 8010362:	701a      	strb	r2, [r3, #0]
					buf_out1[1] = 0x10;
 8010364:	4b51      	ldr	r3, [pc, #324]	; (80104ac <ThreadModbusPacketTask+0x438>)
 8010366:	2210      	movs	r2, #16
 8010368:	705a      	strb	r2, [r3, #1]
					buf_out1[2] = modbus_buffer[modbus_packet_number1][2];
 801036a:	4b4e      	ldr	r3, [pc, #312]	; (80104a4 <ThreadModbusPacketTask+0x430>)
 801036c:	781b      	ldrb	r3, [r3, #0]
 801036e:	4a4e      	ldr	r2, [pc, #312]	; (80104a8 <ThreadModbusPacketTask+0x434>)
 8010370:	021b      	lsls	r3, r3, #8
 8010372:	4413      	add	r3, r2
 8010374:	3302      	adds	r3, #2
 8010376:	781a      	ldrb	r2, [r3, #0]
 8010378:	4b4c      	ldr	r3, [pc, #304]	; (80104ac <ThreadModbusPacketTask+0x438>)
 801037a:	709a      	strb	r2, [r3, #2]
					buf_out1[3] = modbus_buffer[modbus_packet_number1][3];
 801037c:	4b49      	ldr	r3, [pc, #292]	; (80104a4 <ThreadModbusPacketTask+0x430>)
 801037e:	781b      	ldrb	r3, [r3, #0]
 8010380:	4a49      	ldr	r2, [pc, #292]	; (80104a8 <ThreadModbusPacketTask+0x434>)
 8010382:	021b      	lsls	r3, r3, #8
 8010384:	4413      	add	r3, r2
 8010386:	3303      	adds	r3, #3
 8010388:	781a      	ldrb	r2, [r3, #0]
 801038a:	4b48      	ldr	r3, [pc, #288]	; (80104ac <ThreadModbusPacketTask+0x438>)
 801038c:	70da      	strb	r2, [r3, #3]
					buf_out1[4] = modbus_buffer[modbus_packet_number1][4];
 801038e:	4b45      	ldr	r3, [pc, #276]	; (80104a4 <ThreadModbusPacketTask+0x430>)
 8010390:	781b      	ldrb	r3, [r3, #0]
 8010392:	4a45      	ldr	r2, [pc, #276]	; (80104a8 <ThreadModbusPacketTask+0x434>)
 8010394:	021b      	lsls	r3, r3, #8
 8010396:	4413      	add	r3, r2
 8010398:	3304      	adds	r3, #4
 801039a:	781a      	ldrb	r2, [r3, #0]
 801039c:	4b43      	ldr	r3, [pc, #268]	; (80104ac <ThreadModbusPacketTask+0x438>)
 801039e:	711a      	strb	r2, [r3, #4]
					buf_out1[5] = modbus_buffer[modbus_packet_number1][5];
 80103a0:	4b40      	ldr	r3, [pc, #256]	; (80104a4 <ThreadModbusPacketTask+0x430>)
 80103a2:	781b      	ldrb	r3, [r3, #0]
 80103a4:	4a40      	ldr	r2, [pc, #256]	; (80104a8 <ThreadModbusPacketTask+0x434>)
 80103a6:	021b      	lsls	r3, r3, #8
 80103a8:	4413      	add	r3, r2
 80103aa:	3305      	adds	r3, #5
 80103ac:	781a      	ldrb	r2, [r3, #0]
 80103ae:	4b3f      	ldr	r3, [pc, #252]	; (80104ac <ThreadModbusPacketTask+0x438>)
 80103b0:	715a      	strb	r2, [r3, #5]

					crc_temp = CRC16(&buf_out1[0], 6);
 80103b2:	2106      	movs	r1, #6
 80103b4:	483d      	ldr	r0, [pc, #244]	; (80104ac <ThreadModbusPacketTask+0x438>)
 80103b6:	f009 fd5b 	bl	8019e70 <CRC16>
 80103ba:	4603      	mov	r3, r0
 80103bc:	4a3c      	ldr	r2, [pc, #240]	; (80104b0 <ThreadModbusPacketTask+0x43c>)
 80103be:	6013      	str	r3, [r2, #0]

					buf_out1[6] = (uint8_t)(crc_temp&0x00FF);
 80103c0:	4b3b      	ldr	r3, [pc, #236]	; (80104b0 <ThreadModbusPacketTask+0x43c>)
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	b2da      	uxtb	r2, r3
 80103c6:	4b39      	ldr	r3, [pc, #228]	; (80104ac <ThreadModbusPacketTask+0x438>)
 80103c8:	719a      	strb	r2, [r3, #6]
					buf_out1[7] = (uint8_t)((crc_temp>>8)&0x00FF);
 80103ca:	4b39      	ldr	r3, [pc, #228]	; (80104b0 <ThreadModbusPacketTask+0x43c>)
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	0a1b      	lsrs	r3, r3, #8
 80103d0:	b2da      	uxtb	r2, r3
 80103d2:	4b36      	ldr	r3, [pc, #216]	; (80104ac <ThreadModbusPacketTask+0x438>)
 80103d4:	71da      	strb	r2, [r3, #7]

					osMutexWait(UartMutexHandle, osWaitForever);
 80103d6:	4b37      	ldr	r3, [pc, #220]	; (80104b4 <ThreadModbusPacketTask+0x440>)
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	f04f 31ff 	mov.w	r1, #4294967295
 80103de:	4618      	mov	r0, r3
 80103e0:	f7f8 fa9c 	bl	800891c <osMutexWait>
					if( AT_QISEND(&buf_out1[0], 8) != AT_OK )
 80103e4:	2108      	movs	r1, #8
 80103e6:	4831      	ldr	r0, [pc, #196]	; (80104ac <ThreadModbusPacketTask+0x438>)
 80103e8:	f007 fc98 	bl	8017d1c <AT_QISEND>
					{

					}
					osMutexRelease(UartMutexHandle);
 80103ec:	4b31      	ldr	r3, [pc, #196]	; (80104b4 <ThreadModbusPacketTask+0x440>)
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	4618      	mov	r0, r3
 80103f2:	f7f8 fae1 	bl	80089b8 <osMutexRelease>
						fm25v02_write(2*GPRS_CALL_REG, 0x00);
						fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
						osMutexRelease(Fm25v02MutexHandle);
					}
					*/
					if( modbus_address == 0x2710)
 80103f6:	4b2a      	ldr	r3, [pc, #168]	; (80104a0 <ThreadModbusPacketTask+0x42c>)
 80103f8:	881b      	ldrh	r3, [r3, #0]
 80103fa:	f242 7210 	movw	r2, #10000	; 0x2710
 80103fe:	4293      	cmp	r3, r2
 8010400:	d115      	bne.n	801042e <ThreadModbusPacketTask+0x3ba>
					{
						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8010402:	4b26      	ldr	r3, [pc, #152]	; (801049c <ThreadModbusPacketTask+0x428>)
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	f04f 31ff 	mov.w	r1, #4294967295
 801040a:	4618      	mov	r0, r3
 801040c:	f7f8 fa86 	bl	800891c <osMutexWait>
						fm25v02_write(2*GPRS_CALL_REG, 0x00);
 8010410:	2100      	movs	r1, #0
 8010412:	f242 106e 	movw	r0, #8558	; 0x216e
 8010416:	f006 fc43 	bl	8016ca0 <fm25v02_write>
						fm25v02_write(2*GPRS_CALL_REG+1, CALL_ON);
 801041a:	2101      	movs	r1, #1
 801041c:	f242 106f 	movw	r0, #8559	; 0x216f
 8010420:	f006 fc3e 	bl	8016ca0 <fm25v02_write>
						osMutexRelease(Fm25v02MutexHandle);
 8010424:	4b1d      	ldr	r3, [pc, #116]	; (801049c <ThreadModbusPacketTask+0x428>)
 8010426:	681b      	ldr	r3, [r3, #0]
 8010428:	4618      	mov	r0, r3
 801042a:	f7f8 fac5 	bl	80089b8 <osMutexRelease>
					}

					if( modbus_address == LIGHT_CONTROL_REG)
 801042e:	4b1c      	ldr	r3, [pc, #112]	; (80104a0 <ThreadModbusPacketTask+0x42c>)
 8010430:	881b      	ldrh	r3, [r3, #0]
 8010432:	f241 02c1 	movw	r2, #4289	; 0x10c1
 8010436:	4293      	cmp	r3, r2
 8010438:	d124      	bne.n	8010484 <ThreadModbusPacketTask+0x410>
					{
						osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801043a:	4b18      	ldr	r3, [pc, #96]	; (801049c <ThreadModbusPacketTask+0x428>)
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	f04f 31ff 	mov.w	r1, #4294967295
 8010442:	4618      	mov	r0, r3
 8010444:	f7f8 fa6a 	bl	800891c <osMutexWait>
						fm25v02_read(2*LIGHT_CONTROL_REG, &temp_h1);
 8010448:	f107 030d 	add.w	r3, r7, #13
 801044c:	4619      	mov	r1, r3
 801044e:	f242 1082 	movw	r0, #8578	; 0x2182
 8010452:	f006 fbeb 	bl	8016c2c <fm25v02_read>
						fm25v02_read(2*LIGHT_CONTROL_REG+1, &temp_l1);
 8010456:	f107 030c 	add.w	r3, r7, #12
 801045a:	4619      	mov	r1, r3
 801045c:	f242 1083 	movw	r0, #8579	; 0x2183
 8010460:	f006 fbe4 	bl	8016c2c <fm25v02_read>
						control_registers.light_control_reg = (((uint16_t)temp_h1)<<8)|temp_l1;
 8010464:	7b7b      	ldrb	r3, [r7, #13]
 8010466:	021b      	lsls	r3, r3, #8
 8010468:	b21a      	sxth	r2, r3
 801046a:	7b3b      	ldrb	r3, [r7, #12]
 801046c:	b21b      	sxth	r3, r3
 801046e:	4313      	orrs	r3, r2
 8010470:	b21b      	sxth	r3, r3
 8010472:	b29a      	uxth	r2, r3
 8010474:	4b10      	ldr	r3, [pc, #64]	; (80104b8 <ThreadModbusPacketTask+0x444>)
 8010476:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
						osMutexRelease(Fm25v02MutexHandle);
 801047a:	4b08      	ldr	r3, [pc, #32]	; (801049c <ThreadModbusPacketTask+0x428>)
 801047c:	681b      	ldr	r3, [r3, #0]
 801047e:	4618      	mov	r0, r3
 8010480:	f7f8 fa9a 	bl	80089b8 <osMutexRelease>

					}

					osTimerStart(Ring_Center_TimerHandle, 60000);// перезапускаем таймер перезагрузки
 8010484:	4b0d      	ldr	r3, [pc, #52]	; (80104bc <ThreadModbusPacketTask+0x448>)
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	f64e 2160 	movw	r1, #60000	; 0xea60
 801048c:	4618      	mov	r0, r3
 801048e:	f7f8 f9ad 	bl	80087ec <osTimerStart>

				}


			break;
 8010492:	bf00      	nop
		}


		osDelay(1);
 8010494:	2001      	movs	r0, #1
 8010496:	f7f8 f960 	bl	800875a <osDelay>
		osSemaphoreWait(ModbusPacketReceiveHandle, osWaitForever);
 801049a:	e5f6      	b.n	801008a <ThreadModbusPacketTask+0x16>
 801049c:	20009af8 	.word	0x20009af8
 80104a0:	2000a160 	.word	0x2000a160
 80104a4:	2000800b 	.word	0x2000800b
 80104a8:	200082ec 	.word	0x200082ec
 80104ac:	20009f5c 	.word	0x20009f5c
 80104b0:	2000a170 	.word	0x2000a170
 80104b4:	200096f8 	.word	0x200096f8
 80104b8:	2000a234 	.word	0x2000a234
 80104bc:	20009700 	.word	0x20009700

080104c0 <ThreadModbusTask>:
uint8_t modbus_packet_number = 0;
uint8_t modbus_packet_number1 = 0;


void ThreadModbusTask(void const * argument)
{
 80104c0:	b590      	push	{r4, r7, lr}
 80104c2:	b089      	sub	sp, #36	; 0x24
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	6178      	str	r0, [r7, #20]
	uint16_t i=0;
 80104c8:	2300      	movs	r3, #0
 80104ca:	83fb      	strh	r3, [r7, #30]
	uint16_t i_max;


	for(;;)
	{
		ModbusEvent = osMessageGet(ModbusQueueHandle, osWaitForever); // ожидаем сообщение
 80104cc:	4ba1      	ldr	r3, [pc, #644]	; (8010754 <ThreadModbusTask+0x294>)
 80104ce:	6819      	ldr	r1, [r3, #0]
 80104d0:	4ca1      	ldr	r4, [pc, #644]	; (8010758 <ThreadModbusTask+0x298>)
 80104d2:	463b      	mov	r3, r7
 80104d4:	f04f 32ff 	mov.w	r2, #4294967295
 80104d8:	4618      	mov	r0, r3
 80104da:	f7f8 fbc1 	bl	8008c60 <osMessageGet>
 80104de:	463b      	mov	r3, r7
 80104e0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80104e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		if(ModbusEvent.status == osEventMessage) // если сообщение пришло
 80104e8:	4b9b      	ldr	r3, [pc, #620]	; (8010758 <ThreadModbusTask+0x298>)
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	2b10      	cmp	r3, #16
 80104ee:	f040 8226 	bne.w	801093e <ThreadModbusTask+0x47e>
		{

			switch(ModbusEvent.value.v) // проверяем полученное значение из очереди
 80104f2:	4b99      	ldr	r3, [pc, #612]	; (8010758 <ThreadModbusTask+0x298>)
 80104f4:	685b      	ldr	r3, [r3, #4]
 80104f6:	3b01      	subs	r3, #1
 80104f8:	2b0f      	cmp	r3, #15
 80104fa:	f200 817f 	bhi.w	80107fc <ThreadModbusTask+0x33c>
 80104fe:	a201      	add	r2, pc, #4	; (adr r2, 8010504 <ThreadModbusTask+0x44>)
 8010500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010504:	08010545 	.word	0x08010545
 8010508:	080107fd 	.word	0x080107fd
 801050c:	080105ed 	.word	0x080105ed
 8010510:	080107fd 	.word	0x080107fd
 8010514:	080107fd 	.word	0x080107fd
 8010518:	08010699 	.word	0x08010699
 801051c:	080107fd 	.word	0x080107fd
 8010520:	080107fd 	.word	0x080107fd
 8010524:	080107fd 	.word	0x080107fd
 8010528:	080107fd 	.word	0x080107fd
 801052c:	080107fd 	.word	0x080107fd
 8010530:	080107fd 	.word	0x080107fd
 8010534:	080107fd 	.word	0x080107fd
 8010538:	080107fd 	.word	0x080107fd
 801053c:	080107fd 	.word	0x080107fd
 8010540:	08010743 	.word	0x08010743
			{
				case(0x01):
					if(i==0)
 8010544:	8bfb      	ldrh	r3, [r7, #30]
 8010546:	2b00      	cmp	r3, #0
 8010548:	d110      	bne.n	801056c <ThreadModbusTask+0xac>
					{
						modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 801054a:	4b83      	ldr	r3, [pc, #524]	; (8010758 <ThreadModbusTask+0x298>)
 801054c:	6859      	ldr	r1, [r3, #4]
 801054e:	4b83      	ldr	r3, [pc, #524]	; (801075c <ThreadModbusTask+0x29c>)
 8010550:	781b      	ldrb	r3, [r3, #0]
 8010552:	461a      	mov	r2, r3
 8010554:	8bfb      	ldrh	r3, [r7, #30]
 8010556:	b2c8      	uxtb	r0, r1
 8010558:	4981      	ldr	r1, [pc, #516]	; (8010760 <ThreadModbusTask+0x2a0>)
 801055a:	0212      	lsls	r2, r2, #8
 801055c:	440a      	add	r2, r1
 801055e:	4413      	add	r3, r2
 8010560:	4602      	mov	r2, r0
 8010562:	701a      	strb	r2, [r3, #0]
						i++;
 8010564:	8bfb      	ldrh	r3, [r7, #30]
 8010566:	3301      	adds	r3, #1
 8010568:	83fb      	strh	r3, [r7, #30]
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
							i++;
						}
					}

				break;
 801056a:	e18e      	b.n	801088a <ThreadModbusTask+0x3ca>
					else if(i==1)
 801056c:	8bfb      	ldrh	r3, [r7, #30]
 801056e:	2b01      	cmp	r3, #1
 8010570:	d104      	bne.n	801057c <ThreadModbusTask+0xbc>
						i = 0;
 8010572:	2300      	movs	r3, #0
 8010574:	83fb      	strh	r3, [r7, #30]
						i_max = 0;
 8010576:	2300      	movs	r3, #0
 8010578:	83bb      	strh	r3, [r7, #28]
				break;
 801057a:	e186      	b.n	801088a <ThreadModbusTask+0x3ca>
					else if(i>1)
 801057c:	8bfb      	ldrh	r3, [r7, #30]
 801057e:	2b01      	cmp	r3, #1
 8010580:	f240 8183 	bls.w	801088a <ThreadModbusTask+0x3ca>
						if( (i==6) && (modbus_buffer[modbus_packet_number][1] == 0x10) )
 8010584:	8bfb      	ldrh	r3, [r7, #30]
 8010586:	2b06      	cmp	r3, #6
 8010588:	d11f      	bne.n	80105ca <ThreadModbusTask+0x10a>
 801058a:	4b74      	ldr	r3, [pc, #464]	; (801075c <ThreadModbusTask+0x29c>)
 801058c:	781b      	ldrb	r3, [r3, #0]
 801058e:	4a74      	ldr	r2, [pc, #464]	; (8010760 <ThreadModbusTask+0x2a0>)
 8010590:	021b      	lsls	r3, r3, #8
 8010592:	4413      	add	r3, r2
 8010594:	3301      	adds	r3, #1
 8010596:	781b      	ldrb	r3, [r3, #0]
 8010598:	2b10      	cmp	r3, #16
 801059a:	d116      	bne.n	80105ca <ThreadModbusTask+0x10a>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 801059c:	4b6e      	ldr	r3, [pc, #440]	; (8010758 <ThreadModbusTask+0x298>)
 801059e:	6859      	ldr	r1, [r3, #4]
 80105a0:	4b6e      	ldr	r3, [pc, #440]	; (801075c <ThreadModbusTask+0x29c>)
 80105a2:	781b      	ldrb	r3, [r3, #0]
 80105a4:	461a      	mov	r2, r3
 80105a6:	8bfb      	ldrh	r3, [r7, #30]
 80105a8:	b2c8      	uxtb	r0, r1
 80105aa:	496d      	ldr	r1, [pc, #436]	; (8010760 <ThreadModbusTask+0x2a0>)
 80105ac:	0212      	lsls	r2, r2, #8
 80105ae:	440a      	add	r2, r1
 80105b0:	4413      	add	r3, r2
 80105b2:	4602      	mov	r2, r0
 80105b4:	701a      	strb	r2, [r3, #0]
							i_max = 9 + (uint8_t)ModbusEvent.value.v;
 80105b6:	4b68      	ldr	r3, [pc, #416]	; (8010758 <ThreadModbusTask+0x298>)
 80105b8:	685b      	ldr	r3, [r3, #4]
 80105ba:	b2db      	uxtb	r3, r3
 80105bc:	b29b      	uxth	r3, r3
 80105be:	3309      	adds	r3, #9
 80105c0:	83bb      	strh	r3, [r7, #28]
							i++;
 80105c2:	8bfb      	ldrh	r3, [r7, #30]
 80105c4:	3301      	adds	r3, #1
 80105c6:	83fb      	strh	r3, [r7, #30]
				break;
 80105c8:	e15f      	b.n	801088a <ThreadModbusTask+0x3ca>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 80105ca:	4b63      	ldr	r3, [pc, #396]	; (8010758 <ThreadModbusTask+0x298>)
 80105cc:	6859      	ldr	r1, [r3, #4]
 80105ce:	4b63      	ldr	r3, [pc, #396]	; (801075c <ThreadModbusTask+0x29c>)
 80105d0:	781b      	ldrb	r3, [r3, #0]
 80105d2:	461a      	mov	r2, r3
 80105d4:	8bfb      	ldrh	r3, [r7, #30]
 80105d6:	b2c8      	uxtb	r0, r1
 80105d8:	4961      	ldr	r1, [pc, #388]	; (8010760 <ThreadModbusTask+0x2a0>)
 80105da:	0212      	lsls	r2, r2, #8
 80105dc:	440a      	add	r2, r1
 80105de:	4413      	add	r3, r2
 80105e0:	4602      	mov	r2, r0
 80105e2:	701a      	strb	r2, [r3, #0]
							i++;
 80105e4:	8bfb      	ldrh	r3, [r7, #30]
 80105e6:	3301      	adds	r3, #1
 80105e8:	83fb      	strh	r3, [r7, #30]
				break;
 80105ea:	e14e      	b.n	801088a <ThreadModbusTask+0x3ca>

				case(0x03):
					if(i==0)
 80105ec:	8bfb      	ldrh	r3, [r7, #30]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d104      	bne.n	80105fc <ThreadModbusTask+0x13c>
					{
						i = 0;
 80105f2:	2300      	movs	r3, #0
 80105f4:	83fb      	strh	r3, [r7, #30]
						i_max = 0;
 80105f6:	2300      	movs	r3, #0
 80105f8:	83bb      	strh	r3, [r7, #28]
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
							i++;
						}
					}

				break;
 80105fa:	e148      	b.n	801088e <ThreadModbusTask+0x3ce>
					else if(i==1)
 80105fc:	8bfb      	ldrh	r3, [r7, #30]
 80105fe:	2b01      	cmp	r3, #1
 8010600:	d112      	bne.n	8010628 <ThreadModbusTask+0x168>
						modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 8010602:	4b55      	ldr	r3, [pc, #340]	; (8010758 <ThreadModbusTask+0x298>)
 8010604:	6859      	ldr	r1, [r3, #4]
 8010606:	4b55      	ldr	r3, [pc, #340]	; (801075c <ThreadModbusTask+0x29c>)
 8010608:	781b      	ldrb	r3, [r3, #0]
 801060a:	461a      	mov	r2, r3
 801060c:	8bfb      	ldrh	r3, [r7, #30]
 801060e:	b2c8      	uxtb	r0, r1
 8010610:	4953      	ldr	r1, [pc, #332]	; (8010760 <ThreadModbusTask+0x2a0>)
 8010612:	0212      	lsls	r2, r2, #8
 8010614:	440a      	add	r2, r1
 8010616:	4413      	add	r3, r2
 8010618:	4602      	mov	r2, r0
 801061a:	701a      	strb	r2, [r3, #0]
						i++;
 801061c:	8bfb      	ldrh	r3, [r7, #30]
 801061e:	3301      	adds	r3, #1
 8010620:	83fb      	strh	r3, [r7, #30]
						i_max = 8;
 8010622:	2308      	movs	r3, #8
 8010624:	83bb      	strh	r3, [r7, #28]
				break;
 8010626:	e132      	b.n	801088e <ThreadModbusTask+0x3ce>
					else if(i>1)
 8010628:	8bfb      	ldrh	r3, [r7, #30]
 801062a:	2b01      	cmp	r3, #1
 801062c:	f240 812f 	bls.w	801088e <ThreadModbusTask+0x3ce>
						if( (i==6) && (modbus_buffer[modbus_packet_number][1] == 0x10) )
 8010630:	8bfb      	ldrh	r3, [r7, #30]
 8010632:	2b06      	cmp	r3, #6
 8010634:	d11f      	bne.n	8010676 <ThreadModbusTask+0x1b6>
 8010636:	4b49      	ldr	r3, [pc, #292]	; (801075c <ThreadModbusTask+0x29c>)
 8010638:	781b      	ldrb	r3, [r3, #0]
 801063a:	4a49      	ldr	r2, [pc, #292]	; (8010760 <ThreadModbusTask+0x2a0>)
 801063c:	021b      	lsls	r3, r3, #8
 801063e:	4413      	add	r3, r2
 8010640:	3301      	adds	r3, #1
 8010642:	781b      	ldrb	r3, [r3, #0]
 8010644:	2b10      	cmp	r3, #16
 8010646:	d116      	bne.n	8010676 <ThreadModbusTask+0x1b6>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 8010648:	4b43      	ldr	r3, [pc, #268]	; (8010758 <ThreadModbusTask+0x298>)
 801064a:	6859      	ldr	r1, [r3, #4]
 801064c:	4b43      	ldr	r3, [pc, #268]	; (801075c <ThreadModbusTask+0x29c>)
 801064e:	781b      	ldrb	r3, [r3, #0]
 8010650:	461a      	mov	r2, r3
 8010652:	8bfb      	ldrh	r3, [r7, #30]
 8010654:	b2c8      	uxtb	r0, r1
 8010656:	4942      	ldr	r1, [pc, #264]	; (8010760 <ThreadModbusTask+0x2a0>)
 8010658:	0212      	lsls	r2, r2, #8
 801065a:	440a      	add	r2, r1
 801065c:	4413      	add	r3, r2
 801065e:	4602      	mov	r2, r0
 8010660:	701a      	strb	r2, [r3, #0]
							i_max = 9 + (uint8_t)ModbusEvent.value.v;
 8010662:	4b3d      	ldr	r3, [pc, #244]	; (8010758 <ThreadModbusTask+0x298>)
 8010664:	685b      	ldr	r3, [r3, #4]
 8010666:	b2db      	uxtb	r3, r3
 8010668:	b29b      	uxth	r3, r3
 801066a:	3309      	adds	r3, #9
 801066c:	83bb      	strh	r3, [r7, #28]
							i++;
 801066e:	8bfb      	ldrh	r3, [r7, #30]
 8010670:	3301      	adds	r3, #1
 8010672:	83fb      	strh	r3, [r7, #30]
				break;
 8010674:	e10b      	b.n	801088e <ThreadModbusTask+0x3ce>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 8010676:	4b38      	ldr	r3, [pc, #224]	; (8010758 <ThreadModbusTask+0x298>)
 8010678:	6859      	ldr	r1, [r3, #4]
 801067a:	4b38      	ldr	r3, [pc, #224]	; (801075c <ThreadModbusTask+0x29c>)
 801067c:	781b      	ldrb	r3, [r3, #0]
 801067e:	461a      	mov	r2, r3
 8010680:	8bfb      	ldrh	r3, [r7, #30]
 8010682:	b2c8      	uxtb	r0, r1
 8010684:	4936      	ldr	r1, [pc, #216]	; (8010760 <ThreadModbusTask+0x2a0>)
 8010686:	0212      	lsls	r2, r2, #8
 8010688:	440a      	add	r2, r1
 801068a:	4413      	add	r3, r2
 801068c:	4602      	mov	r2, r0
 801068e:	701a      	strb	r2, [r3, #0]
							i++;
 8010690:	8bfb      	ldrh	r3, [r7, #30]
 8010692:	3301      	adds	r3, #1
 8010694:	83fb      	strh	r3, [r7, #30]
				break;
 8010696:	e0fa      	b.n	801088e <ThreadModbusTask+0x3ce>

				case(0x06):
					if(i==0)
 8010698:	8bfb      	ldrh	r3, [r7, #30]
 801069a:	2b00      	cmp	r3, #0
 801069c:	d104      	bne.n	80106a8 <ThreadModbusTask+0x1e8>
					{
						i = 0;
 801069e:	2300      	movs	r3, #0
 80106a0:	83fb      	strh	r3, [r7, #30]
						i_max = 0;
 80106a2:	2300      	movs	r3, #0
 80106a4:	83bb      	strh	r3, [r7, #28]
 80106a6:	e014      	b.n	80106d2 <ThreadModbusTask+0x212>
					}
					else if(i==1)
 80106a8:	8bfb      	ldrh	r3, [r7, #30]
 80106aa:	2b01      	cmp	r3, #1
 80106ac:	d111      	bne.n	80106d2 <ThreadModbusTask+0x212>
					{
						modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 80106ae:	4b2a      	ldr	r3, [pc, #168]	; (8010758 <ThreadModbusTask+0x298>)
 80106b0:	6859      	ldr	r1, [r3, #4]
 80106b2:	4b2a      	ldr	r3, [pc, #168]	; (801075c <ThreadModbusTask+0x29c>)
 80106b4:	781b      	ldrb	r3, [r3, #0]
 80106b6:	461a      	mov	r2, r3
 80106b8:	8bfb      	ldrh	r3, [r7, #30]
 80106ba:	b2c8      	uxtb	r0, r1
 80106bc:	4928      	ldr	r1, [pc, #160]	; (8010760 <ThreadModbusTask+0x2a0>)
 80106be:	0212      	lsls	r2, r2, #8
 80106c0:	440a      	add	r2, r1
 80106c2:	4413      	add	r3, r2
 80106c4:	4602      	mov	r2, r0
 80106c6:	701a      	strb	r2, [r3, #0]
						i++;
 80106c8:	8bfb      	ldrh	r3, [r7, #30]
 80106ca:	3301      	adds	r3, #1
 80106cc:	83fb      	strh	r3, [r7, #30]
						i_max = 8;
 80106ce:	2308      	movs	r3, #8
 80106d0:	83bb      	strh	r3, [r7, #28]
					}
					if(i>1)
 80106d2:	8bfb      	ldrh	r3, [r7, #30]
 80106d4:	2b01      	cmp	r3, #1
 80106d6:	f240 80dc 	bls.w	8010892 <ThreadModbusTask+0x3d2>
					{
						if( (i==6) && (modbus_buffer[modbus_packet_number][1] == 0x10) )
 80106da:	8bfb      	ldrh	r3, [r7, #30]
 80106dc:	2b06      	cmp	r3, #6
 80106de:	d11f      	bne.n	8010720 <ThreadModbusTask+0x260>
 80106e0:	4b1e      	ldr	r3, [pc, #120]	; (801075c <ThreadModbusTask+0x29c>)
 80106e2:	781b      	ldrb	r3, [r3, #0]
 80106e4:	4a1e      	ldr	r2, [pc, #120]	; (8010760 <ThreadModbusTask+0x2a0>)
 80106e6:	021b      	lsls	r3, r3, #8
 80106e8:	4413      	add	r3, r2
 80106ea:	3301      	adds	r3, #1
 80106ec:	781b      	ldrb	r3, [r3, #0]
 80106ee:	2b10      	cmp	r3, #16
 80106f0:	d116      	bne.n	8010720 <ThreadModbusTask+0x260>
						{
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 80106f2:	4b19      	ldr	r3, [pc, #100]	; (8010758 <ThreadModbusTask+0x298>)
 80106f4:	6859      	ldr	r1, [r3, #4]
 80106f6:	4b19      	ldr	r3, [pc, #100]	; (801075c <ThreadModbusTask+0x29c>)
 80106f8:	781b      	ldrb	r3, [r3, #0]
 80106fa:	461a      	mov	r2, r3
 80106fc:	8bfb      	ldrh	r3, [r7, #30]
 80106fe:	b2c8      	uxtb	r0, r1
 8010700:	4917      	ldr	r1, [pc, #92]	; (8010760 <ThreadModbusTask+0x2a0>)
 8010702:	0212      	lsls	r2, r2, #8
 8010704:	440a      	add	r2, r1
 8010706:	4413      	add	r3, r2
 8010708:	4602      	mov	r2, r0
 801070a:	701a      	strb	r2, [r3, #0]
							i_max = 9 + (uint8_t)ModbusEvent.value.v;
 801070c:	4b12      	ldr	r3, [pc, #72]	; (8010758 <ThreadModbusTask+0x298>)
 801070e:	685b      	ldr	r3, [r3, #4]
 8010710:	b2db      	uxtb	r3, r3
 8010712:	b29b      	uxth	r3, r3
 8010714:	3309      	adds	r3, #9
 8010716:	83bb      	strh	r3, [r7, #28]
							i++;
 8010718:	8bfb      	ldrh	r3, [r7, #30]
 801071a:	3301      	adds	r3, #1
 801071c:	83fb      	strh	r3, [r7, #30]
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
							i++;
						}
					}

				break;
 801071e:	e0b8      	b.n	8010892 <ThreadModbusTask+0x3d2>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 8010720:	4b0d      	ldr	r3, [pc, #52]	; (8010758 <ThreadModbusTask+0x298>)
 8010722:	6859      	ldr	r1, [r3, #4]
 8010724:	4b0d      	ldr	r3, [pc, #52]	; (801075c <ThreadModbusTask+0x29c>)
 8010726:	781b      	ldrb	r3, [r3, #0]
 8010728:	461a      	mov	r2, r3
 801072a:	8bfb      	ldrh	r3, [r7, #30]
 801072c:	b2c8      	uxtb	r0, r1
 801072e:	490c      	ldr	r1, [pc, #48]	; (8010760 <ThreadModbusTask+0x2a0>)
 8010730:	0212      	lsls	r2, r2, #8
 8010732:	440a      	add	r2, r1
 8010734:	4413      	add	r3, r2
 8010736:	4602      	mov	r2, r0
 8010738:	701a      	strb	r2, [r3, #0]
							i++;
 801073a:	8bfb      	ldrh	r3, [r7, #30]
 801073c:	3301      	adds	r3, #1
 801073e:	83fb      	strh	r3, [r7, #30]
				break;
 8010740:	e0a7      	b.n	8010892 <ThreadModbusTask+0x3d2>

				case(0x10):
					if(i==0)
 8010742:	8bfb      	ldrh	r3, [r7, #30]
 8010744:	2b00      	cmp	r3, #0
 8010746:	d10d      	bne.n	8010764 <ThreadModbusTask+0x2a4>
					{
						i = 0;
 8010748:	2300      	movs	r3, #0
 801074a:	83fb      	strh	r3, [r7, #30]
						i_max = 0;
 801074c:	2300      	movs	r3, #0
 801074e:	83bb      	strh	r3, [r7, #28]
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
							i++;
						}
					}

				break;
 8010750:	e0a1      	b.n	8010896 <ThreadModbusTask+0x3d6>
 8010752:	bf00      	nop
 8010754:	200082e8 	.word	0x200082e8
 8010758:	2000a164 	.word	0x2000a164
 801075c:	2000800a 	.word	0x2000800a
 8010760:	200082ec 	.word	0x200082ec
					else if(i==1)
 8010764:	8bfb      	ldrh	r3, [r7, #30]
 8010766:	2b01      	cmp	r3, #1
 8010768:	d110      	bne.n	801078c <ThreadModbusTask+0x2cc>
						modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 801076a:	4b77      	ldr	r3, [pc, #476]	; (8010948 <ThreadModbusTask+0x488>)
 801076c:	6859      	ldr	r1, [r3, #4]
 801076e:	4b77      	ldr	r3, [pc, #476]	; (801094c <ThreadModbusTask+0x48c>)
 8010770:	781b      	ldrb	r3, [r3, #0]
 8010772:	461a      	mov	r2, r3
 8010774:	8bfb      	ldrh	r3, [r7, #30]
 8010776:	b2c8      	uxtb	r0, r1
 8010778:	4975      	ldr	r1, [pc, #468]	; (8010950 <ThreadModbusTask+0x490>)
 801077a:	0212      	lsls	r2, r2, #8
 801077c:	440a      	add	r2, r1
 801077e:	4413      	add	r3, r2
 8010780:	4602      	mov	r2, r0
 8010782:	701a      	strb	r2, [r3, #0]
						i++;
 8010784:	8bfb      	ldrh	r3, [r7, #30]
 8010786:	3301      	adds	r3, #1
 8010788:	83fb      	strh	r3, [r7, #30]
				break;
 801078a:	e084      	b.n	8010896 <ThreadModbusTask+0x3d6>
					else if(i>1)
 801078c:	8bfb      	ldrh	r3, [r7, #30]
 801078e:	2b01      	cmp	r3, #1
 8010790:	f240 8081 	bls.w	8010896 <ThreadModbusTask+0x3d6>
						if( (i==6) && (modbus_buffer[modbus_packet_number][1] == 0x10) )
 8010794:	8bfb      	ldrh	r3, [r7, #30]
 8010796:	2b06      	cmp	r3, #6
 8010798:	d11f      	bne.n	80107da <ThreadModbusTask+0x31a>
 801079a:	4b6c      	ldr	r3, [pc, #432]	; (801094c <ThreadModbusTask+0x48c>)
 801079c:	781b      	ldrb	r3, [r3, #0]
 801079e:	4a6c      	ldr	r2, [pc, #432]	; (8010950 <ThreadModbusTask+0x490>)
 80107a0:	021b      	lsls	r3, r3, #8
 80107a2:	4413      	add	r3, r2
 80107a4:	3301      	adds	r3, #1
 80107a6:	781b      	ldrb	r3, [r3, #0]
 80107a8:	2b10      	cmp	r3, #16
 80107aa:	d116      	bne.n	80107da <ThreadModbusTask+0x31a>
								modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 80107ac:	4b66      	ldr	r3, [pc, #408]	; (8010948 <ThreadModbusTask+0x488>)
 80107ae:	6859      	ldr	r1, [r3, #4]
 80107b0:	4b66      	ldr	r3, [pc, #408]	; (801094c <ThreadModbusTask+0x48c>)
 80107b2:	781b      	ldrb	r3, [r3, #0]
 80107b4:	461a      	mov	r2, r3
 80107b6:	8bfb      	ldrh	r3, [r7, #30]
 80107b8:	b2c8      	uxtb	r0, r1
 80107ba:	4965      	ldr	r1, [pc, #404]	; (8010950 <ThreadModbusTask+0x490>)
 80107bc:	0212      	lsls	r2, r2, #8
 80107be:	440a      	add	r2, r1
 80107c0:	4413      	add	r3, r2
 80107c2:	4602      	mov	r2, r0
 80107c4:	701a      	strb	r2, [r3, #0]
								i_max = 9 + (uint8_t)ModbusEvent.value.v;
 80107c6:	4b60      	ldr	r3, [pc, #384]	; (8010948 <ThreadModbusTask+0x488>)
 80107c8:	685b      	ldr	r3, [r3, #4]
 80107ca:	b2db      	uxtb	r3, r3
 80107cc:	b29b      	uxth	r3, r3
 80107ce:	3309      	adds	r3, #9
 80107d0:	83bb      	strh	r3, [r7, #28]
								i++;
 80107d2:	8bfb      	ldrh	r3, [r7, #30]
 80107d4:	3301      	adds	r3, #1
 80107d6:	83fb      	strh	r3, [r7, #30]
				break;
 80107d8:	e05d      	b.n	8010896 <ThreadModbusTask+0x3d6>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 80107da:	4b5b      	ldr	r3, [pc, #364]	; (8010948 <ThreadModbusTask+0x488>)
 80107dc:	6859      	ldr	r1, [r3, #4]
 80107de:	4b5b      	ldr	r3, [pc, #364]	; (801094c <ThreadModbusTask+0x48c>)
 80107e0:	781b      	ldrb	r3, [r3, #0]
 80107e2:	461a      	mov	r2, r3
 80107e4:	8bfb      	ldrh	r3, [r7, #30]
 80107e6:	b2c8      	uxtb	r0, r1
 80107e8:	4959      	ldr	r1, [pc, #356]	; (8010950 <ThreadModbusTask+0x490>)
 80107ea:	0212      	lsls	r2, r2, #8
 80107ec:	440a      	add	r2, r1
 80107ee:	4413      	add	r3, r2
 80107f0:	4602      	mov	r2, r0
 80107f2:	701a      	strb	r2, [r3, #0]
							i++;
 80107f4:	8bfb      	ldrh	r3, [r7, #30]
 80107f6:	3301      	adds	r3, #1
 80107f8:	83fb      	strh	r3, [r7, #30]
				break;
 80107fa:	e04c      	b.n	8010896 <ThreadModbusTask+0x3d6>

				default:
					if(i==0)
 80107fc:	8bfb      	ldrh	r3, [r7, #30]
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d104      	bne.n	801080c <ThreadModbusTask+0x34c>
					{
						i = 0;
 8010802:	2300      	movs	r3, #0
 8010804:	83fb      	strh	r3, [r7, #30]
						i_max = 0;
 8010806:	2300      	movs	r3, #0
 8010808:	83bb      	strh	r3, [r7, #28]
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
							i++;
						}
					}

				break;
 801080a:	e046      	b.n	801089a <ThreadModbusTask+0x3da>
					else if(i==1)
 801080c:	8bfb      	ldrh	r3, [r7, #30]
 801080e:	2b01      	cmp	r3, #1
 8010810:	d104      	bne.n	801081c <ThreadModbusTask+0x35c>
						i = 0;
 8010812:	2300      	movs	r3, #0
 8010814:	83fb      	strh	r3, [r7, #30]
						i_max = 0;
 8010816:	2300      	movs	r3, #0
 8010818:	83bb      	strh	r3, [r7, #28]
				break;
 801081a:	e03e      	b.n	801089a <ThreadModbusTask+0x3da>
					else if(i>1)
 801081c:	8bfb      	ldrh	r3, [r7, #30]
 801081e:	2b01      	cmp	r3, #1
 8010820:	d93b      	bls.n	801089a <ThreadModbusTask+0x3da>
						if( (i==6) && (modbus_buffer[modbus_packet_number][1] == 0x10) )
 8010822:	8bfb      	ldrh	r3, [r7, #30]
 8010824:	2b06      	cmp	r3, #6
 8010826:	d11f      	bne.n	8010868 <ThreadModbusTask+0x3a8>
 8010828:	4b48      	ldr	r3, [pc, #288]	; (801094c <ThreadModbusTask+0x48c>)
 801082a:	781b      	ldrb	r3, [r3, #0]
 801082c:	4a48      	ldr	r2, [pc, #288]	; (8010950 <ThreadModbusTask+0x490>)
 801082e:	021b      	lsls	r3, r3, #8
 8010830:	4413      	add	r3, r2
 8010832:	3301      	adds	r3, #1
 8010834:	781b      	ldrb	r3, [r3, #0]
 8010836:	2b10      	cmp	r3, #16
 8010838:	d116      	bne.n	8010868 <ThreadModbusTask+0x3a8>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 801083a:	4b43      	ldr	r3, [pc, #268]	; (8010948 <ThreadModbusTask+0x488>)
 801083c:	6859      	ldr	r1, [r3, #4]
 801083e:	4b43      	ldr	r3, [pc, #268]	; (801094c <ThreadModbusTask+0x48c>)
 8010840:	781b      	ldrb	r3, [r3, #0]
 8010842:	461a      	mov	r2, r3
 8010844:	8bfb      	ldrh	r3, [r7, #30]
 8010846:	b2c8      	uxtb	r0, r1
 8010848:	4941      	ldr	r1, [pc, #260]	; (8010950 <ThreadModbusTask+0x490>)
 801084a:	0212      	lsls	r2, r2, #8
 801084c:	440a      	add	r2, r1
 801084e:	4413      	add	r3, r2
 8010850:	4602      	mov	r2, r0
 8010852:	701a      	strb	r2, [r3, #0]
							i_max = 9 + (uint8_t)ModbusEvent.value.v;
 8010854:	4b3c      	ldr	r3, [pc, #240]	; (8010948 <ThreadModbusTask+0x488>)
 8010856:	685b      	ldr	r3, [r3, #4]
 8010858:	b2db      	uxtb	r3, r3
 801085a:	b29b      	uxth	r3, r3
 801085c:	3309      	adds	r3, #9
 801085e:	83bb      	strh	r3, [r7, #28]
							i++;
 8010860:	8bfb      	ldrh	r3, [r7, #30]
 8010862:	3301      	adds	r3, #1
 8010864:	83fb      	strh	r3, [r7, #30]
				break;
 8010866:	e018      	b.n	801089a <ThreadModbusTask+0x3da>
							modbus_buffer[modbus_packet_number][i] = ModbusEvent.value.v;
 8010868:	4b37      	ldr	r3, [pc, #220]	; (8010948 <ThreadModbusTask+0x488>)
 801086a:	6859      	ldr	r1, [r3, #4]
 801086c:	4b37      	ldr	r3, [pc, #220]	; (801094c <ThreadModbusTask+0x48c>)
 801086e:	781b      	ldrb	r3, [r3, #0]
 8010870:	461a      	mov	r2, r3
 8010872:	8bfb      	ldrh	r3, [r7, #30]
 8010874:	b2c8      	uxtb	r0, r1
 8010876:	4936      	ldr	r1, [pc, #216]	; (8010950 <ThreadModbusTask+0x490>)
 8010878:	0212      	lsls	r2, r2, #8
 801087a:	440a      	add	r2, r1
 801087c:	4413      	add	r3, r2
 801087e:	4602      	mov	r2, r0
 8010880:	701a      	strb	r2, [r3, #0]
							i++;
 8010882:	8bfb      	ldrh	r3, [r7, #30]
 8010884:	3301      	adds	r3, #1
 8010886:	83fb      	strh	r3, [r7, #30]
				break;
 8010888:	e007      	b.n	801089a <ThreadModbusTask+0x3da>
				break;
 801088a:	bf00      	nop
 801088c:	e006      	b.n	801089c <ThreadModbusTask+0x3dc>
				break;
 801088e:	bf00      	nop
 8010890:	e004      	b.n	801089c <ThreadModbusTask+0x3dc>
				break;
 8010892:	bf00      	nop
 8010894:	e002      	b.n	801089c <ThreadModbusTask+0x3dc>
				break;
 8010896:	bf00      	nop
 8010898:	e000      	b.n	801089c <ThreadModbusTask+0x3dc>
				break;
 801089a:	bf00      	nop
			}
			if( (i >= i_max) && (i != 0) && (i_max != 0) ) // если число принятых байт соответствует длине соответствующей команды
 801089c:	8bfa      	ldrh	r2, [r7, #30]
 801089e:	8bbb      	ldrh	r3, [r7, #28]
 80108a0:	429a      	cmp	r2, r3
 80108a2:	d34c      	bcc.n	801093e <ThreadModbusTask+0x47e>
 80108a4:	8bfb      	ldrh	r3, [r7, #30]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d049      	beq.n	801093e <ThreadModbusTask+0x47e>
 80108aa:	8bbb      	ldrh	r3, [r7, #28]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d046      	beq.n	801093e <ThreadModbusTask+0x47e>
			{
				crc_temp = CRC16(&modbus_buffer[modbus_packet_number][0], i_max-2); // считаем контрольную сумму принятого пакета
 80108b0:	4b26      	ldr	r3, [pc, #152]	; (801094c <ThreadModbusTask+0x48c>)
 80108b2:	781b      	ldrb	r3, [r3, #0]
 80108b4:	021b      	lsls	r3, r3, #8
 80108b6:	4a26      	ldr	r2, [pc, #152]	; (8010950 <ThreadModbusTask+0x490>)
 80108b8:	441a      	add	r2, r3
 80108ba:	8bbb      	ldrh	r3, [r7, #28]
 80108bc:	3b02      	subs	r3, #2
 80108be:	4619      	mov	r1, r3
 80108c0:	4610      	mov	r0, r2
 80108c2:	f009 fad5 	bl	8019e70 <CRC16>
 80108c6:	4603      	mov	r3, r0
 80108c8:	4a22      	ldr	r2, [pc, #136]	; (8010954 <ThreadModbusTask+0x494>)
 80108ca:	6013      	str	r3, [r2, #0]
				if( ( ((crc_temp>>8)&0x00FF) == modbus_buffer[modbus_packet_number][i_max-1] ) && ( (crc_temp&0x00FF) == modbus_buffer[modbus_packet_number][i_max-2]) ) // проверяем контрольную сумму принятого пакета
 80108cc:	4b21      	ldr	r3, [pc, #132]	; (8010954 <ThreadModbusTask+0x494>)
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	0a1b      	lsrs	r3, r3, #8
 80108d2:	b2db      	uxtb	r3, r3
 80108d4:	4a1d      	ldr	r2, [pc, #116]	; (801094c <ThreadModbusTask+0x48c>)
 80108d6:	7812      	ldrb	r2, [r2, #0]
 80108d8:	4611      	mov	r1, r2
 80108da:	8bba      	ldrh	r2, [r7, #28]
 80108dc:	3a01      	subs	r2, #1
 80108de:	481c      	ldr	r0, [pc, #112]	; (8010950 <ThreadModbusTask+0x490>)
 80108e0:	0209      	lsls	r1, r1, #8
 80108e2:	4401      	add	r1, r0
 80108e4:	440a      	add	r2, r1
 80108e6:	7812      	ldrb	r2, [r2, #0]
 80108e8:	4293      	cmp	r3, r2
 80108ea:	d124      	bne.n	8010936 <ThreadModbusTask+0x476>
 80108ec:	4b19      	ldr	r3, [pc, #100]	; (8010954 <ThreadModbusTask+0x494>)
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	b2db      	uxtb	r3, r3
 80108f2:	4a16      	ldr	r2, [pc, #88]	; (801094c <ThreadModbusTask+0x48c>)
 80108f4:	7812      	ldrb	r2, [r2, #0]
 80108f6:	4611      	mov	r1, r2
 80108f8:	8bba      	ldrh	r2, [r7, #28]
 80108fa:	3a02      	subs	r2, #2
 80108fc:	4814      	ldr	r0, [pc, #80]	; (8010950 <ThreadModbusTask+0x490>)
 80108fe:	0209      	lsls	r1, r1, #8
 8010900:	4401      	add	r1, r0
 8010902:	440a      	add	r2, r1
 8010904:	7812      	ldrb	r2, [r2, #0]
 8010906:	4293      	cmp	r3, r2
 8010908:	d115      	bne.n	8010936 <ThreadModbusTask+0x476>
				{
					modbus_packet_number1 = modbus_packet_number;
 801090a:	4b10      	ldr	r3, [pc, #64]	; (801094c <ThreadModbusTask+0x48c>)
 801090c:	781a      	ldrb	r2, [r3, #0]
 801090e:	4b12      	ldr	r3, [pc, #72]	; (8010958 <ThreadModbusTask+0x498>)
 8010910:	701a      	strb	r2, [r3, #0]
					modbus_packet_number++;
 8010912:	4b0e      	ldr	r3, [pc, #56]	; (801094c <ThreadModbusTask+0x48c>)
 8010914:	781b      	ldrb	r3, [r3, #0]
 8010916:	3301      	adds	r3, #1
 8010918:	b2da      	uxtb	r2, r3
 801091a:	4b0c      	ldr	r3, [pc, #48]	; (801094c <ThreadModbusTask+0x48c>)
 801091c:	701a      	strb	r2, [r3, #0]
					if( modbus_packet_number >= 20)
 801091e:	4b0b      	ldr	r3, [pc, #44]	; (801094c <ThreadModbusTask+0x48c>)
 8010920:	781b      	ldrb	r3, [r3, #0]
 8010922:	2b13      	cmp	r3, #19
 8010924:	d902      	bls.n	801092c <ThreadModbusTask+0x46c>
					{
						modbus_packet_number = 0;
 8010926:	4b09      	ldr	r3, [pc, #36]	; (801094c <ThreadModbusTask+0x48c>)
 8010928:	2200      	movs	r2, #0
 801092a:	701a      	strb	r2, [r3, #0]
					}

					osSemaphoreRelease(ModbusPacketReceiveHandle);
 801092c:	4b0b      	ldr	r3, [pc, #44]	; (801095c <ThreadModbusTask+0x49c>)
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	4618      	mov	r0, r3
 8010932:	f7f8 f8f7 	bl	8008b24 <osSemaphoreRelease>
				}

				i = 0;     // обнуляем значение текущего принятого байта
 8010936:	2300      	movs	r3, #0
 8010938:	83fb      	strh	r3, [r7, #30]
				i_max = 0; // обнуляем максимальное значение принятого байта
 801093a:	2300      	movs	r3, #0
 801093c:	83bb      	strh	r3, [r7, #28]
		}




		osDelay(1);
 801093e:	2001      	movs	r0, #1
 8010940:	f7f7 ff0b 	bl	800875a <osDelay>
		ModbusEvent = osMessageGet(ModbusQueueHandle, osWaitForever); // ожидаем сообщение
 8010944:	e5c2      	b.n	80104cc <ThreadModbusTask+0xc>
 8010946:	bf00      	nop
 8010948:	2000a164 	.word	0x2000a164
 801094c:	2000800a 	.word	0x2000800a
 8010950:	200082ec 	.word	0x200082ec
 8010954:	2000a170 	.word	0x2000a170
 8010958:	2000800b 	.word	0x2000800b
 801095c:	20009a4c 	.word	0x20009a4c

08010960 <ThreadReadRegistersTask>:
extern status_register_struct status_registers;
extern control_register_struct control_registers;


void ThreadReadRegistersTask(void const * argument)
{
 8010960:	b580      	push	{r7, lr}
 8010962:	b082      	sub	sp, #8
 8010964:	af00      	add	r7, sp, #0
 8010966:	6078      	str	r0, [r7, #4]
	read_status_registers(); // вычитываем регистры
 8010968:	f007 fd52 	bl	8018410 <read_status_registers>
	read_control_registers();
 801096c:	f008 fdb8 	bl	80194e0 <read_control_registers>
	osDelay(2000); // ждем пока будет получен статус фаз А1,А2,В1,В2,С1,С2
 8010970:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8010974:	f7f7 fef1 	bl	800875a <osDelay>
	osThreadResume(MainTaskHandle); // запускаем основной процесс
 8010978:	4b0d      	ldr	r3, [pc, #52]	; (80109b0 <ThreadReadRegistersTask+0x50>)
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	4618      	mov	r0, r3
 801097e:	f7f8 f9ef 	bl	8008d60 <osThreadResume>
	osThreadResume(M95TaskHandle);  // запускаем процесс модема
 8010982:	4b0c      	ldr	r3, [pc, #48]	; (80109b4 <ThreadReadRegistersTask+0x54>)
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	4618      	mov	r0, r3
 8010988:	f7f8 f9ea 	bl	8008d60 <osThreadResume>
	osThreadResume(GetCurrentTaskHandle);  // запускаем процесс модема
 801098c:	4b0a      	ldr	r3, [pc, #40]	; (80109b8 <ThreadReadRegistersTask+0x58>)
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	4618      	mov	r0, r3
 8010992:	f7f8 f9e5 	bl	8008d60 <osThreadResume>
	osDelay(1000); //ждем 1 секунду
 8010996:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801099a:	f7f7 fede 	bl	800875a <osDelay>


	for(;;)
	{

		read_status_registers(); // вычитываем регистры
 801099e:	f007 fd37 	bl	8018410 <read_status_registers>
		read_control_registers();
 80109a2:	f008 fd9d 	bl	80194e0 <read_control_registers>

		osDelay(1000); // ждем 1 секунду
 80109a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80109aa:	f7f7 fed6 	bl	800875a <osDelay>
		read_status_registers(); // вычитываем регистры
 80109ae:	e7f6      	b.n	801099e <ThreadReadRegistersTask+0x3e>
 80109b0:	20009774 	.word	0x20009774
 80109b4:	20009948 	.word	0x20009948
 80109b8:	20009764 	.word	0x20009764

080109bc <meter_rx_buffer_clear>:
uint8_t current_buf[13] = {0x01, 0x52, 0x31, 0x02, 0x43, 0x55, 0x52, 0x52, 0x45, 0x28, 0x29, 0x03, 0x5A};
uint8_t power_buf[13] = {0x01, 0x52, 0x31, 0x02, 0x50, 0x4F, 0x57, 0x50, 0x50, 0x28, 0x29, 0x03, 0x6F};
uint8_t tarif_buf[13] = {0x01, 0x52, 0x31, 0x02, 0x45, 0x54, 0x30, 0x50, 0x45, 0x28, 0x29, 0x03, 0x37};

void meter_rx_buffer_clear (void)
{
 80109bc:	b480      	push	{r7}
 80109be:	b083      	sub	sp, #12
 80109c0:	af00      	add	r7, sp, #0
	for(uint16_t i=0; i<256; i++)
 80109c2:	2300      	movs	r3, #0
 80109c4:	80fb      	strh	r3, [r7, #6]
 80109c6:	e006      	b.n	80109d6 <meter_rx_buffer_clear+0x1a>
	{
		meter_rx_buffer[i] = 0;
 80109c8:	88fb      	ldrh	r3, [r7, #6]
 80109ca:	4a08      	ldr	r2, [pc, #32]	; (80109ec <meter_rx_buffer_clear+0x30>)
 80109cc:	2100      	movs	r1, #0
 80109ce:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i=0; i<256; i++)
 80109d0:	88fb      	ldrh	r3, [r7, #6]
 80109d2:	3301      	adds	r3, #1
 80109d4:	80fb      	strh	r3, [r7, #6]
 80109d6:	88fb      	ldrh	r3, [r7, #6]
 80109d8:	2bff      	cmp	r3, #255	; 0xff
 80109da:	d9f5      	bls.n	80109c8 <meter_rx_buffer_clear+0xc>
	}
}
 80109dc:	bf00      	nop
 80109de:	bf00      	nop
 80109e0:	370c      	adds	r7, #12
 80109e2:	46bd      	mov	sp, r7
 80109e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109e8:	4770      	bx	lr
 80109ea:	bf00      	nop
 80109ec:	2000994c 	.word	0x2000994c

080109f0 <ce303_voltage>:

void ce303_voltage (uint8_t meter_id) // функция чтения напряения из счетчика СЕ303
{
 80109f0:	b580      	push	{r7, lr}
 80109f2:	b086      	sub	sp, #24
 80109f4:	af00      	add	r7, sp, #0
 80109f6:	4603      	mov	r3, r0
 80109f8:	71fb      	strb	r3, [r7, #7]
	uint16_t temp_mil;
	uint8_t voltage_a_state; // переменные состояния прочтения значений напряжения ( если переменная равна 0, то значение напряжения не прочитано, если 1 - значение прочитанно )
	uint8_t voltage_b_state;
	uint8_t voltage_c_state;

	if( (meter_id>99)&&(meter_id<1000) )
 80109fa:	79fb      	ldrb	r3, [r7, #7]
 80109fc:	2b63      	cmp	r3, #99	; 0x63
 80109fe:	d962      	bls.n	8010ac6 <ce303_voltage+0xd6>
	{
		start_buf[0] = 0x2F;
 8010a00:	4b9d      	ldr	r3, [pc, #628]	; (8010c78 <ce303_voltage+0x288>)
 8010a02:	222f      	movs	r2, #47	; 0x2f
 8010a04:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 8010a06:	4b9c      	ldr	r3, [pc, #624]	; (8010c78 <ce303_voltage+0x288>)
 8010a08:	223f      	movs	r2, #63	; 0x3f
 8010a0a:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/100) + 0x30;
 8010a0c:	79fb      	ldrb	r3, [r7, #7]
 8010a0e:	4a9b      	ldr	r2, [pc, #620]	; (8010c7c <ce303_voltage+0x28c>)
 8010a10:	fba2 2303 	umull	r2, r3, r2, r3
 8010a14:	095b      	lsrs	r3, r3, #5
 8010a16:	b2db      	uxtb	r3, r3
 8010a18:	3330      	adds	r3, #48	; 0x30
 8010a1a:	b2da      	uxtb	r2, r3
 8010a1c:	4b96      	ldr	r3, [pc, #600]	; (8010c78 <ce303_voltage+0x288>)
 8010a1e:	709a      	strb	r2, [r3, #2]
		start_buf[3] = ((meter_id - (meter_id/100)*100)/10) + 0x30;
 8010a20:	79fa      	ldrb	r2, [r7, #7]
 8010a22:	79fb      	ldrb	r3, [r7, #7]
 8010a24:	4995      	ldr	r1, [pc, #596]	; (8010c7c <ce303_voltage+0x28c>)
 8010a26:	fba1 1303 	umull	r1, r3, r1, r3
 8010a2a:	095b      	lsrs	r3, r3, #5
 8010a2c:	b2db      	uxtb	r3, r3
 8010a2e:	4619      	mov	r1, r3
 8010a30:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8010a34:	fb03 f301 	mul.w	r3, r3, r1
 8010a38:	4413      	add	r3, r2
 8010a3a:	4a91      	ldr	r2, [pc, #580]	; (8010c80 <ce303_voltage+0x290>)
 8010a3c:	fb82 1203 	smull	r1, r2, r2, r3
 8010a40:	1092      	asrs	r2, r2, #2
 8010a42:	17db      	asrs	r3, r3, #31
 8010a44:	1ad3      	subs	r3, r2, r3
 8010a46:	b2db      	uxtb	r3, r3
 8010a48:	3330      	adds	r3, #48	; 0x30
 8010a4a:	b2da      	uxtb	r2, r3
 8010a4c:	4b8a      	ldr	r3, [pc, #552]	; (8010c78 <ce303_voltage+0x288>)
 8010a4e:	70da      	strb	r2, [r3, #3]
		start_buf[4] = ((meter_id - ((meter_id/100)*100)) - (((meter_id - ((meter_id/100)*100))/10)*10)) + 0x30 ;
 8010a50:	79fa      	ldrb	r2, [r7, #7]
 8010a52:	79fb      	ldrb	r3, [r7, #7]
 8010a54:	4989      	ldr	r1, [pc, #548]	; (8010c7c <ce303_voltage+0x28c>)
 8010a56:	fba1 1303 	umull	r1, r3, r1, r3
 8010a5a:	095b      	lsrs	r3, r3, #5
 8010a5c:	b2db      	uxtb	r3, r3
 8010a5e:	4619      	mov	r1, r3
 8010a60:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8010a64:	fb03 f301 	mul.w	r3, r3, r1
 8010a68:	441a      	add	r2, r3
 8010a6a:	4b85      	ldr	r3, [pc, #532]	; (8010c80 <ce303_voltage+0x290>)
 8010a6c:	fb83 1302 	smull	r1, r3, r3, r2
 8010a70:	1099      	asrs	r1, r3, #2
 8010a72:	17d3      	asrs	r3, r2, #31
 8010a74:	1ac9      	subs	r1, r1, r3
 8010a76:	460b      	mov	r3, r1
 8010a78:	009b      	lsls	r3, r3, #2
 8010a7a:	440b      	add	r3, r1
 8010a7c:	005b      	lsls	r3, r3, #1
 8010a7e:	1ad1      	subs	r1, r2, r3
 8010a80:	b2cb      	uxtb	r3, r1
 8010a82:	3330      	adds	r3, #48	; 0x30
 8010a84:	b2da      	uxtb	r2, r3
 8010a86:	4b7c      	ldr	r3, [pc, #496]	; (8010c78 <ce303_voltage+0x288>)
 8010a88:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x21;
 8010a8a:	4b7b      	ldr	r3, [pc, #492]	; (8010c78 <ce303_voltage+0x288>)
 8010a8c:	2221      	movs	r2, #33	; 0x21
 8010a8e:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0D;
 8010a90:	4b79      	ldr	r3, [pc, #484]	; (8010c78 <ce303_voltage+0x288>)
 8010a92:	220d      	movs	r2, #13
 8010a94:	719a      	strb	r2, [r3, #6]
		start_buf[7] = 0x0A;
 8010a96:	4b78      	ldr	r3, [pc, #480]	; (8010c78 <ce303_voltage+0x288>)
 8010a98:	220a      	movs	r2, #10
 8010a9a:	71da      	strb	r2, [r3, #7]

		meter_rx_number = 0;
 8010a9c:	4b79      	ldr	r3, [pc, #484]	; (8010c84 <ce303_voltage+0x294>)
 8010a9e:	2200      	movs	r2, #0
 8010aa0:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8010aa2:	f7ff ff8b 	bl	80109bc <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8010aa6:	2201      	movs	r2, #1
 8010aa8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010aac:	4876      	ldr	r0, [pc, #472]	; (8010c88 <ce303_voltage+0x298>)
 8010aae:	f7f3 f9d7 	bl	8003e60 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 8); // передаем команду
 8010ab2:	2208      	movs	r2, #8
 8010ab4:	4970      	ldr	r1, [pc, #448]	; (8010c78 <ce303_voltage+0x288>)
 8010ab6:	4875      	ldr	r0, [pc, #468]	; (8010c8c <ce303_voltage+0x29c>)
 8010ab8:	f7f6 fcf0 	bl	800749c <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 8010abc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010ac0:	f7f1 fe0e 	bl	80026e0 <HAL_Delay>
 8010ac4:	e072      	b.n	8010bac <ce303_voltage+0x1bc>

	}
	else if( (meter_id>9)&&(meter_id<100) )
 8010ac6:	79fb      	ldrb	r3, [r7, #7]
 8010ac8:	2b09      	cmp	r3, #9
 8010aca:	d944      	bls.n	8010b56 <ce303_voltage+0x166>
 8010acc:	79fb      	ldrb	r3, [r7, #7]
 8010ace:	2b63      	cmp	r3, #99	; 0x63
 8010ad0:	d841      	bhi.n	8010b56 <ce303_voltage+0x166>
	{
		start_buf[0] = 0x2F;
 8010ad2:	4b69      	ldr	r3, [pc, #420]	; (8010c78 <ce303_voltage+0x288>)
 8010ad4:	222f      	movs	r2, #47	; 0x2f
 8010ad6:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 8010ad8:	4b67      	ldr	r3, [pc, #412]	; (8010c78 <ce303_voltage+0x288>)
 8010ada:	223f      	movs	r2, #63	; 0x3f
 8010adc:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/10) + 0x30;
 8010ade:	79fb      	ldrb	r3, [r7, #7]
 8010ae0:	4a6b      	ldr	r2, [pc, #428]	; (8010c90 <ce303_voltage+0x2a0>)
 8010ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8010ae6:	08db      	lsrs	r3, r3, #3
 8010ae8:	b2db      	uxtb	r3, r3
 8010aea:	3330      	adds	r3, #48	; 0x30
 8010aec:	b2da      	uxtb	r2, r3
 8010aee:	4b62      	ldr	r3, [pc, #392]	; (8010c78 <ce303_voltage+0x288>)
 8010af0:	709a      	strb	r2, [r3, #2]
		start_buf[3] = (meter_id - ((meter_id/10)*10)) + 0x30;
 8010af2:	79fb      	ldrb	r3, [r7, #7]
 8010af4:	4a66      	ldr	r2, [pc, #408]	; (8010c90 <ce303_voltage+0x2a0>)
 8010af6:	fba2 2303 	umull	r2, r3, r2, r3
 8010afa:	08db      	lsrs	r3, r3, #3
 8010afc:	b2db      	uxtb	r3, r3
 8010afe:	461a      	mov	r2, r3
 8010b00:	0152      	lsls	r2, r2, #5
 8010b02:	1ad2      	subs	r2, r2, r3
 8010b04:	0092      	lsls	r2, r2, #2
 8010b06:	1ad3      	subs	r3, r2, r3
 8010b08:	005b      	lsls	r3, r3, #1
 8010b0a:	b2da      	uxtb	r2, r3
 8010b0c:	79fb      	ldrb	r3, [r7, #7]
 8010b0e:	4413      	add	r3, r2
 8010b10:	b2db      	uxtb	r3, r3
 8010b12:	3330      	adds	r3, #48	; 0x30
 8010b14:	b2da      	uxtb	r2, r3
 8010b16:	4b58      	ldr	r3, [pc, #352]	; (8010c78 <ce303_voltage+0x288>)
 8010b18:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x21;
 8010b1a:	4b57      	ldr	r3, [pc, #348]	; (8010c78 <ce303_voltage+0x288>)
 8010b1c:	2221      	movs	r2, #33	; 0x21
 8010b1e:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0D;
 8010b20:	4b55      	ldr	r3, [pc, #340]	; (8010c78 <ce303_voltage+0x288>)
 8010b22:	220d      	movs	r2, #13
 8010b24:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0A;
 8010b26:	4b54      	ldr	r3, [pc, #336]	; (8010c78 <ce303_voltage+0x288>)
 8010b28:	220a      	movs	r2, #10
 8010b2a:	719a      	strb	r2, [r3, #6]

		meter_rx_number = 0;
 8010b2c:	4b55      	ldr	r3, [pc, #340]	; (8010c84 <ce303_voltage+0x294>)
 8010b2e:	2200      	movs	r2, #0
 8010b30:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8010b32:	f7ff ff43 	bl	80109bc <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8010b36:	2201      	movs	r2, #1
 8010b38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010b3c:	4852      	ldr	r0, [pc, #328]	; (8010c88 <ce303_voltage+0x298>)
 8010b3e:	f7f3 f98f 	bl	8003e60 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 7); // передаем команду
 8010b42:	2207      	movs	r2, #7
 8010b44:	494c      	ldr	r1, [pc, #304]	; (8010c78 <ce303_voltage+0x288>)
 8010b46:	4851      	ldr	r0, [pc, #324]	; (8010c8c <ce303_voltage+0x29c>)
 8010b48:	f7f6 fca8 	bl	800749c <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 8010b4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010b50:	f7f1 fdc6 	bl	80026e0 <HAL_Delay>
 8010b54:	e02a      	b.n	8010bac <ce303_voltage+0x1bc>

	}
	else if( (meter_id>=0)&&(meter_id<10) )
 8010b56:	79fb      	ldrb	r3, [r7, #7]
 8010b58:	2b09      	cmp	r3, #9
 8010b5a:	d827      	bhi.n	8010bac <ce303_voltage+0x1bc>
	{
		start_buf[0] = 0x2F;
 8010b5c:	4b46      	ldr	r3, [pc, #280]	; (8010c78 <ce303_voltage+0x288>)
 8010b5e:	222f      	movs	r2, #47	; 0x2f
 8010b60:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 8010b62:	4b45      	ldr	r3, [pc, #276]	; (8010c78 <ce303_voltage+0x288>)
 8010b64:	223f      	movs	r2, #63	; 0x3f
 8010b66:	705a      	strb	r2, [r3, #1]
		start_buf[2] = meter_id + 0x30;
 8010b68:	79fb      	ldrb	r3, [r7, #7]
 8010b6a:	3330      	adds	r3, #48	; 0x30
 8010b6c:	b2da      	uxtb	r2, r3
 8010b6e:	4b42      	ldr	r3, [pc, #264]	; (8010c78 <ce303_voltage+0x288>)
 8010b70:	709a      	strb	r2, [r3, #2]
		start_buf[3] = 0x21;
 8010b72:	4b41      	ldr	r3, [pc, #260]	; (8010c78 <ce303_voltage+0x288>)
 8010b74:	2221      	movs	r2, #33	; 0x21
 8010b76:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x0D;
 8010b78:	4b3f      	ldr	r3, [pc, #252]	; (8010c78 <ce303_voltage+0x288>)
 8010b7a:	220d      	movs	r2, #13
 8010b7c:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0A;
 8010b7e:	4b3e      	ldr	r3, [pc, #248]	; (8010c78 <ce303_voltage+0x288>)
 8010b80:	220a      	movs	r2, #10
 8010b82:	715a      	strb	r2, [r3, #5]

		meter_rx_number = 0;
 8010b84:	4b3f      	ldr	r3, [pc, #252]	; (8010c84 <ce303_voltage+0x294>)
 8010b86:	2200      	movs	r2, #0
 8010b88:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8010b8a:	f7ff ff17 	bl	80109bc <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8010b8e:	2201      	movs	r2, #1
 8010b90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010b94:	483c      	ldr	r0, [pc, #240]	; (8010c88 <ce303_voltage+0x298>)
 8010b96:	f7f3 f963 	bl	8003e60 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 6); // передаем команду
 8010b9a:	2206      	movs	r2, #6
 8010b9c:	4936      	ldr	r1, [pc, #216]	; (8010c78 <ce303_voltage+0x288>)
 8010b9e:	483b      	ldr	r0, [pc, #236]	; (8010c8c <ce303_voltage+0x29c>)
 8010ba0:	f7f6 fc7c 	bl	800749c <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 8010ba4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010ba8:	f7f1 fd9a 	bl	80026e0 <HAL_Delay>
	}


	if( (meter_id>99)&&(meter_id<1000) )
 8010bac:	79fb      	ldrb	r3, [r7, #7]
 8010bae:	2b63      	cmp	r3, #99	; 0x63
 8010bb0:	d970      	bls.n	8010c94 <ce303_voltage+0x2a4>
	{
		start_buf[0] = 0x2F;
 8010bb2:	4b31      	ldr	r3, [pc, #196]	; (8010c78 <ce303_voltage+0x288>)
 8010bb4:	222f      	movs	r2, #47	; 0x2f
 8010bb6:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 8010bb8:	4b2f      	ldr	r3, [pc, #188]	; (8010c78 <ce303_voltage+0x288>)
 8010bba:	223f      	movs	r2, #63	; 0x3f
 8010bbc:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/100) + 0x30;
 8010bbe:	79fb      	ldrb	r3, [r7, #7]
 8010bc0:	4a2e      	ldr	r2, [pc, #184]	; (8010c7c <ce303_voltage+0x28c>)
 8010bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8010bc6:	095b      	lsrs	r3, r3, #5
 8010bc8:	b2db      	uxtb	r3, r3
 8010bca:	3330      	adds	r3, #48	; 0x30
 8010bcc:	b2da      	uxtb	r2, r3
 8010bce:	4b2a      	ldr	r3, [pc, #168]	; (8010c78 <ce303_voltage+0x288>)
 8010bd0:	709a      	strb	r2, [r3, #2]
		start_buf[3] = ((meter_id - (meter_id/100)*100)/10) + 0x30;
 8010bd2:	79fa      	ldrb	r2, [r7, #7]
 8010bd4:	79fb      	ldrb	r3, [r7, #7]
 8010bd6:	4929      	ldr	r1, [pc, #164]	; (8010c7c <ce303_voltage+0x28c>)
 8010bd8:	fba1 1303 	umull	r1, r3, r1, r3
 8010bdc:	095b      	lsrs	r3, r3, #5
 8010bde:	b2db      	uxtb	r3, r3
 8010be0:	4619      	mov	r1, r3
 8010be2:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8010be6:	fb03 f301 	mul.w	r3, r3, r1
 8010bea:	4413      	add	r3, r2
 8010bec:	4a24      	ldr	r2, [pc, #144]	; (8010c80 <ce303_voltage+0x290>)
 8010bee:	fb82 1203 	smull	r1, r2, r2, r3
 8010bf2:	1092      	asrs	r2, r2, #2
 8010bf4:	17db      	asrs	r3, r3, #31
 8010bf6:	1ad3      	subs	r3, r2, r3
 8010bf8:	b2db      	uxtb	r3, r3
 8010bfa:	3330      	adds	r3, #48	; 0x30
 8010bfc:	b2da      	uxtb	r2, r3
 8010bfe:	4b1e      	ldr	r3, [pc, #120]	; (8010c78 <ce303_voltage+0x288>)
 8010c00:	70da      	strb	r2, [r3, #3]
		start_buf[4] = ((meter_id - ((meter_id/100)*100)) - (((meter_id - ((meter_id/100)*100))/10)*10)) + 0x30 ;
 8010c02:	79fa      	ldrb	r2, [r7, #7]
 8010c04:	79fb      	ldrb	r3, [r7, #7]
 8010c06:	491d      	ldr	r1, [pc, #116]	; (8010c7c <ce303_voltage+0x28c>)
 8010c08:	fba1 1303 	umull	r1, r3, r1, r3
 8010c0c:	095b      	lsrs	r3, r3, #5
 8010c0e:	b2db      	uxtb	r3, r3
 8010c10:	4619      	mov	r1, r3
 8010c12:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8010c16:	fb03 f301 	mul.w	r3, r3, r1
 8010c1a:	441a      	add	r2, r3
 8010c1c:	4b18      	ldr	r3, [pc, #96]	; (8010c80 <ce303_voltage+0x290>)
 8010c1e:	fb83 1302 	smull	r1, r3, r3, r2
 8010c22:	1099      	asrs	r1, r3, #2
 8010c24:	17d3      	asrs	r3, r2, #31
 8010c26:	1ac9      	subs	r1, r1, r3
 8010c28:	460b      	mov	r3, r1
 8010c2a:	009b      	lsls	r3, r3, #2
 8010c2c:	440b      	add	r3, r1
 8010c2e:	005b      	lsls	r3, r3, #1
 8010c30:	1ad1      	subs	r1, r2, r3
 8010c32:	b2cb      	uxtb	r3, r1
 8010c34:	3330      	adds	r3, #48	; 0x30
 8010c36:	b2da      	uxtb	r2, r3
 8010c38:	4b0f      	ldr	r3, [pc, #60]	; (8010c78 <ce303_voltage+0x288>)
 8010c3a:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x21;
 8010c3c:	4b0e      	ldr	r3, [pc, #56]	; (8010c78 <ce303_voltage+0x288>)
 8010c3e:	2221      	movs	r2, #33	; 0x21
 8010c40:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0D;
 8010c42:	4b0d      	ldr	r3, [pc, #52]	; (8010c78 <ce303_voltage+0x288>)
 8010c44:	220d      	movs	r2, #13
 8010c46:	719a      	strb	r2, [r3, #6]
		start_buf[7] = 0x0A;
 8010c48:	4b0b      	ldr	r3, [pc, #44]	; (8010c78 <ce303_voltage+0x288>)
 8010c4a:	220a      	movs	r2, #10
 8010c4c:	71da      	strb	r2, [r3, #7]

		meter_rx_number = 0;
 8010c4e:	4b0d      	ldr	r3, [pc, #52]	; (8010c84 <ce303_voltage+0x294>)
 8010c50:	2200      	movs	r2, #0
 8010c52:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8010c54:	f7ff feb2 	bl	80109bc <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8010c58:	2201      	movs	r2, #1
 8010c5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010c5e:	480a      	ldr	r0, [pc, #40]	; (8010c88 <ce303_voltage+0x298>)
 8010c60:	f7f3 f8fe 	bl	8003e60 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 8); // передаем команду
 8010c64:	2208      	movs	r2, #8
 8010c66:	4904      	ldr	r1, [pc, #16]	; (8010c78 <ce303_voltage+0x288>)
 8010c68:	4808      	ldr	r0, [pc, #32]	; (8010c8c <ce303_voltage+0x29c>)
 8010c6a:	f7f6 fc17 	bl	800749c <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 8010c6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010c72:	f7f1 fd35 	bl	80026e0 <HAL_Delay>
 8010c76:	e080      	b.n	8010d7a <ce303_voltage+0x38a>
 8010c78:	20000014 	.word	0x20000014
 8010c7c:	51eb851f 	.word	0x51eb851f
 8010c80:	66666667 	.word	0x66666667
 8010c84:	20000865 	.word	0x20000865
 8010c88:	40021800 	.word	0x40021800
 8010c8c:	20009d00 	.word	0x20009d00
 8010c90:	cccccccd 	.word	0xcccccccd

	}
	else if( (meter_id>9)&&(meter_id<100) )
 8010c94:	79fb      	ldrb	r3, [r7, #7]
 8010c96:	2b09      	cmp	r3, #9
 8010c98:	d944      	bls.n	8010d24 <ce303_voltage+0x334>
 8010c9a:	79fb      	ldrb	r3, [r7, #7]
 8010c9c:	2b63      	cmp	r3, #99	; 0x63
 8010c9e:	d841      	bhi.n	8010d24 <ce303_voltage+0x334>
	{
		start_buf[0] = 0x2F;
 8010ca0:	4b90      	ldr	r3, [pc, #576]	; (8010ee4 <ce303_voltage+0x4f4>)
 8010ca2:	222f      	movs	r2, #47	; 0x2f
 8010ca4:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 8010ca6:	4b8f      	ldr	r3, [pc, #572]	; (8010ee4 <ce303_voltage+0x4f4>)
 8010ca8:	223f      	movs	r2, #63	; 0x3f
 8010caa:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/10) + 0x30;
 8010cac:	79fb      	ldrb	r3, [r7, #7]
 8010cae:	4a8e      	ldr	r2, [pc, #568]	; (8010ee8 <ce303_voltage+0x4f8>)
 8010cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8010cb4:	08db      	lsrs	r3, r3, #3
 8010cb6:	b2db      	uxtb	r3, r3
 8010cb8:	3330      	adds	r3, #48	; 0x30
 8010cba:	b2da      	uxtb	r2, r3
 8010cbc:	4b89      	ldr	r3, [pc, #548]	; (8010ee4 <ce303_voltage+0x4f4>)
 8010cbe:	709a      	strb	r2, [r3, #2]
		start_buf[3] = (meter_id - ((meter_id/10)*10)) + 0x30;
 8010cc0:	79fb      	ldrb	r3, [r7, #7]
 8010cc2:	4a89      	ldr	r2, [pc, #548]	; (8010ee8 <ce303_voltage+0x4f8>)
 8010cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8010cc8:	08db      	lsrs	r3, r3, #3
 8010cca:	b2db      	uxtb	r3, r3
 8010ccc:	461a      	mov	r2, r3
 8010cce:	0152      	lsls	r2, r2, #5
 8010cd0:	1ad2      	subs	r2, r2, r3
 8010cd2:	0092      	lsls	r2, r2, #2
 8010cd4:	1ad3      	subs	r3, r2, r3
 8010cd6:	005b      	lsls	r3, r3, #1
 8010cd8:	b2da      	uxtb	r2, r3
 8010cda:	79fb      	ldrb	r3, [r7, #7]
 8010cdc:	4413      	add	r3, r2
 8010cde:	b2db      	uxtb	r3, r3
 8010ce0:	3330      	adds	r3, #48	; 0x30
 8010ce2:	b2da      	uxtb	r2, r3
 8010ce4:	4b7f      	ldr	r3, [pc, #508]	; (8010ee4 <ce303_voltage+0x4f4>)
 8010ce6:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x21;
 8010ce8:	4b7e      	ldr	r3, [pc, #504]	; (8010ee4 <ce303_voltage+0x4f4>)
 8010cea:	2221      	movs	r2, #33	; 0x21
 8010cec:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0D;
 8010cee:	4b7d      	ldr	r3, [pc, #500]	; (8010ee4 <ce303_voltage+0x4f4>)
 8010cf0:	220d      	movs	r2, #13
 8010cf2:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0A;
 8010cf4:	4b7b      	ldr	r3, [pc, #492]	; (8010ee4 <ce303_voltage+0x4f4>)
 8010cf6:	220a      	movs	r2, #10
 8010cf8:	719a      	strb	r2, [r3, #6]

		meter_rx_number = 0;
 8010cfa:	4b7c      	ldr	r3, [pc, #496]	; (8010eec <ce303_voltage+0x4fc>)
 8010cfc:	2200      	movs	r2, #0
 8010cfe:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8010d00:	f7ff fe5c 	bl	80109bc <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8010d04:	2201      	movs	r2, #1
 8010d06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010d0a:	4879      	ldr	r0, [pc, #484]	; (8010ef0 <ce303_voltage+0x500>)
 8010d0c:	f7f3 f8a8 	bl	8003e60 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 7); // передаем команду
 8010d10:	2207      	movs	r2, #7
 8010d12:	4974      	ldr	r1, [pc, #464]	; (8010ee4 <ce303_voltage+0x4f4>)
 8010d14:	4877      	ldr	r0, [pc, #476]	; (8010ef4 <ce303_voltage+0x504>)
 8010d16:	f7f6 fbc1 	bl	800749c <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 8010d1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010d1e:	f7f1 fcdf 	bl	80026e0 <HAL_Delay>
 8010d22:	e02a      	b.n	8010d7a <ce303_voltage+0x38a>

	}
	else if( (meter_id>=0)&&(meter_id<10) )
 8010d24:	79fb      	ldrb	r3, [r7, #7]
 8010d26:	2b09      	cmp	r3, #9
 8010d28:	d827      	bhi.n	8010d7a <ce303_voltage+0x38a>
	{
		start_buf[0] = 0x2F;
 8010d2a:	4b6e      	ldr	r3, [pc, #440]	; (8010ee4 <ce303_voltage+0x4f4>)
 8010d2c:	222f      	movs	r2, #47	; 0x2f
 8010d2e:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 8010d30:	4b6c      	ldr	r3, [pc, #432]	; (8010ee4 <ce303_voltage+0x4f4>)
 8010d32:	223f      	movs	r2, #63	; 0x3f
 8010d34:	705a      	strb	r2, [r3, #1]
		start_buf[2] = meter_id + 0x30;
 8010d36:	79fb      	ldrb	r3, [r7, #7]
 8010d38:	3330      	adds	r3, #48	; 0x30
 8010d3a:	b2da      	uxtb	r2, r3
 8010d3c:	4b69      	ldr	r3, [pc, #420]	; (8010ee4 <ce303_voltage+0x4f4>)
 8010d3e:	709a      	strb	r2, [r3, #2]
		start_buf[3] = 0x21;
 8010d40:	4b68      	ldr	r3, [pc, #416]	; (8010ee4 <ce303_voltage+0x4f4>)
 8010d42:	2221      	movs	r2, #33	; 0x21
 8010d44:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x0D;
 8010d46:	4b67      	ldr	r3, [pc, #412]	; (8010ee4 <ce303_voltage+0x4f4>)
 8010d48:	220d      	movs	r2, #13
 8010d4a:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0A;
 8010d4c:	4b65      	ldr	r3, [pc, #404]	; (8010ee4 <ce303_voltage+0x4f4>)
 8010d4e:	220a      	movs	r2, #10
 8010d50:	715a      	strb	r2, [r3, #5]

		meter_rx_number = 0;
 8010d52:	4b66      	ldr	r3, [pc, #408]	; (8010eec <ce303_voltage+0x4fc>)
 8010d54:	2200      	movs	r2, #0
 8010d56:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8010d58:	f7ff fe30 	bl	80109bc <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8010d5c:	2201      	movs	r2, #1
 8010d5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010d62:	4863      	ldr	r0, [pc, #396]	; (8010ef0 <ce303_voltage+0x500>)
 8010d64:	f7f3 f87c 	bl	8003e60 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 6); // передаем команду
 8010d68:	2206      	movs	r2, #6
 8010d6a:	495e      	ldr	r1, [pc, #376]	; (8010ee4 <ce303_voltage+0x4f4>)
 8010d6c:	4861      	ldr	r0, [pc, #388]	; (8010ef4 <ce303_voltage+0x504>)
 8010d6e:	f7f6 fb95 	bl	800749c <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 8010d72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010d76:	f7f1 fcb3 	bl	80026e0 <HAL_Delay>
	}



	meter_rx_number = 0;
 8010d7a:	4b5c      	ldr	r3, [pc, #368]	; (8010eec <ce303_voltage+0x4fc>)
 8010d7c:	2200      	movs	r2, #0
 8010d7e:	701a      	strb	r2, [r3, #0]
	meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8010d80:	f7ff fe1c 	bl	80109bc <meter_rx_buffer_clear>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8010d84:	2201      	movs	r2, #1
 8010d86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010d8a:	4859      	ldr	r0, [pc, #356]	; (8010ef0 <ce303_voltage+0x500>)
 8010d8c:	f7f3 f868 	bl	8003e60 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart6, &password_buf[0], 6); // передаем команду
 8010d90:	2206      	movs	r2, #6
 8010d92:	4959      	ldr	r1, [pc, #356]	; (8010ef8 <ce303_voltage+0x508>)
 8010d94:	4857      	ldr	r0, [pc, #348]	; (8010ef4 <ce303_voltage+0x504>)
 8010d96:	f7f6 fb81 	bl	800749c <HAL_UART_Transmit_DMA>
	HAL_Delay(1000);
 8010d9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010d9e:	f7f1 fc9f 	bl	80026e0 <HAL_Delay>

	meter_rx_number = 0;
 8010da2:	4b52      	ldr	r3, [pc, #328]	; (8010eec <ce303_voltage+0x4fc>)
 8010da4:	2200      	movs	r2, #0
 8010da6:	701a      	strb	r2, [r3, #0]
	meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8010da8:	f7ff fe08 	bl	80109bc <meter_rx_buffer_clear>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8010dac:	2201      	movs	r2, #1
 8010dae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010db2:	484f      	ldr	r0, [pc, #316]	; (8010ef0 <ce303_voltage+0x500>)
 8010db4:	f7f3 f854 	bl	8003e60 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart6, &voltage_buf[0], 13); // передаем команду
 8010db8:	220d      	movs	r2, #13
 8010dba:	4950      	ldr	r1, [pc, #320]	; (8010efc <ce303_voltage+0x50c>)
 8010dbc:	484d      	ldr	r0, [pc, #308]	; (8010ef4 <ce303_voltage+0x504>)
 8010dbe:	f7f6 fb6d 	bl	800749c <HAL_UART_Transmit_DMA>
	HAL_Delay(1000);
 8010dc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010dc6:	f7f1 fc8b 	bl	80026e0 <HAL_Delay>

	voltage_a_state = 0; // обнуляем переменные состояния прочтения напряжения перед их прочтением
 8010dca:	2300      	movs	r3, #0
 8010dcc:	757b      	strb	r3, [r7, #21]
	voltage_b_state = 0;
 8010dce:	2300      	movs	r3, #0
 8010dd0:	753b      	strb	r3, [r7, #20]
	voltage_c_state = 0;
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	74fb      	strb	r3, [r7, #19]

	for(uint16_t i=0; i<256; i++)
 8010dd6:	2300      	movs	r3, #0
 8010dd8:	823b      	strh	r3, [r7, #16]
 8010dda:	f001 b82b 	b.w	8011e34 <ce303_voltage+0x1444>
	{

		if( (meter_rx_buffer[i] == 0x28) && (voltage_a_state==0) && (voltage_b_state==0) && (voltage_c_state==0) ) // 0х28 означает символ "(" в ASCII таблице
 8010dde:	8a3b      	ldrh	r3, [r7, #16]
 8010de0:	4a47      	ldr	r2, [pc, #284]	; (8010f00 <ce303_voltage+0x510>)
 8010de2:	5cd3      	ldrb	r3, [r2, r3]
 8010de4:	2b28      	cmp	r3, #40	; 0x28
 8010de6:	f040 82ba 	bne.w	801135e <ce303_voltage+0x96e>
 8010dea:	7d7b      	ldrb	r3, [r7, #21]
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	f040 82b6 	bne.w	801135e <ce303_voltage+0x96e>
 8010df2:	7d3b      	ldrb	r3, [r7, #20]
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	f040 82b2 	bne.w	801135e <ce303_voltage+0x96e>
 8010dfa:	7cfb      	ldrb	r3, [r7, #19]
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	f040 82ae 	bne.w	801135e <ce303_voltage+0x96e>
		{
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8010e02:	8a3b      	ldrh	r3, [r7, #16]
 8010e04:	3302      	adds	r3, #2
 8010e06:	4a3e      	ldr	r2, [pc, #248]	; (8010f00 <ce303_voltage+0x510>)
 8010e08:	5cd3      	ldrb	r3, [r2, r3]
 8010e0a:	2b2e      	cmp	r3, #46	; 0x2e
 8010e0c:	f040 80d8 	bne.w	8010fc0 <ce303_voltage+0x5d0>
			{
				temp = (uint16_t)(meter_rx_buffer[i+1]-0x30);
 8010e10:	8a3b      	ldrh	r3, [r7, #16]
 8010e12:	3301      	adds	r3, #1
 8010e14:	4a3a      	ldr	r2, [pc, #232]	; (8010f00 <ce303_voltage+0x510>)
 8010e16:	5cd3      	ldrb	r3, [r2, r3]
 8010e18:	b29b      	uxth	r3, r3
 8010e1a:	3b30      	subs	r3, #48	; 0x30
 8010e1c:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+4] == 0x29 ) // если 1 разряд после запятой
 8010e1e:	8a3b      	ldrh	r3, [r7, #16]
 8010e20:	3304      	adds	r3, #4
 8010e22:	4a37      	ldr	r2, [pc, #220]	; (8010f00 <ce303_voltage+0x510>)
 8010e24:	5cd3      	ldrb	r3, [r2, r3]
 8010e26:	2b29      	cmp	r3, #41	; 0x29
 8010e28:	d110      	bne.n	8010e4c <ce303_voltage+0x45c>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+3])-0x30)*100;
 8010e2a:	8a3b      	ldrh	r3, [r7, #16]
 8010e2c:	3303      	adds	r3, #3
 8010e2e:	4a34      	ldr	r2, [pc, #208]	; (8010f00 <ce303_voltage+0x510>)
 8010e30:	5cd3      	ldrb	r3, [r2, r3]
 8010e32:	3b30      	subs	r3, #48	; 0x30
 8010e34:	b29b      	uxth	r3, r3
 8010e36:	461a      	mov	r2, r3
 8010e38:	0092      	lsls	r2, r2, #2
 8010e3a:	4413      	add	r3, r2
 8010e3c:	461a      	mov	r2, r3
 8010e3e:	0091      	lsls	r1, r2, #2
 8010e40:	461a      	mov	r2, r3
 8010e42:	460b      	mov	r3, r1
 8010e44:	4413      	add	r3, r2
 8010e46:	009b      	lsls	r3, r3, #2
 8010e48:	82fb      	strh	r3, [r7, #22]
 8010e4a:	e081      	b.n	8010f50 <ce303_voltage+0x560>
				}
				else if( meter_rx_buffer[i+5] == 0x29 ) // если 2 разряда после запятой
 8010e4c:	8a3b      	ldrh	r3, [r7, #16]
 8010e4e:	3305      	adds	r3, #5
 8010e50:	4a2b      	ldr	r2, [pc, #172]	; (8010f00 <ce303_voltage+0x510>)
 8010e52:	5cd3      	ldrb	r3, [r2, r3]
 8010e54:	2b29      	cmp	r3, #41	; 0x29
 8010e56:	d117      	bne.n	8010e88 <ce303_voltage+0x498>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30))*10;
 8010e58:	8a3b      	ldrh	r3, [r7, #16]
 8010e5a:	3303      	adds	r3, #3
 8010e5c:	4a28      	ldr	r2, [pc, #160]	; (8010f00 <ce303_voltage+0x510>)
 8010e5e:	5cd3      	ldrb	r3, [r2, r3]
 8010e60:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8010e64:	4613      	mov	r3, r2
 8010e66:	009b      	lsls	r3, r3, #2
 8010e68:	4413      	add	r3, r2
 8010e6a:	005b      	lsls	r3, r3, #1
 8010e6c:	4619      	mov	r1, r3
 8010e6e:	8a3b      	ldrh	r3, [r7, #16]
 8010e70:	3304      	adds	r3, #4
 8010e72:	4a23      	ldr	r2, [pc, #140]	; (8010f00 <ce303_voltage+0x510>)
 8010e74:	5cd3      	ldrb	r3, [r2, r3]
 8010e76:	3b30      	subs	r3, #48	; 0x30
 8010e78:	440b      	add	r3, r1
 8010e7a:	b29b      	uxth	r3, r3
 8010e7c:	461a      	mov	r2, r3
 8010e7e:	0092      	lsls	r2, r2, #2
 8010e80:	4413      	add	r3, r2
 8010e82:	005b      	lsls	r3, r3, #1
 8010e84:	82fb      	strh	r3, [r7, #22]
 8010e86:	e063      	b.n	8010f50 <ce303_voltage+0x560>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 3 разряда после запятой
 8010e88:	8a3b      	ldrh	r3, [r7, #16]
 8010e8a:	3306      	adds	r3, #6
 8010e8c:	4a1c      	ldr	r2, [pc, #112]	; (8010f00 <ce303_voltage+0x510>)
 8010e8e:	5cd3      	ldrb	r3, [r2, r3]
 8010e90:	2b29      	cmp	r3, #41	; 0x29
 8010e92:	d137      	bne.n	8010f04 <ce303_voltage+0x514>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 8010e94:	8a3b      	ldrh	r3, [r7, #16]
 8010e96:	3303      	adds	r3, #3
 8010e98:	4a19      	ldr	r2, [pc, #100]	; (8010f00 <ce303_voltage+0x510>)
 8010e9a:	5cd3      	ldrb	r3, [r2, r3]
 8010e9c:	3b30      	subs	r3, #48	; 0x30
 8010e9e:	b29b      	uxth	r3, r3
 8010ea0:	461a      	mov	r2, r3
 8010ea2:	0092      	lsls	r2, r2, #2
 8010ea4:	4413      	add	r3, r2
 8010ea6:	461a      	mov	r2, r3
 8010ea8:	0091      	lsls	r1, r2, #2
 8010eaa:	461a      	mov	r2, r3
 8010eac:	460b      	mov	r3, r1
 8010eae:	4413      	add	r3, r2
 8010eb0:	009b      	lsls	r3, r3, #2
 8010eb2:	b29a      	uxth	r2, r3
 8010eb4:	8a3b      	ldrh	r3, [r7, #16]
 8010eb6:	3304      	adds	r3, #4
 8010eb8:	4911      	ldr	r1, [pc, #68]	; (8010f00 <ce303_voltage+0x510>)
 8010eba:	5ccb      	ldrb	r3, [r1, r3]
 8010ebc:	3b30      	subs	r3, #48	; 0x30
 8010ebe:	b29b      	uxth	r3, r3
 8010ec0:	4619      	mov	r1, r3
 8010ec2:	0089      	lsls	r1, r1, #2
 8010ec4:	440b      	add	r3, r1
 8010ec6:	005b      	lsls	r3, r3, #1
 8010ec8:	b29b      	uxth	r3, r3
 8010eca:	4413      	add	r3, r2
 8010ecc:	b29a      	uxth	r2, r3
 8010ece:	8a3b      	ldrh	r3, [r7, #16]
 8010ed0:	3305      	adds	r3, #5
 8010ed2:	490b      	ldr	r1, [pc, #44]	; (8010f00 <ce303_voltage+0x510>)
 8010ed4:	5ccb      	ldrb	r3, [r1, r3]
 8010ed6:	b29b      	uxth	r3, r3
 8010ed8:	4413      	add	r3, r2
 8010eda:	b29b      	uxth	r3, r3
 8010edc:	3b30      	subs	r3, #48	; 0x30
 8010ede:	82fb      	strh	r3, [r7, #22]
 8010ee0:	e036      	b.n	8010f50 <ce303_voltage+0x560>
 8010ee2:	bf00      	nop
 8010ee4:	20000014 	.word	0x20000014
 8010ee8:	cccccccd 	.word	0xcccccccd
 8010eec:	20000865 	.word	0x20000865
 8010ef0:	40021800 	.word	0x40021800
 8010ef4:	20009d00 	.word	0x20009d00
 8010ef8:	2000001c 	.word	0x2000001c
 8010efc:	20000024 	.word	0x20000024
 8010f00:	2000994c 	.word	0x2000994c
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 8010f04:	8a3b      	ldrh	r3, [r7, #16]
 8010f06:	3303      	adds	r3, #3
 8010f08:	4a9b      	ldr	r2, [pc, #620]	; (8011178 <ce303_voltage+0x788>)
 8010f0a:	5cd3      	ldrb	r3, [r2, r3]
 8010f0c:	3b30      	subs	r3, #48	; 0x30
 8010f0e:	b29b      	uxth	r3, r3
 8010f10:	461a      	mov	r2, r3
 8010f12:	0092      	lsls	r2, r2, #2
 8010f14:	4413      	add	r3, r2
 8010f16:	461a      	mov	r2, r3
 8010f18:	0091      	lsls	r1, r2, #2
 8010f1a:	461a      	mov	r2, r3
 8010f1c:	460b      	mov	r3, r1
 8010f1e:	4413      	add	r3, r2
 8010f20:	009b      	lsls	r3, r3, #2
 8010f22:	b29a      	uxth	r2, r3
 8010f24:	8a3b      	ldrh	r3, [r7, #16]
 8010f26:	3304      	adds	r3, #4
 8010f28:	4993      	ldr	r1, [pc, #588]	; (8011178 <ce303_voltage+0x788>)
 8010f2a:	5ccb      	ldrb	r3, [r1, r3]
 8010f2c:	3b30      	subs	r3, #48	; 0x30
 8010f2e:	b29b      	uxth	r3, r3
 8010f30:	4619      	mov	r1, r3
 8010f32:	0089      	lsls	r1, r1, #2
 8010f34:	440b      	add	r3, r1
 8010f36:	005b      	lsls	r3, r3, #1
 8010f38:	b29b      	uxth	r3, r3
 8010f3a:	4413      	add	r3, r2
 8010f3c:	b29a      	uxth	r2, r3
 8010f3e:	8a3b      	ldrh	r3, [r7, #16]
 8010f40:	3305      	adds	r3, #5
 8010f42:	498d      	ldr	r1, [pc, #564]	; (8011178 <ce303_voltage+0x788>)
 8010f44:	5ccb      	ldrb	r3, [r1, r3]
 8010f46:	b29b      	uxth	r3, r3
 8010f48:	4413      	add	r3, r2
 8010f4a:	b29b      	uxth	r3, r3
 8010f4c:	3b30      	subs	r3, #48	; 0x30
 8010f4e:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8010f50:	4b8a      	ldr	r3, [pc, #552]	; (801117c <ce303_voltage+0x78c>)
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	f04f 31ff 	mov.w	r1, #4294967295
 8010f58:	4618      	mov	r0, r3
 8010f5a:	f7f7 fcdf 	bl	800891c <osMutexWait>
				fm25v02_write(2*CE_303_VOLT_A_REG, ((uint8_t)(temp>>8)) );
 8010f5e:	89fb      	ldrh	r3, [r7, #14]
 8010f60:	0a1b      	lsrs	r3, r3, #8
 8010f62:	b29b      	uxth	r3, r3
 8010f64:	b2db      	uxtb	r3, r3
 8010f66:	4619      	mov	r1, r3
 8010f68:	f242 004a 	movw	r0, #8266	; 0x204a
 8010f6c:	f005 fe98 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_A_REG+1, ((uint8_t)(temp&0x00FF)) );
 8010f70:	89fb      	ldrh	r3, [r7, #14]
 8010f72:	b2db      	uxtb	r3, r3
 8010f74:	4619      	mov	r1, r3
 8010f76:	f242 004b 	movw	r0, #8267	; 0x204b
 8010f7a:	f005 fe91 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_A_REG, ((uint8_t)(temp_mil>>8)) );
 8010f7e:	8afb      	ldrh	r3, [r7, #22]
 8010f80:	0a1b      	lsrs	r3, r3, #8
 8010f82:	b29b      	uxth	r3, r3
 8010f84:	b2db      	uxtb	r3, r3
 8010f86:	4619      	mov	r1, r3
 8010f88:	f242 0050 	movw	r0, #8272	; 0x2050
 8010f8c:	f005 fe88 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_A_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 8010f90:	8afb      	ldrh	r3, [r7, #22]
 8010f92:	b2db      	uxtb	r3, r3
 8010f94:	4619      	mov	r1, r3
 8010f96:	f242 0051 	movw	r0, #8273	; 0x2051
 8010f9a:	f005 fe81 	bl	8016ca0 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8010f9e:	4b77      	ldr	r3, [pc, #476]	; (801117c <ce303_voltage+0x78c>)
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	4618      	mov	r0, r3
 8010fa4:	f7f7 fd08 	bl	80089b8 <osMutexRelease>
				status_registers.ce303_volt_a_reg = temp;
 8010fa8:	4a75      	ldr	r2, [pc, #468]	; (8011180 <ce303_voltage+0x790>)
 8010faa:	89fb      	ldrh	r3, [r7, #14]
 8010fac:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a
				status_registers.ce303_volt_mil_a_reg =  temp_mil;
 8010fb0:	4a73      	ldr	r2, [pc, #460]	; (8011180 <ce303_voltage+0x790>)
 8010fb2:	8afb      	ldrh	r3, [r7, #22]
 8010fb4:	f8a2 3050 	strh.w	r3, [r2, #80]	; 0x50
				voltage_a_state = 1;
 8010fb8:	2301      	movs	r3, #1
 8010fba:	757b      	strb	r3, [r7, #21]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8010fbc:	f000 bf34 	b.w	8011e28 <ce303_voltage+0x1438>
			}
			else if( meter_rx_buffer[i+3] == 0x2E)
 8010fc0:	8a3b      	ldrh	r3, [r7, #16]
 8010fc2:	3303      	adds	r3, #3
 8010fc4:	4a6c      	ldr	r2, [pc, #432]	; (8011178 <ce303_voltage+0x788>)
 8010fc6:	5cd3      	ldrb	r3, [r2, r3]
 8010fc8:	2b2e      	cmp	r3, #46	; 0x2e
 8010fca:	f040 80db 	bne.w	8011184 <ce303_voltage+0x794>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+2])-0x30);
 8010fce:	8a3b      	ldrh	r3, [r7, #16]
 8010fd0:	3301      	adds	r3, #1
 8010fd2:	4a69      	ldr	r2, [pc, #420]	; (8011178 <ce303_voltage+0x788>)
 8010fd4:	5cd3      	ldrb	r3, [r2, r3]
 8010fd6:	3b30      	subs	r3, #48	; 0x30
 8010fd8:	b29b      	uxth	r3, r3
 8010fda:	461a      	mov	r2, r3
 8010fdc:	0092      	lsls	r2, r2, #2
 8010fde:	4413      	add	r3, r2
 8010fe0:	005b      	lsls	r3, r3, #1
 8010fe2:	b29a      	uxth	r2, r3
 8010fe4:	8a3b      	ldrh	r3, [r7, #16]
 8010fe6:	3302      	adds	r3, #2
 8010fe8:	4963      	ldr	r1, [pc, #396]	; (8011178 <ce303_voltage+0x788>)
 8010fea:	5ccb      	ldrb	r3, [r1, r3]
 8010fec:	b29b      	uxth	r3, r3
 8010fee:	4413      	add	r3, r2
 8010ff0:	b29b      	uxth	r3, r3
 8010ff2:	3b30      	subs	r3, #48	; 0x30
 8010ff4:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+5] == 0x29 ) // если 1 разряд после запятой
 8010ff6:	8a3b      	ldrh	r3, [r7, #16]
 8010ff8:	3305      	adds	r3, #5
 8010ffa:	4a5f      	ldr	r2, [pc, #380]	; (8011178 <ce303_voltage+0x788>)
 8010ffc:	5cd3      	ldrb	r3, [r2, r3]
 8010ffe:	2b29      	cmp	r3, #41	; 0x29
 8011000:	d110      	bne.n	8011024 <ce303_voltage+0x634>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+4])-0x30)*100;
 8011002:	8a3b      	ldrh	r3, [r7, #16]
 8011004:	3304      	adds	r3, #4
 8011006:	4a5c      	ldr	r2, [pc, #368]	; (8011178 <ce303_voltage+0x788>)
 8011008:	5cd3      	ldrb	r3, [r2, r3]
 801100a:	3b30      	subs	r3, #48	; 0x30
 801100c:	b29b      	uxth	r3, r3
 801100e:	461a      	mov	r2, r3
 8011010:	0092      	lsls	r2, r2, #2
 8011012:	4413      	add	r3, r2
 8011014:	461a      	mov	r2, r3
 8011016:	0091      	lsls	r1, r2, #2
 8011018:	461a      	mov	r2, r3
 801101a:	460b      	mov	r3, r1
 801101c:	4413      	add	r3, r2
 801101e:	009b      	lsls	r3, r3, #2
 8011020:	82fb      	strh	r3, [r7, #22]
 8011022:	e070      	b.n	8011106 <ce303_voltage+0x716>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 2 разряда после запятой
 8011024:	8a3b      	ldrh	r3, [r7, #16]
 8011026:	3306      	adds	r3, #6
 8011028:	4a53      	ldr	r2, [pc, #332]	; (8011178 <ce303_voltage+0x788>)
 801102a:	5cd3      	ldrb	r3, [r2, r3]
 801102c:	2b29      	cmp	r3, #41	; 0x29
 801102e:	d117      	bne.n	8011060 <ce303_voltage+0x670>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30))*10;
 8011030:	8a3b      	ldrh	r3, [r7, #16]
 8011032:	3304      	adds	r3, #4
 8011034:	4a50      	ldr	r2, [pc, #320]	; (8011178 <ce303_voltage+0x788>)
 8011036:	5cd3      	ldrb	r3, [r2, r3]
 8011038:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801103c:	4613      	mov	r3, r2
 801103e:	009b      	lsls	r3, r3, #2
 8011040:	4413      	add	r3, r2
 8011042:	005b      	lsls	r3, r3, #1
 8011044:	4619      	mov	r1, r3
 8011046:	8a3b      	ldrh	r3, [r7, #16]
 8011048:	3305      	adds	r3, #5
 801104a:	4a4b      	ldr	r2, [pc, #300]	; (8011178 <ce303_voltage+0x788>)
 801104c:	5cd3      	ldrb	r3, [r2, r3]
 801104e:	3b30      	subs	r3, #48	; 0x30
 8011050:	440b      	add	r3, r1
 8011052:	b29b      	uxth	r3, r3
 8011054:	461a      	mov	r2, r3
 8011056:	0092      	lsls	r2, r2, #2
 8011058:	4413      	add	r3, r2
 801105a:	005b      	lsls	r3, r3, #1
 801105c:	82fb      	strh	r3, [r7, #22]
 801105e:	e052      	b.n	8011106 <ce303_voltage+0x716>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 3 разряда после запятой
 8011060:	8a3b      	ldrh	r3, [r7, #16]
 8011062:	3307      	adds	r3, #7
 8011064:	4a44      	ldr	r2, [pc, #272]	; (8011178 <ce303_voltage+0x788>)
 8011066:	5cd3      	ldrb	r3, [r2, r3]
 8011068:	2b29      	cmp	r3, #41	; 0x29
 801106a:	d126      	bne.n	80110ba <ce303_voltage+0x6ca>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 801106c:	8a3b      	ldrh	r3, [r7, #16]
 801106e:	3304      	adds	r3, #4
 8011070:	4a41      	ldr	r2, [pc, #260]	; (8011178 <ce303_voltage+0x788>)
 8011072:	5cd3      	ldrb	r3, [r2, r3]
 8011074:	3b30      	subs	r3, #48	; 0x30
 8011076:	b29b      	uxth	r3, r3
 8011078:	461a      	mov	r2, r3
 801107a:	0092      	lsls	r2, r2, #2
 801107c:	4413      	add	r3, r2
 801107e:	461a      	mov	r2, r3
 8011080:	0091      	lsls	r1, r2, #2
 8011082:	461a      	mov	r2, r3
 8011084:	460b      	mov	r3, r1
 8011086:	4413      	add	r3, r2
 8011088:	009b      	lsls	r3, r3, #2
 801108a:	b29a      	uxth	r2, r3
 801108c:	8a3b      	ldrh	r3, [r7, #16]
 801108e:	3305      	adds	r3, #5
 8011090:	4939      	ldr	r1, [pc, #228]	; (8011178 <ce303_voltage+0x788>)
 8011092:	5ccb      	ldrb	r3, [r1, r3]
 8011094:	3b30      	subs	r3, #48	; 0x30
 8011096:	b29b      	uxth	r3, r3
 8011098:	4619      	mov	r1, r3
 801109a:	0089      	lsls	r1, r1, #2
 801109c:	440b      	add	r3, r1
 801109e:	005b      	lsls	r3, r3, #1
 80110a0:	b29b      	uxth	r3, r3
 80110a2:	4413      	add	r3, r2
 80110a4:	b29a      	uxth	r2, r3
 80110a6:	8a3b      	ldrh	r3, [r7, #16]
 80110a8:	3306      	adds	r3, #6
 80110aa:	4933      	ldr	r1, [pc, #204]	; (8011178 <ce303_voltage+0x788>)
 80110ac:	5ccb      	ldrb	r3, [r1, r3]
 80110ae:	b29b      	uxth	r3, r3
 80110b0:	4413      	add	r3, r2
 80110b2:	b29b      	uxth	r3, r3
 80110b4:	3b30      	subs	r3, #48	; 0x30
 80110b6:	82fb      	strh	r3, [r7, #22]
 80110b8:	e025      	b.n	8011106 <ce303_voltage+0x716>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 80110ba:	8a3b      	ldrh	r3, [r7, #16]
 80110bc:	3304      	adds	r3, #4
 80110be:	4a2e      	ldr	r2, [pc, #184]	; (8011178 <ce303_voltage+0x788>)
 80110c0:	5cd3      	ldrb	r3, [r2, r3]
 80110c2:	3b30      	subs	r3, #48	; 0x30
 80110c4:	b29b      	uxth	r3, r3
 80110c6:	461a      	mov	r2, r3
 80110c8:	0092      	lsls	r2, r2, #2
 80110ca:	4413      	add	r3, r2
 80110cc:	461a      	mov	r2, r3
 80110ce:	0091      	lsls	r1, r2, #2
 80110d0:	461a      	mov	r2, r3
 80110d2:	460b      	mov	r3, r1
 80110d4:	4413      	add	r3, r2
 80110d6:	009b      	lsls	r3, r3, #2
 80110d8:	b29a      	uxth	r2, r3
 80110da:	8a3b      	ldrh	r3, [r7, #16]
 80110dc:	3305      	adds	r3, #5
 80110de:	4926      	ldr	r1, [pc, #152]	; (8011178 <ce303_voltage+0x788>)
 80110e0:	5ccb      	ldrb	r3, [r1, r3]
 80110e2:	3b30      	subs	r3, #48	; 0x30
 80110e4:	b29b      	uxth	r3, r3
 80110e6:	4619      	mov	r1, r3
 80110e8:	0089      	lsls	r1, r1, #2
 80110ea:	440b      	add	r3, r1
 80110ec:	005b      	lsls	r3, r3, #1
 80110ee:	b29b      	uxth	r3, r3
 80110f0:	4413      	add	r3, r2
 80110f2:	b29a      	uxth	r2, r3
 80110f4:	8a3b      	ldrh	r3, [r7, #16]
 80110f6:	3306      	adds	r3, #6
 80110f8:	491f      	ldr	r1, [pc, #124]	; (8011178 <ce303_voltage+0x788>)
 80110fa:	5ccb      	ldrb	r3, [r1, r3]
 80110fc:	b29b      	uxth	r3, r3
 80110fe:	4413      	add	r3, r2
 8011100:	b29b      	uxth	r3, r3
 8011102:	3b30      	subs	r3, #48	; 0x30
 8011104:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8011106:	4b1d      	ldr	r3, [pc, #116]	; (801117c <ce303_voltage+0x78c>)
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	f04f 31ff 	mov.w	r1, #4294967295
 801110e:	4618      	mov	r0, r3
 8011110:	f7f7 fc04 	bl	800891c <osMutexWait>
				fm25v02_write(2*CE_303_VOLT_A_REG, ((uint8_t)(temp>>8)) );
 8011114:	89fb      	ldrh	r3, [r7, #14]
 8011116:	0a1b      	lsrs	r3, r3, #8
 8011118:	b29b      	uxth	r3, r3
 801111a:	b2db      	uxtb	r3, r3
 801111c:	4619      	mov	r1, r3
 801111e:	f242 004a 	movw	r0, #8266	; 0x204a
 8011122:	f005 fdbd 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_A_REG+1, ((uint8_t)(temp&0x00FF)) );
 8011126:	89fb      	ldrh	r3, [r7, #14]
 8011128:	b2db      	uxtb	r3, r3
 801112a:	4619      	mov	r1, r3
 801112c:	f242 004b 	movw	r0, #8267	; 0x204b
 8011130:	f005 fdb6 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_A_REG, ((uint8_t)(temp_mil>>8)) );
 8011134:	8afb      	ldrh	r3, [r7, #22]
 8011136:	0a1b      	lsrs	r3, r3, #8
 8011138:	b29b      	uxth	r3, r3
 801113a:	b2db      	uxtb	r3, r3
 801113c:	4619      	mov	r1, r3
 801113e:	f242 0050 	movw	r0, #8272	; 0x2050
 8011142:	f005 fdad 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_A_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 8011146:	8afb      	ldrh	r3, [r7, #22]
 8011148:	b2db      	uxtb	r3, r3
 801114a:	4619      	mov	r1, r3
 801114c:	f242 0051 	movw	r0, #8273	; 0x2051
 8011150:	f005 fda6 	bl	8016ca0 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8011154:	4b09      	ldr	r3, [pc, #36]	; (801117c <ce303_voltage+0x78c>)
 8011156:	681b      	ldr	r3, [r3, #0]
 8011158:	4618      	mov	r0, r3
 801115a:	f7f7 fc2d 	bl	80089b8 <osMutexRelease>
				status_registers.ce303_volt_a_reg = temp;
 801115e:	4a08      	ldr	r2, [pc, #32]	; (8011180 <ce303_voltage+0x790>)
 8011160:	89fb      	ldrh	r3, [r7, #14]
 8011162:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a
				status_registers.ce303_volt_mil_a_reg = temp_mil;
 8011166:	4a06      	ldr	r2, [pc, #24]	; (8011180 <ce303_voltage+0x790>)
 8011168:	8afb      	ldrh	r3, [r7, #22]
 801116a:	f8a2 3050 	strh.w	r3, [r2, #80]	; 0x50
				voltage_a_state = 1;
 801116e:	2301      	movs	r3, #1
 8011170:	757b      	strb	r3, [r7, #21]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8011172:	f000 be59 	b.w	8011e28 <ce303_voltage+0x1438>
 8011176:	bf00      	nop
 8011178:	2000994c 	.word	0x2000994c
 801117c:	20009af8 	.word	0x20009af8
 8011180:	2000a174 	.word	0x2000a174
			}

			else if( meter_rx_buffer[i+4] == 0x2E)
 8011184:	8a3b      	ldrh	r3, [r7, #16]
 8011186:	3304      	adds	r3, #4
 8011188:	4a9f      	ldr	r2, [pc, #636]	; (8011408 <ce303_voltage+0xa18>)
 801118a:	5cd3      	ldrb	r3, [r2, r3]
 801118c:	2b2e      	cmp	r3, #46	; 0x2e
 801118e:	f040 864b 	bne.w	8011e28 <ce303_voltage+0x1438>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+3])-0x30);
 8011192:	8a3b      	ldrh	r3, [r7, #16]
 8011194:	3301      	adds	r3, #1
 8011196:	4a9c      	ldr	r2, [pc, #624]	; (8011408 <ce303_voltage+0xa18>)
 8011198:	5cd3      	ldrb	r3, [r2, r3]
 801119a:	3b30      	subs	r3, #48	; 0x30
 801119c:	b29b      	uxth	r3, r3
 801119e:	461a      	mov	r2, r3
 80111a0:	0092      	lsls	r2, r2, #2
 80111a2:	4413      	add	r3, r2
 80111a4:	461a      	mov	r2, r3
 80111a6:	0091      	lsls	r1, r2, #2
 80111a8:	461a      	mov	r2, r3
 80111aa:	460b      	mov	r3, r1
 80111ac:	4413      	add	r3, r2
 80111ae:	009b      	lsls	r3, r3, #2
 80111b0:	b29a      	uxth	r2, r3
 80111b2:	8a3b      	ldrh	r3, [r7, #16]
 80111b4:	3302      	adds	r3, #2
 80111b6:	4994      	ldr	r1, [pc, #592]	; (8011408 <ce303_voltage+0xa18>)
 80111b8:	5ccb      	ldrb	r3, [r1, r3]
 80111ba:	3b30      	subs	r3, #48	; 0x30
 80111bc:	b29b      	uxth	r3, r3
 80111be:	4619      	mov	r1, r3
 80111c0:	0089      	lsls	r1, r1, #2
 80111c2:	440b      	add	r3, r1
 80111c4:	005b      	lsls	r3, r3, #1
 80111c6:	b29b      	uxth	r3, r3
 80111c8:	4413      	add	r3, r2
 80111ca:	b29a      	uxth	r2, r3
 80111cc:	8a3b      	ldrh	r3, [r7, #16]
 80111ce:	3303      	adds	r3, #3
 80111d0:	498d      	ldr	r1, [pc, #564]	; (8011408 <ce303_voltage+0xa18>)
 80111d2:	5ccb      	ldrb	r3, [r1, r3]
 80111d4:	b29b      	uxth	r3, r3
 80111d6:	4413      	add	r3, r2
 80111d8:	b29b      	uxth	r3, r3
 80111da:	3b30      	subs	r3, #48	; 0x30
 80111dc:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+6] == 0x29 ) // если 1 разряд после запятой
 80111de:	8a3b      	ldrh	r3, [r7, #16]
 80111e0:	3306      	adds	r3, #6
 80111e2:	4a89      	ldr	r2, [pc, #548]	; (8011408 <ce303_voltage+0xa18>)
 80111e4:	5cd3      	ldrb	r3, [r2, r3]
 80111e6:	2b29      	cmp	r3, #41	; 0x29
 80111e8:	d110      	bne.n	801120c <ce303_voltage+0x81c>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+5])-0x30)*100;
 80111ea:	8a3b      	ldrh	r3, [r7, #16]
 80111ec:	3305      	adds	r3, #5
 80111ee:	4a86      	ldr	r2, [pc, #536]	; (8011408 <ce303_voltage+0xa18>)
 80111f0:	5cd3      	ldrb	r3, [r2, r3]
 80111f2:	3b30      	subs	r3, #48	; 0x30
 80111f4:	b29b      	uxth	r3, r3
 80111f6:	461a      	mov	r2, r3
 80111f8:	0092      	lsls	r2, r2, #2
 80111fa:	4413      	add	r3, r2
 80111fc:	461a      	mov	r2, r3
 80111fe:	0091      	lsls	r1, r2, #2
 8011200:	461a      	mov	r2, r3
 8011202:	460b      	mov	r3, r1
 8011204:	4413      	add	r3, r2
 8011206:	009b      	lsls	r3, r3, #2
 8011208:	82fb      	strh	r3, [r7, #22]
 801120a:	e070      	b.n	80112ee <ce303_voltage+0x8fe>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 2 разряда после запятой
 801120c:	8a3b      	ldrh	r3, [r7, #16]
 801120e:	3307      	adds	r3, #7
 8011210:	4a7d      	ldr	r2, [pc, #500]	; (8011408 <ce303_voltage+0xa18>)
 8011212:	5cd3      	ldrb	r3, [r2, r3]
 8011214:	2b29      	cmp	r3, #41	; 0x29
 8011216:	d117      	bne.n	8011248 <ce303_voltage+0x858>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30))*10;
 8011218:	8a3b      	ldrh	r3, [r7, #16]
 801121a:	3305      	adds	r3, #5
 801121c:	4a7a      	ldr	r2, [pc, #488]	; (8011408 <ce303_voltage+0xa18>)
 801121e:	5cd3      	ldrb	r3, [r2, r3]
 8011220:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8011224:	4613      	mov	r3, r2
 8011226:	009b      	lsls	r3, r3, #2
 8011228:	4413      	add	r3, r2
 801122a:	005b      	lsls	r3, r3, #1
 801122c:	4619      	mov	r1, r3
 801122e:	8a3b      	ldrh	r3, [r7, #16]
 8011230:	3306      	adds	r3, #6
 8011232:	4a75      	ldr	r2, [pc, #468]	; (8011408 <ce303_voltage+0xa18>)
 8011234:	5cd3      	ldrb	r3, [r2, r3]
 8011236:	3b30      	subs	r3, #48	; 0x30
 8011238:	440b      	add	r3, r1
 801123a:	b29b      	uxth	r3, r3
 801123c:	461a      	mov	r2, r3
 801123e:	0092      	lsls	r2, r2, #2
 8011240:	4413      	add	r3, r2
 8011242:	005b      	lsls	r3, r3, #1
 8011244:	82fb      	strh	r3, [r7, #22]
 8011246:	e052      	b.n	80112ee <ce303_voltage+0x8fe>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 3 разряда после запятой
 8011248:	8a3b      	ldrh	r3, [r7, #16]
 801124a:	3308      	adds	r3, #8
 801124c:	4a6e      	ldr	r2, [pc, #440]	; (8011408 <ce303_voltage+0xa18>)
 801124e:	5cd3      	ldrb	r3, [r2, r3]
 8011250:	2b29      	cmp	r3, #41	; 0x29
 8011252:	d126      	bne.n	80112a2 <ce303_voltage+0x8b2>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 8011254:	8a3b      	ldrh	r3, [r7, #16]
 8011256:	3305      	adds	r3, #5
 8011258:	4a6b      	ldr	r2, [pc, #428]	; (8011408 <ce303_voltage+0xa18>)
 801125a:	5cd3      	ldrb	r3, [r2, r3]
 801125c:	3b30      	subs	r3, #48	; 0x30
 801125e:	b29b      	uxth	r3, r3
 8011260:	461a      	mov	r2, r3
 8011262:	0092      	lsls	r2, r2, #2
 8011264:	4413      	add	r3, r2
 8011266:	461a      	mov	r2, r3
 8011268:	0091      	lsls	r1, r2, #2
 801126a:	461a      	mov	r2, r3
 801126c:	460b      	mov	r3, r1
 801126e:	4413      	add	r3, r2
 8011270:	009b      	lsls	r3, r3, #2
 8011272:	b29a      	uxth	r2, r3
 8011274:	8a3b      	ldrh	r3, [r7, #16]
 8011276:	3306      	adds	r3, #6
 8011278:	4963      	ldr	r1, [pc, #396]	; (8011408 <ce303_voltage+0xa18>)
 801127a:	5ccb      	ldrb	r3, [r1, r3]
 801127c:	3b30      	subs	r3, #48	; 0x30
 801127e:	b29b      	uxth	r3, r3
 8011280:	4619      	mov	r1, r3
 8011282:	0089      	lsls	r1, r1, #2
 8011284:	440b      	add	r3, r1
 8011286:	005b      	lsls	r3, r3, #1
 8011288:	b29b      	uxth	r3, r3
 801128a:	4413      	add	r3, r2
 801128c:	b29a      	uxth	r2, r3
 801128e:	8a3b      	ldrh	r3, [r7, #16]
 8011290:	3307      	adds	r3, #7
 8011292:	495d      	ldr	r1, [pc, #372]	; (8011408 <ce303_voltage+0xa18>)
 8011294:	5ccb      	ldrb	r3, [r1, r3]
 8011296:	b29b      	uxth	r3, r3
 8011298:	4413      	add	r3, r2
 801129a:	b29b      	uxth	r3, r3
 801129c:	3b30      	subs	r3, #48	; 0x30
 801129e:	82fb      	strh	r3, [r7, #22]
 80112a0:	e025      	b.n	80112ee <ce303_voltage+0x8fe>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 80112a2:	8a3b      	ldrh	r3, [r7, #16]
 80112a4:	3305      	adds	r3, #5
 80112a6:	4a58      	ldr	r2, [pc, #352]	; (8011408 <ce303_voltage+0xa18>)
 80112a8:	5cd3      	ldrb	r3, [r2, r3]
 80112aa:	3b30      	subs	r3, #48	; 0x30
 80112ac:	b29b      	uxth	r3, r3
 80112ae:	461a      	mov	r2, r3
 80112b0:	0092      	lsls	r2, r2, #2
 80112b2:	4413      	add	r3, r2
 80112b4:	461a      	mov	r2, r3
 80112b6:	0091      	lsls	r1, r2, #2
 80112b8:	461a      	mov	r2, r3
 80112ba:	460b      	mov	r3, r1
 80112bc:	4413      	add	r3, r2
 80112be:	009b      	lsls	r3, r3, #2
 80112c0:	b29a      	uxth	r2, r3
 80112c2:	8a3b      	ldrh	r3, [r7, #16]
 80112c4:	3306      	adds	r3, #6
 80112c6:	4950      	ldr	r1, [pc, #320]	; (8011408 <ce303_voltage+0xa18>)
 80112c8:	5ccb      	ldrb	r3, [r1, r3]
 80112ca:	3b30      	subs	r3, #48	; 0x30
 80112cc:	b29b      	uxth	r3, r3
 80112ce:	4619      	mov	r1, r3
 80112d0:	0089      	lsls	r1, r1, #2
 80112d2:	440b      	add	r3, r1
 80112d4:	005b      	lsls	r3, r3, #1
 80112d6:	b29b      	uxth	r3, r3
 80112d8:	4413      	add	r3, r2
 80112da:	b29a      	uxth	r2, r3
 80112dc:	8a3b      	ldrh	r3, [r7, #16]
 80112de:	3307      	adds	r3, #7
 80112e0:	4949      	ldr	r1, [pc, #292]	; (8011408 <ce303_voltage+0xa18>)
 80112e2:	5ccb      	ldrb	r3, [r1, r3]
 80112e4:	b29b      	uxth	r3, r3
 80112e6:	4413      	add	r3, r2
 80112e8:	b29b      	uxth	r3, r3
 80112ea:	3b30      	subs	r3, #48	; 0x30
 80112ec:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 80112ee:	4b47      	ldr	r3, [pc, #284]	; (801140c <ce303_voltage+0xa1c>)
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	f04f 31ff 	mov.w	r1, #4294967295
 80112f6:	4618      	mov	r0, r3
 80112f8:	f7f7 fb10 	bl	800891c <osMutexWait>
				fm25v02_write(2*CE_303_VOLT_A_REG, ((uint8_t)(temp>>8)) );
 80112fc:	89fb      	ldrh	r3, [r7, #14]
 80112fe:	0a1b      	lsrs	r3, r3, #8
 8011300:	b29b      	uxth	r3, r3
 8011302:	b2db      	uxtb	r3, r3
 8011304:	4619      	mov	r1, r3
 8011306:	f242 004a 	movw	r0, #8266	; 0x204a
 801130a:	f005 fcc9 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_A_REG+1, ((uint8_t)(temp&0x00FF)) );
 801130e:	89fb      	ldrh	r3, [r7, #14]
 8011310:	b2db      	uxtb	r3, r3
 8011312:	4619      	mov	r1, r3
 8011314:	f242 004b 	movw	r0, #8267	; 0x204b
 8011318:	f005 fcc2 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_A_REG, ((uint8_t)(temp_mil>>8)) );
 801131c:	8afb      	ldrh	r3, [r7, #22]
 801131e:	0a1b      	lsrs	r3, r3, #8
 8011320:	b29b      	uxth	r3, r3
 8011322:	b2db      	uxtb	r3, r3
 8011324:	4619      	mov	r1, r3
 8011326:	f242 0050 	movw	r0, #8272	; 0x2050
 801132a:	f005 fcb9 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_A_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 801132e:	8afb      	ldrh	r3, [r7, #22]
 8011330:	b2db      	uxtb	r3, r3
 8011332:	4619      	mov	r1, r3
 8011334:	f242 0051 	movw	r0, #8273	; 0x2051
 8011338:	f005 fcb2 	bl	8016ca0 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 801133c:	4b33      	ldr	r3, [pc, #204]	; (801140c <ce303_voltage+0xa1c>)
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	4618      	mov	r0, r3
 8011342:	f7f7 fb39 	bl	80089b8 <osMutexRelease>
				status_registers.ce303_volt_a_reg = temp;
 8011346:	4a32      	ldr	r2, [pc, #200]	; (8011410 <ce303_voltage+0xa20>)
 8011348:	89fb      	ldrh	r3, [r7, #14]
 801134a:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a
				status_registers.ce303_volt_mil_a_reg = temp_mil;
 801134e:	4a30      	ldr	r2, [pc, #192]	; (8011410 <ce303_voltage+0xa20>)
 8011350:	8afb      	ldrh	r3, [r7, #22]
 8011352:	f8a2 3050 	strh.w	r3, [r2, #80]	; 0x50
				voltage_a_state = 1;
 8011356:	2301      	movs	r3, #1
 8011358:	757b      	strb	r3, [r7, #21]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 801135a:	f000 bd65 	b.w	8011e28 <ce303_voltage+0x1438>
			}
		}

		else if( (meter_rx_buffer[i] == 0x28) && (voltage_a_state==1) && (voltage_b_state==0) && (voltage_c_state==0) )
 801135e:	8a3b      	ldrh	r3, [r7, #16]
 8011360:	4a29      	ldr	r2, [pc, #164]	; (8011408 <ce303_voltage+0xa18>)
 8011362:	5cd3      	ldrb	r3, [r2, r3]
 8011364:	2b28      	cmp	r3, #40	; 0x28
 8011366:	f040 82ad 	bne.w	80118c4 <ce303_voltage+0xed4>
 801136a:	7d7b      	ldrb	r3, [r7, #21]
 801136c:	2b01      	cmp	r3, #1
 801136e:	f040 82a9 	bne.w	80118c4 <ce303_voltage+0xed4>
 8011372:	7d3b      	ldrb	r3, [r7, #20]
 8011374:	2b00      	cmp	r3, #0
 8011376:	f040 82a5 	bne.w	80118c4 <ce303_voltage+0xed4>
 801137a:	7cfb      	ldrb	r3, [r7, #19]
 801137c:	2b00      	cmp	r3, #0
 801137e:	f040 82a1 	bne.w	80118c4 <ce303_voltage+0xed4>
		{
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8011382:	8a3b      	ldrh	r3, [r7, #16]
 8011384:	3302      	adds	r3, #2
 8011386:	4a20      	ldr	r2, [pc, #128]	; (8011408 <ce303_voltage+0xa18>)
 8011388:	5cd3      	ldrb	r3, [r2, r3]
 801138a:	2b2e      	cmp	r3, #46	; 0x2e
 801138c:	f040 80cd 	bne.w	801152a <ce303_voltage+0xb3a>
			{
				temp = (uint16_t)(meter_rx_buffer[i+1]-0x30);
 8011390:	8a3b      	ldrh	r3, [r7, #16]
 8011392:	3301      	adds	r3, #1
 8011394:	4a1c      	ldr	r2, [pc, #112]	; (8011408 <ce303_voltage+0xa18>)
 8011396:	5cd3      	ldrb	r3, [r2, r3]
 8011398:	b29b      	uxth	r3, r3
 801139a:	3b30      	subs	r3, #48	; 0x30
 801139c:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+4] == 0x29 ) // если 1 разряд после запятой
 801139e:	8a3b      	ldrh	r3, [r7, #16]
 80113a0:	3304      	adds	r3, #4
 80113a2:	4a19      	ldr	r2, [pc, #100]	; (8011408 <ce303_voltage+0xa18>)
 80113a4:	5cd3      	ldrb	r3, [r2, r3]
 80113a6:	2b29      	cmp	r3, #41	; 0x29
 80113a8:	d110      	bne.n	80113cc <ce303_voltage+0x9dc>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+3])-0x30)*100;
 80113aa:	8a3b      	ldrh	r3, [r7, #16]
 80113ac:	3303      	adds	r3, #3
 80113ae:	4a16      	ldr	r2, [pc, #88]	; (8011408 <ce303_voltage+0xa18>)
 80113b0:	5cd3      	ldrb	r3, [r2, r3]
 80113b2:	3b30      	subs	r3, #48	; 0x30
 80113b4:	b29b      	uxth	r3, r3
 80113b6:	461a      	mov	r2, r3
 80113b8:	0092      	lsls	r2, r2, #2
 80113ba:	4413      	add	r3, r2
 80113bc:	461a      	mov	r2, r3
 80113be:	0091      	lsls	r1, r2, #2
 80113c0:	461a      	mov	r2, r3
 80113c2:	460b      	mov	r3, r1
 80113c4:	4413      	add	r3, r2
 80113c6:	009b      	lsls	r3, r3, #2
 80113c8:	82fb      	strh	r3, [r7, #22]
 80113ca:	e076      	b.n	80114ba <ce303_voltage+0xaca>
				}
				else if( meter_rx_buffer[i+5] == 0x29 ) // если 2 разряда после запятой
 80113cc:	8a3b      	ldrh	r3, [r7, #16]
 80113ce:	3305      	adds	r3, #5
 80113d0:	4a0d      	ldr	r2, [pc, #52]	; (8011408 <ce303_voltage+0xa18>)
 80113d2:	5cd3      	ldrb	r3, [r2, r3]
 80113d4:	2b29      	cmp	r3, #41	; 0x29
 80113d6:	d11d      	bne.n	8011414 <ce303_voltage+0xa24>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30))*10;
 80113d8:	8a3b      	ldrh	r3, [r7, #16]
 80113da:	3303      	adds	r3, #3
 80113dc:	4a0a      	ldr	r2, [pc, #40]	; (8011408 <ce303_voltage+0xa18>)
 80113de:	5cd3      	ldrb	r3, [r2, r3]
 80113e0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80113e4:	4613      	mov	r3, r2
 80113e6:	009b      	lsls	r3, r3, #2
 80113e8:	4413      	add	r3, r2
 80113ea:	005b      	lsls	r3, r3, #1
 80113ec:	4619      	mov	r1, r3
 80113ee:	8a3b      	ldrh	r3, [r7, #16]
 80113f0:	3304      	adds	r3, #4
 80113f2:	4a05      	ldr	r2, [pc, #20]	; (8011408 <ce303_voltage+0xa18>)
 80113f4:	5cd3      	ldrb	r3, [r2, r3]
 80113f6:	3b30      	subs	r3, #48	; 0x30
 80113f8:	440b      	add	r3, r1
 80113fa:	b29b      	uxth	r3, r3
 80113fc:	461a      	mov	r2, r3
 80113fe:	0092      	lsls	r2, r2, #2
 8011400:	4413      	add	r3, r2
 8011402:	005b      	lsls	r3, r3, #1
 8011404:	82fb      	strh	r3, [r7, #22]
 8011406:	e058      	b.n	80114ba <ce303_voltage+0xaca>
 8011408:	2000994c 	.word	0x2000994c
 801140c:	20009af8 	.word	0x20009af8
 8011410:	2000a174 	.word	0x2000a174
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 3 разряда после запятой
 8011414:	8a3b      	ldrh	r3, [r7, #16]
 8011416:	3306      	adds	r3, #6
 8011418:	4ab1      	ldr	r2, [pc, #708]	; (80116e0 <ce303_voltage+0xcf0>)
 801141a:	5cd3      	ldrb	r3, [r2, r3]
 801141c:	2b29      	cmp	r3, #41	; 0x29
 801141e:	d126      	bne.n	801146e <ce303_voltage+0xa7e>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 8011420:	8a3b      	ldrh	r3, [r7, #16]
 8011422:	3303      	adds	r3, #3
 8011424:	4aae      	ldr	r2, [pc, #696]	; (80116e0 <ce303_voltage+0xcf0>)
 8011426:	5cd3      	ldrb	r3, [r2, r3]
 8011428:	3b30      	subs	r3, #48	; 0x30
 801142a:	b29b      	uxth	r3, r3
 801142c:	461a      	mov	r2, r3
 801142e:	0092      	lsls	r2, r2, #2
 8011430:	4413      	add	r3, r2
 8011432:	461a      	mov	r2, r3
 8011434:	0091      	lsls	r1, r2, #2
 8011436:	461a      	mov	r2, r3
 8011438:	460b      	mov	r3, r1
 801143a:	4413      	add	r3, r2
 801143c:	009b      	lsls	r3, r3, #2
 801143e:	b29a      	uxth	r2, r3
 8011440:	8a3b      	ldrh	r3, [r7, #16]
 8011442:	3304      	adds	r3, #4
 8011444:	49a6      	ldr	r1, [pc, #664]	; (80116e0 <ce303_voltage+0xcf0>)
 8011446:	5ccb      	ldrb	r3, [r1, r3]
 8011448:	3b30      	subs	r3, #48	; 0x30
 801144a:	b29b      	uxth	r3, r3
 801144c:	4619      	mov	r1, r3
 801144e:	0089      	lsls	r1, r1, #2
 8011450:	440b      	add	r3, r1
 8011452:	005b      	lsls	r3, r3, #1
 8011454:	b29b      	uxth	r3, r3
 8011456:	4413      	add	r3, r2
 8011458:	b29a      	uxth	r2, r3
 801145a:	8a3b      	ldrh	r3, [r7, #16]
 801145c:	3305      	adds	r3, #5
 801145e:	49a0      	ldr	r1, [pc, #640]	; (80116e0 <ce303_voltage+0xcf0>)
 8011460:	5ccb      	ldrb	r3, [r1, r3]
 8011462:	b29b      	uxth	r3, r3
 8011464:	4413      	add	r3, r2
 8011466:	b29b      	uxth	r3, r3
 8011468:	3b30      	subs	r3, #48	; 0x30
 801146a:	82fb      	strh	r3, [r7, #22]
 801146c:	e025      	b.n	80114ba <ce303_voltage+0xaca>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 801146e:	8a3b      	ldrh	r3, [r7, #16]
 8011470:	3303      	adds	r3, #3
 8011472:	4a9b      	ldr	r2, [pc, #620]	; (80116e0 <ce303_voltage+0xcf0>)
 8011474:	5cd3      	ldrb	r3, [r2, r3]
 8011476:	3b30      	subs	r3, #48	; 0x30
 8011478:	b29b      	uxth	r3, r3
 801147a:	461a      	mov	r2, r3
 801147c:	0092      	lsls	r2, r2, #2
 801147e:	4413      	add	r3, r2
 8011480:	461a      	mov	r2, r3
 8011482:	0091      	lsls	r1, r2, #2
 8011484:	461a      	mov	r2, r3
 8011486:	460b      	mov	r3, r1
 8011488:	4413      	add	r3, r2
 801148a:	009b      	lsls	r3, r3, #2
 801148c:	b29a      	uxth	r2, r3
 801148e:	8a3b      	ldrh	r3, [r7, #16]
 8011490:	3304      	adds	r3, #4
 8011492:	4993      	ldr	r1, [pc, #588]	; (80116e0 <ce303_voltage+0xcf0>)
 8011494:	5ccb      	ldrb	r3, [r1, r3]
 8011496:	3b30      	subs	r3, #48	; 0x30
 8011498:	b29b      	uxth	r3, r3
 801149a:	4619      	mov	r1, r3
 801149c:	0089      	lsls	r1, r1, #2
 801149e:	440b      	add	r3, r1
 80114a0:	005b      	lsls	r3, r3, #1
 80114a2:	b29b      	uxth	r3, r3
 80114a4:	4413      	add	r3, r2
 80114a6:	b29a      	uxth	r2, r3
 80114a8:	8a3b      	ldrh	r3, [r7, #16]
 80114aa:	3305      	adds	r3, #5
 80114ac:	498c      	ldr	r1, [pc, #560]	; (80116e0 <ce303_voltage+0xcf0>)
 80114ae:	5ccb      	ldrb	r3, [r1, r3]
 80114b0:	b29b      	uxth	r3, r3
 80114b2:	4413      	add	r3, r2
 80114b4:	b29b      	uxth	r3, r3
 80114b6:	3b30      	subs	r3, #48	; 0x30
 80114b8:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 80114ba:	4b8a      	ldr	r3, [pc, #552]	; (80116e4 <ce303_voltage+0xcf4>)
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	f04f 31ff 	mov.w	r1, #4294967295
 80114c2:	4618      	mov	r0, r3
 80114c4:	f7f7 fa2a 	bl	800891c <osMutexWait>
				fm25v02_write(2*CE_303_VOLT_B_REG, ((uint8_t)(temp>>8)) );
 80114c8:	89fb      	ldrh	r3, [r7, #14]
 80114ca:	0a1b      	lsrs	r3, r3, #8
 80114cc:	b29b      	uxth	r3, r3
 80114ce:	b2db      	uxtb	r3, r3
 80114d0:	4619      	mov	r1, r3
 80114d2:	f242 004c 	movw	r0, #8268	; 0x204c
 80114d6:	f005 fbe3 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_B_REG+1, ((uint8_t)(temp&0x00FF)) );
 80114da:	89fb      	ldrh	r3, [r7, #14]
 80114dc:	b2db      	uxtb	r3, r3
 80114de:	4619      	mov	r1, r3
 80114e0:	f242 004d 	movw	r0, #8269	; 0x204d
 80114e4:	f005 fbdc 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_B_REG, ((uint8_t)(temp_mil>>8)) );
 80114e8:	8afb      	ldrh	r3, [r7, #22]
 80114ea:	0a1b      	lsrs	r3, r3, #8
 80114ec:	b29b      	uxth	r3, r3
 80114ee:	b2db      	uxtb	r3, r3
 80114f0:	4619      	mov	r1, r3
 80114f2:	f242 0052 	movw	r0, #8274	; 0x2052
 80114f6:	f005 fbd3 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_B_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 80114fa:	8afb      	ldrh	r3, [r7, #22]
 80114fc:	b2db      	uxtb	r3, r3
 80114fe:	4619      	mov	r1, r3
 8011500:	f242 0053 	movw	r0, #8275	; 0x2053
 8011504:	f005 fbcc 	bl	8016ca0 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8011508:	4b76      	ldr	r3, [pc, #472]	; (80116e4 <ce303_voltage+0xcf4>)
 801150a:	681b      	ldr	r3, [r3, #0]
 801150c:	4618      	mov	r0, r3
 801150e:	f7f7 fa53 	bl	80089b8 <osMutexRelease>
				status_registers.ce303_volt_b_reg = temp;
 8011512:	4a75      	ldr	r2, [pc, #468]	; (80116e8 <ce303_voltage+0xcf8>)
 8011514:	89fb      	ldrh	r3, [r7, #14]
 8011516:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
				status_registers.ce303_volt_mil_b_reg =  temp_mil;
 801151a:	4a73      	ldr	r2, [pc, #460]	; (80116e8 <ce303_voltage+0xcf8>)
 801151c:	8afb      	ldrh	r3, [r7, #22]
 801151e:	f8a2 3052 	strh.w	r3, [r2, #82]	; 0x52
				voltage_b_state = 1;
 8011522:	2301      	movs	r3, #1
 8011524:	753b      	strb	r3, [r7, #20]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8011526:	f000 bc81 	b.w	8011e2c <ce303_voltage+0x143c>
			}
			else if( meter_rx_buffer[i+3] == 0x2E)
 801152a:	8a3b      	ldrh	r3, [r7, #16]
 801152c:	3303      	adds	r3, #3
 801152e:	4a6c      	ldr	r2, [pc, #432]	; (80116e0 <ce303_voltage+0xcf0>)
 8011530:	5cd3      	ldrb	r3, [r2, r3]
 8011532:	2b2e      	cmp	r3, #46	; 0x2e
 8011534:	f040 80da 	bne.w	80116ec <ce303_voltage+0xcfc>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+2])-0x30);
 8011538:	8a3b      	ldrh	r3, [r7, #16]
 801153a:	3301      	adds	r3, #1
 801153c:	4a68      	ldr	r2, [pc, #416]	; (80116e0 <ce303_voltage+0xcf0>)
 801153e:	5cd3      	ldrb	r3, [r2, r3]
 8011540:	3b30      	subs	r3, #48	; 0x30
 8011542:	b29b      	uxth	r3, r3
 8011544:	461a      	mov	r2, r3
 8011546:	0092      	lsls	r2, r2, #2
 8011548:	4413      	add	r3, r2
 801154a:	005b      	lsls	r3, r3, #1
 801154c:	b29a      	uxth	r2, r3
 801154e:	8a3b      	ldrh	r3, [r7, #16]
 8011550:	3302      	adds	r3, #2
 8011552:	4963      	ldr	r1, [pc, #396]	; (80116e0 <ce303_voltage+0xcf0>)
 8011554:	5ccb      	ldrb	r3, [r1, r3]
 8011556:	b29b      	uxth	r3, r3
 8011558:	4413      	add	r3, r2
 801155a:	b29b      	uxth	r3, r3
 801155c:	3b30      	subs	r3, #48	; 0x30
 801155e:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+5] == 0x29 ) // если 1 разряд после запятой
 8011560:	8a3b      	ldrh	r3, [r7, #16]
 8011562:	3305      	adds	r3, #5
 8011564:	4a5e      	ldr	r2, [pc, #376]	; (80116e0 <ce303_voltage+0xcf0>)
 8011566:	5cd3      	ldrb	r3, [r2, r3]
 8011568:	2b29      	cmp	r3, #41	; 0x29
 801156a:	d110      	bne.n	801158e <ce303_voltage+0xb9e>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+4])-0x30)*100;
 801156c:	8a3b      	ldrh	r3, [r7, #16]
 801156e:	3304      	adds	r3, #4
 8011570:	4a5b      	ldr	r2, [pc, #364]	; (80116e0 <ce303_voltage+0xcf0>)
 8011572:	5cd3      	ldrb	r3, [r2, r3]
 8011574:	3b30      	subs	r3, #48	; 0x30
 8011576:	b29b      	uxth	r3, r3
 8011578:	461a      	mov	r2, r3
 801157a:	0092      	lsls	r2, r2, #2
 801157c:	4413      	add	r3, r2
 801157e:	461a      	mov	r2, r3
 8011580:	0091      	lsls	r1, r2, #2
 8011582:	461a      	mov	r2, r3
 8011584:	460b      	mov	r3, r1
 8011586:	4413      	add	r3, r2
 8011588:	009b      	lsls	r3, r3, #2
 801158a:	82fb      	strh	r3, [r7, #22]
 801158c:	e070      	b.n	8011670 <ce303_voltage+0xc80>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 2 разряда после запятой
 801158e:	8a3b      	ldrh	r3, [r7, #16]
 8011590:	3306      	adds	r3, #6
 8011592:	4a53      	ldr	r2, [pc, #332]	; (80116e0 <ce303_voltage+0xcf0>)
 8011594:	5cd3      	ldrb	r3, [r2, r3]
 8011596:	2b29      	cmp	r3, #41	; 0x29
 8011598:	d117      	bne.n	80115ca <ce303_voltage+0xbda>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30))*10;
 801159a:	8a3b      	ldrh	r3, [r7, #16]
 801159c:	3304      	adds	r3, #4
 801159e:	4a50      	ldr	r2, [pc, #320]	; (80116e0 <ce303_voltage+0xcf0>)
 80115a0:	5cd3      	ldrb	r3, [r2, r3]
 80115a2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80115a6:	4613      	mov	r3, r2
 80115a8:	009b      	lsls	r3, r3, #2
 80115aa:	4413      	add	r3, r2
 80115ac:	005b      	lsls	r3, r3, #1
 80115ae:	4619      	mov	r1, r3
 80115b0:	8a3b      	ldrh	r3, [r7, #16]
 80115b2:	3305      	adds	r3, #5
 80115b4:	4a4a      	ldr	r2, [pc, #296]	; (80116e0 <ce303_voltage+0xcf0>)
 80115b6:	5cd3      	ldrb	r3, [r2, r3]
 80115b8:	3b30      	subs	r3, #48	; 0x30
 80115ba:	440b      	add	r3, r1
 80115bc:	b29b      	uxth	r3, r3
 80115be:	461a      	mov	r2, r3
 80115c0:	0092      	lsls	r2, r2, #2
 80115c2:	4413      	add	r3, r2
 80115c4:	005b      	lsls	r3, r3, #1
 80115c6:	82fb      	strh	r3, [r7, #22]
 80115c8:	e052      	b.n	8011670 <ce303_voltage+0xc80>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 3 разряда после запятой
 80115ca:	8a3b      	ldrh	r3, [r7, #16]
 80115cc:	3307      	adds	r3, #7
 80115ce:	4a44      	ldr	r2, [pc, #272]	; (80116e0 <ce303_voltage+0xcf0>)
 80115d0:	5cd3      	ldrb	r3, [r2, r3]
 80115d2:	2b29      	cmp	r3, #41	; 0x29
 80115d4:	d126      	bne.n	8011624 <ce303_voltage+0xc34>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 80115d6:	8a3b      	ldrh	r3, [r7, #16]
 80115d8:	3304      	adds	r3, #4
 80115da:	4a41      	ldr	r2, [pc, #260]	; (80116e0 <ce303_voltage+0xcf0>)
 80115dc:	5cd3      	ldrb	r3, [r2, r3]
 80115de:	3b30      	subs	r3, #48	; 0x30
 80115e0:	b29b      	uxth	r3, r3
 80115e2:	461a      	mov	r2, r3
 80115e4:	0092      	lsls	r2, r2, #2
 80115e6:	4413      	add	r3, r2
 80115e8:	461a      	mov	r2, r3
 80115ea:	0091      	lsls	r1, r2, #2
 80115ec:	461a      	mov	r2, r3
 80115ee:	460b      	mov	r3, r1
 80115f0:	4413      	add	r3, r2
 80115f2:	009b      	lsls	r3, r3, #2
 80115f4:	b29a      	uxth	r2, r3
 80115f6:	8a3b      	ldrh	r3, [r7, #16]
 80115f8:	3305      	adds	r3, #5
 80115fa:	4939      	ldr	r1, [pc, #228]	; (80116e0 <ce303_voltage+0xcf0>)
 80115fc:	5ccb      	ldrb	r3, [r1, r3]
 80115fe:	3b30      	subs	r3, #48	; 0x30
 8011600:	b29b      	uxth	r3, r3
 8011602:	4619      	mov	r1, r3
 8011604:	0089      	lsls	r1, r1, #2
 8011606:	440b      	add	r3, r1
 8011608:	005b      	lsls	r3, r3, #1
 801160a:	b29b      	uxth	r3, r3
 801160c:	4413      	add	r3, r2
 801160e:	b29a      	uxth	r2, r3
 8011610:	8a3b      	ldrh	r3, [r7, #16]
 8011612:	3306      	adds	r3, #6
 8011614:	4932      	ldr	r1, [pc, #200]	; (80116e0 <ce303_voltage+0xcf0>)
 8011616:	5ccb      	ldrb	r3, [r1, r3]
 8011618:	b29b      	uxth	r3, r3
 801161a:	4413      	add	r3, r2
 801161c:	b29b      	uxth	r3, r3
 801161e:	3b30      	subs	r3, #48	; 0x30
 8011620:	82fb      	strh	r3, [r7, #22]
 8011622:	e025      	b.n	8011670 <ce303_voltage+0xc80>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 8011624:	8a3b      	ldrh	r3, [r7, #16]
 8011626:	3304      	adds	r3, #4
 8011628:	4a2d      	ldr	r2, [pc, #180]	; (80116e0 <ce303_voltage+0xcf0>)
 801162a:	5cd3      	ldrb	r3, [r2, r3]
 801162c:	3b30      	subs	r3, #48	; 0x30
 801162e:	b29b      	uxth	r3, r3
 8011630:	461a      	mov	r2, r3
 8011632:	0092      	lsls	r2, r2, #2
 8011634:	4413      	add	r3, r2
 8011636:	461a      	mov	r2, r3
 8011638:	0091      	lsls	r1, r2, #2
 801163a:	461a      	mov	r2, r3
 801163c:	460b      	mov	r3, r1
 801163e:	4413      	add	r3, r2
 8011640:	009b      	lsls	r3, r3, #2
 8011642:	b29a      	uxth	r2, r3
 8011644:	8a3b      	ldrh	r3, [r7, #16]
 8011646:	3305      	adds	r3, #5
 8011648:	4925      	ldr	r1, [pc, #148]	; (80116e0 <ce303_voltage+0xcf0>)
 801164a:	5ccb      	ldrb	r3, [r1, r3]
 801164c:	3b30      	subs	r3, #48	; 0x30
 801164e:	b29b      	uxth	r3, r3
 8011650:	4619      	mov	r1, r3
 8011652:	0089      	lsls	r1, r1, #2
 8011654:	440b      	add	r3, r1
 8011656:	005b      	lsls	r3, r3, #1
 8011658:	b29b      	uxth	r3, r3
 801165a:	4413      	add	r3, r2
 801165c:	b29a      	uxth	r2, r3
 801165e:	8a3b      	ldrh	r3, [r7, #16]
 8011660:	3306      	adds	r3, #6
 8011662:	491f      	ldr	r1, [pc, #124]	; (80116e0 <ce303_voltage+0xcf0>)
 8011664:	5ccb      	ldrb	r3, [r1, r3]
 8011666:	b29b      	uxth	r3, r3
 8011668:	4413      	add	r3, r2
 801166a:	b29b      	uxth	r3, r3
 801166c:	3b30      	subs	r3, #48	; 0x30
 801166e:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8011670:	4b1c      	ldr	r3, [pc, #112]	; (80116e4 <ce303_voltage+0xcf4>)
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	f04f 31ff 	mov.w	r1, #4294967295
 8011678:	4618      	mov	r0, r3
 801167a:	f7f7 f94f 	bl	800891c <osMutexWait>
				fm25v02_write(2*CE_303_VOLT_B_REG, ((uint8_t)(temp>>8)) );
 801167e:	89fb      	ldrh	r3, [r7, #14]
 8011680:	0a1b      	lsrs	r3, r3, #8
 8011682:	b29b      	uxth	r3, r3
 8011684:	b2db      	uxtb	r3, r3
 8011686:	4619      	mov	r1, r3
 8011688:	f242 004c 	movw	r0, #8268	; 0x204c
 801168c:	f005 fb08 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_B_REG+1, ((uint8_t)(temp&0x00FF)) );
 8011690:	89fb      	ldrh	r3, [r7, #14]
 8011692:	b2db      	uxtb	r3, r3
 8011694:	4619      	mov	r1, r3
 8011696:	f242 004d 	movw	r0, #8269	; 0x204d
 801169a:	f005 fb01 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_B_REG, ((uint8_t)(temp_mil>>8)) );
 801169e:	8afb      	ldrh	r3, [r7, #22]
 80116a0:	0a1b      	lsrs	r3, r3, #8
 80116a2:	b29b      	uxth	r3, r3
 80116a4:	b2db      	uxtb	r3, r3
 80116a6:	4619      	mov	r1, r3
 80116a8:	f242 0052 	movw	r0, #8274	; 0x2052
 80116ac:	f005 faf8 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_B_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 80116b0:	8afb      	ldrh	r3, [r7, #22]
 80116b2:	b2db      	uxtb	r3, r3
 80116b4:	4619      	mov	r1, r3
 80116b6:	f242 0053 	movw	r0, #8275	; 0x2053
 80116ba:	f005 faf1 	bl	8016ca0 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 80116be:	4b09      	ldr	r3, [pc, #36]	; (80116e4 <ce303_voltage+0xcf4>)
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	4618      	mov	r0, r3
 80116c4:	f7f7 f978 	bl	80089b8 <osMutexRelease>
				status_registers.ce303_volt_b_reg = temp;
 80116c8:	4a07      	ldr	r2, [pc, #28]	; (80116e8 <ce303_voltage+0xcf8>)
 80116ca:	89fb      	ldrh	r3, [r7, #14]
 80116cc:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
				status_registers.ce303_volt_mil_b_reg = temp_mil;
 80116d0:	4a05      	ldr	r2, [pc, #20]	; (80116e8 <ce303_voltage+0xcf8>)
 80116d2:	8afb      	ldrh	r3, [r7, #22]
 80116d4:	f8a2 3052 	strh.w	r3, [r2, #82]	; 0x52
				voltage_b_state = 1;
 80116d8:	2301      	movs	r3, #1
 80116da:	753b      	strb	r3, [r7, #20]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 80116dc:	e3a6      	b.n	8011e2c <ce303_voltage+0x143c>
 80116de:	bf00      	nop
 80116e0:	2000994c 	.word	0x2000994c
 80116e4:	20009af8 	.word	0x20009af8
 80116e8:	2000a174 	.word	0x2000a174
			}

			else if( meter_rx_buffer[i+4] == 0x2E)
 80116ec:	8a3b      	ldrh	r3, [r7, #16]
 80116ee:	3304      	adds	r3, #4
 80116f0:	4a9f      	ldr	r2, [pc, #636]	; (8011970 <ce303_voltage+0xf80>)
 80116f2:	5cd3      	ldrb	r3, [r2, r3]
 80116f4:	2b2e      	cmp	r3, #46	; 0x2e
 80116f6:	f040 8399 	bne.w	8011e2c <ce303_voltage+0x143c>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+3])-0x30);
 80116fa:	8a3b      	ldrh	r3, [r7, #16]
 80116fc:	3301      	adds	r3, #1
 80116fe:	4a9c      	ldr	r2, [pc, #624]	; (8011970 <ce303_voltage+0xf80>)
 8011700:	5cd3      	ldrb	r3, [r2, r3]
 8011702:	3b30      	subs	r3, #48	; 0x30
 8011704:	b29b      	uxth	r3, r3
 8011706:	461a      	mov	r2, r3
 8011708:	0092      	lsls	r2, r2, #2
 801170a:	4413      	add	r3, r2
 801170c:	461a      	mov	r2, r3
 801170e:	0091      	lsls	r1, r2, #2
 8011710:	461a      	mov	r2, r3
 8011712:	460b      	mov	r3, r1
 8011714:	4413      	add	r3, r2
 8011716:	009b      	lsls	r3, r3, #2
 8011718:	b29a      	uxth	r2, r3
 801171a:	8a3b      	ldrh	r3, [r7, #16]
 801171c:	3302      	adds	r3, #2
 801171e:	4994      	ldr	r1, [pc, #592]	; (8011970 <ce303_voltage+0xf80>)
 8011720:	5ccb      	ldrb	r3, [r1, r3]
 8011722:	3b30      	subs	r3, #48	; 0x30
 8011724:	b29b      	uxth	r3, r3
 8011726:	4619      	mov	r1, r3
 8011728:	0089      	lsls	r1, r1, #2
 801172a:	440b      	add	r3, r1
 801172c:	005b      	lsls	r3, r3, #1
 801172e:	b29b      	uxth	r3, r3
 8011730:	4413      	add	r3, r2
 8011732:	b29a      	uxth	r2, r3
 8011734:	8a3b      	ldrh	r3, [r7, #16]
 8011736:	3303      	adds	r3, #3
 8011738:	498d      	ldr	r1, [pc, #564]	; (8011970 <ce303_voltage+0xf80>)
 801173a:	5ccb      	ldrb	r3, [r1, r3]
 801173c:	b29b      	uxth	r3, r3
 801173e:	4413      	add	r3, r2
 8011740:	b29b      	uxth	r3, r3
 8011742:	3b30      	subs	r3, #48	; 0x30
 8011744:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+6] == 0x29 ) // если 1 разряд после запятой
 8011746:	8a3b      	ldrh	r3, [r7, #16]
 8011748:	3306      	adds	r3, #6
 801174a:	4a89      	ldr	r2, [pc, #548]	; (8011970 <ce303_voltage+0xf80>)
 801174c:	5cd3      	ldrb	r3, [r2, r3]
 801174e:	2b29      	cmp	r3, #41	; 0x29
 8011750:	d110      	bne.n	8011774 <ce303_voltage+0xd84>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+5])-0x30)*100;
 8011752:	8a3b      	ldrh	r3, [r7, #16]
 8011754:	3305      	adds	r3, #5
 8011756:	4a86      	ldr	r2, [pc, #536]	; (8011970 <ce303_voltage+0xf80>)
 8011758:	5cd3      	ldrb	r3, [r2, r3]
 801175a:	3b30      	subs	r3, #48	; 0x30
 801175c:	b29b      	uxth	r3, r3
 801175e:	461a      	mov	r2, r3
 8011760:	0092      	lsls	r2, r2, #2
 8011762:	4413      	add	r3, r2
 8011764:	461a      	mov	r2, r3
 8011766:	0091      	lsls	r1, r2, #2
 8011768:	461a      	mov	r2, r3
 801176a:	460b      	mov	r3, r1
 801176c:	4413      	add	r3, r2
 801176e:	009b      	lsls	r3, r3, #2
 8011770:	82fb      	strh	r3, [r7, #22]
 8011772:	e070      	b.n	8011856 <ce303_voltage+0xe66>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 2 разряда после запятой
 8011774:	8a3b      	ldrh	r3, [r7, #16]
 8011776:	3307      	adds	r3, #7
 8011778:	4a7d      	ldr	r2, [pc, #500]	; (8011970 <ce303_voltage+0xf80>)
 801177a:	5cd3      	ldrb	r3, [r2, r3]
 801177c:	2b29      	cmp	r3, #41	; 0x29
 801177e:	d117      	bne.n	80117b0 <ce303_voltage+0xdc0>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30))*10;
 8011780:	8a3b      	ldrh	r3, [r7, #16]
 8011782:	3305      	adds	r3, #5
 8011784:	4a7a      	ldr	r2, [pc, #488]	; (8011970 <ce303_voltage+0xf80>)
 8011786:	5cd3      	ldrb	r3, [r2, r3]
 8011788:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801178c:	4613      	mov	r3, r2
 801178e:	009b      	lsls	r3, r3, #2
 8011790:	4413      	add	r3, r2
 8011792:	005b      	lsls	r3, r3, #1
 8011794:	4619      	mov	r1, r3
 8011796:	8a3b      	ldrh	r3, [r7, #16]
 8011798:	3306      	adds	r3, #6
 801179a:	4a75      	ldr	r2, [pc, #468]	; (8011970 <ce303_voltage+0xf80>)
 801179c:	5cd3      	ldrb	r3, [r2, r3]
 801179e:	3b30      	subs	r3, #48	; 0x30
 80117a0:	440b      	add	r3, r1
 80117a2:	b29b      	uxth	r3, r3
 80117a4:	461a      	mov	r2, r3
 80117a6:	0092      	lsls	r2, r2, #2
 80117a8:	4413      	add	r3, r2
 80117aa:	005b      	lsls	r3, r3, #1
 80117ac:	82fb      	strh	r3, [r7, #22]
 80117ae:	e052      	b.n	8011856 <ce303_voltage+0xe66>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 3 разряда после запятой
 80117b0:	8a3b      	ldrh	r3, [r7, #16]
 80117b2:	3308      	adds	r3, #8
 80117b4:	4a6e      	ldr	r2, [pc, #440]	; (8011970 <ce303_voltage+0xf80>)
 80117b6:	5cd3      	ldrb	r3, [r2, r3]
 80117b8:	2b29      	cmp	r3, #41	; 0x29
 80117ba:	d126      	bne.n	801180a <ce303_voltage+0xe1a>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 80117bc:	8a3b      	ldrh	r3, [r7, #16]
 80117be:	3305      	adds	r3, #5
 80117c0:	4a6b      	ldr	r2, [pc, #428]	; (8011970 <ce303_voltage+0xf80>)
 80117c2:	5cd3      	ldrb	r3, [r2, r3]
 80117c4:	3b30      	subs	r3, #48	; 0x30
 80117c6:	b29b      	uxth	r3, r3
 80117c8:	461a      	mov	r2, r3
 80117ca:	0092      	lsls	r2, r2, #2
 80117cc:	4413      	add	r3, r2
 80117ce:	461a      	mov	r2, r3
 80117d0:	0091      	lsls	r1, r2, #2
 80117d2:	461a      	mov	r2, r3
 80117d4:	460b      	mov	r3, r1
 80117d6:	4413      	add	r3, r2
 80117d8:	009b      	lsls	r3, r3, #2
 80117da:	b29a      	uxth	r2, r3
 80117dc:	8a3b      	ldrh	r3, [r7, #16]
 80117de:	3306      	adds	r3, #6
 80117e0:	4963      	ldr	r1, [pc, #396]	; (8011970 <ce303_voltage+0xf80>)
 80117e2:	5ccb      	ldrb	r3, [r1, r3]
 80117e4:	3b30      	subs	r3, #48	; 0x30
 80117e6:	b29b      	uxth	r3, r3
 80117e8:	4619      	mov	r1, r3
 80117ea:	0089      	lsls	r1, r1, #2
 80117ec:	440b      	add	r3, r1
 80117ee:	005b      	lsls	r3, r3, #1
 80117f0:	b29b      	uxth	r3, r3
 80117f2:	4413      	add	r3, r2
 80117f4:	b29a      	uxth	r2, r3
 80117f6:	8a3b      	ldrh	r3, [r7, #16]
 80117f8:	3307      	adds	r3, #7
 80117fa:	495d      	ldr	r1, [pc, #372]	; (8011970 <ce303_voltage+0xf80>)
 80117fc:	5ccb      	ldrb	r3, [r1, r3]
 80117fe:	b29b      	uxth	r3, r3
 8011800:	4413      	add	r3, r2
 8011802:	b29b      	uxth	r3, r3
 8011804:	3b30      	subs	r3, #48	; 0x30
 8011806:	82fb      	strh	r3, [r7, #22]
 8011808:	e025      	b.n	8011856 <ce303_voltage+0xe66>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 801180a:	8a3b      	ldrh	r3, [r7, #16]
 801180c:	3305      	adds	r3, #5
 801180e:	4a58      	ldr	r2, [pc, #352]	; (8011970 <ce303_voltage+0xf80>)
 8011810:	5cd3      	ldrb	r3, [r2, r3]
 8011812:	3b30      	subs	r3, #48	; 0x30
 8011814:	b29b      	uxth	r3, r3
 8011816:	461a      	mov	r2, r3
 8011818:	0092      	lsls	r2, r2, #2
 801181a:	4413      	add	r3, r2
 801181c:	461a      	mov	r2, r3
 801181e:	0091      	lsls	r1, r2, #2
 8011820:	461a      	mov	r2, r3
 8011822:	460b      	mov	r3, r1
 8011824:	4413      	add	r3, r2
 8011826:	009b      	lsls	r3, r3, #2
 8011828:	b29a      	uxth	r2, r3
 801182a:	8a3b      	ldrh	r3, [r7, #16]
 801182c:	3306      	adds	r3, #6
 801182e:	4950      	ldr	r1, [pc, #320]	; (8011970 <ce303_voltage+0xf80>)
 8011830:	5ccb      	ldrb	r3, [r1, r3]
 8011832:	3b30      	subs	r3, #48	; 0x30
 8011834:	b29b      	uxth	r3, r3
 8011836:	4619      	mov	r1, r3
 8011838:	0089      	lsls	r1, r1, #2
 801183a:	440b      	add	r3, r1
 801183c:	005b      	lsls	r3, r3, #1
 801183e:	b29b      	uxth	r3, r3
 8011840:	4413      	add	r3, r2
 8011842:	b29a      	uxth	r2, r3
 8011844:	8a3b      	ldrh	r3, [r7, #16]
 8011846:	3307      	adds	r3, #7
 8011848:	4949      	ldr	r1, [pc, #292]	; (8011970 <ce303_voltage+0xf80>)
 801184a:	5ccb      	ldrb	r3, [r1, r3]
 801184c:	b29b      	uxth	r3, r3
 801184e:	4413      	add	r3, r2
 8011850:	b29b      	uxth	r3, r3
 8011852:	3b30      	subs	r3, #48	; 0x30
 8011854:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8011856:	4b47      	ldr	r3, [pc, #284]	; (8011974 <ce303_voltage+0xf84>)
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	f04f 31ff 	mov.w	r1, #4294967295
 801185e:	4618      	mov	r0, r3
 8011860:	f7f7 f85c 	bl	800891c <osMutexWait>
				fm25v02_write(2*CE_303_VOLT_B_REG, ((uint8_t)(temp>>8)) );
 8011864:	89fb      	ldrh	r3, [r7, #14]
 8011866:	0a1b      	lsrs	r3, r3, #8
 8011868:	b29b      	uxth	r3, r3
 801186a:	b2db      	uxtb	r3, r3
 801186c:	4619      	mov	r1, r3
 801186e:	f242 004c 	movw	r0, #8268	; 0x204c
 8011872:	f005 fa15 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_B_REG+1, ((uint8_t)(temp&0x00FF)) );
 8011876:	89fb      	ldrh	r3, [r7, #14]
 8011878:	b2db      	uxtb	r3, r3
 801187a:	4619      	mov	r1, r3
 801187c:	f242 004d 	movw	r0, #8269	; 0x204d
 8011880:	f005 fa0e 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_B_REG, ((uint8_t)(temp_mil>>8)) );
 8011884:	8afb      	ldrh	r3, [r7, #22]
 8011886:	0a1b      	lsrs	r3, r3, #8
 8011888:	b29b      	uxth	r3, r3
 801188a:	b2db      	uxtb	r3, r3
 801188c:	4619      	mov	r1, r3
 801188e:	f242 0052 	movw	r0, #8274	; 0x2052
 8011892:	f005 fa05 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_B_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 8011896:	8afb      	ldrh	r3, [r7, #22]
 8011898:	b2db      	uxtb	r3, r3
 801189a:	4619      	mov	r1, r3
 801189c:	f242 0053 	movw	r0, #8275	; 0x2053
 80118a0:	f005 f9fe 	bl	8016ca0 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 80118a4:	4b33      	ldr	r3, [pc, #204]	; (8011974 <ce303_voltage+0xf84>)
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	4618      	mov	r0, r3
 80118aa:	f7f7 f885 	bl	80089b8 <osMutexRelease>
				status_registers.ce303_volt_b_reg = temp;
 80118ae:	4a32      	ldr	r2, [pc, #200]	; (8011978 <ce303_voltage+0xf88>)
 80118b0:	89fb      	ldrh	r3, [r7, #14]
 80118b2:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
				status_registers.ce303_volt_mil_b_reg = temp_mil;
 80118b6:	4a30      	ldr	r2, [pc, #192]	; (8011978 <ce303_voltage+0xf88>)
 80118b8:	8afb      	ldrh	r3, [r7, #22]
 80118ba:	f8a2 3052 	strh.w	r3, [r2, #82]	; 0x52
				voltage_b_state = 1;
 80118be:	2301      	movs	r3, #1
 80118c0:	753b      	strb	r3, [r7, #20]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 80118c2:	e2b3      	b.n	8011e2c <ce303_voltage+0x143c>
			}
		}

		else if( (meter_rx_buffer[i] == 0x28) && (voltage_a_state==1) && (voltage_b_state==1) && (voltage_c_state==0) )
 80118c4:	8a3b      	ldrh	r3, [r7, #16]
 80118c6:	4a2a      	ldr	r2, [pc, #168]	; (8011970 <ce303_voltage+0xf80>)
 80118c8:	5cd3      	ldrb	r3, [r2, r3]
 80118ca:	2b28      	cmp	r3, #40	; 0x28
 80118cc:	f040 82af 	bne.w	8011e2e <ce303_voltage+0x143e>
 80118d0:	7d7b      	ldrb	r3, [r7, #21]
 80118d2:	2b01      	cmp	r3, #1
 80118d4:	f040 82ab 	bne.w	8011e2e <ce303_voltage+0x143e>
 80118d8:	7d3b      	ldrb	r3, [r7, #20]
 80118da:	2b01      	cmp	r3, #1
 80118dc:	f040 82a7 	bne.w	8011e2e <ce303_voltage+0x143e>
 80118e0:	7cfb      	ldrb	r3, [r7, #19]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	f040 82a3 	bne.w	8011e2e <ce303_voltage+0x143e>
		{
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 80118e8:	8a3b      	ldrh	r3, [r7, #16]
 80118ea:	3302      	adds	r3, #2
 80118ec:	4a20      	ldr	r2, [pc, #128]	; (8011970 <ce303_voltage+0xf80>)
 80118ee:	5cd3      	ldrb	r3, [r2, r3]
 80118f0:	2b2e      	cmp	r3, #46	; 0x2e
 80118f2:	f040 80cd 	bne.w	8011a90 <ce303_voltage+0x10a0>
			{
				temp = (uint16_t)(meter_rx_buffer[i+1]-0x30);
 80118f6:	8a3b      	ldrh	r3, [r7, #16]
 80118f8:	3301      	adds	r3, #1
 80118fa:	4a1d      	ldr	r2, [pc, #116]	; (8011970 <ce303_voltage+0xf80>)
 80118fc:	5cd3      	ldrb	r3, [r2, r3]
 80118fe:	b29b      	uxth	r3, r3
 8011900:	3b30      	subs	r3, #48	; 0x30
 8011902:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+4] == 0x29 ) // если 1 разряд после запятой
 8011904:	8a3b      	ldrh	r3, [r7, #16]
 8011906:	3304      	adds	r3, #4
 8011908:	4a19      	ldr	r2, [pc, #100]	; (8011970 <ce303_voltage+0xf80>)
 801190a:	5cd3      	ldrb	r3, [r2, r3]
 801190c:	2b29      	cmp	r3, #41	; 0x29
 801190e:	d110      	bne.n	8011932 <ce303_voltage+0xf42>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+3])-0x30)*100;
 8011910:	8a3b      	ldrh	r3, [r7, #16]
 8011912:	3303      	adds	r3, #3
 8011914:	4a16      	ldr	r2, [pc, #88]	; (8011970 <ce303_voltage+0xf80>)
 8011916:	5cd3      	ldrb	r3, [r2, r3]
 8011918:	3b30      	subs	r3, #48	; 0x30
 801191a:	b29b      	uxth	r3, r3
 801191c:	461a      	mov	r2, r3
 801191e:	0092      	lsls	r2, r2, #2
 8011920:	4413      	add	r3, r2
 8011922:	461a      	mov	r2, r3
 8011924:	0091      	lsls	r1, r2, #2
 8011926:	461a      	mov	r2, r3
 8011928:	460b      	mov	r3, r1
 801192a:	4413      	add	r3, r2
 801192c:	009b      	lsls	r3, r3, #2
 801192e:	82fb      	strh	r3, [r7, #22]
 8011930:	e077      	b.n	8011a22 <ce303_voltage+0x1032>
				}
				else if( meter_rx_buffer[i+5] == 0x29 ) // если 2 разряда после запятой
 8011932:	8a3b      	ldrh	r3, [r7, #16]
 8011934:	3305      	adds	r3, #5
 8011936:	4a0e      	ldr	r2, [pc, #56]	; (8011970 <ce303_voltage+0xf80>)
 8011938:	5cd3      	ldrb	r3, [r2, r3]
 801193a:	2b29      	cmp	r3, #41	; 0x29
 801193c:	d11e      	bne.n	801197c <ce303_voltage+0xf8c>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30))*10;
 801193e:	8a3b      	ldrh	r3, [r7, #16]
 8011940:	3303      	adds	r3, #3
 8011942:	4a0b      	ldr	r2, [pc, #44]	; (8011970 <ce303_voltage+0xf80>)
 8011944:	5cd3      	ldrb	r3, [r2, r3]
 8011946:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801194a:	4613      	mov	r3, r2
 801194c:	009b      	lsls	r3, r3, #2
 801194e:	4413      	add	r3, r2
 8011950:	005b      	lsls	r3, r3, #1
 8011952:	4619      	mov	r1, r3
 8011954:	8a3b      	ldrh	r3, [r7, #16]
 8011956:	3304      	adds	r3, #4
 8011958:	4a05      	ldr	r2, [pc, #20]	; (8011970 <ce303_voltage+0xf80>)
 801195a:	5cd3      	ldrb	r3, [r2, r3]
 801195c:	3b30      	subs	r3, #48	; 0x30
 801195e:	440b      	add	r3, r1
 8011960:	b29b      	uxth	r3, r3
 8011962:	461a      	mov	r2, r3
 8011964:	0092      	lsls	r2, r2, #2
 8011966:	4413      	add	r3, r2
 8011968:	005b      	lsls	r3, r3, #1
 801196a:	82fb      	strh	r3, [r7, #22]
 801196c:	e059      	b.n	8011a22 <ce303_voltage+0x1032>
 801196e:	bf00      	nop
 8011970:	2000994c 	.word	0x2000994c
 8011974:	20009af8 	.word	0x20009af8
 8011978:	2000a174 	.word	0x2000a174
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 3 разряда после запятой
 801197c:	8a3b      	ldrh	r3, [r7, #16]
 801197e:	3306      	adds	r3, #6
 8011980:	4ab0      	ldr	r2, [pc, #704]	; (8011c44 <ce303_voltage+0x1254>)
 8011982:	5cd3      	ldrb	r3, [r2, r3]
 8011984:	2b29      	cmp	r3, #41	; 0x29
 8011986:	d126      	bne.n	80119d6 <ce303_voltage+0xfe6>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 8011988:	8a3b      	ldrh	r3, [r7, #16]
 801198a:	3303      	adds	r3, #3
 801198c:	4aad      	ldr	r2, [pc, #692]	; (8011c44 <ce303_voltage+0x1254>)
 801198e:	5cd3      	ldrb	r3, [r2, r3]
 8011990:	3b30      	subs	r3, #48	; 0x30
 8011992:	b29b      	uxth	r3, r3
 8011994:	461a      	mov	r2, r3
 8011996:	0092      	lsls	r2, r2, #2
 8011998:	4413      	add	r3, r2
 801199a:	461a      	mov	r2, r3
 801199c:	0091      	lsls	r1, r2, #2
 801199e:	461a      	mov	r2, r3
 80119a0:	460b      	mov	r3, r1
 80119a2:	4413      	add	r3, r2
 80119a4:	009b      	lsls	r3, r3, #2
 80119a6:	b29a      	uxth	r2, r3
 80119a8:	8a3b      	ldrh	r3, [r7, #16]
 80119aa:	3304      	adds	r3, #4
 80119ac:	49a5      	ldr	r1, [pc, #660]	; (8011c44 <ce303_voltage+0x1254>)
 80119ae:	5ccb      	ldrb	r3, [r1, r3]
 80119b0:	3b30      	subs	r3, #48	; 0x30
 80119b2:	b29b      	uxth	r3, r3
 80119b4:	4619      	mov	r1, r3
 80119b6:	0089      	lsls	r1, r1, #2
 80119b8:	440b      	add	r3, r1
 80119ba:	005b      	lsls	r3, r3, #1
 80119bc:	b29b      	uxth	r3, r3
 80119be:	4413      	add	r3, r2
 80119c0:	b29a      	uxth	r2, r3
 80119c2:	8a3b      	ldrh	r3, [r7, #16]
 80119c4:	3305      	adds	r3, #5
 80119c6:	499f      	ldr	r1, [pc, #636]	; (8011c44 <ce303_voltage+0x1254>)
 80119c8:	5ccb      	ldrb	r3, [r1, r3]
 80119ca:	b29b      	uxth	r3, r3
 80119cc:	4413      	add	r3, r2
 80119ce:	b29b      	uxth	r3, r3
 80119d0:	3b30      	subs	r3, #48	; 0x30
 80119d2:	82fb      	strh	r3, [r7, #22]
 80119d4:	e025      	b.n	8011a22 <ce303_voltage+0x1032>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 80119d6:	8a3b      	ldrh	r3, [r7, #16]
 80119d8:	3303      	adds	r3, #3
 80119da:	4a9a      	ldr	r2, [pc, #616]	; (8011c44 <ce303_voltage+0x1254>)
 80119dc:	5cd3      	ldrb	r3, [r2, r3]
 80119de:	3b30      	subs	r3, #48	; 0x30
 80119e0:	b29b      	uxth	r3, r3
 80119e2:	461a      	mov	r2, r3
 80119e4:	0092      	lsls	r2, r2, #2
 80119e6:	4413      	add	r3, r2
 80119e8:	461a      	mov	r2, r3
 80119ea:	0091      	lsls	r1, r2, #2
 80119ec:	461a      	mov	r2, r3
 80119ee:	460b      	mov	r3, r1
 80119f0:	4413      	add	r3, r2
 80119f2:	009b      	lsls	r3, r3, #2
 80119f4:	b29a      	uxth	r2, r3
 80119f6:	8a3b      	ldrh	r3, [r7, #16]
 80119f8:	3304      	adds	r3, #4
 80119fa:	4992      	ldr	r1, [pc, #584]	; (8011c44 <ce303_voltage+0x1254>)
 80119fc:	5ccb      	ldrb	r3, [r1, r3]
 80119fe:	3b30      	subs	r3, #48	; 0x30
 8011a00:	b29b      	uxth	r3, r3
 8011a02:	4619      	mov	r1, r3
 8011a04:	0089      	lsls	r1, r1, #2
 8011a06:	440b      	add	r3, r1
 8011a08:	005b      	lsls	r3, r3, #1
 8011a0a:	b29b      	uxth	r3, r3
 8011a0c:	4413      	add	r3, r2
 8011a0e:	b29a      	uxth	r2, r3
 8011a10:	8a3b      	ldrh	r3, [r7, #16]
 8011a12:	3305      	adds	r3, #5
 8011a14:	498b      	ldr	r1, [pc, #556]	; (8011c44 <ce303_voltage+0x1254>)
 8011a16:	5ccb      	ldrb	r3, [r1, r3]
 8011a18:	b29b      	uxth	r3, r3
 8011a1a:	4413      	add	r3, r2
 8011a1c:	b29b      	uxth	r3, r3
 8011a1e:	3b30      	subs	r3, #48	; 0x30
 8011a20:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8011a22:	4b89      	ldr	r3, [pc, #548]	; (8011c48 <ce303_voltage+0x1258>)
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	f04f 31ff 	mov.w	r1, #4294967295
 8011a2a:	4618      	mov	r0, r3
 8011a2c:	f7f6 ff76 	bl	800891c <osMutexWait>
				fm25v02_write(2*CE_303_VOLT_C_REG, ((uint8_t)(temp>>8)) );
 8011a30:	89fb      	ldrh	r3, [r7, #14]
 8011a32:	0a1b      	lsrs	r3, r3, #8
 8011a34:	b29b      	uxth	r3, r3
 8011a36:	b2db      	uxtb	r3, r3
 8011a38:	4619      	mov	r1, r3
 8011a3a:	f242 004e 	movw	r0, #8270	; 0x204e
 8011a3e:	f005 f92f 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_C_REG+1, ((uint8_t)(temp&0x00FF)) );
 8011a42:	89fb      	ldrh	r3, [r7, #14]
 8011a44:	b2db      	uxtb	r3, r3
 8011a46:	4619      	mov	r1, r3
 8011a48:	f242 004f 	movw	r0, #8271	; 0x204f
 8011a4c:	f005 f928 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_C_REG, ((uint8_t)(temp_mil>>8)) );
 8011a50:	8afb      	ldrh	r3, [r7, #22]
 8011a52:	0a1b      	lsrs	r3, r3, #8
 8011a54:	b29b      	uxth	r3, r3
 8011a56:	b2db      	uxtb	r3, r3
 8011a58:	4619      	mov	r1, r3
 8011a5a:	f242 0054 	movw	r0, #8276	; 0x2054
 8011a5e:	f005 f91f 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_C_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 8011a62:	8afb      	ldrh	r3, [r7, #22]
 8011a64:	b2db      	uxtb	r3, r3
 8011a66:	4619      	mov	r1, r3
 8011a68:	f242 0055 	movw	r0, #8277	; 0x2055
 8011a6c:	f005 f918 	bl	8016ca0 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8011a70:	4b75      	ldr	r3, [pc, #468]	; (8011c48 <ce303_voltage+0x1258>)
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	4618      	mov	r0, r3
 8011a76:	f7f6 ff9f 	bl	80089b8 <osMutexRelease>
				status_registers.ce303_volt_c_reg = temp;
 8011a7a:	4a74      	ldr	r2, [pc, #464]	; (8011c4c <ce303_voltage+0x125c>)
 8011a7c:	89fb      	ldrh	r3, [r7, #14]
 8011a7e:	f8a2 304e 	strh.w	r3, [r2, #78]	; 0x4e
				status_registers.ce303_volt_mil_c_reg = temp_mil;
 8011a82:	4a72      	ldr	r2, [pc, #456]	; (8011c4c <ce303_voltage+0x125c>)
 8011a84:	8afb      	ldrh	r3, [r7, #22]
 8011a86:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
				voltage_c_state = 1;
 8011a8a:	2301      	movs	r3, #1
 8011a8c:	74fb      	strb	r3, [r7, #19]
 8011a8e:	e1ce      	b.n	8011e2e <ce303_voltage+0x143e>
			}
			else if( meter_rx_buffer[i+3] == 0x2E)
 8011a90:	8a3b      	ldrh	r3, [r7, #16]
 8011a92:	3303      	adds	r3, #3
 8011a94:	4a6b      	ldr	r2, [pc, #428]	; (8011c44 <ce303_voltage+0x1254>)
 8011a96:	5cd3      	ldrb	r3, [r2, r3]
 8011a98:	2b2e      	cmp	r3, #46	; 0x2e
 8011a9a:	f040 80d9 	bne.w	8011c50 <ce303_voltage+0x1260>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+2])-0x30);
 8011a9e:	8a3b      	ldrh	r3, [r7, #16]
 8011aa0:	3301      	adds	r3, #1
 8011aa2:	4a68      	ldr	r2, [pc, #416]	; (8011c44 <ce303_voltage+0x1254>)
 8011aa4:	5cd3      	ldrb	r3, [r2, r3]
 8011aa6:	3b30      	subs	r3, #48	; 0x30
 8011aa8:	b29b      	uxth	r3, r3
 8011aaa:	461a      	mov	r2, r3
 8011aac:	0092      	lsls	r2, r2, #2
 8011aae:	4413      	add	r3, r2
 8011ab0:	005b      	lsls	r3, r3, #1
 8011ab2:	b29a      	uxth	r2, r3
 8011ab4:	8a3b      	ldrh	r3, [r7, #16]
 8011ab6:	3302      	adds	r3, #2
 8011ab8:	4962      	ldr	r1, [pc, #392]	; (8011c44 <ce303_voltage+0x1254>)
 8011aba:	5ccb      	ldrb	r3, [r1, r3]
 8011abc:	b29b      	uxth	r3, r3
 8011abe:	4413      	add	r3, r2
 8011ac0:	b29b      	uxth	r3, r3
 8011ac2:	3b30      	subs	r3, #48	; 0x30
 8011ac4:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+5] == 0x29 ) // если 1 разряд после запятой
 8011ac6:	8a3b      	ldrh	r3, [r7, #16]
 8011ac8:	3305      	adds	r3, #5
 8011aca:	4a5e      	ldr	r2, [pc, #376]	; (8011c44 <ce303_voltage+0x1254>)
 8011acc:	5cd3      	ldrb	r3, [r2, r3]
 8011ace:	2b29      	cmp	r3, #41	; 0x29
 8011ad0:	d110      	bne.n	8011af4 <ce303_voltage+0x1104>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+4])-0x30)*100;
 8011ad2:	8a3b      	ldrh	r3, [r7, #16]
 8011ad4:	3304      	adds	r3, #4
 8011ad6:	4a5b      	ldr	r2, [pc, #364]	; (8011c44 <ce303_voltage+0x1254>)
 8011ad8:	5cd3      	ldrb	r3, [r2, r3]
 8011ada:	3b30      	subs	r3, #48	; 0x30
 8011adc:	b29b      	uxth	r3, r3
 8011ade:	461a      	mov	r2, r3
 8011ae0:	0092      	lsls	r2, r2, #2
 8011ae2:	4413      	add	r3, r2
 8011ae4:	461a      	mov	r2, r3
 8011ae6:	0091      	lsls	r1, r2, #2
 8011ae8:	461a      	mov	r2, r3
 8011aea:	460b      	mov	r3, r1
 8011aec:	4413      	add	r3, r2
 8011aee:	009b      	lsls	r3, r3, #2
 8011af0:	82fb      	strh	r3, [r7, #22]
 8011af2:	e070      	b.n	8011bd6 <ce303_voltage+0x11e6>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 2 разряда после запятой
 8011af4:	8a3b      	ldrh	r3, [r7, #16]
 8011af6:	3306      	adds	r3, #6
 8011af8:	4a52      	ldr	r2, [pc, #328]	; (8011c44 <ce303_voltage+0x1254>)
 8011afa:	5cd3      	ldrb	r3, [r2, r3]
 8011afc:	2b29      	cmp	r3, #41	; 0x29
 8011afe:	d117      	bne.n	8011b30 <ce303_voltage+0x1140>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30))*10;
 8011b00:	8a3b      	ldrh	r3, [r7, #16]
 8011b02:	3304      	adds	r3, #4
 8011b04:	4a4f      	ldr	r2, [pc, #316]	; (8011c44 <ce303_voltage+0x1254>)
 8011b06:	5cd3      	ldrb	r3, [r2, r3]
 8011b08:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8011b0c:	4613      	mov	r3, r2
 8011b0e:	009b      	lsls	r3, r3, #2
 8011b10:	4413      	add	r3, r2
 8011b12:	005b      	lsls	r3, r3, #1
 8011b14:	4619      	mov	r1, r3
 8011b16:	8a3b      	ldrh	r3, [r7, #16]
 8011b18:	3305      	adds	r3, #5
 8011b1a:	4a4a      	ldr	r2, [pc, #296]	; (8011c44 <ce303_voltage+0x1254>)
 8011b1c:	5cd3      	ldrb	r3, [r2, r3]
 8011b1e:	3b30      	subs	r3, #48	; 0x30
 8011b20:	440b      	add	r3, r1
 8011b22:	b29b      	uxth	r3, r3
 8011b24:	461a      	mov	r2, r3
 8011b26:	0092      	lsls	r2, r2, #2
 8011b28:	4413      	add	r3, r2
 8011b2a:	005b      	lsls	r3, r3, #1
 8011b2c:	82fb      	strh	r3, [r7, #22]
 8011b2e:	e052      	b.n	8011bd6 <ce303_voltage+0x11e6>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 3 разряда после запятой
 8011b30:	8a3b      	ldrh	r3, [r7, #16]
 8011b32:	3307      	adds	r3, #7
 8011b34:	4a43      	ldr	r2, [pc, #268]	; (8011c44 <ce303_voltage+0x1254>)
 8011b36:	5cd3      	ldrb	r3, [r2, r3]
 8011b38:	2b29      	cmp	r3, #41	; 0x29
 8011b3a:	d126      	bne.n	8011b8a <ce303_voltage+0x119a>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 8011b3c:	8a3b      	ldrh	r3, [r7, #16]
 8011b3e:	3304      	adds	r3, #4
 8011b40:	4a40      	ldr	r2, [pc, #256]	; (8011c44 <ce303_voltage+0x1254>)
 8011b42:	5cd3      	ldrb	r3, [r2, r3]
 8011b44:	3b30      	subs	r3, #48	; 0x30
 8011b46:	b29b      	uxth	r3, r3
 8011b48:	461a      	mov	r2, r3
 8011b4a:	0092      	lsls	r2, r2, #2
 8011b4c:	4413      	add	r3, r2
 8011b4e:	461a      	mov	r2, r3
 8011b50:	0091      	lsls	r1, r2, #2
 8011b52:	461a      	mov	r2, r3
 8011b54:	460b      	mov	r3, r1
 8011b56:	4413      	add	r3, r2
 8011b58:	009b      	lsls	r3, r3, #2
 8011b5a:	b29a      	uxth	r2, r3
 8011b5c:	8a3b      	ldrh	r3, [r7, #16]
 8011b5e:	3305      	adds	r3, #5
 8011b60:	4938      	ldr	r1, [pc, #224]	; (8011c44 <ce303_voltage+0x1254>)
 8011b62:	5ccb      	ldrb	r3, [r1, r3]
 8011b64:	3b30      	subs	r3, #48	; 0x30
 8011b66:	b29b      	uxth	r3, r3
 8011b68:	4619      	mov	r1, r3
 8011b6a:	0089      	lsls	r1, r1, #2
 8011b6c:	440b      	add	r3, r1
 8011b6e:	005b      	lsls	r3, r3, #1
 8011b70:	b29b      	uxth	r3, r3
 8011b72:	4413      	add	r3, r2
 8011b74:	b29a      	uxth	r2, r3
 8011b76:	8a3b      	ldrh	r3, [r7, #16]
 8011b78:	3306      	adds	r3, #6
 8011b7a:	4932      	ldr	r1, [pc, #200]	; (8011c44 <ce303_voltage+0x1254>)
 8011b7c:	5ccb      	ldrb	r3, [r1, r3]
 8011b7e:	b29b      	uxth	r3, r3
 8011b80:	4413      	add	r3, r2
 8011b82:	b29b      	uxth	r3, r3
 8011b84:	3b30      	subs	r3, #48	; 0x30
 8011b86:	82fb      	strh	r3, [r7, #22]
 8011b88:	e025      	b.n	8011bd6 <ce303_voltage+0x11e6>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 8011b8a:	8a3b      	ldrh	r3, [r7, #16]
 8011b8c:	3304      	adds	r3, #4
 8011b8e:	4a2d      	ldr	r2, [pc, #180]	; (8011c44 <ce303_voltage+0x1254>)
 8011b90:	5cd3      	ldrb	r3, [r2, r3]
 8011b92:	3b30      	subs	r3, #48	; 0x30
 8011b94:	b29b      	uxth	r3, r3
 8011b96:	461a      	mov	r2, r3
 8011b98:	0092      	lsls	r2, r2, #2
 8011b9a:	4413      	add	r3, r2
 8011b9c:	461a      	mov	r2, r3
 8011b9e:	0091      	lsls	r1, r2, #2
 8011ba0:	461a      	mov	r2, r3
 8011ba2:	460b      	mov	r3, r1
 8011ba4:	4413      	add	r3, r2
 8011ba6:	009b      	lsls	r3, r3, #2
 8011ba8:	b29a      	uxth	r2, r3
 8011baa:	8a3b      	ldrh	r3, [r7, #16]
 8011bac:	3305      	adds	r3, #5
 8011bae:	4925      	ldr	r1, [pc, #148]	; (8011c44 <ce303_voltage+0x1254>)
 8011bb0:	5ccb      	ldrb	r3, [r1, r3]
 8011bb2:	3b30      	subs	r3, #48	; 0x30
 8011bb4:	b29b      	uxth	r3, r3
 8011bb6:	4619      	mov	r1, r3
 8011bb8:	0089      	lsls	r1, r1, #2
 8011bba:	440b      	add	r3, r1
 8011bbc:	005b      	lsls	r3, r3, #1
 8011bbe:	b29b      	uxth	r3, r3
 8011bc0:	4413      	add	r3, r2
 8011bc2:	b29a      	uxth	r2, r3
 8011bc4:	8a3b      	ldrh	r3, [r7, #16]
 8011bc6:	3306      	adds	r3, #6
 8011bc8:	491e      	ldr	r1, [pc, #120]	; (8011c44 <ce303_voltage+0x1254>)
 8011bca:	5ccb      	ldrb	r3, [r1, r3]
 8011bcc:	b29b      	uxth	r3, r3
 8011bce:	4413      	add	r3, r2
 8011bd0:	b29b      	uxth	r3, r3
 8011bd2:	3b30      	subs	r3, #48	; 0x30
 8011bd4:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8011bd6:	4b1c      	ldr	r3, [pc, #112]	; (8011c48 <ce303_voltage+0x1258>)
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	f04f 31ff 	mov.w	r1, #4294967295
 8011bde:	4618      	mov	r0, r3
 8011be0:	f7f6 fe9c 	bl	800891c <osMutexWait>
				fm25v02_write(2*CE_303_VOLT_C_REG, ((uint8_t)(temp>>8)) );
 8011be4:	89fb      	ldrh	r3, [r7, #14]
 8011be6:	0a1b      	lsrs	r3, r3, #8
 8011be8:	b29b      	uxth	r3, r3
 8011bea:	b2db      	uxtb	r3, r3
 8011bec:	4619      	mov	r1, r3
 8011bee:	f242 004e 	movw	r0, #8270	; 0x204e
 8011bf2:	f005 f855 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_C_REG+1, ((uint8_t)(temp&0x00FF)) );
 8011bf6:	89fb      	ldrh	r3, [r7, #14]
 8011bf8:	b2db      	uxtb	r3, r3
 8011bfa:	4619      	mov	r1, r3
 8011bfc:	f242 004f 	movw	r0, #8271	; 0x204f
 8011c00:	f005 f84e 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_C_REG, ((uint8_t)(temp_mil>>8)) );
 8011c04:	8afb      	ldrh	r3, [r7, #22]
 8011c06:	0a1b      	lsrs	r3, r3, #8
 8011c08:	b29b      	uxth	r3, r3
 8011c0a:	b2db      	uxtb	r3, r3
 8011c0c:	4619      	mov	r1, r3
 8011c0e:	f242 0054 	movw	r0, #8276	; 0x2054
 8011c12:	f005 f845 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_C_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 8011c16:	8afb      	ldrh	r3, [r7, #22]
 8011c18:	b2db      	uxtb	r3, r3
 8011c1a:	4619      	mov	r1, r3
 8011c1c:	f242 0055 	movw	r0, #8277	; 0x2055
 8011c20:	f005 f83e 	bl	8016ca0 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8011c24:	4b08      	ldr	r3, [pc, #32]	; (8011c48 <ce303_voltage+0x1258>)
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	4618      	mov	r0, r3
 8011c2a:	f7f6 fec5 	bl	80089b8 <osMutexRelease>
				status_registers.ce303_volt_c_reg = temp;
 8011c2e:	4a07      	ldr	r2, [pc, #28]	; (8011c4c <ce303_voltage+0x125c>)
 8011c30:	89fb      	ldrh	r3, [r7, #14]
 8011c32:	f8a2 304e 	strh.w	r3, [r2, #78]	; 0x4e
				status_registers.ce303_volt_mil_c_reg = temp_mil;
 8011c36:	4a05      	ldr	r2, [pc, #20]	; (8011c4c <ce303_voltage+0x125c>)
 8011c38:	8afb      	ldrh	r3, [r7, #22]
 8011c3a:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
				voltage_c_state = 1;
 8011c3e:	2301      	movs	r3, #1
 8011c40:	74fb      	strb	r3, [r7, #19]
 8011c42:	e0f4      	b.n	8011e2e <ce303_voltage+0x143e>
 8011c44:	2000994c 	.word	0x2000994c
 8011c48:	20009af8 	.word	0x20009af8
 8011c4c:	2000a174 	.word	0x2000a174
			}

			else if( meter_rx_buffer[i+4] == 0x2E)
 8011c50:	8a3b      	ldrh	r3, [r7, #16]
 8011c52:	3304      	adds	r3, #4
 8011c54:	4a85      	ldr	r2, [pc, #532]	; (8011e6c <ce303_voltage+0x147c>)
 8011c56:	5cd3      	ldrb	r3, [r2, r3]
 8011c58:	2b2e      	cmp	r3, #46	; 0x2e
 8011c5a:	f040 80e8 	bne.w	8011e2e <ce303_voltage+0x143e>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+3])-0x30);
 8011c5e:	8a3b      	ldrh	r3, [r7, #16]
 8011c60:	3301      	adds	r3, #1
 8011c62:	4a82      	ldr	r2, [pc, #520]	; (8011e6c <ce303_voltage+0x147c>)
 8011c64:	5cd3      	ldrb	r3, [r2, r3]
 8011c66:	3b30      	subs	r3, #48	; 0x30
 8011c68:	b29b      	uxth	r3, r3
 8011c6a:	461a      	mov	r2, r3
 8011c6c:	0092      	lsls	r2, r2, #2
 8011c6e:	4413      	add	r3, r2
 8011c70:	461a      	mov	r2, r3
 8011c72:	0091      	lsls	r1, r2, #2
 8011c74:	461a      	mov	r2, r3
 8011c76:	460b      	mov	r3, r1
 8011c78:	4413      	add	r3, r2
 8011c7a:	009b      	lsls	r3, r3, #2
 8011c7c:	b29a      	uxth	r2, r3
 8011c7e:	8a3b      	ldrh	r3, [r7, #16]
 8011c80:	3302      	adds	r3, #2
 8011c82:	497a      	ldr	r1, [pc, #488]	; (8011e6c <ce303_voltage+0x147c>)
 8011c84:	5ccb      	ldrb	r3, [r1, r3]
 8011c86:	3b30      	subs	r3, #48	; 0x30
 8011c88:	b29b      	uxth	r3, r3
 8011c8a:	4619      	mov	r1, r3
 8011c8c:	0089      	lsls	r1, r1, #2
 8011c8e:	440b      	add	r3, r1
 8011c90:	005b      	lsls	r3, r3, #1
 8011c92:	b29b      	uxth	r3, r3
 8011c94:	4413      	add	r3, r2
 8011c96:	b29a      	uxth	r2, r3
 8011c98:	8a3b      	ldrh	r3, [r7, #16]
 8011c9a:	3303      	adds	r3, #3
 8011c9c:	4973      	ldr	r1, [pc, #460]	; (8011e6c <ce303_voltage+0x147c>)
 8011c9e:	5ccb      	ldrb	r3, [r1, r3]
 8011ca0:	b29b      	uxth	r3, r3
 8011ca2:	4413      	add	r3, r2
 8011ca4:	b29b      	uxth	r3, r3
 8011ca6:	3b30      	subs	r3, #48	; 0x30
 8011ca8:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+6] == 0x29 ) // если 1 разряд после запятой
 8011caa:	8a3b      	ldrh	r3, [r7, #16]
 8011cac:	3306      	adds	r3, #6
 8011cae:	4a6f      	ldr	r2, [pc, #444]	; (8011e6c <ce303_voltage+0x147c>)
 8011cb0:	5cd3      	ldrb	r3, [r2, r3]
 8011cb2:	2b29      	cmp	r3, #41	; 0x29
 8011cb4:	d110      	bne.n	8011cd8 <ce303_voltage+0x12e8>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+5])-0x30)*100;
 8011cb6:	8a3b      	ldrh	r3, [r7, #16]
 8011cb8:	3305      	adds	r3, #5
 8011cba:	4a6c      	ldr	r2, [pc, #432]	; (8011e6c <ce303_voltage+0x147c>)
 8011cbc:	5cd3      	ldrb	r3, [r2, r3]
 8011cbe:	3b30      	subs	r3, #48	; 0x30
 8011cc0:	b29b      	uxth	r3, r3
 8011cc2:	461a      	mov	r2, r3
 8011cc4:	0092      	lsls	r2, r2, #2
 8011cc6:	4413      	add	r3, r2
 8011cc8:	461a      	mov	r2, r3
 8011cca:	0091      	lsls	r1, r2, #2
 8011ccc:	461a      	mov	r2, r3
 8011cce:	460b      	mov	r3, r1
 8011cd0:	4413      	add	r3, r2
 8011cd2:	009b      	lsls	r3, r3, #2
 8011cd4:	82fb      	strh	r3, [r7, #22]
 8011cd6:	e070      	b.n	8011dba <ce303_voltage+0x13ca>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 2 разряда после запятой
 8011cd8:	8a3b      	ldrh	r3, [r7, #16]
 8011cda:	3307      	adds	r3, #7
 8011cdc:	4a63      	ldr	r2, [pc, #396]	; (8011e6c <ce303_voltage+0x147c>)
 8011cde:	5cd3      	ldrb	r3, [r2, r3]
 8011ce0:	2b29      	cmp	r3, #41	; 0x29
 8011ce2:	d117      	bne.n	8011d14 <ce303_voltage+0x1324>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30))*10;
 8011ce4:	8a3b      	ldrh	r3, [r7, #16]
 8011ce6:	3305      	adds	r3, #5
 8011ce8:	4a60      	ldr	r2, [pc, #384]	; (8011e6c <ce303_voltage+0x147c>)
 8011cea:	5cd3      	ldrb	r3, [r2, r3]
 8011cec:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8011cf0:	4613      	mov	r3, r2
 8011cf2:	009b      	lsls	r3, r3, #2
 8011cf4:	4413      	add	r3, r2
 8011cf6:	005b      	lsls	r3, r3, #1
 8011cf8:	4619      	mov	r1, r3
 8011cfa:	8a3b      	ldrh	r3, [r7, #16]
 8011cfc:	3306      	adds	r3, #6
 8011cfe:	4a5b      	ldr	r2, [pc, #364]	; (8011e6c <ce303_voltage+0x147c>)
 8011d00:	5cd3      	ldrb	r3, [r2, r3]
 8011d02:	3b30      	subs	r3, #48	; 0x30
 8011d04:	440b      	add	r3, r1
 8011d06:	b29b      	uxth	r3, r3
 8011d08:	461a      	mov	r2, r3
 8011d0a:	0092      	lsls	r2, r2, #2
 8011d0c:	4413      	add	r3, r2
 8011d0e:	005b      	lsls	r3, r3, #1
 8011d10:	82fb      	strh	r3, [r7, #22]
 8011d12:	e052      	b.n	8011dba <ce303_voltage+0x13ca>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 3 разряда после запятой
 8011d14:	8a3b      	ldrh	r3, [r7, #16]
 8011d16:	3308      	adds	r3, #8
 8011d18:	4a54      	ldr	r2, [pc, #336]	; (8011e6c <ce303_voltage+0x147c>)
 8011d1a:	5cd3      	ldrb	r3, [r2, r3]
 8011d1c:	2b29      	cmp	r3, #41	; 0x29
 8011d1e:	d126      	bne.n	8011d6e <ce303_voltage+0x137e>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 8011d20:	8a3b      	ldrh	r3, [r7, #16]
 8011d22:	3305      	adds	r3, #5
 8011d24:	4a51      	ldr	r2, [pc, #324]	; (8011e6c <ce303_voltage+0x147c>)
 8011d26:	5cd3      	ldrb	r3, [r2, r3]
 8011d28:	3b30      	subs	r3, #48	; 0x30
 8011d2a:	b29b      	uxth	r3, r3
 8011d2c:	461a      	mov	r2, r3
 8011d2e:	0092      	lsls	r2, r2, #2
 8011d30:	4413      	add	r3, r2
 8011d32:	461a      	mov	r2, r3
 8011d34:	0091      	lsls	r1, r2, #2
 8011d36:	461a      	mov	r2, r3
 8011d38:	460b      	mov	r3, r1
 8011d3a:	4413      	add	r3, r2
 8011d3c:	009b      	lsls	r3, r3, #2
 8011d3e:	b29a      	uxth	r2, r3
 8011d40:	8a3b      	ldrh	r3, [r7, #16]
 8011d42:	3306      	adds	r3, #6
 8011d44:	4949      	ldr	r1, [pc, #292]	; (8011e6c <ce303_voltage+0x147c>)
 8011d46:	5ccb      	ldrb	r3, [r1, r3]
 8011d48:	3b30      	subs	r3, #48	; 0x30
 8011d4a:	b29b      	uxth	r3, r3
 8011d4c:	4619      	mov	r1, r3
 8011d4e:	0089      	lsls	r1, r1, #2
 8011d50:	440b      	add	r3, r1
 8011d52:	005b      	lsls	r3, r3, #1
 8011d54:	b29b      	uxth	r3, r3
 8011d56:	4413      	add	r3, r2
 8011d58:	b29a      	uxth	r2, r3
 8011d5a:	8a3b      	ldrh	r3, [r7, #16]
 8011d5c:	3307      	adds	r3, #7
 8011d5e:	4943      	ldr	r1, [pc, #268]	; (8011e6c <ce303_voltage+0x147c>)
 8011d60:	5ccb      	ldrb	r3, [r1, r3]
 8011d62:	b29b      	uxth	r3, r3
 8011d64:	4413      	add	r3, r2
 8011d66:	b29b      	uxth	r3, r3
 8011d68:	3b30      	subs	r3, #48	; 0x30
 8011d6a:	82fb      	strh	r3, [r7, #22]
 8011d6c:	e025      	b.n	8011dba <ce303_voltage+0x13ca>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 8011d6e:	8a3b      	ldrh	r3, [r7, #16]
 8011d70:	3305      	adds	r3, #5
 8011d72:	4a3e      	ldr	r2, [pc, #248]	; (8011e6c <ce303_voltage+0x147c>)
 8011d74:	5cd3      	ldrb	r3, [r2, r3]
 8011d76:	3b30      	subs	r3, #48	; 0x30
 8011d78:	b29b      	uxth	r3, r3
 8011d7a:	461a      	mov	r2, r3
 8011d7c:	0092      	lsls	r2, r2, #2
 8011d7e:	4413      	add	r3, r2
 8011d80:	461a      	mov	r2, r3
 8011d82:	0091      	lsls	r1, r2, #2
 8011d84:	461a      	mov	r2, r3
 8011d86:	460b      	mov	r3, r1
 8011d88:	4413      	add	r3, r2
 8011d8a:	009b      	lsls	r3, r3, #2
 8011d8c:	b29a      	uxth	r2, r3
 8011d8e:	8a3b      	ldrh	r3, [r7, #16]
 8011d90:	3306      	adds	r3, #6
 8011d92:	4936      	ldr	r1, [pc, #216]	; (8011e6c <ce303_voltage+0x147c>)
 8011d94:	5ccb      	ldrb	r3, [r1, r3]
 8011d96:	3b30      	subs	r3, #48	; 0x30
 8011d98:	b29b      	uxth	r3, r3
 8011d9a:	4619      	mov	r1, r3
 8011d9c:	0089      	lsls	r1, r1, #2
 8011d9e:	440b      	add	r3, r1
 8011da0:	005b      	lsls	r3, r3, #1
 8011da2:	b29b      	uxth	r3, r3
 8011da4:	4413      	add	r3, r2
 8011da6:	b29a      	uxth	r2, r3
 8011da8:	8a3b      	ldrh	r3, [r7, #16]
 8011daa:	3307      	adds	r3, #7
 8011dac:	492f      	ldr	r1, [pc, #188]	; (8011e6c <ce303_voltage+0x147c>)
 8011dae:	5ccb      	ldrb	r3, [r1, r3]
 8011db0:	b29b      	uxth	r3, r3
 8011db2:	4413      	add	r3, r2
 8011db4:	b29b      	uxth	r3, r3
 8011db6:	3b30      	subs	r3, #48	; 0x30
 8011db8:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8011dba:	4b2d      	ldr	r3, [pc, #180]	; (8011e70 <ce303_voltage+0x1480>)
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	f04f 31ff 	mov.w	r1, #4294967295
 8011dc2:	4618      	mov	r0, r3
 8011dc4:	f7f6 fdaa 	bl	800891c <osMutexWait>
				fm25v02_write(2*CE_303_VOLT_C_REG, ((uint8_t)(temp>>8)) );
 8011dc8:	89fb      	ldrh	r3, [r7, #14]
 8011dca:	0a1b      	lsrs	r3, r3, #8
 8011dcc:	b29b      	uxth	r3, r3
 8011dce:	b2db      	uxtb	r3, r3
 8011dd0:	4619      	mov	r1, r3
 8011dd2:	f242 004e 	movw	r0, #8270	; 0x204e
 8011dd6:	f004 ff63 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_C_REG+1, ((uint8_t)(temp&0x00FF)) );
 8011dda:	89fb      	ldrh	r3, [r7, #14]
 8011ddc:	b2db      	uxtb	r3, r3
 8011dde:	4619      	mov	r1, r3
 8011de0:	f242 004f 	movw	r0, #8271	; 0x204f
 8011de4:	f004 ff5c 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_C_REG, ((uint8_t)(temp_mil>>8)) );
 8011de8:	8afb      	ldrh	r3, [r7, #22]
 8011dea:	0a1b      	lsrs	r3, r3, #8
 8011dec:	b29b      	uxth	r3, r3
 8011dee:	b2db      	uxtb	r3, r3
 8011df0:	4619      	mov	r1, r3
 8011df2:	f242 0054 	movw	r0, #8276	; 0x2054
 8011df6:	f004 ff53 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_VOLT_MIL_C_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 8011dfa:	8afb      	ldrh	r3, [r7, #22]
 8011dfc:	b2db      	uxtb	r3, r3
 8011dfe:	4619      	mov	r1, r3
 8011e00:	f242 0055 	movw	r0, #8277	; 0x2055
 8011e04:	f004 ff4c 	bl	8016ca0 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8011e08:	4b19      	ldr	r3, [pc, #100]	; (8011e70 <ce303_voltage+0x1480>)
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	f7f6 fdd3 	bl	80089b8 <osMutexRelease>
				status_registers.ce303_volt_c_reg = temp;
 8011e12:	4a18      	ldr	r2, [pc, #96]	; (8011e74 <ce303_voltage+0x1484>)
 8011e14:	89fb      	ldrh	r3, [r7, #14]
 8011e16:	f8a2 304e 	strh.w	r3, [r2, #78]	; 0x4e
				status_registers.ce303_volt_mil_c_reg = temp_mil;
 8011e1a:	4a16      	ldr	r2, [pc, #88]	; (8011e74 <ce303_voltage+0x1484>)
 8011e1c:	8afb      	ldrh	r3, [r7, #22]
 8011e1e:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
				voltage_c_state = 1;
 8011e22:	2301      	movs	r3, #1
 8011e24:	74fb      	strb	r3, [r7, #19]
 8011e26:	e002      	b.n	8011e2e <ce303_voltage+0x143e>
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8011e28:	bf00      	nop
 8011e2a:	e000      	b.n	8011e2e <ce303_voltage+0x143e>
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8011e2c:	bf00      	nop
	for(uint16_t i=0; i<256; i++)
 8011e2e:	8a3b      	ldrh	r3, [r7, #16]
 8011e30:	3301      	adds	r3, #1
 8011e32:	823b      	strh	r3, [r7, #16]
 8011e34:	8a3b      	ldrh	r3, [r7, #16]
 8011e36:	2bff      	cmp	r3, #255	; 0xff
 8011e38:	f67e afd1 	bls.w	8010dde <ce303_voltage+0x3ee>
			}
		}

	}

	meter_rx_number = 0;
 8011e3c:	4b0e      	ldr	r3, [pc, #56]	; (8011e78 <ce303_voltage+0x1488>)
 8011e3e:	2200      	movs	r2, #0
 8011e40:	701a      	strb	r2, [r3, #0]
	meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8011e42:	f7fe fdbb 	bl	80109bc <meter_rx_buffer_clear>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8011e46:	2201      	movs	r2, #1
 8011e48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8011e4c:	480b      	ldr	r0, [pc, #44]	; (8011e7c <ce303_voltage+0x148c>)
 8011e4e:	f7f2 f807 	bl	8003e60 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart6, &end_buf[0], 5); // передаем команду
 8011e52:	2205      	movs	r2, #5
 8011e54:	490a      	ldr	r1, [pc, #40]	; (8011e80 <ce303_voltage+0x1490>)
 8011e56:	480b      	ldr	r0, [pc, #44]	; (8011e84 <ce303_voltage+0x1494>)
 8011e58:	f7f5 fb20 	bl	800749c <HAL_UART_Transmit_DMA>
	HAL_Delay(1000);
 8011e5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8011e60:	f7f0 fc3e 	bl	80026e0 <HAL_Delay>

}
 8011e64:	bf00      	nop
 8011e66:	3718      	adds	r7, #24
 8011e68:	46bd      	mov	sp, r7
 8011e6a:	bd80      	pop	{r7, pc}
 8011e6c:	2000994c 	.word	0x2000994c
 8011e70:	20009af8 	.word	0x20009af8
 8011e74:	2000a174 	.word	0x2000a174
 8011e78:	20000865 	.word	0x20000865
 8011e7c:	40021800 	.word	0x40021800
 8011e80:	20000034 	.word	0x20000034
 8011e84:	20009d00 	.word	0x20009d00

08011e88 <ce303_current>:

void ce303_current (uint8_t meter_id) // функция чтения тока из счетчика СЕ303
{
 8011e88:	b580      	push	{r7, lr}
 8011e8a:	b086      	sub	sp, #24
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	4603      	mov	r3, r0
 8011e90:	71fb      	strb	r3, [r7, #7]
	uint16_t temp_mil;
	uint8_t current_a_state; // переменные состояния прочтения значений тока ( если переменная равна 0, то значение тока не прочитано, если 1 - значение прочитанно )
	uint8_t current_b_state;
	uint8_t current_c_state;

	if( (meter_id>99)&&(meter_id<1000) )
 8011e92:	79fb      	ldrb	r3, [r7, #7]
 8011e94:	2b63      	cmp	r3, #99	; 0x63
 8011e96:	d962      	bls.n	8011f5e <ce303_current+0xd6>
	{
		start_buf[0] = 0x2F;
 8011e98:	4b9d      	ldr	r3, [pc, #628]	; (8012110 <ce303_current+0x288>)
 8011e9a:	222f      	movs	r2, #47	; 0x2f
 8011e9c:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 8011e9e:	4b9c      	ldr	r3, [pc, #624]	; (8012110 <ce303_current+0x288>)
 8011ea0:	223f      	movs	r2, #63	; 0x3f
 8011ea2:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/100) + 0x30;
 8011ea4:	79fb      	ldrb	r3, [r7, #7]
 8011ea6:	4a9b      	ldr	r2, [pc, #620]	; (8012114 <ce303_current+0x28c>)
 8011ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8011eac:	095b      	lsrs	r3, r3, #5
 8011eae:	b2db      	uxtb	r3, r3
 8011eb0:	3330      	adds	r3, #48	; 0x30
 8011eb2:	b2da      	uxtb	r2, r3
 8011eb4:	4b96      	ldr	r3, [pc, #600]	; (8012110 <ce303_current+0x288>)
 8011eb6:	709a      	strb	r2, [r3, #2]
		start_buf[3] = ((meter_id - (meter_id/100)*100)/10) + 0x30;
 8011eb8:	79fa      	ldrb	r2, [r7, #7]
 8011eba:	79fb      	ldrb	r3, [r7, #7]
 8011ebc:	4995      	ldr	r1, [pc, #596]	; (8012114 <ce303_current+0x28c>)
 8011ebe:	fba1 1303 	umull	r1, r3, r1, r3
 8011ec2:	095b      	lsrs	r3, r3, #5
 8011ec4:	b2db      	uxtb	r3, r3
 8011ec6:	4619      	mov	r1, r3
 8011ec8:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8011ecc:	fb03 f301 	mul.w	r3, r3, r1
 8011ed0:	4413      	add	r3, r2
 8011ed2:	4a91      	ldr	r2, [pc, #580]	; (8012118 <ce303_current+0x290>)
 8011ed4:	fb82 1203 	smull	r1, r2, r2, r3
 8011ed8:	1092      	asrs	r2, r2, #2
 8011eda:	17db      	asrs	r3, r3, #31
 8011edc:	1ad3      	subs	r3, r2, r3
 8011ede:	b2db      	uxtb	r3, r3
 8011ee0:	3330      	adds	r3, #48	; 0x30
 8011ee2:	b2da      	uxtb	r2, r3
 8011ee4:	4b8a      	ldr	r3, [pc, #552]	; (8012110 <ce303_current+0x288>)
 8011ee6:	70da      	strb	r2, [r3, #3]
		start_buf[4] = ((meter_id - ((meter_id/100)*100)) - (((meter_id - ((meter_id/100)*100))/10)*10)) + 0x30 ;
 8011ee8:	79fa      	ldrb	r2, [r7, #7]
 8011eea:	79fb      	ldrb	r3, [r7, #7]
 8011eec:	4989      	ldr	r1, [pc, #548]	; (8012114 <ce303_current+0x28c>)
 8011eee:	fba1 1303 	umull	r1, r3, r1, r3
 8011ef2:	095b      	lsrs	r3, r3, #5
 8011ef4:	b2db      	uxtb	r3, r3
 8011ef6:	4619      	mov	r1, r3
 8011ef8:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8011efc:	fb03 f301 	mul.w	r3, r3, r1
 8011f00:	441a      	add	r2, r3
 8011f02:	4b85      	ldr	r3, [pc, #532]	; (8012118 <ce303_current+0x290>)
 8011f04:	fb83 1302 	smull	r1, r3, r3, r2
 8011f08:	1099      	asrs	r1, r3, #2
 8011f0a:	17d3      	asrs	r3, r2, #31
 8011f0c:	1ac9      	subs	r1, r1, r3
 8011f0e:	460b      	mov	r3, r1
 8011f10:	009b      	lsls	r3, r3, #2
 8011f12:	440b      	add	r3, r1
 8011f14:	005b      	lsls	r3, r3, #1
 8011f16:	1ad1      	subs	r1, r2, r3
 8011f18:	b2cb      	uxtb	r3, r1
 8011f1a:	3330      	adds	r3, #48	; 0x30
 8011f1c:	b2da      	uxtb	r2, r3
 8011f1e:	4b7c      	ldr	r3, [pc, #496]	; (8012110 <ce303_current+0x288>)
 8011f20:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x21;
 8011f22:	4b7b      	ldr	r3, [pc, #492]	; (8012110 <ce303_current+0x288>)
 8011f24:	2221      	movs	r2, #33	; 0x21
 8011f26:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0D;
 8011f28:	4b79      	ldr	r3, [pc, #484]	; (8012110 <ce303_current+0x288>)
 8011f2a:	220d      	movs	r2, #13
 8011f2c:	719a      	strb	r2, [r3, #6]
		start_buf[7] = 0x0A;
 8011f2e:	4b78      	ldr	r3, [pc, #480]	; (8012110 <ce303_current+0x288>)
 8011f30:	220a      	movs	r2, #10
 8011f32:	71da      	strb	r2, [r3, #7]

		meter_rx_number = 0;
 8011f34:	4b79      	ldr	r3, [pc, #484]	; (801211c <ce303_current+0x294>)
 8011f36:	2200      	movs	r2, #0
 8011f38:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8011f3a:	f7fe fd3f 	bl	80109bc <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8011f3e:	2201      	movs	r2, #1
 8011f40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8011f44:	4876      	ldr	r0, [pc, #472]	; (8012120 <ce303_current+0x298>)
 8011f46:	f7f1 ff8b 	bl	8003e60 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 8); // передаем команду
 8011f4a:	2208      	movs	r2, #8
 8011f4c:	4970      	ldr	r1, [pc, #448]	; (8012110 <ce303_current+0x288>)
 8011f4e:	4875      	ldr	r0, [pc, #468]	; (8012124 <ce303_current+0x29c>)
 8011f50:	f7f5 faa4 	bl	800749c <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 8011f54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8011f58:	f7f0 fbc2 	bl	80026e0 <HAL_Delay>
 8011f5c:	e072      	b.n	8012044 <ce303_current+0x1bc>

	}
	else if( (meter_id>9)&&(meter_id<100) )
 8011f5e:	79fb      	ldrb	r3, [r7, #7]
 8011f60:	2b09      	cmp	r3, #9
 8011f62:	d944      	bls.n	8011fee <ce303_current+0x166>
 8011f64:	79fb      	ldrb	r3, [r7, #7]
 8011f66:	2b63      	cmp	r3, #99	; 0x63
 8011f68:	d841      	bhi.n	8011fee <ce303_current+0x166>
	{
		start_buf[0] = 0x2F;
 8011f6a:	4b69      	ldr	r3, [pc, #420]	; (8012110 <ce303_current+0x288>)
 8011f6c:	222f      	movs	r2, #47	; 0x2f
 8011f6e:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 8011f70:	4b67      	ldr	r3, [pc, #412]	; (8012110 <ce303_current+0x288>)
 8011f72:	223f      	movs	r2, #63	; 0x3f
 8011f74:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/10) + 0x30;
 8011f76:	79fb      	ldrb	r3, [r7, #7]
 8011f78:	4a6b      	ldr	r2, [pc, #428]	; (8012128 <ce303_current+0x2a0>)
 8011f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8011f7e:	08db      	lsrs	r3, r3, #3
 8011f80:	b2db      	uxtb	r3, r3
 8011f82:	3330      	adds	r3, #48	; 0x30
 8011f84:	b2da      	uxtb	r2, r3
 8011f86:	4b62      	ldr	r3, [pc, #392]	; (8012110 <ce303_current+0x288>)
 8011f88:	709a      	strb	r2, [r3, #2]
		start_buf[3] = (meter_id - ((meter_id/10)*10)) + 0x30;
 8011f8a:	79fb      	ldrb	r3, [r7, #7]
 8011f8c:	4a66      	ldr	r2, [pc, #408]	; (8012128 <ce303_current+0x2a0>)
 8011f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8011f92:	08db      	lsrs	r3, r3, #3
 8011f94:	b2db      	uxtb	r3, r3
 8011f96:	461a      	mov	r2, r3
 8011f98:	0152      	lsls	r2, r2, #5
 8011f9a:	1ad2      	subs	r2, r2, r3
 8011f9c:	0092      	lsls	r2, r2, #2
 8011f9e:	1ad3      	subs	r3, r2, r3
 8011fa0:	005b      	lsls	r3, r3, #1
 8011fa2:	b2da      	uxtb	r2, r3
 8011fa4:	79fb      	ldrb	r3, [r7, #7]
 8011fa6:	4413      	add	r3, r2
 8011fa8:	b2db      	uxtb	r3, r3
 8011faa:	3330      	adds	r3, #48	; 0x30
 8011fac:	b2da      	uxtb	r2, r3
 8011fae:	4b58      	ldr	r3, [pc, #352]	; (8012110 <ce303_current+0x288>)
 8011fb0:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x21;
 8011fb2:	4b57      	ldr	r3, [pc, #348]	; (8012110 <ce303_current+0x288>)
 8011fb4:	2221      	movs	r2, #33	; 0x21
 8011fb6:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0D;
 8011fb8:	4b55      	ldr	r3, [pc, #340]	; (8012110 <ce303_current+0x288>)
 8011fba:	220d      	movs	r2, #13
 8011fbc:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0A;
 8011fbe:	4b54      	ldr	r3, [pc, #336]	; (8012110 <ce303_current+0x288>)
 8011fc0:	220a      	movs	r2, #10
 8011fc2:	719a      	strb	r2, [r3, #6]

		meter_rx_number = 0;
 8011fc4:	4b55      	ldr	r3, [pc, #340]	; (801211c <ce303_current+0x294>)
 8011fc6:	2200      	movs	r2, #0
 8011fc8:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8011fca:	f7fe fcf7 	bl	80109bc <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8011fce:	2201      	movs	r2, #1
 8011fd0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8011fd4:	4852      	ldr	r0, [pc, #328]	; (8012120 <ce303_current+0x298>)
 8011fd6:	f7f1 ff43 	bl	8003e60 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 7); // передаем команду
 8011fda:	2207      	movs	r2, #7
 8011fdc:	494c      	ldr	r1, [pc, #304]	; (8012110 <ce303_current+0x288>)
 8011fde:	4851      	ldr	r0, [pc, #324]	; (8012124 <ce303_current+0x29c>)
 8011fe0:	f7f5 fa5c 	bl	800749c <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 8011fe4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8011fe8:	f7f0 fb7a 	bl	80026e0 <HAL_Delay>
 8011fec:	e02a      	b.n	8012044 <ce303_current+0x1bc>

	}
	else if( (meter_id>=0)&&(meter_id<10) )
 8011fee:	79fb      	ldrb	r3, [r7, #7]
 8011ff0:	2b09      	cmp	r3, #9
 8011ff2:	d827      	bhi.n	8012044 <ce303_current+0x1bc>
	{
		start_buf[0] = 0x2F;
 8011ff4:	4b46      	ldr	r3, [pc, #280]	; (8012110 <ce303_current+0x288>)
 8011ff6:	222f      	movs	r2, #47	; 0x2f
 8011ff8:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 8011ffa:	4b45      	ldr	r3, [pc, #276]	; (8012110 <ce303_current+0x288>)
 8011ffc:	223f      	movs	r2, #63	; 0x3f
 8011ffe:	705a      	strb	r2, [r3, #1]
		start_buf[2] = meter_id + 0x30;
 8012000:	79fb      	ldrb	r3, [r7, #7]
 8012002:	3330      	adds	r3, #48	; 0x30
 8012004:	b2da      	uxtb	r2, r3
 8012006:	4b42      	ldr	r3, [pc, #264]	; (8012110 <ce303_current+0x288>)
 8012008:	709a      	strb	r2, [r3, #2]
		start_buf[3] = 0x21;
 801200a:	4b41      	ldr	r3, [pc, #260]	; (8012110 <ce303_current+0x288>)
 801200c:	2221      	movs	r2, #33	; 0x21
 801200e:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x0D;
 8012010:	4b3f      	ldr	r3, [pc, #252]	; (8012110 <ce303_current+0x288>)
 8012012:	220d      	movs	r2, #13
 8012014:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0A;
 8012016:	4b3e      	ldr	r3, [pc, #248]	; (8012110 <ce303_current+0x288>)
 8012018:	220a      	movs	r2, #10
 801201a:	715a      	strb	r2, [r3, #5]

		meter_rx_number = 0;
 801201c:	4b3f      	ldr	r3, [pc, #252]	; (801211c <ce303_current+0x294>)
 801201e:	2200      	movs	r2, #0
 8012020:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8012022:	f7fe fccb 	bl	80109bc <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8012026:	2201      	movs	r2, #1
 8012028:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801202c:	483c      	ldr	r0, [pc, #240]	; (8012120 <ce303_current+0x298>)
 801202e:	f7f1 ff17 	bl	8003e60 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 6); // передаем команду
 8012032:	2206      	movs	r2, #6
 8012034:	4936      	ldr	r1, [pc, #216]	; (8012110 <ce303_current+0x288>)
 8012036:	483b      	ldr	r0, [pc, #236]	; (8012124 <ce303_current+0x29c>)
 8012038:	f7f5 fa30 	bl	800749c <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 801203c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012040:	f7f0 fb4e 	bl	80026e0 <HAL_Delay>
	}


	if( (meter_id>99)&&(meter_id<1000) )
 8012044:	79fb      	ldrb	r3, [r7, #7]
 8012046:	2b63      	cmp	r3, #99	; 0x63
 8012048:	d970      	bls.n	801212c <ce303_current+0x2a4>
	{
		start_buf[0] = 0x2F;
 801204a:	4b31      	ldr	r3, [pc, #196]	; (8012110 <ce303_current+0x288>)
 801204c:	222f      	movs	r2, #47	; 0x2f
 801204e:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 8012050:	4b2f      	ldr	r3, [pc, #188]	; (8012110 <ce303_current+0x288>)
 8012052:	223f      	movs	r2, #63	; 0x3f
 8012054:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/100) + 0x30;
 8012056:	79fb      	ldrb	r3, [r7, #7]
 8012058:	4a2e      	ldr	r2, [pc, #184]	; (8012114 <ce303_current+0x28c>)
 801205a:	fba2 2303 	umull	r2, r3, r2, r3
 801205e:	095b      	lsrs	r3, r3, #5
 8012060:	b2db      	uxtb	r3, r3
 8012062:	3330      	adds	r3, #48	; 0x30
 8012064:	b2da      	uxtb	r2, r3
 8012066:	4b2a      	ldr	r3, [pc, #168]	; (8012110 <ce303_current+0x288>)
 8012068:	709a      	strb	r2, [r3, #2]
		start_buf[3] = ((meter_id - (meter_id/100)*100)/10) + 0x30;
 801206a:	79fa      	ldrb	r2, [r7, #7]
 801206c:	79fb      	ldrb	r3, [r7, #7]
 801206e:	4929      	ldr	r1, [pc, #164]	; (8012114 <ce303_current+0x28c>)
 8012070:	fba1 1303 	umull	r1, r3, r1, r3
 8012074:	095b      	lsrs	r3, r3, #5
 8012076:	b2db      	uxtb	r3, r3
 8012078:	4619      	mov	r1, r3
 801207a:	f06f 0363 	mvn.w	r3, #99	; 0x63
 801207e:	fb03 f301 	mul.w	r3, r3, r1
 8012082:	4413      	add	r3, r2
 8012084:	4a24      	ldr	r2, [pc, #144]	; (8012118 <ce303_current+0x290>)
 8012086:	fb82 1203 	smull	r1, r2, r2, r3
 801208a:	1092      	asrs	r2, r2, #2
 801208c:	17db      	asrs	r3, r3, #31
 801208e:	1ad3      	subs	r3, r2, r3
 8012090:	b2db      	uxtb	r3, r3
 8012092:	3330      	adds	r3, #48	; 0x30
 8012094:	b2da      	uxtb	r2, r3
 8012096:	4b1e      	ldr	r3, [pc, #120]	; (8012110 <ce303_current+0x288>)
 8012098:	70da      	strb	r2, [r3, #3]
		start_buf[4] = ((meter_id - ((meter_id/100)*100)) - (((meter_id - ((meter_id/100)*100))/10)*10)) + 0x30 ;
 801209a:	79fa      	ldrb	r2, [r7, #7]
 801209c:	79fb      	ldrb	r3, [r7, #7]
 801209e:	491d      	ldr	r1, [pc, #116]	; (8012114 <ce303_current+0x28c>)
 80120a0:	fba1 1303 	umull	r1, r3, r1, r3
 80120a4:	095b      	lsrs	r3, r3, #5
 80120a6:	b2db      	uxtb	r3, r3
 80120a8:	4619      	mov	r1, r3
 80120aa:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80120ae:	fb03 f301 	mul.w	r3, r3, r1
 80120b2:	441a      	add	r2, r3
 80120b4:	4b18      	ldr	r3, [pc, #96]	; (8012118 <ce303_current+0x290>)
 80120b6:	fb83 1302 	smull	r1, r3, r3, r2
 80120ba:	1099      	asrs	r1, r3, #2
 80120bc:	17d3      	asrs	r3, r2, #31
 80120be:	1ac9      	subs	r1, r1, r3
 80120c0:	460b      	mov	r3, r1
 80120c2:	009b      	lsls	r3, r3, #2
 80120c4:	440b      	add	r3, r1
 80120c6:	005b      	lsls	r3, r3, #1
 80120c8:	1ad1      	subs	r1, r2, r3
 80120ca:	b2cb      	uxtb	r3, r1
 80120cc:	3330      	adds	r3, #48	; 0x30
 80120ce:	b2da      	uxtb	r2, r3
 80120d0:	4b0f      	ldr	r3, [pc, #60]	; (8012110 <ce303_current+0x288>)
 80120d2:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x21;
 80120d4:	4b0e      	ldr	r3, [pc, #56]	; (8012110 <ce303_current+0x288>)
 80120d6:	2221      	movs	r2, #33	; 0x21
 80120d8:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0D;
 80120da:	4b0d      	ldr	r3, [pc, #52]	; (8012110 <ce303_current+0x288>)
 80120dc:	220d      	movs	r2, #13
 80120de:	719a      	strb	r2, [r3, #6]
		start_buf[7] = 0x0A;
 80120e0:	4b0b      	ldr	r3, [pc, #44]	; (8012110 <ce303_current+0x288>)
 80120e2:	220a      	movs	r2, #10
 80120e4:	71da      	strb	r2, [r3, #7]

		meter_rx_number = 0;
 80120e6:	4b0d      	ldr	r3, [pc, #52]	; (801211c <ce303_current+0x294>)
 80120e8:	2200      	movs	r2, #0
 80120ea:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 80120ec:	f7fe fc66 	bl	80109bc <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 80120f0:	2201      	movs	r2, #1
 80120f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80120f6:	480a      	ldr	r0, [pc, #40]	; (8012120 <ce303_current+0x298>)
 80120f8:	f7f1 feb2 	bl	8003e60 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 8); // передаем команду
 80120fc:	2208      	movs	r2, #8
 80120fe:	4904      	ldr	r1, [pc, #16]	; (8012110 <ce303_current+0x288>)
 8012100:	4808      	ldr	r0, [pc, #32]	; (8012124 <ce303_current+0x29c>)
 8012102:	f7f5 f9cb 	bl	800749c <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 8012106:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801210a:	f7f0 fae9 	bl	80026e0 <HAL_Delay>
 801210e:	e080      	b.n	8012212 <ce303_current+0x38a>
 8012110:	20000014 	.word	0x20000014
 8012114:	51eb851f 	.word	0x51eb851f
 8012118:	66666667 	.word	0x66666667
 801211c:	20000865 	.word	0x20000865
 8012120:	40021800 	.word	0x40021800
 8012124:	20009d00 	.word	0x20009d00
 8012128:	cccccccd 	.word	0xcccccccd

	}
	else if( (meter_id>9)&&(meter_id<100) )
 801212c:	79fb      	ldrb	r3, [r7, #7]
 801212e:	2b09      	cmp	r3, #9
 8012130:	d944      	bls.n	80121bc <ce303_current+0x334>
 8012132:	79fb      	ldrb	r3, [r7, #7]
 8012134:	2b63      	cmp	r3, #99	; 0x63
 8012136:	d841      	bhi.n	80121bc <ce303_current+0x334>
	{
		start_buf[0] = 0x2F;
 8012138:	4b90      	ldr	r3, [pc, #576]	; (801237c <ce303_current+0x4f4>)
 801213a:	222f      	movs	r2, #47	; 0x2f
 801213c:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 801213e:	4b8f      	ldr	r3, [pc, #572]	; (801237c <ce303_current+0x4f4>)
 8012140:	223f      	movs	r2, #63	; 0x3f
 8012142:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/10) + 0x30;
 8012144:	79fb      	ldrb	r3, [r7, #7]
 8012146:	4a8e      	ldr	r2, [pc, #568]	; (8012380 <ce303_current+0x4f8>)
 8012148:	fba2 2303 	umull	r2, r3, r2, r3
 801214c:	08db      	lsrs	r3, r3, #3
 801214e:	b2db      	uxtb	r3, r3
 8012150:	3330      	adds	r3, #48	; 0x30
 8012152:	b2da      	uxtb	r2, r3
 8012154:	4b89      	ldr	r3, [pc, #548]	; (801237c <ce303_current+0x4f4>)
 8012156:	709a      	strb	r2, [r3, #2]
		start_buf[3] = (meter_id - ((meter_id/10)*10)) + 0x30;
 8012158:	79fb      	ldrb	r3, [r7, #7]
 801215a:	4a89      	ldr	r2, [pc, #548]	; (8012380 <ce303_current+0x4f8>)
 801215c:	fba2 2303 	umull	r2, r3, r2, r3
 8012160:	08db      	lsrs	r3, r3, #3
 8012162:	b2db      	uxtb	r3, r3
 8012164:	461a      	mov	r2, r3
 8012166:	0152      	lsls	r2, r2, #5
 8012168:	1ad2      	subs	r2, r2, r3
 801216a:	0092      	lsls	r2, r2, #2
 801216c:	1ad3      	subs	r3, r2, r3
 801216e:	005b      	lsls	r3, r3, #1
 8012170:	b2da      	uxtb	r2, r3
 8012172:	79fb      	ldrb	r3, [r7, #7]
 8012174:	4413      	add	r3, r2
 8012176:	b2db      	uxtb	r3, r3
 8012178:	3330      	adds	r3, #48	; 0x30
 801217a:	b2da      	uxtb	r2, r3
 801217c:	4b7f      	ldr	r3, [pc, #508]	; (801237c <ce303_current+0x4f4>)
 801217e:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x21;
 8012180:	4b7e      	ldr	r3, [pc, #504]	; (801237c <ce303_current+0x4f4>)
 8012182:	2221      	movs	r2, #33	; 0x21
 8012184:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0D;
 8012186:	4b7d      	ldr	r3, [pc, #500]	; (801237c <ce303_current+0x4f4>)
 8012188:	220d      	movs	r2, #13
 801218a:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0A;
 801218c:	4b7b      	ldr	r3, [pc, #492]	; (801237c <ce303_current+0x4f4>)
 801218e:	220a      	movs	r2, #10
 8012190:	719a      	strb	r2, [r3, #6]

		meter_rx_number = 0;
 8012192:	4b7c      	ldr	r3, [pc, #496]	; (8012384 <ce303_current+0x4fc>)
 8012194:	2200      	movs	r2, #0
 8012196:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8012198:	f7fe fc10 	bl	80109bc <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 801219c:	2201      	movs	r2, #1
 801219e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80121a2:	4879      	ldr	r0, [pc, #484]	; (8012388 <ce303_current+0x500>)
 80121a4:	f7f1 fe5c 	bl	8003e60 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 7); // передаем команду
 80121a8:	2207      	movs	r2, #7
 80121aa:	4974      	ldr	r1, [pc, #464]	; (801237c <ce303_current+0x4f4>)
 80121ac:	4877      	ldr	r0, [pc, #476]	; (801238c <ce303_current+0x504>)
 80121ae:	f7f5 f975 	bl	800749c <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 80121b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80121b6:	f7f0 fa93 	bl	80026e0 <HAL_Delay>
 80121ba:	e02a      	b.n	8012212 <ce303_current+0x38a>

	}
	else if( (meter_id>=0)&&(meter_id<10) )
 80121bc:	79fb      	ldrb	r3, [r7, #7]
 80121be:	2b09      	cmp	r3, #9
 80121c0:	d827      	bhi.n	8012212 <ce303_current+0x38a>
	{
		start_buf[0] = 0x2F;
 80121c2:	4b6e      	ldr	r3, [pc, #440]	; (801237c <ce303_current+0x4f4>)
 80121c4:	222f      	movs	r2, #47	; 0x2f
 80121c6:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 80121c8:	4b6c      	ldr	r3, [pc, #432]	; (801237c <ce303_current+0x4f4>)
 80121ca:	223f      	movs	r2, #63	; 0x3f
 80121cc:	705a      	strb	r2, [r3, #1]
		start_buf[2] = meter_id + 0x30;
 80121ce:	79fb      	ldrb	r3, [r7, #7]
 80121d0:	3330      	adds	r3, #48	; 0x30
 80121d2:	b2da      	uxtb	r2, r3
 80121d4:	4b69      	ldr	r3, [pc, #420]	; (801237c <ce303_current+0x4f4>)
 80121d6:	709a      	strb	r2, [r3, #2]
		start_buf[3] = 0x21;
 80121d8:	4b68      	ldr	r3, [pc, #416]	; (801237c <ce303_current+0x4f4>)
 80121da:	2221      	movs	r2, #33	; 0x21
 80121dc:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x0D;
 80121de:	4b67      	ldr	r3, [pc, #412]	; (801237c <ce303_current+0x4f4>)
 80121e0:	220d      	movs	r2, #13
 80121e2:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0A;
 80121e4:	4b65      	ldr	r3, [pc, #404]	; (801237c <ce303_current+0x4f4>)
 80121e6:	220a      	movs	r2, #10
 80121e8:	715a      	strb	r2, [r3, #5]

		meter_rx_number = 0;
 80121ea:	4b66      	ldr	r3, [pc, #408]	; (8012384 <ce303_current+0x4fc>)
 80121ec:	2200      	movs	r2, #0
 80121ee:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 80121f0:	f7fe fbe4 	bl	80109bc <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 80121f4:	2201      	movs	r2, #1
 80121f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80121fa:	4863      	ldr	r0, [pc, #396]	; (8012388 <ce303_current+0x500>)
 80121fc:	f7f1 fe30 	bl	8003e60 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 6); // передаем команду
 8012200:	2206      	movs	r2, #6
 8012202:	495e      	ldr	r1, [pc, #376]	; (801237c <ce303_current+0x4f4>)
 8012204:	4861      	ldr	r0, [pc, #388]	; (801238c <ce303_current+0x504>)
 8012206:	f7f5 f949 	bl	800749c <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 801220a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801220e:	f7f0 fa67 	bl	80026e0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
	HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 6); // передаем команду
	HAL_Delay(1000); // ждем
	*/

	meter_rx_number = 0;
 8012212:	4b5c      	ldr	r3, [pc, #368]	; (8012384 <ce303_current+0x4fc>)
 8012214:	2200      	movs	r2, #0
 8012216:	701a      	strb	r2, [r3, #0]
	meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8012218:	f7fe fbd0 	bl	80109bc <meter_rx_buffer_clear>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 801221c:	2201      	movs	r2, #1
 801221e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8012222:	4859      	ldr	r0, [pc, #356]	; (8012388 <ce303_current+0x500>)
 8012224:	f7f1 fe1c 	bl	8003e60 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart6, &password_buf[0], 6); // передаем команду
 8012228:	2206      	movs	r2, #6
 801222a:	4959      	ldr	r1, [pc, #356]	; (8012390 <ce303_current+0x508>)
 801222c:	4857      	ldr	r0, [pc, #348]	; (801238c <ce303_current+0x504>)
 801222e:	f7f5 f935 	bl	800749c <HAL_UART_Transmit_DMA>
	HAL_Delay(1000);
 8012232:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8012236:	f7f0 fa53 	bl	80026e0 <HAL_Delay>

	meter_rx_number = 0;
 801223a:	4b52      	ldr	r3, [pc, #328]	; (8012384 <ce303_current+0x4fc>)
 801223c:	2200      	movs	r2, #0
 801223e:	701a      	strb	r2, [r3, #0]
	meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8012240:	f7fe fbbc 	bl	80109bc <meter_rx_buffer_clear>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8012244:	2201      	movs	r2, #1
 8012246:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801224a:	484f      	ldr	r0, [pc, #316]	; (8012388 <ce303_current+0x500>)
 801224c:	f7f1 fe08 	bl	8003e60 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart6, &current_buf[0], 13); // передаем команду
 8012250:	220d      	movs	r2, #13
 8012252:	4950      	ldr	r1, [pc, #320]	; (8012394 <ce303_current+0x50c>)
 8012254:	484d      	ldr	r0, [pc, #308]	; (801238c <ce303_current+0x504>)
 8012256:	f7f5 f921 	bl	800749c <HAL_UART_Transmit_DMA>
	HAL_Delay(1000);
 801225a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801225e:	f7f0 fa3f 	bl	80026e0 <HAL_Delay>

	current_a_state = 0; // обнуляем переменные состояния прочтения тока перед их прочтением
 8012262:	2300      	movs	r3, #0
 8012264:	757b      	strb	r3, [r7, #21]
	current_b_state = 0;
 8012266:	2300      	movs	r3, #0
 8012268:	753b      	strb	r3, [r7, #20]
	current_c_state = 0;
 801226a:	2300      	movs	r3, #0
 801226c:	74fb      	strb	r3, [r7, #19]

	for(uint16_t i=0; i<256; i++)
 801226e:	2300      	movs	r3, #0
 8012270:	823b      	strh	r3, [r7, #16]
 8012272:	f001 b829 	b.w	80132c8 <ce303_current+0x1440>
	{

		if( (meter_rx_buffer[i] == 0x28) && (current_a_state==0) && (current_b_state==0) && (current_c_state==0) ) // 0х28 означает символ "(" в ASCII таблице
 8012276:	8a3b      	ldrh	r3, [r7, #16]
 8012278:	4a47      	ldr	r2, [pc, #284]	; (8012398 <ce303_current+0x510>)
 801227a:	5cd3      	ldrb	r3, [r2, r3]
 801227c:	2b28      	cmp	r3, #40	; 0x28
 801227e:	f040 82b7 	bne.w	80127f0 <ce303_current+0x968>
 8012282:	7d7b      	ldrb	r3, [r7, #21]
 8012284:	2b00      	cmp	r3, #0
 8012286:	f040 82b3 	bne.w	80127f0 <ce303_current+0x968>
 801228a:	7d3b      	ldrb	r3, [r7, #20]
 801228c:	2b00      	cmp	r3, #0
 801228e:	f040 82af 	bne.w	80127f0 <ce303_current+0x968>
 8012292:	7cfb      	ldrb	r3, [r7, #19]
 8012294:	2b00      	cmp	r3, #0
 8012296:	f040 82ab 	bne.w	80127f0 <ce303_current+0x968>
		{
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 801229a:	8a3b      	ldrh	r3, [r7, #16]
 801229c:	3302      	adds	r3, #2
 801229e:	4a3e      	ldr	r2, [pc, #248]	; (8012398 <ce303_current+0x510>)
 80122a0:	5cd3      	ldrb	r3, [r2, r3]
 80122a2:	2b2e      	cmp	r3, #46	; 0x2e
 80122a4:	f040 80d7 	bne.w	8012456 <ce303_current+0x5ce>
			{
				temp = (uint16_t)(meter_rx_buffer[i+1]-0x30);
 80122a8:	8a3b      	ldrh	r3, [r7, #16]
 80122aa:	3301      	adds	r3, #1
 80122ac:	4a3a      	ldr	r2, [pc, #232]	; (8012398 <ce303_current+0x510>)
 80122ae:	5cd3      	ldrb	r3, [r2, r3]
 80122b0:	b29b      	uxth	r3, r3
 80122b2:	3b30      	subs	r3, #48	; 0x30
 80122b4:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+4] == 0x29 ) // если 1 разряд после запятой
 80122b6:	8a3b      	ldrh	r3, [r7, #16]
 80122b8:	3304      	adds	r3, #4
 80122ba:	4a37      	ldr	r2, [pc, #220]	; (8012398 <ce303_current+0x510>)
 80122bc:	5cd3      	ldrb	r3, [r2, r3]
 80122be:	2b29      	cmp	r3, #41	; 0x29
 80122c0:	d110      	bne.n	80122e4 <ce303_current+0x45c>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+3])-0x30)*100;
 80122c2:	8a3b      	ldrh	r3, [r7, #16]
 80122c4:	3303      	adds	r3, #3
 80122c6:	4a34      	ldr	r2, [pc, #208]	; (8012398 <ce303_current+0x510>)
 80122c8:	5cd3      	ldrb	r3, [r2, r3]
 80122ca:	3b30      	subs	r3, #48	; 0x30
 80122cc:	b29b      	uxth	r3, r3
 80122ce:	461a      	mov	r2, r3
 80122d0:	0092      	lsls	r2, r2, #2
 80122d2:	4413      	add	r3, r2
 80122d4:	461a      	mov	r2, r3
 80122d6:	0091      	lsls	r1, r2, #2
 80122d8:	461a      	mov	r2, r3
 80122da:	460b      	mov	r3, r1
 80122dc:	4413      	add	r3, r2
 80122de:	009b      	lsls	r3, r3, #2
 80122e0:	82fb      	strh	r3, [r7, #22]
 80122e2:	e081      	b.n	80123e8 <ce303_current+0x560>
				}
				else if( meter_rx_buffer[i+5] == 0x29 ) // если 2 разряда после запятой
 80122e4:	8a3b      	ldrh	r3, [r7, #16]
 80122e6:	3305      	adds	r3, #5
 80122e8:	4a2b      	ldr	r2, [pc, #172]	; (8012398 <ce303_current+0x510>)
 80122ea:	5cd3      	ldrb	r3, [r2, r3]
 80122ec:	2b29      	cmp	r3, #41	; 0x29
 80122ee:	d117      	bne.n	8012320 <ce303_current+0x498>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30))*10;
 80122f0:	8a3b      	ldrh	r3, [r7, #16]
 80122f2:	3303      	adds	r3, #3
 80122f4:	4a28      	ldr	r2, [pc, #160]	; (8012398 <ce303_current+0x510>)
 80122f6:	5cd3      	ldrb	r3, [r2, r3]
 80122f8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80122fc:	4613      	mov	r3, r2
 80122fe:	009b      	lsls	r3, r3, #2
 8012300:	4413      	add	r3, r2
 8012302:	005b      	lsls	r3, r3, #1
 8012304:	4619      	mov	r1, r3
 8012306:	8a3b      	ldrh	r3, [r7, #16]
 8012308:	3304      	adds	r3, #4
 801230a:	4a23      	ldr	r2, [pc, #140]	; (8012398 <ce303_current+0x510>)
 801230c:	5cd3      	ldrb	r3, [r2, r3]
 801230e:	3b30      	subs	r3, #48	; 0x30
 8012310:	440b      	add	r3, r1
 8012312:	b29b      	uxth	r3, r3
 8012314:	461a      	mov	r2, r3
 8012316:	0092      	lsls	r2, r2, #2
 8012318:	4413      	add	r3, r2
 801231a:	005b      	lsls	r3, r3, #1
 801231c:	82fb      	strh	r3, [r7, #22]
 801231e:	e063      	b.n	80123e8 <ce303_current+0x560>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 3 разряда после запятой
 8012320:	8a3b      	ldrh	r3, [r7, #16]
 8012322:	3306      	adds	r3, #6
 8012324:	4a1c      	ldr	r2, [pc, #112]	; (8012398 <ce303_current+0x510>)
 8012326:	5cd3      	ldrb	r3, [r2, r3]
 8012328:	2b29      	cmp	r3, #41	; 0x29
 801232a:	d137      	bne.n	801239c <ce303_current+0x514>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 801232c:	8a3b      	ldrh	r3, [r7, #16]
 801232e:	3303      	adds	r3, #3
 8012330:	4a19      	ldr	r2, [pc, #100]	; (8012398 <ce303_current+0x510>)
 8012332:	5cd3      	ldrb	r3, [r2, r3]
 8012334:	3b30      	subs	r3, #48	; 0x30
 8012336:	b29b      	uxth	r3, r3
 8012338:	461a      	mov	r2, r3
 801233a:	0092      	lsls	r2, r2, #2
 801233c:	4413      	add	r3, r2
 801233e:	461a      	mov	r2, r3
 8012340:	0091      	lsls	r1, r2, #2
 8012342:	461a      	mov	r2, r3
 8012344:	460b      	mov	r3, r1
 8012346:	4413      	add	r3, r2
 8012348:	009b      	lsls	r3, r3, #2
 801234a:	b29a      	uxth	r2, r3
 801234c:	8a3b      	ldrh	r3, [r7, #16]
 801234e:	3304      	adds	r3, #4
 8012350:	4911      	ldr	r1, [pc, #68]	; (8012398 <ce303_current+0x510>)
 8012352:	5ccb      	ldrb	r3, [r1, r3]
 8012354:	3b30      	subs	r3, #48	; 0x30
 8012356:	b29b      	uxth	r3, r3
 8012358:	4619      	mov	r1, r3
 801235a:	0089      	lsls	r1, r1, #2
 801235c:	440b      	add	r3, r1
 801235e:	005b      	lsls	r3, r3, #1
 8012360:	b29b      	uxth	r3, r3
 8012362:	4413      	add	r3, r2
 8012364:	b29a      	uxth	r2, r3
 8012366:	8a3b      	ldrh	r3, [r7, #16]
 8012368:	3305      	adds	r3, #5
 801236a:	490b      	ldr	r1, [pc, #44]	; (8012398 <ce303_current+0x510>)
 801236c:	5ccb      	ldrb	r3, [r1, r3]
 801236e:	b29b      	uxth	r3, r3
 8012370:	4413      	add	r3, r2
 8012372:	b29b      	uxth	r3, r3
 8012374:	3b30      	subs	r3, #48	; 0x30
 8012376:	82fb      	strh	r3, [r7, #22]
 8012378:	e036      	b.n	80123e8 <ce303_current+0x560>
 801237a:	bf00      	nop
 801237c:	20000014 	.word	0x20000014
 8012380:	cccccccd 	.word	0xcccccccd
 8012384:	20000865 	.word	0x20000865
 8012388:	40021800 	.word	0x40021800
 801238c:	20009d00 	.word	0x20009d00
 8012390:	2000001c 	.word	0x2000001c
 8012394:	2000003c 	.word	0x2000003c
 8012398:	2000994c 	.word	0x2000994c
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 801239c:	8a3b      	ldrh	r3, [r7, #16]
 801239e:	3303      	adds	r3, #3
 80123a0:	4a9a      	ldr	r2, [pc, #616]	; (801260c <ce303_current+0x784>)
 80123a2:	5cd3      	ldrb	r3, [r2, r3]
 80123a4:	3b30      	subs	r3, #48	; 0x30
 80123a6:	b29b      	uxth	r3, r3
 80123a8:	461a      	mov	r2, r3
 80123aa:	0092      	lsls	r2, r2, #2
 80123ac:	4413      	add	r3, r2
 80123ae:	461a      	mov	r2, r3
 80123b0:	0091      	lsls	r1, r2, #2
 80123b2:	461a      	mov	r2, r3
 80123b4:	460b      	mov	r3, r1
 80123b6:	4413      	add	r3, r2
 80123b8:	009b      	lsls	r3, r3, #2
 80123ba:	b29a      	uxth	r2, r3
 80123bc:	8a3b      	ldrh	r3, [r7, #16]
 80123be:	3304      	adds	r3, #4
 80123c0:	4992      	ldr	r1, [pc, #584]	; (801260c <ce303_current+0x784>)
 80123c2:	5ccb      	ldrb	r3, [r1, r3]
 80123c4:	3b30      	subs	r3, #48	; 0x30
 80123c6:	b29b      	uxth	r3, r3
 80123c8:	4619      	mov	r1, r3
 80123ca:	0089      	lsls	r1, r1, #2
 80123cc:	440b      	add	r3, r1
 80123ce:	005b      	lsls	r3, r3, #1
 80123d0:	b29b      	uxth	r3, r3
 80123d2:	4413      	add	r3, r2
 80123d4:	b29a      	uxth	r2, r3
 80123d6:	8a3b      	ldrh	r3, [r7, #16]
 80123d8:	3305      	adds	r3, #5
 80123da:	498c      	ldr	r1, [pc, #560]	; (801260c <ce303_current+0x784>)
 80123dc:	5ccb      	ldrb	r3, [r1, r3]
 80123de:	b29b      	uxth	r3, r3
 80123e0:	4413      	add	r3, r2
 80123e2:	b29b      	uxth	r3, r3
 80123e4:	3b30      	subs	r3, #48	; 0x30
 80123e6:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 80123e8:	4b89      	ldr	r3, [pc, #548]	; (8012610 <ce303_current+0x788>)
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	f04f 31ff 	mov.w	r1, #4294967295
 80123f0:	4618      	mov	r0, r3
 80123f2:	f7f6 fa93 	bl	800891c <osMutexWait>
				fm25v02_write(2*CE_303_CURRENT_A_REG, ((uint8_t)(temp>>8)) );
 80123f6:	89fb      	ldrh	r3, [r7, #14]
 80123f8:	0a1b      	lsrs	r3, r3, #8
 80123fa:	b29b      	uxth	r3, r3
 80123fc:	b2db      	uxtb	r3, r3
 80123fe:	4619      	mov	r1, r3
 8012400:	f242 003e 	movw	r0, #8254	; 0x203e
 8012404:	f004 fc4c 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_A_REG+1, ((uint8_t)(temp&0x00FF)) );
 8012408:	89fb      	ldrh	r3, [r7, #14]
 801240a:	b2db      	uxtb	r3, r3
 801240c:	4619      	mov	r1, r3
 801240e:	f242 003f 	movw	r0, #8255	; 0x203f
 8012412:	f004 fc45 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_A_REG, ((uint8_t)(temp_mil>>8)) );
 8012416:	8afb      	ldrh	r3, [r7, #22]
 8012418:	0a1b      	lsrs	r3, r3, #8
 801241a:	b29b      	uxth	r3, r3
 801241c:	b2db      	uxtb	r3, r3
 801241e:	4619      	mov	r1, r3
 8012420:	f242 0044 	movw	r0, #8260	; 0x2044
 8012424:	f004 fc3c 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_A_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 8012428:	8afb      	ldrh	r3, [r7, #22]
 801242a:	b2db      	uxtb	r3, r3
 801242c:	4619      	mov	r1, r3
 801242e:	f242 0045 	movw	r0, #8261	; 0x2045
 8012432:	f004 fc35 	bl	8016ca0 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8012436:	4b76      	ldr	r3, [pc, #472]	; (8012610 <ce303_current+0x788>)
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	4618      	mov	r0, r3
 801243c:	f7f6 fabc 	bl	80089b8 <osMutexRelease>
				status_registers.ce303_current_a_reg = temp;
 8012440:	4a74      	ldr	r2, [pc, #464]	; (8012614 <ce303_current+0x78c>)
 8012442:	89fb      	ldrh	r3, [r7, #14]
 8012444:	87d3      	strh	r3, [r2, #62]	; 0x3e
				status_registers.ce303_current_mil_a_reg =  temp_mil;
 8012446:	4a73      	ldr	r2, [pc, #460]	; (8012614 <ce303_current+0x78c>)
 8012448:	8afb      	ldrh	r3, [r7, #22]
 801244a:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
				current_a_state = 1;
 801244e:	2301      	movs	r3, #1
 8012450:	757b      	strb	r3, [r7, #21]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8012452:	f000 bf33 	b.w	80132bc <ce303_current+0x1434>
			}
			else if( meter_rx_buffer[i+3] == 0x2E)
 8012456:	8a3b      	ldrh	r3, [r7, #16]
 8012458:	3303      	adds	r3, #3
 801245a:	4a6c      	ldr	r2, [pc, #432]	; (801260c <ce303_current+0x784>)
 801245c:	5cd3      	ldrb	r3, [r2, r3]
 801245e:	2b2e      	cmp	r3, #46	; 0x2e
 8012460:	f040 80da 	bne.w	8012618 <ce303_current+0x790>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+2])-0x30);
 8012464:	8a3b      	ldrh	r3, [r7, #16]
 8012466:	3301      	adds	r3, #1
 8012468:	4a68      	ldr	r2, [pc, #416]	; (801260c <ce303_current+0x784>)
 801246a:	5cd3      	ldrb	r3, [r2, r3]
 801246c:	3b30      	subs	r3, #48	; 0x30
 801246e:	b29b      	uxth	r3, r3
 8012470:	461a      	mov	r2, r3
 8012472:	0092      	lsls	r2, r2, #2
 8012474:	4413      	add	r3, r2
 8012476:	005b      	lsls	r3, r3, #1
 8012478:	b29a      	uxth	r2, r3
 801247a:	8a3b      	ldrh	r3, [r7, #16]
 801247c:	3302      	adds	r3, #2
 801247e:	4963      	ldr	r1, [pc, #396]	; (801260c <ce303_current+0x784>)
 8012480:	5ccb      	ldrb	r3, [r1, r3]
 8012482:	b29b      	uxth	r3, r3
 8012484:	4413      	add	r3, r2
 8012486:	b29b      	uxth	r3, r3
 8012488:	3b30      	subs	r3, #48	; 0x30
 801248a:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+5] == 0x29 ) // если 1 разряд после запятой
 801248c:	8a3b      	ldrh	r3, [r7, #16]
 801248e:	3305      	adds	r3, #5
 8012490:	4a5e      	ldr	r2, [pc, #376]	; (801260c <ce303_current+0x784>)
 8012492:	5cd3      	ldrb	r3, [r2, r3]
 8012494:	2b29      	cmp	r3, #41	; 0x29
 8012496:	d110      	bne.n	80124ba <ce303_current+0x632>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+4])-0x30)*100;
 8012498:	8a3b      	ldrh	r3, [r7, #16]
 801249a:	3304      	adds	r3, #4
 801249c:	4a5b      	ldr	r2, [pc, #364]	; (801260c <ce303_current+0x784>)
 801249e:	5cd3      	ldrb	r3, [r2, r3]
 80124a0:	3b30      	subs	r3, #48	; 0x30
 80124a2:	b29b      	uxth	r3, r3
 80124a4:	461a      	mov	r2, r3
 80124a6:	0092      	lsls	r2, r2, #2
 80124a8:	4413      	add	r3, r2
 80124aa:	461a      	mov	r2, r3
 80124ac:	0091      	lsls	r1, r2, #2
 80124ae:	461a      	mov	r2, r3
 80124b0:	460b      	mov	r3, r1
 80124b2:	4413      	add	r3, r2
 80124b4:	009b      	lsls	r3, r3, #2
 80124b6:	82fb      	strh	r3, [r7, #22]
 80124b8:	e070      	b.n	801259c <ce303_current+0x714>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 2 разряда после запятой
 80124ba:	8a3b      	ldrh	r3, [r7, #16]
 80124bc:	3306      	adds	r3, #6
 80124be:	4a53      	ldr	r2, [pc, #332]	; (801260c <ce303_current+0x784>)
 80124c0:	5cd3      	ldrb	r3, [r2, r3]
 80124c2:	2b29      	cmp	r3, #41	; 0x29
 80124c4:	d117      	bne.n	80124f6 <ce303_current+0x66e>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30))*10;
 80124c6:	8a3b      	ldrh	r3, [r7, #16]
 80124c8:	3304      	adds	r3, #4
 80124ca:	4a50      	ldr	r2, [pc, #320]	; (801260c <ce303_current+0x784>)
 80124cc:	5cd3      	ldrb	r3, [r2, r3]
 80124ce:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80124d2:	4613      	mov	r3, r2
 80124d4:	009b      	lsls	r3, r3, #2
 80124d6:	4413      	add	r3, r2
 80124d8:	005b      	lsls	r3, r3, #1
 80124da:	4619      	mov	r1, r3
 80124dc:	8a3b      	ldrh	r3, [r7, #16]
 80124de:	3305      	adds	r3, #5
 80124e0:	4a4a      	ldr	r2, [pc, #296]	; (801260c <ce303_current+0x784>)
 80124e2:	5cd3      	ldrb	r3, [r2, r3]
 80124e4:	3b30      	subs	r3, #48	; 0x30
 80124e6:	440b      	add	r3, r1
 80124e8:	b29b      	uxth	r3, r3
 80124ea:	461a      	mov	r2, r3
 80124ec:	0092      	lsls	r2, r2, #2
 80124ee:	4413      	add	r3, r2
 80124f0:	005b      	lsls	r3, r3, #1
 80124f2:	82fb      	strh	r3, [r7, #22]
 80124f4:	e052      	b.n	801259c <ce303_current+0x714>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 3 разряда после запятой
 80124f6:	8a3b      	ldrh	r3, [r7, #16]
 80124f8:	3307      	adds	r3, #7
 80124fa:	4a44      	ldr	r2, [pc, #272]	; (801260c <ce303_current+0x784>)
 80124fc:	5cd3      	ldrb	r3, [r2, r3]
 80124fe:	2b29      	cmp	r3, #41	; 0x29
 8012500:	d126      	bne.n	8012550 <ce303_current+0x6c8>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 8012502:	8a3b      	ldrh	r3, [r7, #16]
 8012504:	3304      	adds	r3, #4
 8012506:	4a41      	ldr	r2, [pc, #260]	; (801260c <ce303_current+0x784>)
 8012508:	5cd3      	ldrb	r3, [r2, r3]
 801250a:	3b30      	subs	r3, #48	; 0x30
 801250c:	b29b      	uxth	r3, r3
 801250e:	461a      	mov	r2, r3
 8012510:	0092      	lsls	r2, r2, #2
 8012512:	4413      	add	r3, r2
 8012514:	461a      	mov	r2, r3
 8012516:	0091      	lsls	r1, r2, #2
 8012518:	461a      	mov	r2, r3
 801251a:	460b      	mov	r3, r1
 801251c:	4413      	add	r3, r2
 801251e:	009b      	lsls	r3, r3, #2
 8012520:	b29a      	uxth	r2, r3
 8012522:	8a3b      	ldrh	r3, [r7, #16]
 8012524:	3305      	adds	r3, #5
 8012526:	4939      	ldr	r1, [pc, #228]	; (801260c <ce303_current+0x784>)
 8012528:	5ccb      	ldrb	r3, [r1, r3]
 801252a:	3b30      	subs	r3, #48	; 0x30
 801252c:	b29b      	uxth	r3, r3
 801252e:	4619      	mov	r1, r3
 8012530:	0089      	lsls	r1, r1, #2
 8012532:	440b      	add	r3, r1
 8012534:	005b      	lsls	r3, r3, #1
 8012536:	b29b      	uxth	r3, r3
 8012538:	4413      	add	r3, r2
 801253a:	b29a      	uxth	r2, r3
 801253c:	8a3b      	ldrh	r3, [r7, #16]
 801253e:	3306      	adds	r3, #6
 8012540:	4932      	ldr	r1, [pc, #200]	; (801260c <ce303_current+0x784>)
 8012542:	5ccb      	ldrb	r3, [r1, r3]
 8012544:	b29b      	uxth	r3, r3
 8012546:	4413      	add	r3, r2
 8012548:	b29b      	uxth	r3, r3
 801254a:	3b30      	subs	r3, #48	; 0x30
 801254c:	82fb      	strh	r3, [r7, #22]
 801254e:	e025      	b.n	801259c <ce303_current+0x714>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 8012550:	8a3b      	ldrh	r3, [r7, #16]
 8012552:	3304      	adds	r3, #4
 8012554:	4a2d      	ldr	r2, [pc, #180]	; (801260c <ce303_current+0x784>)
 8012556:	5cd3      	ldrb	r3, [r2, r3]
 8012558:	3b30      	subs	r3, #48	; 0x30
 801255a:	b29b      	uxth	r3, r3
 801255c:	461a      	mov	r2, r3
 801255e:	0092      	lsls	r2, r2, #2
 8012560:	4413      	add	r3, r2
 8012562:	461a      	mov	r2, r3
 8012564:	0091      	lsls	r1, r2, #2
 8012566:	461a      	mov	r2, r3
 8012568:	460b      	mov	r3, r1
 801256a:	4413      	add	r3, r2
 801256c:	009b      	lsls	r3, r3, #2
 801256e:	b29a      	uxth	r2, r3
 8012570:	8a3b      	ldrh	r3, [r7, #16]
 8012572:	3305      	adds	r3, #5
 8012574:	4925      	ldr	r1, [pc, #148]	; (801260c <ce303_current+0x784>)
 8012576:	5ccb      	ldrb	r3, [r1, r3]
 8012578:	3b30      	subs	r3, #48	; 0x30
 801257a:	b29b      	uxth	r3, r3
 801257c:	4619      	mov	r1, r3
 801257e:	0089      	lsls	r1, r1, #2
 8012580:	440b      	add	r3, r1
 8012582:	005b      	lsls	r3, r3, #1
 8012584:	b29b      	uxth	r3, r3
 8012586:	4413      	add	r3, r2
 8012588:	b29a      	uxth	r2, r3
 801258a:	8a3b      	ldrh	r3, [r7, #16]
 801258c:	3306      	adds	r3, #6
 801258e:	491f      	ldr	r1, [pc, #124]	; (801260c <ce303_current+0x784>)
 8012590:	5ccb      	ldrb	r3, [r1, r3]
 8012592:	b29b      	uxth	r3, r3
 8012594:	4413      	add	r3, r2
 8012596:	b29b      	uxth	r3, r3
 8012598:	3b30      	subs	r3, #48	; 0x30
 801259a:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801259c:	4b1c      	ldr	r3, [pc, #112]	; (8012610 <ce303_current+0x788>)
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	f04f 31ff 	mov.w	r1, #4294967295
 80125a4:	4618      	mov	r0, r3
 80125a6:	f7f6 f9b9 	bl	800891c <osMutexWait>
				fm25v02_write(2*CE_303_CURRENT_A_REG, ((uint8_t)(temp>>8)) );
 80125aa:	89fb      	ldrh	r3, [r7, #14]
 80125ac:	0a1b      	lsrs	r3, r3, #8
 80125ae:	b29b      	uxth	r3, r3
 80125b0:	b2db      	uxtb	r3, r3
 80125b2:	4619      	mov	r1, r3
 80125b4:	f242 003e 	movw	r0, #8254	; 0x203e
 80125b8:	f004 fb72 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_A_REG+1, ((uint8_t)(temp&0x00FF)) );
 80125bc:	89fb      	ldrh	r3, [r7, #14]
 80125be:	b2db      	uxtb	r3, r3
 80125c0:	4619      	mov	r1, r3
 80125c2:	f242 003f 	movw	r0, #8255	; 0x203f
 80125c6:	f004 fb6b 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_A_REG, ((uint8_t)(temp_mil>>8)) );
 80125ca:	8afb      	ldrh	r3, [r7, #22]
 80125cc:	0a1b      	lsrs	r3, r3, #8
 80125ce:	b29b      	uxth	r3, r3
 80125d0:	b2db      	uxtb	r3, r3
 80125d2:	4619      	mov	r1, r3
 80125d4:	f242 0044 	movw	r0, #8260	; 0x2044
 80125d8:	f004 fb62 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_A_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 80125dc:	8afb      	ldrh	r3, [r7, #22]
 80125de:	b2db      	uxtb	r3, r3
 80125e0:	4619      	mov	r1, r3
 80125e2:	f242 0045 	movw	r0, #8261	; 0x2045
 80125e6:	f004 fb5b 	bl	8016ca0 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 80125ea:	4b09      	ldr	r3, [pc, #36]	; (8012610 <ce303_current+0x788>)
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	4618      	mov	r0, r3
 80125f0:	f7f6 f9e2 	bl	80089b8 <osMutexRelease>
				status_registers.ce303_current_a_reg = temp;
 80125f4:	4a07      	ldr	r2, [pc, #28]	; (8012614 <ce303_current+0x78c>)
 80125f6:	89fb      	ldrh	r3, [r7, #14]
 80125f8:	87d3      	strh	r3, [r2, #62]	; 0x3e
				status_registers.ce303_current_mil_a_reg = temp_mil;
 80125fa:	4a06      	ldr	r2, [pc, #24]	; (8012614 <ce303_current+0x78c>)
 80125fc:	8afb      	ldrh	r3, [r7, #22]
 80125fe:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
				current_a_state = 1;
 8012602:	2301      	movs	r3, #1
 8012604:	757b      	strb	r3, [r7, #21]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8012606:	f000 be59 	b.w	80132bc <ce303_current+0x1434>
 801260a:	bf00      	nop
 801260c:	2000994c 	.word	0x2000994c
 8012610:	20009af8 	.word	0x20009af8
 8012614:	2000a174 	.word	0x2000a174
			}

			else if( meter_rx_buffer[i+4] == 0x2E)
 8012618:	8a3b      	ldrh	r3, [r7, #16]
 801261a:	3304      	adds	r3, #4
 801261c:	4a9f      	ldr	r2, [pc, #636]	; (801289c <ce303_current+0xa14>)
 801261e:	5cd3      	ldrb	r3, [r2, r3]
 8012620:	2b2e      	cmp	r3, #46	; 0x2e
 8012622:	f040 864b 	bne.w	80132bc <ce303_current+0x1434>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+3])-0x30);
 8012626:	8a3b      	ldrh	r3, [r7, #16]
 8012628:	3301      	adds	r3, #1
 801262a:	4a9c      	ldr	r2, [pc, #624]	; (801289c <ce303_current+0xa14>)
 801262c:	5cd3      	ldrb	r3, [r2, r3]
 801262e:	3b30      	subs	r3, #48	; 0x30
 8012630:	b29b      	uxth	r3, r3
 8012632:	461a      	mov	r2, r3
 8012634:	0092      	lsls	r2, r2, #2
 8012636:	4413      	add	r3, r2
 8012638:	461a      	mov	r2, r3
 801263a:	0091      	lsls	r1, r2, #2
 801263c:	461a      	mov	r2, r3
 801263e:	460b      	mov	r3, r1
 8012640:	4413      	add	r3, r2
 8012642:	009b      	lsls	r3, r3, #2
 8012644:	b29a      	uxth	r2, r3
 8012646:	8a3b      	ldrh	r3, [r7, #16]
 8012648:	3302      	adds	r3, #2
 801264a:	4994      	ldr	r1, [pc, #592]	; (801289c <ce303_current+0xa14>)
 801264c:	5ccb      	ldrb	r3, [r1, r3]
 801264e:	3b30      	subs	r3, #48	; 0x30
 8012650:	b29b      	uxth	r3, r3
 8012652:	4619      	mov	r1, r3
 8012654:	0089      	lsls	r1, r1, #2
 8012656:	440b      	add	r3, r1
 8012658:	005b      	lsls	r3, r3, #1
 801265a:	b29b      	uxth	r3, r3
 801265c:	4413      	add	r3, r2
 801265e:	b29a      	uxth	r2, r3
 8012660:	8a3b      	ldrh	r3, [r7, #16]
 8012662:	3303      	adds	r3, #3
 8012664:	498d      	ldr	r1, [pc, #564]	; (801289c <ce303_current+0xa14>)
 8012666:	5ccb      	ldrb	r3, [r1, r3]
 8012668:	b29b      	uxth	r3, r3
 801266a:	4413      	add	r3, r2
 801266c:	b29b      	uxth	r3, r3
 801266e:	3b30      	subs	r3, #48	; 0x30
 8012670:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+6] == 0x29 ) // если 1 разряд после запятой
 8012672:	8a3b      	ldrh	r3, [r7, #16]
 8012674:	3306      	adds	r3, #6
 8012676:	4a89      	ldr	r2, [pc, #548]	; (801289c <ce303_current+0xa14>)
 8012678:	5cd3      	ldrb	r3, [r2, r3]
 801267a:	2b29      	cmp	r3, #41	; 0x29
 801267c:	d110      	bne.n	80126a0 <ce303_current+0x818>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+5])-0x30)*100;
 801267e:	8a3b      	ldrh	r3, [r7, #16]
 8012680:	3305      	adds	r3, #5
 8012682:	4a86      	ldr	r2, [pc, #536]	; (801289c <ce303_current+0xa14>)
 8012684:	5cd3      	ldrb	r3, [r2, r3]
 8012686:	3b30      	subs	r3, #48	; 0x30
 8012688:	b29b      	uxth	r3, r3
 801268a:	461a      	mov	r2, r3
 801268c:	0092      	lsls	r2, r2, #2
 801268e:	4413      	add	r3, r2
 8012690:	461a      	mov	r2, r3
 8012692:	0091      	lsls	r1, r2, #2
 8012694:	461a      	mov	r2, r3
 8012696:	460b      	mov	r3, r1
 8012698:	4413      	add	r3, r2
 801269a:	009b      	lsls	r3, r3, #2
 801269c:	82fb      	strh	r3, [r7, #22]
 801269e:	e070      	b.n	8012782 <ce303_current+0x8fa>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 2 разряда после запятой
 80126a0:	8a3b      	ldrh	r3, [r7, #16]
 80126a2:	3307      	adds	r3, #7
 80126a4:	4a7d      	ldr	r2, [pc, #500]	; (801289c <ce303_current+0xa14>)
 80126a6:	5cd3      	ldrb	r3, [r2, r3]
 80126a8:	2b29      	cmp	r3, #41	; 0x29
 80126aa:	d117      	bne.n	80126dc <ce303_current+0x854>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30))*10;
 80126ac:	8a3b      	ldrh	r3, [r7, #16]
 80126ae:	3305      	adds	r3, #5
 80126b0:	4a7a      	ldr	r2, [pc, #488]	; (801289c <ce303_current+0xa14>)
 80126b2:	5cd3      	ldrb	r3, [r2, r3]
 80126b4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80126b8:	4613      	mov	r3, r2
 80126ba:	009b      	lsls	r3, r3, #2
 80126bc:	4413      	add	r3, r2
 80126be:	005b      	lsls	r3, r3, #1
 80126c0:	4619      	mov	r1, r3
 80126c2:	8a3b      	ldrh	r3, [r7, #16]
 80126c4:	3306      	adds	r3, #6
 80126c6:	4a75      	ldr	r2, [pc, #468]	; (801289c <ce303_current+0xa14>)
 80126c8:	5cd3      	ldrb	r3, [r2, r3]
 80126ca:	3b30      	subs	r3, #48	; 0x30
 80126cc:	440b      	add	r3, r1
 80126ce:	b29b      	uxth	r3, r3
 80126d0:	461a      	mov	r2, r3
 80126d2:	0092      	lsls	r2, r2, #2
 80126d4:	4413      	add	r3, r2
 80126d6:	005b      	lsls	r3, r3, #1
 80126d8:	82fb      	strh	r3, [r7, #22]
 80126da:	e052      	b.n	8012782 <ce303_current+0x8fa>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 3 разряда после запятой
 80126dc:	8a3b      	ldrh	r3, [r7, #16]
 80126de:	3308      	adds	r3, #8
 80126e0:	4a6e      	ldr	r2, [pc, #440]	; (801289c <ce303_current+0xa14>)
 80126e2:	5cd3      	ldrb	r3, [r2, r3]
 80126e4:	2b29      	cmp	r3, #41	; 0x29
 80126e6:	d126      	bne.n	8012736 <ce303_current+0x8ae>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 80126e8:	8a3b      	ldrh	r3, [r7, #16]
 80126ea:	3305      	adds	r3, #5
 80126ec:	4a6b      	ldr	r2, [pc, #428]	; (801289c <ce303_current+0xa14>)
 80126ee:	5cd3      	ldrb	r3, [r2, r3]
 80126f0:	3b30      	subs	r3, #48	; 0x30
 80126f2:	b29b      	uxth	r3, r3
 80126f4:	461a      	mov	r2, r3
 80126f6:	0092      	lsls	r2, r2, #2
 80126f8:	4413      	add	r3, r2
 80126fa:	461a      	mov	r2, r3
 80126fc:	0091      	lsls	r1, r2, #2
 80126fe:	461a      	mov	r2, r3
 8012700:	460b      	mov	r3, r1
 8012702:	4413      	add	r3, r2
 8012704:	009b      	lsls	r3, r3, #2
 8012706:	b29a      	uxth	r2, r3
 8012708:	8a3b      	ldrh	r3, [r7, #16]
 801270a:	3306      	adds	r3, #6
 801270c:	4963      	ldr	r1, [pc, #396]	; (801289c <ce303_current+0xa14>)
 801270e:	5ccb      	ldrb	r3, [r1, r3]
 8012710:	3b30      	subs	r3, #48	; 0x30
 8012712:	b29b      	uxth	r3, r3
 8012714:	4619      	mov	r1, r3
 8012716:	0089      	lsls	r1, r1, #2
 8012718:	440b      	add	r3, r1
 801271a:	005b      	lsls	r3, r3, #1
 801271c:	b29b      	uxth	r3, r3
 801271e:	4413      	add	r3, r2
 8012720:	b29a      	uxth	r2, r3
 8012722:	8a3b      	ldrh	r3, [r7, #16]
 8012724:	3307      	adds	r3, #7
 8012726:	495d      	ldr	r1, [pc, #372]	; (801289c <ce303_current+0xa14>)
 8012728:	5ccb      	ldrb	r3, [r1, r3]
 801272a:	b29b      	uxth	r3, r3
 801272c:	4413      	add	r3, r2
 801272e:	b29b      	uxth	r3, r3
 8012730:	3b30      	subs	r3, #48	; 0x30
 8012732:	82fb      	strh	r3, [r7, #22]
 8012734:	e025      	b.n	8012782 <ce303_current+0x8fa>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 8012736:	8a3b      	ldrh	r3, [r7, #16]
 8012738:	3305      	adds	r3, #5
 801273a:	4a58      	ldr	r2, [pc, #352]	; (801289c <ce303_current+0xa14>)
 801273c:	5cd3      	ldrb	r3, [r2, r3]
 801273e:	3b30      	subs	r3, #48	; 0x30
 8012740:	b29b      	uxth	r3, r3
 8012742:	461a      	mov	r2, r3
 8012744:	0092      	lsls	r2, r2, #2
 8012746:	4413      	add	r3, r2
 8012748:	461a      	mov	r2, r3
 801274a:	0091      	lsls	r1, r2, #2
 801274c:	461a      	mov	r2, r3
 801274e:	460b      	mov	r3, r1
 8012750:	4413      	add	r3, r2
 8012752:	009b      	lsls	r3, r3, #2
 8012754:	b29a      	uxth	r2, r3
 8012756:	8a3b      	ldrh	r3, [r7, #16]
 8012758:	3306      	adds	r3, #6
 801275a:	4950      	ldr	r1, [pc, #320]	; (801289c <ce303_current+0xa14>)
 801275c:	5ccb      	ldrb	r3, [r1, r3]
 801275e:	3b30      	subs	r3, #48	; 0x30
 8012760:	b29b      	uxth	r3, r3
 8012762:	4619      	mov	r1, r3
 8012764:	0089      	lsls	r1, r1, #2
 8012766:	440b      	add	r3, r1
 8012768:	005b      	lsls	r3, r3, #1
 801276a:	b29b      	uxth	r3, r3
 801276c:	4413      	add	r3, r2
 801276e:	b29a      	uxth	r2, r3
 8012770:	8a3b      	ldrh	r3, [r7, #16]
 8012772:	3307      	adds	r3, #7
 8012774:	4949      	ldr	r1, [pc, #292]	; (801289c <ce303_current+0xa14>)
 8012776:	5ccb      	ldrb	r3, [r1, r3]
 8012778:	b29b      	uxth	r3, r3
 801277a:	4413      	add	r3, r2
 801277c:	b29b      	uxth	r3, r3
 801277e:	3b30      	subs	r3, #48	; 0x30
 8012780:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8012782:	4b47      	ldr	r3, [pc, #284]	; (80128a0 <ce303_current+0xa18>)
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	f04f 31ff 	mov.w	r1, #4294967295
 801278a:	4618      	mov	r0, r3
 801278c:	f7f6 f8c6 	bl	800891c <osMutexWait>
				fm25v02_write(2*CE_303_CURRENT_A_REG, ((uint8_t)(temp>>8)) );
 8012790:	89fb      	ldrh	r3, [r7, #14]
 8012792:	0a1b      	lsrs	r3, r3, #8
 8012794:	b29b      	uxth	r3, r3
 8012796:	b2db      	uxtb	r3, r3
 8012798:	4619      	mov	r1, r3
 801279a:	f242 003e 	movw	r0, #8254	; 0x203e
 801279e:	f004 fa7f 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_A_REG+1, ((uint8_t)(temp&0x00FF)) );
 80127a2:	89fb      	ldrh	r3, [r7, #14]
 80127a4:	b2db      	uxtb	r3, r3
 80127a6:	4619      	mov	r1, r3
 80127a8:	f242 003f 	movw	r0, #8255	; 0x203f
 80127ac:	f004 fa78 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_A_REG, ((uint8_t)(temp_mil>>8)) );
 80127b0:	8afb      	ldrh	r3, [r7, #22]
 80127b2:	0a1b      	lsrs	r3, r3, #8
 80127b4:	b29b      	uxth	r3, r3
 80127b6:	b2db      	uxtb	r3, r3
 80127b8:	4619      	mov	r1, r3
 80127ba:	f242 0044 	movw	r0, #8260	; 0x2044
 80127be:	f004 fa6f 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_A_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 80127c2:	8afb      	ldrh	r3, [r7, #22]
 80127c4:	b2db      	uxtb	r3, r3
 80127c6:	4619      	mov	r1, r3
 80127c8:	f242 0045 	movw	r0, #8261	; 0x2045
 80127cc:	f004 fa68 	bl	8016ca0 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 80127d0:	4b33      	ldr	r3, [pc, #204]	; (80128a0 <ce303_current+0xa18>)
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	4618      	mov	r0, r3
 80127d6:	f7f6 f8ef 	bl	80089b8 <osMutexRelease>
				status_registers.ce303_current_a_reg = temp;
 80127da:	4a32      	ldr	r2, [pc, #200]	; (80128a4 <ce303_current+0xa1c>)
 80127dc:	89fb      	ldrh	r3, [r7, #14]
 80127de:	87d3      	strh	r3, [r2, #62]	; 0x3e
				status_registers.ce303_current_mil_a_reg = temp_mil;
 80127e0:	4a30      	ldr	r2, [pc, #192]	; (80128a4 <ce303_current+0xa1c>)
 80127e2:	8afb      	ldrh	r3, [r7, #22]
 80127e4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
				current_a_state = 1;
 80127e8:	2301      	movs	r3, #1
 80127ea:	757b      	strb	r3, [r7, #21]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 80127ec:	f000 bd66 	b.w	80132bc <ce303_current+0x1434>
			}
		}

		else if( (meter_rx_buffer[i] == 0x28) && (current_a_state==1) && (current_b_state==0) && (current_c_state==0) )
 80127f0:	8a3b      	ldrh	r3, [r7, #16]
 80127f2:	4a2a      	ldr	r2, [pc, #168]	; (801289c <ce303_current+0xa14>)
 80127f4:	5cd3      	ldrb	r3, [r2, r3]
 80127f6:	2b28      	cmp	r3, #40	; 0x28
 80127f8:	f040 82ae 	bne.w	8012d58 <ce303_current+0xed0>
 80127fc:	7d7b      	ldrb	r3, [r7, #21]
 80127fe:	2b01      	cmp	r3, #1
 8012800:	f040 82aa 	bne.w	8012d58 <ce303_current+0xed0>
 8012804:	7d3b      	ldrb	r3, [r7, #20]
 8012806:	2b00      	cmp	r3, #0
 8012808:	f040 82a6 	bne.w	8012d58 <ce303_current+0xed0>
 801280c:	7cfb      	ldrb	r3, [r7, #19]
 801280e:	2b00      	cmp	r3, #0
 8012810:	f040 82a2 	bne.w	8012d58 <ce303_current+0xed0>
		{
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8012814:	8a3b      	ldrh	r3, [r7, #16]
 8012816:	3302      	adds	r3, #2
 8012818:	4a20      	ldr	r2, [pc, #128]	; (801289c <ce303_current+0xa14>)
 801281a:	5cd3      	ldrb	r3, [r2, r3]
 801281c:	2b2e      	cmp	r3, #46	; 0x2e
 801281e:	f040 80ce 	bne.w	80129be <ce303_current+0xb36>
			{
				temp = (uint16_t)(meter_rx_buffer[i+1]-0x30);
 8012822:	8a3b      	ldrh	r3, [r7, #16]
 8012824:	3301      	adds	r3, #1
 8012826:	4a1d      	ldr	r2, [pc, #116]	; (801289c <ce303_current+0xa14>)
 8012828:	5cd3      	ldrb	r3, [r2, r3]
 801282a:	b29b      	uxth	r3, r3
 801282c:	3b30      	subs	r3, #48	; 0x30
 801282e:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+4] == 0x29 ) // если 1 разряд после запятой
 8012830:	8a3b      	ldrh	r3, [r7, #16]
 8012832:	3304      	adds	r3, #4
 8012834:	4a19      	ldr	r2, [pc, #100]	; (801289c <ce303_current+0xa14>)
 8012836:	5cd3      	ldrb	r3, [r2, r3]
 8012838:	2b29      	cmp	r3, #41	; 0x29
 801283a:	d110      	bne.n	801285e <ce303_current+0x9d6>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+3])-0x30)*100;
 801283c:	8a3b      	ldrh	r3, [r7, #16]
 801283e:	3303      	adds	r3, #3
 8012840:	4a16      	ldr	r2, [pc, #88]	; (801289c <ce303_current+0xa14>)
 8012842:	5cd3      	ldrb	r3, [r2, r3]
 8012844:	3b30      	subs	r3, #48	; 0x30
 8012846:	b29b      	uxth	r3, r3
 8012848:	461a      	mov	r2, r3
 801284a:	0092      	lsls	r2, r2, #2
 801284c:	4413      	add	r3, r2
 801284e:	461a      	mov	r2, r3
 8012850:	0091      	lsls	r1, r2, #2
 8012852:	461a      	mov	r2, r3
 8012854:	460b      	mov	r3, r1
 8012856:	4413      	add	r3, r2
 8012858:	009b      	lsls	r3, r3, #2
 801285a:	82fb      	strh	r3, [r7, #22]
 801285c:	e077      	b.n	801294e <ce303_current+0xac6>
				}
				else if( meter_rx_buffer[i+5] == 0x29 ) // если 2 разряда после запятой
 801285e:	8a3b      	ldrh	r3, [r7, #16]
 8012860:	3305      	adds	r3, #5
 8012862:	4a0e      	ldr	r2, [pc, #56]	; (801289c <ce303_current+0xa14>)
 8012864:	5cd3      	ldrb	r3, [r2, r3]
 8012866:	2b29      	cmp	r3, #41	; 0x29
 8012868:	d11e      	bne.n	80128a8 <ce303_current+0xa20>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30))*10;
 801286a:	8a3b      	ldrh	r3, [r7, #16]
 801286c:	3303      	adds	r3, #3
 801286e:	4a0b      	ldr	r2, [pc, #44]	; (801289c <ce303_current+0xa14>)
 8012870:	5cd3      	ldrb	r3, [r2, r3]
 8012872:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8012876:	4613      	mov	r3, r2
 8012878:	009b      	lsls	r3, r3, #2
 801287a:	4413      	add	r3, r2
 801287c:	005b      	lsls	r3, r3, #1
 801287e:	4619      	mov	r1, r3
 8012880:	8a3b      	ldrh	r3, [r7, #16]
 8012882:	3304      	adds	r3, #4
 8012884:	4a05      	ldr	r2, [pc, #20]	; (801289c <ce303_current+0xa14>)
 8012886:	5cd3      	ldrb	r3, [r2, r3]
 8012888:	3b30      	subs	r3, #48	; 0x30
 801288a:	440b      	add	r3, r1
 801288c:	b29b      	uxth	r3, r3
 801288e:	461a      	mov	r2, r3
 8012890:	0092      	lsls	r2, r2, #2
 8012892:	4413      	add	r3, r2
 8012894:	005b      	lsls	r3, r3, #1
 8012896:	82fb      	strh	r3, [r7, #22]
 8012898:	e059      	b.n	801294e <ce303_current+0xac6>
 801289a:	bf00      	nop
 801289c:	2000994c 	.word	0x2000994c
 80128a0:	20009af8 	.word	0x20009af8
 80128a4:	2000a174 	.word	0x2000a174
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 3 разряда после запятой
 80128a8:	8a3b      	ldrh	r3, [r7, #16]
 80128aa:	3306      	adds	r3, #6
 80128ac:	4ab1      	ldr	r2, [pc, #708]	; (8012b74 <ce303_current+0xcec>)
 80128ae:	5cd3      	ldrb	r3, [r2, r3]
 80128b0:	2b29      	cmp	r3, #41	; 0x29
 80128b2:	d126      	bne.n	8012902 <ce303_current+0xa7a>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 80128b4:	8a3b      	ldrh	r3, [r7, #16]
 80128b6:	3303      	adds	r3, #3
 80128b8:	4aae      	ldr	r2, [pc, #696]	; (8012b74 <ce303_current+0xcec>)
 80128ba:	5cd3      	ldrb	r3, [r2, r3]
 80128bc:	3b30      	subs	r3, #48	; 0x30
 80128be:	b29b      	uxth	r3, r3
 80128c0:	461a      	mov	r2, r3
 80128c2:	0092      	lsls	r2, r2, #2
 80128c4:	4413      	add	r3, r2
 80128c6:	461a      	mov	r2, r3
 80128c8:	0091      	lsls	r1, r2, #2
 80128ca:	461a      	mov	r2, r3
 80128cc:	460b      	mov	r3, r1
 80128ce:	4413      	add	r3, r2
 80128d0:	009b      	lsls	r3, r3, #2
 80128d2:	b29a      	uxth	r2, r3
 80128d4:	8a3b      	ldrh	r3, [r7, #16]
 80128d6:	3304      	adds	r3, #4
 80128d8:	49a6      	ldr	r1, [pc, #664]	; (8012b74 <ce303_current+0xcec>)
 80128da:	5ccb      	ldrb	r3, [r1, r3]
 80128dc:	3b30      	subs	r3, #48	; 0x30
 80128de:	b29b      	uxth	r3, r3
 80128e0:	4619      	mov	r1, r3
 80128e2:	0089      	lsls	r1, r1, #2
 80128e4:	440b      	add	r3, r1
 80128e6:	005b      	lsls	r3, r3, #1
 80128e8:	b29b      	uxth	r3, r3
 80128ea:	4413      	add	r3, r2
 80128ec:	b29a      	uxth	r2, r3
 80128ee:	8a3b      	ldrh	r3, [r7, #16]
 80128f0:	3305      	adds	r3, #5
 80128f2:	49a0      	ldr	r1, [pc, #640]	; (8012b74 <ce303_current+0xcec>)
 80128f4:	5ccb      	ldrb	r3, [r1, r3]
 80128f6:	b29b      	uxth	r3, r3
 80128f8:	4413      	add	r3, r2
 80128fa:	b29b      	uxth	r3, r3
 80128fc:	3b30      	subs	r3, #48	; 0x30
 80128fe:	82fb      	strh	r3, [r7, #22]
 8012900:	e025      	b.n	801294e <ce303_current+0xac6>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 8012902:	8a3b      	ldrh	r3, [r7, #16]
 8012904:	3303      	adds	r3, #3
 8012906:	4a9b      	ldr	r2, [pc, #620]	; (8012b74 <ce303_current+0xcec>)
 8012908:	5cd3      	ldrb	r3, [r2, r3]
 801290a:	3b30      	subs	r3, #48	; 0x30
 801290c:	b29b      	uxth	r3, r3
 801290e:	461a      	mov	r2, r3
 8012910:	0092      	lsls	r2, r2, #2
 8012912:	4413      	add	r3, r2
 8012914:	461a      	mov	r2, r3
 8012916:	0091      	lsls	r1, r2, #2
 8012918:	461a      	mov	r2, r3
 801291a:	460b      	mov	r3, r1
 801291c:	4413      	add	r3, r2
 801291e:	009b      	lsls	r3, r3, #2
 8012920:	b29a      	uxth	r2, r3
 8012922:	8a3b      	ldrh	r3, [r7, #16]
 8012924:	3304      	adds	r3, #4
 8012926:	4993      	ldr	r1, [pc, #588]	; (8012b74 <ce303_current+0xcec>)
 8012928:	5ccb      	ldrb	r3, [r1, r3]
 801292a:	3b30      	subs	r3, #48	; 0x30
 801292c:	b29b      	uxth	r3, r3
 801292e:	4619      	mov	r1, r3
 8012930:	0089      	lsls	r1, r1, #2
 8012932:	440b      	add	r3, r1
 8012934:	005b      	lsls	r3, r3, #1
 8012936:	b29b      	uxth	r3, r3
 8012938:	4413      	add	r3, r2
 801293a:	b29a      	uxth	r2, r3
 801293c:	8a3b      	ldrh	r3, [r7, #16]
 801293e:	3305      	adds	r3, #5
 8012940:	498c      	ldr	r1, [pc, #560]	; (8012b74 <ce303_current+0xcec>)
 8012942:	5ccb      	ldrb	r3, [r1, r3]
 8012944:	b29b      	uxth	r3, r3
 8012946:	4413      	add	r3, r2
 8012948:	b29b      	uxth	r3, r3
 801294a:	3b30      	subs	r3, #48	; 0x30
 801294c:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801294e:	4b8a      	ldr	r3, [pc, #552]	; (8012b78 <ce303_current+0xcf0>)
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	f04f 31ff 	mov.w	r1, #4294967295
 8012956:	4618      	mov	r0, r3
 8012958:	f7f5 ffe0 	bl	800891c <osMutexWait>
				fm25v02_write(2*CE_303_CURRENT_B_REG, ((uint8_t)(temp>>8)) );
 801295c:	89fb      	ldrh	r3, [r7, #14]
 801295e:	0a1b      	lsrs	r3, r3, #8
 8012960:	b29b      	uxth	r3, r3
 8012962:	b2db      	uxtb	r3, r3
 8012964:	4619      	mov	r1, r3
 8012966:	f44f 5001 	mov.w	r0, #8256	; 0x2040
 801296a:	f004 f999 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_B_REG+1, ((uint8_t)(temp&0x00FF)) );
 801296e:	89fb      	ldrh	r3, [r7, #14]
 8012970:	b2db      	uxtb	r3, r3
 8012972:	4619      	mov	r1, r3
 8012974:	f242 0041 	movw	r0, #8257	; 0x2041
 8012978:	f004 f992 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_B_REG, ((uint8_t)(temp_mil>>8)) );
 801297c:	8afb      	ldrh	r3, [r7, #22]
 801297e:	0a1b      	lsrs	r3, r3, #8
 8012980:	b29b      	uxth	r3, r3
 8012982:	b2db      	uxtb	r3, r3
 8012984:	4619      	mov	r1, r3
 8012986:	f242 0046 	movw	r0, #8262	; 0x2046
 801298a:	f004 f989 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_B_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 801298e:	8afb      	ldrh	r3, [r7, #22]
 8012990:	b2db      	uxtb	r3, r3
 8012992:	4619      	mov	r1, r3
 8012994:	f242 0047 	movw	r0, #8263	; 0x2047
 8012998:	f004 f982 	bl	8016ca0 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 801299c:	4b76      	ldr	r3, [pc, #472]	; (8012b78 <ce303_current+0xcf0>)
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	4618      	mov	r0, r3
 80129a2:	f7f6 f809 	bl	80089b8 <osMutexRelease>
				status_registers.ce303_current_b_reg = temp;
 80129a6:	4a75      	ldr	r2, [pc, #468]	; (8012b7c <ce303_current+0xcf4>)
 80129a8:	89fb      	ldrh	r3, [r7, #14]
 80129aa:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
				status_registers.ce303_current_mil_b_reg =  temp_mil;
 80129ae:	4a73      	ldr	r2, [pc, #460]	; (8012b7c <ce303_current+0xcf4>)
 80129b0:	8afb      	ldrh	r3, [r7, #22]
 80129b2:	f8a2 3046 	strh.w	r3, [r2, #70]	; 0x46
				current_b_state = 1;
 80129b6:	2301      	movs	r3, #1
 80129b8:	753b      	strb	r3, [r7, #20]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 80129ba:	f000 bc81 	b.w	80132c0 <ce303_current+0x1438>
			}
			else if( meter_rx_buffer[i+3] == 0x2E)
 80129be:	8a3b      	ldrh	r3, [r7, #16]
 80129c0:	3303      	adds	r3, #3
 80129c2:	4a6c      	ldr	r2, [pc, #432]	; (8012b74 <ce303_current+0xcec>)
 80129c4:	5cd3      	ldrb	r3, [r2, r3]
 80129c6:	2b2e      	cmp	r3, #46	; 0x2e
 80129c8:	f040 80da 	bne.w	8012b80 <ce303_current+0xcf8>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+2])-0x30);
 80129cc:	8a3b      	ldrh	r3, [r7, #16]
 80129ce:	3301      	adds	r3, #1
 80129d0:	4a68      	ldr	r2, [pc, #416]	; (8012b74 <ce303_current+0xcec>)
 80129d2:	5cd3      	ldrb	r3, [r2, r3]
 80129d4:	3b30      	subs	r3, #48	; 0x30
 80129d6:	b29b      	uxth	r3, r3
 80129d8:	461a      	mov	r2, r3
 80129da:	0092      	lsls	r2, r2, #2
 80129dc:	4413      	add	r3, r2
 80129de:	005b      	lsls	r3, r3, #1
 80129e0:	b29a      	uxth	r2, r3
 80129e2:	8a3b      	ldrh	r3, [r7, #16]
 80129e4:	3302      	adds	r3, #2
 80129e6:	4963      	ldr	r1, [pc, #396]	; (8012b74 <ce303_current+0xcec>)
 80129e8:	5ccb      	ldrb	r3, [r1, r3]
 80129ea:	b29b      	uxth	r3, r3
 80129ec:	4413      	add	r3, r2
 80129ee:	b29b      	uxth	r3, r3
 80129f0:	3b30      	subs	r3, #48	; 0x30
 80129f2:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+5] == 0x29 ) // если 1 разряд после запятой
 80129f4:	8a3b      	ldrh	r3, [r7, #16]
 80129f6:	3305      	adds	r3, #5
 80129f8:	4a5e      	ldr	r2, [pc, #376]	; (8012b74 <ce303_current+0xcec>)
 80129fa:	5cd3      	ldrb	r3, [r2, r3]
 80129fc:	2b29      	cmp	r3, #41	; 0x29
 80129fe:	d110      	bne.n	8012a22 <ce303_current+0xb9a>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+4])-0x30)*100;
 8012a00:	8a3b      	ldrh	r3, [r7, #16]
 8012a02:	3304      	adds	r3, #4
 8012a04:	4a5b      	ldr	r2, [pc, #364]	; (8012b74 <ce303_current+0xcec>)
 8012a06:	5cd3      	ldrb	r3, [r2, r3]
 8012a08:	3b30      	subs	r3, #48	; 0x30
 8012a0a:	b29b      	uxth	r3, r3
 8012a0c:	461a      	mov	r2, r3
 8012a0e:	0092      	lsls	r2, r2, #2
 8012a10:	4413      	add	r3, r2
 8012a12:	461a      	mov	r2, r3
 8012a14:	0091      	lsls	r1, r2, #2
 8012a16:	461a      	mov	r2, r3
 8012a18:	460b      	mov	r3, r1
 8012a1a:	4413      	add	r3, r2
 8012a1c:	009b      	lsls	r3, r3, #2
 8012a1e:	82fb      	strh	r3, [r7, #22]
 8012a20:	e070      	b.n	8012b04 <ce303_current+0xc7c>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 2 разряда после запятой
 8012a22:	8a3b      	ldrh	r3, [r7, #16]
 8012a24:	3306      	adds	r3, #6
 8012a26:	4a53      	ldr	r2, [pc, #332]	; (8012b74 <ce303_current+0xcec>)
 8012a28:	5cd3      	ldrb	r3, [r2, r3]
 8012a2a:	2b29      	cmp	r3, #41	; 0x29
 8012a2c:	d117      	bne.n	8012a5e <ce303_current+0xbd6>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30))*10;
 8012a2e:	8a3b      	ldrh	r3, [r7, #16]
 8012a30:	3304      	adds	r3, #4
 8012a32:	4a50      	ldr	r2, [pc, #320]	; (8012b74 <ce303_current+0xcec>)
 8012a34:	5cd3      	ldrb	r3, [r2, r3]
 8012a36:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8012a3a:	4613      	mov	r3, r2
 8012a3c:	009b      	lsls	r3, r3, #2
 8012a3e:	4413      	add	r3, r2
 8012a40:	005b      	lsls	r3, r3, #1
 8012a42:	4619      	mov	r1, r3
 8012a44:	8a3b      	ldrh	r3, [r7, #16]
 8012a46:	3305      	adds	r3, #5
 8012a48:	4a4a      	ldr	r2, [pc, #296]	; (8012b74 <ce303_current+0xcec>)
 8012a4a:	5cd3      	ldrb	r3, [r2, r3]
 8012a4c:	3b30      	subs	r3, #48	; 0x30
 8012a4e:	440b      	add	r3, r1
 8012a50:	b29b      	uxth	r3, r3
 8012a52:	461a      	mov	r2, r3
 8012a54:	0092      	lsls	r2, r2, #2
 8012a56:	4413      	add	r3, r2
 8012a58:	005b      	lsls	r3, r3, #1
 8012a5a:	82fb      	strh	r3, [r7, #22]
 8012a5c:	e052      	b.n	8012b04 <ce303_current+0xc7c>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 3 разряда после запятой
 8012a5e:	8a3b      	ldrh	r3, [r7, #16]
 8012a60:	3307      	adds	r3, #7
 8012a62:	4a44      	ldr	r2, [pc, #272]	; (8012b74 <ce303_current+0xcec>)
 8012a64:	5cd3      	ldrb	r3, [r2, r3]
 8012a66:	2b29      	cmp	r3, #41	; 0x29
 8012a68:	d126      	bne.n	8012ab8 <ce303_current+0xc30>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 8012a6a:	8a3b      	ldrh	r3, [r7, #16]
 8012a6c:	3304      	adds	r3, #4
 8012a6e:	4a41      	ldr	r2, [pc, #260]	; (8012b74 <ce303_current+0xcec>)
 8012a70:	5cd3      	ldrb	r3, [r2, r3]
 8012a72:	3b30      	subs	r3, #48	; 0x30
 8012a74:	b29b      	uxth	r3, r3
 8012a76:	461a      	mov	r2, r3
 8012a78:	0092      	lsls	r2, r2, #2
 8012a7a:	4413      	add	r3, r2
 8012a7c:	461a      	mov	r2, r3
 8012a7e:	0091      	lsls	r1, r2, #2
 8012a80:	461a      	mov	r2, r3
 8012a82:	460b      	mov	r3, r1
 8012a84:	4413      	add	r3, r2
 8012a86:	009b      	lsls	r3, r3, #2
 8012a88:	b29a      	uxth	r2, r3
 8012a8a:	8a3b      	ldrh	r3, [r7, #16]
 8012a8c:	3305      	adds	r3, #5
 8012a8e:	4939      	ldr	r1, [pc, #228]	; (8012b74 <ce303_current+0xcec>)
 8012a90:	5ccb      	ldrb	r3, [r1, r3]
 8012a92:	3b30      	subs	r3, #48	; 0x30
 8012a94:	b29b      	uxth	r3, r3
 8012a96:	4619      	mov	r1, r3
 8012a98:	0089      	lsls	r1, r1, #2
 8012a9a:	440b      	add	r3, r1
 8012a9c:	005b      	lsls	r3, r3, #1
 8012a9e:	b29b      	uxth	r3, r3
 8012aa0:	4413      	add	r3, r2
 8012aa2:	b29a      	uxth	r2, r3
 8012aa4:	8a3b      	ldrh	r3, [r7, #16]
 8012aa6:	3306      	adds	r3, #6
 8012aa8:	4932      	ldr	r1, [pc, #200]	; (8012b74 <ce303_current+0xcec>)
 8012aaa:	5ccb      	ldrb	r3, [r1, r3]
 8012aac:	b29b      	uxth	r3, r3
 8012aae:	4413      	add	r3, r2
 8012ab0:	b29b      	uxth	r3, r3
 8012ab2:	3b30      	subs	r3, #48	; 0x30
 8012ab4:	82fb      	strh	r3, [r7, #22]
 8012ab6:	e025      	b.n	8012b04 <ce303_current+0xc7c>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 8012ab8:	8a3b      	ldrh	r3, [r7, #16]
 8012aba:	3304      	adds	r3, #4
 8012abc:	4a2d      	ldr	r2, [pc, #180]	; (8012b74 <ce303_current+0xcec>)
 8012abe:	5cd3      	ldrb	r3, [r2, r3]
 8012ac0:	3b30      	subs	r3, #48	; 0x30
 8012ac2:	b29b      	uxth	r3, r3
 8012ac4:	461a      	mov	r2, r3
 8012ac6:	0092      	lsls	r2, r2, #2
 8012ac8:	4413      	add	r3, r2
 8012aca:	461a      	mov	r2, r3
 8012acc:	0091      	lsls	r1, r2, #2
 8012ace:	461a      	mov	r2, r3
 8012ad0:	460b      	mov	r3, r1
 8012ad2:	4413      	add	r3, r2
 8012ad4:	009b      	lsls	r3, r3, #2
 8012ad6:	b29a      	uxth	r2, r3
 8012ad8:	8a3b      	ldrh	r3, [r7, #16]
 8012ada:	3305      	adds	r3, #5
 8012adc:	4925      	ldr	r1, [pc, #148]	; (8012b74 <ce303_current+0xcec>)
 8012ade:	5ccb      	ldrb	r3, [r1, r3]
 8012ae0:	3b30      	subs	r3, #48	; 0x30
 8012ae2:	b29b      	uxth	r3, r3
 8012ae4:	4619      	mov	r1, r3
 8012ae6:	0089      	lsls	r1, r1, #2
 8012ae8:	440b      	add	r3, r1
 8012aea:	005b      	lsls	r3, r3, #1
 8012aec:	b29b      	uxth	r3, r3
 8012aee:	4413      	add	r3, r2
 8012af0:	b29a      	uxth	r2, r3
 8012af2:	8a3b      	ldrh	r3, [r7, #16]
 8012af4:	3306      	adds	r3, #6
 8012af6:	491f      	ldr	r1, [pc, #124]	; (8012b74 <ce303_current+0xcec>)
 8012af8:	5ccb      	ldrb	r3, [r1, r3]
 8012afa:	b29b      	uxth	r3, r3
 8012afc:	4413      	add	r3, r2
 8012afe:	b29b      	uxth	r3, r3
 8012b00:	3b30      	subs	r3, #48	; 0x30
 8012b02:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8012b04:	4b1c      	ldr	r3, [pc, #112]	; (8012b78 <ce303_current+0xcf0>)
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	f04f 31ff 	mov.w	r1, #4294967295
 8012b0c:	4618      	mov	r0, r3
 8012b0e:	f7f5 ff05 	bl	800891c <osMutexWait>
				fm25v02_write(2*CE_303_CURRENT_B_REG, ((uint8_t)(temp>>8)) );
 8012b12:	89fb      	ldrh	r3, [r7, #14]
 8012b14:	0a1b      	lsrs	r3, r3, #8
 8012b16:	b29b      	uxth	r3, r3
 8012b18:	b2db      	uxtb	r3, r3
 8012b1a:	4619      	mov	r1, r3
 8012b1c:	f44f 5001 	mov.w	r0, #8256	; 0x2040
 8012b20:	f004 f8be 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_B_REG+1, ((uint8_t)(temp&0x00FF)) );
 8012b24:	89fb      	ldrh	r3, [r7, #14]
 8012b26:	b2db      	uxtb	r3, r3
 8012b28:	4619      	mov	r1, r3
 8012b2a:	f242 0041 	movw	r0, #8257	; 0x2041
 8012b2e:	f004 f8b7 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_B_REG, ((uint8_t)(temp_mil>>8)) );
 8012b32:	8afb      	ldrh	r3, [r7, #22]
 8012b34:	0a1b      	lsrs	r3, r3, #8
 8012b36:	b29b      	uxth	r3, r3
 8012b38:	b2db      	uxtb	r3, r3
 8012b3a:	4619      	mov	r1, r3
 8012b3c:	f242 0046 	movw	r0, #8262	; 0x2046
 8012b40:	f004 f8ae 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_B_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 8012b44:	8afb      	ldrh	r3, [r7, #22]
 8012b46:	b2db      	uxtb	r3, r3
 8012b48:	4619      	mov	r1, r3
 8012b4a:	f242 0047 	movw	r0, #8263	; 0x2047
 8012b4e:	f004 f8a7 	bl	8016ca0 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8012b52:	4b09      	ldr	r3, [pc, #36]	; (8012b78 <ce303_current+0xcf0>)
 8012b54:	681b      	ldr	r3, [r3, #0]
 8012b56:	4618      	mov	r0, r3
 8012b58:	f7f5 ff2e 	bl	80089b8 <osMutexRelease>
				status_registers.ce303_current_b_reg = temp;
 8012b5c:	4a07      	ldr	r2, [pc, #28]	; (8012b7c <ce303_current+0xcf4>)
 8012b5e:	89fb      	ldrh	r3, [r7, #14]
 8012b60:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
				status_registers.ce303_current_mil_b_reg = temp_mil;
 8012b64:	4a05      	ldr	r2, [pc, #20]	; (8012b7c <ce303_current+0xcf4>)
 8012b66:	8afb      	ldrh	r3, [r7, #22]
 8012b68:	f8a2 3046 	strh.w	r3, [r2, #70]	; 0x46
				current_b_state = 1;
 8012b6c:	2301      	movs	r3, #1
 8012b6e:	753b      	strb	r3, [r7, #20]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8012b70:	e3a6      	b.n	80132c0 <ce303_current+0x1438>
 8012b72:	bf00      	nop
 8012b74:	2000994c 	.word	0x2000994c
 8012b78:	20009af8 	.word	0x20009af8
 8012b7c:	2000a174 	.word	0x2000a174
			}

			else if( meter_rx_buffer[i+4] == 0x2E)
 8012b80:	8a3b      	ldrh	r3, [r7, #16]
 8012b82:	3304      	adds	r3, #4
 8012b84:	4a9f      	ldr	r2, [pc, #636]	; (8012e04 <ce303_current+0xf7c>)
 8012b86:	5cd3      	ldrb	r3, [r2, r3]
 8012b88:	2b2e      	cmp	r3, #46	; 0x2e
 8012b8a:	f040 8399 	bne.w	80132c0 <ce303_current+0x1438>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+3])-0x30);
 8012b8e:	8a3b      	ldrh	r3, [r7, #16]
 8012b90:	3301      	adds	r3, #1
 8012b92:	4a9c      	ldr	r2, [pc, #624]	; (8012e04 <ce303_current+0xf7c>)
 8012b94:	5cd3      	ldrb	r3, [r2, r3]
 8012b96:	3b30      	subs	r3, #48	; 0x30
 8012b98:	b29b      	uxth	r3, r3
 8012b9a:	461a      	mov	r2, r3
 8012b9c:	0092      	lsls	r2, r2, #2
 8012b9e:	4413      	add	r3, r2
 8012ba0:	461a      	mov	r2, r3
 8012ba2:	0091      	lsls	r1, r2, #2
 8012ba4:	461a      	mov	r2, r3
 8012ba6:	460b      	mov	r3, r1
 8012ba8:	4413      	add	r3, r2
 8012baa:	009b      	lsls	r3, r3, #2
 8012bac:	b29a      	uxth	r2, r3
 8012bae:	8a3b      	ldrh	r3, [r7, #16]
 8012bb0:	3302      	adds	r3, #2
 8012bb2:	4994      	ldr	r1, [pc, #592]	; (8012e04 <ce303_current+0xf7c>)
 8012bb4:	5ccb      	ldrb	r3, [r1, r3]
 8012bb6:	3b30      	subs	r3, #48	; 0x30
 8012bb8:	b29b      	uxth	r3, r3
 8012bba:	4619      	mov	r1, r3
 8012bbc:	0089      	lsls	r1, r1, #2
 8012bbe:	440b      	add	r3, r1
 8012bc0:	005b      	lsls	r3, r3, #1
 8012bc2:	b29b      	uxth	r3, r3
 8012bc4:	4413      	add	r3, r2
 8012bc6:	b29a      	uxth	r2, r3
 8012bc8:	8a3b      	ldrh	r3, [r7, #16]
 8012bca:	3303      	adds	r3, #3
 8012bcc:	498d      	ldr	r1, [pc, #564]	; (8012e04 <ce303_current+0xf7c>)
 8012bce:	5ccb      	ldrb	r3, [r1, r3]
 8012bd0:	b29b      	uxth	r3, r3
 8012bd2:	4413      	add	r3, r2
 8012bd4:	b29b      	uxth	r3, r3
 8012bd6:	3b30      	subs	r3, #48	; 0x30
 8012bd8:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+6] == 0x29 ) // если 1 разряд после запятой
 8012bda:	8a3b      	ldrh	r3, [r7, #16]
 8012bdc:	3306      	adds	r3, #6
 8012bde:	4a89      	ldr	r2, [pc, #548]	; (8012e04 <ce303_current+0xf7c>)
 8012be0:	5cd3      	ldrb	r3, [r2, r3]
 8012be2:	2b29      	cmp	r3, #41	; 0x29
 8012be4:	d110      	bne.n	8012c08 <ce303_current+0xd80>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+5])-0x30)*100;
 8012be6:	8a3b      	ldrh	r3, [r7, #16]
 8012be8:	3305      	adds	r3, #5
 8012bea:	4a86      	ldr	r2, [pc, #536]	; (8012e04 <ce303_current+0xf7c>)
 8012bec:	5cd3      	ldrb	r3, [r2, r3]
 8012bee:	3b30      	subs	r3, #48	; 0x30
 8012bf0:	b29b      	uxth	r3, r3
 8012bf2:	461a      	mov	r2, r3
 8012bf4:	0092      	lsls	r2, r2, #2
 8012bf6:	4413      	add	r3, r2
 8012bf8:	461a      	mov	r2, r3
 8012bfa:	0091      	lsls	r1, r2, #2
 8012bfc:	461a      	mov	r2, r3
 8012bfe:	460b      	mov	r3, r1
 8012c00:	4413      	add	r3, r2
 8012c02:	009b      	lsls	r3, r3, #2
 8012c04:	82fb      	strh	r3, [r7, #22]
 8012c06:	e070      	b.n	8012cea <ce303_current+0xe62>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 2 разряда после запятой
 8012c08:	8a3b      	ldrh	r3, [r7, #16]
 8012c0a:	3307      	adds	r3, #7
 8012c0c:	4a7d      	ldr	r2, [pc, #500]	; (8012e04 <ce303_current+0xf7c>)
 8012c0e:	5cd3      	ldrb	r3, [r2, r3]
 8012c10:	2b29      	cmp	r3, #41	; 0x29
 8012c12:	d117      	bne.n	8012c44 <ce303_current+0xdbc>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30))*10;
 8012c14:	8a3b      	ldrh	r3, [r7, #16]
 8012c16:	3305      	adds	r3, #5
 8012c18:	4a7a      	ldr	r2, [pc, #488]	; (8012e04 <ce303_current+0xf7c>)
 8012c1a:	5cd3      	ldrb	r3, [r2, r3]
 8012c1c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8012c20:	4613      	mov	r3, r2
 8012c22:	009b      	lsls	r3, r3, #2
 8012c24:	4413      	add	r3, r2
 8012c26:	005b      	lsls	r3, r3, #1
 8012c28:	4619      	mov	r1, r3
 8012c2a:	8a3b      	ldrh	r3, [r7, #16]
 8012c2c:	3306      	adds	r3, #6
 8012c2e:	4a75      	ldr	r2, [pc, #468]	; (8012e04 <ce303_current+0xf7c>)
 8012c30:	5cd3      	ldrb	r3, [r2, r3]
 8012c32:	3b30      	subs	r3, #48	; 0x30
 8012c34:	440b      	add	r3, r1
 8012c36:	b29b      	uxth	r3, r3
 8012c38:	461a      	mov	r2, r3
 8012c3a:	0092      	lsls	r2, r2, #2
 8012c3c:	4413      	add	r3, r2
 8012c3e:	005b      	lsls	r3, r3, #1
 8012c40:	82fb      	strh	r3, [r7, #22]
 8012c42:	e052      	b.n	8012cea <ce303_current+0xe62>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 3 разряда после запятой
 8012c44:	8a3b      	ldrh	r3, [r7, #16]
 8012c46:	3308      	adds	r3, #8
 8012c48:	4a6e      	ldr	r2, [pc, #440]	; (8012e04 <ce303_current+0xf7c>)
 8012c4a:	5cd3      	ldrb	r3, [r2, r3]
 8012c4c:	2b29      	cmp	r3, #41	; 0x29
 8012c4e:	d126      	bne.n	8012c9e <ce303_current+0xe16>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 8012c50:	8a3b      	ldrh	r3, [r7, #16]
 8012c52:	3305      	adds	r3, #5
 8012c54:	4a6b      	ldr	r2, [pc, #428]	; (8012e04 <ce303_current+0xf7c>)
 8012c56:	5cd3      	ldrb	r3, [r2, r3]
 8012c58:	3b30      	subs	r3, #48	; 0x30
 8012c5a:	b29b      	uxth	r3, r3
 8012c5c:	461a      	mov	r2, r3
 8012c5e:	0092      	lsls	r2, r2, #2
 8012c60:	4413      	add	r3, r2
 8012c62:	461a      	mov	r2, r3
 8012c64:	0091      	lsls	r1, r2, #2
 8012c66:	461a      	mov	r2, r3
 8012c68:	460b      	mov	r3, r1
 8012c6a:	4413      	add	r3, r2
 8012c6c:	009b      	lsls	r3, r3, #2
 8012c6e:	b29a      	uxth	r2, r3
 8012c70:	8a3b      	ldrh	r3, [r7, #16]
 8012c72:	3306      	adds	r3, #6
 8012c74:	4963      	ldr	r1, [pc, #396]	; (8012e04 <ce303_current+0xf7c>)
 8012c76:	5ccb      	ldrb	r3, [r1, r3]
 8012c78:	3b30      	subs	r3, #48	; 0x30
 8012c7a:	b29b      	uxth	r3, r3
 8012c7c:	4619      	mov	r1, r3
 8012c7e:	0089      	lsls	r1, r1, #2
 8012c80:	440b      	add	r3, r1
 8012c82:	005b      	lsls	r3, r3, #1
 8012c84:	b29b      	uxth	r3, r3
 8012c86:	4413      	add	r3, r2
 8012c88:	b29a      	uxth	r2, r3
 8012c8a:	8a3b      	ldrh	r3, [r7, #16]
 8012c8c:	3307      	adds	r3, #7
 8012c8e:	495d      	ldr	r1, [pc, #372]	; (8012e04 <ce303_current+0xf7c>)
 8012c90:	5ccb      	ldrb	r3, [r1, r3]
 8012c92:	b29b      	uxth	r3, r3
 8012c94:	4413      	add	r3, r2
 8012c96:	b29b      	uxth	r3, r3
 8012c98:	3b30      	subs	r3, #48	; 0x30
 8012c9a:	82fb      	strh	r3, [r7, #22]
 8012c9c:	e025      	b.n	8012cea <ce303_current+0xe62>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 8012c9e:	8a3b      	ldrh	r3, [r7, #16]
 8012ca0:	3305      	adds	r3, #5
 8012ca2:	4a58      	ldr	r2, [pc, #352]	; (8012e04 <ce303_current+0xf7c>)
 8012ca4:	5cd3      	ldrb	r3, [r2, r3]
 8012ca6:	3b30      	subs	r3, #48	; 0x30
 8012ca8:	b29b      	uxth	r3, r3
 8012caa:	461a      	mov	r2, r3
 8012cac:	0092      	lsls	r2, r2, #2
 8012cae:	4413      	add	r3, r2
 8012cb0:	461a      	mov	r2, r3
 8012cb2:	0091      	lsls	r1, r2, #2
 8012cb4:	461a      	mov	r2, r3
 8012cb6:	460b      	mov	r3, r1
 8012cb8:	4413      	add	r3, r2
 8012cba:	009b      	lsls	r3, r3, #2
 8012cbc:	b29a      	uxth	r2, r3
 8012cbe:	8a3b      	ldrh	r3, [r7, #16]
 8012cc0:	3306      	adds	r3, #6
 8012cc2:	4950      	ldr	r1, [pc, #320]	; (8012e04 <ce303_current+0xf7c>)
 8012cc4:	5ccb      	ldrb	r3, [r1, r3]
 8012cc6:	3b30      	subs	r3, #48	; 0x30
 8012cc8:	b29b      	uxth	r3, r3
 8012cca:	4619      	mov	r1, r3
 8012ccc:	0089      	lsls	r1, r1, #2
 8012cce:	440b      	add	r3, r1
 8012cd0:	005b      	lsls	r3, r3, #1
 8012cd2:	b29b      	uxth	r3, r3
 8012cd4:	4413      	add	r3, r2
 8012cd6:	b29a      	uxth	r2, r3
 8012cd8:	8a3b      	ldrh	r3, [r7, #16]
 8012cda:	3307      	adds	r3, #7
 8012cdc:	4949      	ldr	r1, [pc, #292]	; (8012e04 <ce303_current+0xf7c>)
 8012cde:	5ccb      	ldrb	r3, [r1, r3]
 8012ce0:	b29b      	uxth	r3, r3
 8012ce2:	4413      	add	r3, r2
 8012ce4:	b29b      	uxth	r3, r3
 8012ce6:	3b30      	subs	r3, #48	; 0x30
 8012ce8:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8012cea:	4b47      	ldr	r3, [pc, #284]	; (8012e08 <ce303_current+0xf80>)
 8012cec:	681b      	ldr	r3, [r3, #0]
 8012cee:	f04f 31ff 	mov.w	r1, #4294967295
 8012cf2:	4618      	mov	r0, r3
 8012cf4:	f7f5 fe12 	bl	800891c <osMutexWait>
				fm25v02_write(2*CE_303_CURRENT_B_REG, ((uint8_t)(temp>>8)) );
 8012cf8:	89fb      	ldrh	r3, [r7, #14]
 8012cfa:	0a1b      	lsrs	r3, r3, #8
 8012cfc:	b29b      	uxth	r3, r3
 8012cfe:	b2db      	uxtb	r3, r3
 8012d00:	4619      	mov	r1, r3
 8012d02:	f44f 5001 	mov.w	r0, #8256	; 0x2040
 8012d06:	f003 ffcb 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_B_REG+1, ((uint8_t)(temp&0x00FF)) );
 8012d0a:	89fb      	ldrh	r3, [r7, #14]
 8012d0c:	b2db      	uxtb	r3, r3
 8012d0e:	4619      	mov	r1, r3
 8012d10:	f242 0041 	movw	r0, #8257	; 0x2041
 8012d14:	f003 ffc4 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_B_REG, ((uint8_t)(temp_mil>>8)) );
 8012d18:	8afb      	ldrh	r3, [r7, #22]
 8012d1a:	0a1b      	lsrs	r3, r3, #8
 8012d1c:	b29b      	uxth	r3, r3
 8012d1e:	b2db      	uxtb	r3, r3
 8012d20:	4619      	mov	r1, r3
 8012d22:	f242 0046 	movw	r0, #8262	; 0x2046
 8012d26:	f003 ffbb 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_B_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 8012d2a:	8afb      	ldrh	r3, [r7, #22]
 8012d2c:	b2db      	uxtb	r3, r3
 8012d2e:	4619      	mov	r1, r3
 8012d30:	f242 0047 	movw	r0, #8263	; 0x2047
 8012d34:	f003 ffb4 	bl	8016ca0 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8012d38:	4b33      	ldr	r3, [pc, #204]	; (8012e08 <ce303_current+0xf80>)
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	4618      	mov	r0, r3
 8012d3e:	f7f5 fe3b 	bl	80089b8 <osMutexRelease>
				status_registers.ce303_current_b_reg = temp;
 8012d42:	4a32      	ldr	r2, [pc, #200]	; (8012e0c <ce303_current+0xf84>)
 8012d44:	89fb      	ldrh	r3, [r7, #14]
 8012d46:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
				status_registers.ce303_current_mil_b_reg = temp_mil;
 8012d4a:	4a30      	ldr	r2, [pc, #192]	; (8012e0c <ce303_current+0xf84>)
 8012d4c:	8afb      	ldrh	r3, [r7, #22]
 8012d4e:	f8a2 3046 	strh.w	r3, [r2, #70]	; 0x46
				current_b_state = 1;
 8012d52:	2301      	movs	r3, #1
 8012d54:	753b      	strb	r3, [r7, #20]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8012d56:	e2b3      	b.n	80132c0 <ce303_current+0x1438>
			}
		}

		else if( (meter_rx_buffer[i] == 0x28) && (current_a_state==1) && (current_b_state==1) && (current_c_state==0) )
 8012d58:	8a3b      	ldrh	r3, [r7, #16]
 8012d5a:	4a2a      	ldr	r2, [pc, #168]	; (8012e04 <ce303_current+0xf7c>)
 8012d5c:	5cd3      	ldrb	r3, [r2, r3]
 8012d5e:	2b28      	cmp	r3, #40	; 0x28
 8012d60:	f040 82af 	bne.w	80132c2 <ce303_current+0x143a>
 8012d64:	7d7b      	ldrb	r3, [r7, #21]
 8012d66:	2b01      	cmp	r3, #1
 8012d68:	f040 82ab 	bne.w	80132c2 <ce303_current+0x143a>
 8012d6c:	7d3b      	ldrb	r3, [r7, #20]
 8012d6e:	2b01      	cmp	r3, #1
 8012d70:	f040 82a7 	bne.w	80132c2 <ce303_current+0x143a>
 8012d74:	7cfb      	ldrb	r3, [r7, #19]
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	f040 82a3 	bne.w	80132c2 <ce303_current+0x143a>
		{
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8012d7c:	8a3b      	ldrh	r3, [r7, #16]
 8012d7e:	3302      	adds	r3, #2
 8012d80:	4a20      	ldr	r2, [pc, #128]	; (8012e04 <ce303_current+0xf7c>)
 8012d82:	5cd3      	ldrb	r3, [r2, r3]
 8012d84:	2b2e      	cmp	r3, #46	; 0x2e
 8012d86:	f040 80cd 	bne.w	8012f24 <ce303_current+0x109c>
			{
				temp = (uint16_t)(meter_rx_buffer[i+1]-0x30);
 8012d8a:	8a3b      	ldrh	r3, [r7, #16]
 8012d8c:	3301      	adds	r3, #1
 8012d8e:	4a1d      	ldr	r2, [pc, #116]	; (8012e04 <ce303_current+0xf7c>)
 8012d90:	5cd3      	ldrb	r3, [r2, r3]
 8012d92:	b29b      	uxth	r3, r3
 8012d94:	3b30      	subs	r3, #48	; 0x30
 8012d96:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+4] == 0x29 ) // если 1 разряд после запятой
 8012d98:	8a3b      	ldrh	r3, [r7, #16]
 8012d9a:	3304      	adds	r3, #4
 8012d9c:	4a19      	ldr	r2, [pc, #100]	; (8012e04 <ce303_current+0xf7c>)
 8012d9e:	5cd3      	ldrb	r3, [r2, r3]
 8012da0:	2b29      	cmp	r3, #41	; 0x29
 8012da2:	d110      	bne.n	8012dc6 <ce303_current+0xf3e>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+3])-0x30)*100;
 8012da4:	8a3b      	ldrh	r3, [r7, #16]
 8012da6:	3303      	adds	r3, #3
 8012da8:	4a16      	ldr	r2, [pc, #88]	; (8012e04 <ce303_current+0xf7c>)
 8012daa:	5cd3      	ldrb	r3, [r2, r3]
 8012dac:	3b30      	subs	r3, #48	; 0x30
 8012dae:	b29b      	uxth	r3, r3
 8012db0:	461a      	mov	r2, r3
 8012db2:	0092      	lsls	r2, r2, #2
 8012db4:	4413      	add	r3, r2
 8012db6:	461a      	mov	r2, r3
 8012db8:	0091      	lsls	r1, r2, #2
 8012dba:	461a      	mov	r2, r3
 8012dbc:	460b      	mov	r3, r1
 8012dbe:	4413      	add	r3, r2
 8012dc0:	009b      	lsls	r3, r3, #2
 8012dc2:	82fb      	strh	r3, [r7, #22]
 8012dc4:	e077      	b.n	8012eb6 <ce303_current+0x102e>
				}
				else if( meter_rx_buffer[i+5] == 0x29 ) // если 2 разряда после запятой
 8012dc6:	8a3b      	ldrh	r3, [r7, #16]
 8012dc8:	3305      	adds	r3, #5
 8012dca:	4a0e      	ldr	r2, [pc, #56]	; (8012e04 <ce303_current+0xf7c>)
 8012dcc:	5cd3      	ldrb	r3, [r2, r3]
 8012dce:	2b29      	cmp	r3, #41	; 0x29
 8012dd0:	d11e      	bne.n	8012e10 <ce303_current+0xf88>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30))*10;
 8012dd2:	8a3b      	ldrh	r3, [r7, #16]
 8012dd4:	3303      	adds	r3, #3
 8012dd6:	4a0b      	ldr	r2, [pc, #44]	; (8012e04 <ce303_current+0xf7c>)
 8012dd8:	5cd3      	ldrb	r3, [r2, r3]
 8012dda:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8012dde:	4613      	mov	r3, r2
 8012de0:	009b      	lsls	r3, r3, #2
 8012de2:	4413      	add	r3, r2
 8012de4:	005b      	lsls	r3, r3, #1
 8012de6:	4619      	mov	r1, r3
 8012de8:	8a3b      	ldrh	r3, [r7, #16]
 8012dea:	3304      	adds	r3, #4
 8012dec:	4a05      	ldr	r2, [pc, #20]	; (8012e04 <ce303_current+0xf7c>)
 8012dee:	5cd3      	ldrb	r3, [r2, r3]
 8012df0:	3b30      	subs	r3, #48	; 0x30
 8012df2:	440b      	add	r3, r1
 8012df4:	b29b      	uxth	r3, r3
 8012df6:	461a      	mov	r2, r3
 8012df8:	0092      	lsls	r2, r2, #2
 8012dfa:	4413      	add	r3, r2
 8012dfc:	005b      	lsls	r3, r3, #1
 8012dfe:	82fb      	strh	r3, [r7, #22]
 8012e00:	e059      	b.n	8012eb6 <ce303_current+0x102e>
 8012e02:	bf00      	nop
 8012e04:	2000994c 	.word	0x2000994c
 8012e08:	20009af8 	.word	0x20009af8
 8012e0c:	2000a174 	.word	0x2000a174
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 3 разряда после запятой
 8012e10:	8a3b      	ldrh	r3, [r7, #16]
 8012e12:	3306      	adds	r3, #6
 8012e14:	4ab0      	ldr	r2, [pc, #704]	; (80130d8 <ce303_current+0x1250>)
 8012e16:	5cd3      	ldrb	r3, [r2, r3]
 8012e18:	2b29      	cmp	r3, #41	; 0x29
 8012e1a:	d126      	bne.n	8012e6a <ce303_current+0xfe2>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 8012e1c:	8a3b      	ldrh	r3, [r7, #16]
 8012e1e:	3303      	adds	r3, #3
 8012e20:	4aad      	ldr	r2, [pc, #692]	; (80130d8 <ce303_current+0x1250>)
 8012e22:	5cd3      	ldrb	r3, [r2, r3]
 8012e24:	3b30      	subs	r3, #48	; 0x30
 8012e26:	b29b      	uxth	r3, r3
 8012e28:	461a      	mov	r2, r3
 8012e2a:	0092      	lsls	r2, r2, #2
 8012e2c:	4413      	add	r3, r2
 8012e2e:	461a      	mov	r2, r3
 8012e30:	0091      	lsls	r1, r2, #2
 8012e32:	461a      	mov	r2, r3
 8012e34:	460b      	mov	r3, r1
 8012e36:	4413      	add	r3, r2
 8012e38:	009b      	lsls	r3, r3, #2
 8012e3a:	b29a      	uxth	r2, r3
 8012e3c:	8a3b      	ldrh	r3, [r7, #16]
 8012e3e:	3304      	adds	r3, #4
 8012e40:	49a5      	ldr	r1, [pc, #660]	; (80130d8 <ce303_current+0x1250>)
 8012e42:	5ccb      	ldrb	r3, [r1, r3]
 8012e44:	3b30      	subs	r3, #48	; 0x30
 8012e46:	b29b      	uxth	r3, r3
 8012e48:	4619      	mov	r1, r3
 8012e4a:	0089      	lsls	r1, r1, #2
 8012e4c:	440b      	add	r3, r1
 8012e4e:	005b      	lsls	r3, r3, #1
 8012e50:	b29b      	uxth	r3, r3
 8012e52:	4413      	add	r3, r2
 8012e54:	b29a      	uxth	r2, r3
 8012e56:	8a3b      	ldrh	r3, [r7, #16]
 8012e58:	3305      	adds	r3, #5
 8012e5a:	499f      	ldr	r1, [pc, #636]	; (80130d8 <ce303_current+0x1250>)
 8012e5c:	5ccb      	ldrb	r3, [r1, r3]
 8012e5e:	b29b      	uxth	r3, r3
 8012e60:	4413      	add	r3, r2
 8012e62:	b29b      	uxth	r3, r3
 8012e64:	3b30      	subs	r3, #48	; 0x30
 8012e66:	82fb      	strh	r3, [r7, #22]
 8012e68:	e025      	b.n	8012eb6 <ce303_current+0x102e>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 8012e6a:	8a3b      	ldrh	r3, [r7, #16]
 8012e6c:	3303      	adds	r3, #3
 8012e6e:	4a9a      	ldr	r2, [pc, #616]	; (80130d8 <ce303_current+0x1250>)
 8012e70:	5cd3      	ldrb	r3, [r2, r3]
 8012e72:	3b30      	subs	r3, #48	; 0x30
 8012e74:	b29b      	uxth	r3, r3
 8012e76:	461a      	mov	r2, r3
 8012e78:	0092      	lsls	r2, r2, #2
 8012e7a:	4413      	add	r3, r2
 8012e7c:	461a      	mov	r2, r3
 8012e7e:	0091      	lsls	r1, r2, #2
 8012e80:	461a      	mov	r2, r3
 8012e82:	460b      	mov	r3, r1
 8012e84:	4413      	add	r3, r2
 8012e86:	009b      	lsls	r3, r3, #2
 8012e88:	b29a      	uxth	r2, r3
 8012e8a:	8a3b      	ldrh	r3, [r7, #16]
 8012e8c:	3304      	adds	r3, #4
 8012e8e:	4992      	ldr	r1, [pc, #584]	; (80130d8 <ce303_current+0x1250>)
 8012e90:	5ccb      	ldrb	r3, [r1, r3]
 8012e92:	3b30      	subs	r3, #48	; 0x30
 8012e94:	b29b      	uxth	r3, r3
 8012e96:	4619      	mov	r1, r3
 8012e98:	0089      	lsls	r1, r1, #2
 8012e9a:	440b      	add	r3, r1
 8012e9c:	005b      	lsls	r3, r3, #1
 8012e9e:	b29b      	uxth	r3, r3
 8012ea0:	4413      	add	r3, r2
 8012ea2:	b29a      	uxth	r2, r3
 8012ea4:	8a3b      	ldrh	r3, [r7, #16]
 8012ea6:	3305      	adds	r3, #5
 8012ea8:	498b      	ldr	r1, [pc, #556]	; (80130d8 <ce303_current+0x1250>)
 8012eaa:	5ccb      	ldrb	r3, [r1, r3]
 8012eac:	b29b      	uxth	r3, r3
 8012eae:	4413      	add	r3, r2
 8012eb0:	b29b      	uxth	r3, r3
 8012eb2:	3b30      	subs	r3, #48	; 0x30
 8012eb4:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8012eb6:	4b89      	ldr	r3, [pc, #548]	; (80130dc <ce303_current+0x1254>)
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	f04f 31ff 	mov.w	r1, #4294967295
 8012ebe:	4618      	mov	r0, r3
 8012ec0:	f7f5 fd2c 	bl	800891c <osMutexWait>
				fm25v02_write(2*CE_303_CURRENT_C_REG, ((uint8_t)(temp>>8)) );
 8012ec4:	89fb      	ldrh	r3, [r7, #14]
 8012ec6:	0a1b      	lsrs	r3, r3, #8
 8012ec8:	b29b      	uxth	r3, r3
 8012eca:	b2db      	uxtb	r3, r3
 8012ecc:	4619      	mov	r1, r3
 8012ece:	f242 0042 	movw	r0, #8258	; 0x2042
 8012ed2:	f003 fee5 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_C_REG+1, ((uint8_t)(temp&0x00FF)) );
 8012ed6:	89fb      	ldrh	r3, [r7, #14]
 8012ed8:	b2db      	uxtb	r3, r3
 8012eda:	4619      	mov	r1, r3
 8012edc:	f242 0043 	movw	r0, #8259	; 0x2043
 8012ee0:	f003 fede 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_C_REG, ((uint8_t)(temp_mil>>8)) );
 8012ee4:	8afb      	ldrh	r3, [r7, #22]
 8012ee6:	0a1b      	lsrs	r3, r3, #8
 8012ee8:	b29b      	uxth	r3, r3
 8012eea:	b2db      	uxtb	r3, r3
 8012eec:	4619      	mov	r1, r3
 8012eee:	f242 0048 	movw	r0, #8264	; 0x2048
 8012ef2:	f003 fed5 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_C_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 8012ef6:	8afb      	ldrh	r3, [r7, #22]
 8012ef8:	b2db      	uxtb	r3, r3
 8012efa:	4619      	mov	r1, r3
 8012efc:	f242 0049 	movw	r0, #8265	; 0x2049
 8012f00:	f003 fece 	bl	8016ca0 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8012f04:	4b75      	ldr	r3, [pc, #468]	; (80130dc <ce303_current+0x1254>)
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	4618      	mov	r0, r3
 8012f0a:	f7f5 fd55 	bl	80089b8 <osMutexRelease>
				status_registers.ce303_current_c_reg = temp;
 8012f0e:	4a74      	ldr	r2, [pc, #464]	; (80130e0 <ce303_current+0x1258>)
 8012f10:	89fb      	ldrh	r3, [r7, #14]
 8012f12:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42
				status_registers.ce303_current_mil_c_reg = temp_mil;
 8012f16:	4a72      	ldr	r2, [pc, #456]	; (80130e0 <ce303_current+0x1258>)
 8012f18:	8afb      	ldrh	r3, [r7, #22]
 8012f1a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
				current_c_state = 1;
 8012f1e:	2301      	movs	r3, #1
 8012f20:	74fb      	strb	r3, [r7, #19]
 8012f22:	e1ce      	b.n	80132c2 <ce303_current+0x143a>
			}
			else if( meter_rx_buffer[i+3] == 0x2E)
 8012f24:	8a3b      	ldrh	r3, [r7, #16]
 8012f26:	3303      	adds	r3, #3
 8012f28:	4a6b      	ldr	r2, [pc, #428]	; (80130d8 <ce303_current+0x1250>)
 8012f2a:	5cd3      	ldrb	r3, [r2, r3]
 8012f2c:	2b2e      	cmp	r3, #46	; 0x2e
 8012f2e:	f040 80d9 	bne.w	80130e4 <ce303_current+0x125c>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+2])-0x30);
 8012f32:	8a3b      	ldrh	r3, [r7, #16]
 8012f34:	3301      	adds	r3, #1
 8012f36:	4a68      	ldr	r2, [pc, #416]	; (80130d8 <ce303_current+0x1250>)
 8012f38:	5cd3      	ldrb	r3, [r2, r3]
 8012f3a:	3b30      	subs	r3, #48	; 0x30
 8012f3c:	b29b      	uxth	r3, r3
 8012f3e:	461a      	mov	r2, r3
 8012f40:	0092      	lsls	r2, r2, #2
 8012f42:	4413      	add	r3, r2
 8012f44:	005b      	lsls	r3, r3, #1
 8012f46:	b29a      	uxth	r2, r3
 8012f48:	8a3b      	ldrh	r3, [r7, #16]
 8012f4a:	3302      	adds	r3, #2
 8012f4c:	4962      	ldr	r1, [pc, #392]	; (80130d8 <ce303_current+0x1250>)
 8012f4e:	5ccb      	ldrb	r3, [r1, r3]
 8012f50:	b29b      	uxth	r3, r3
 8012f52:	4413      	add	r3, r2
 8012f54:	b29b      	uxth	r3, r3
 8012f56:	3b30      	subs	r3, #48	; 0x30
 8012f58:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+5] == 0x29 ) // если 1 разряд после запятой
 8012f5a:	8a3b      	ldrh	r3, [r7, #16]
 8012f5c:	3305      	adds	r3, #5
 8012f5e:	4a5e      	ldr	r2, [pc, #376]	; (80130d8 <ce303_current+0x1250>)
 8012f60:	5cd3      	ldrb	r3, [r2, r3]
 8012f62:	2b29      	cmp	r3, #41	; 0x29
 8012f64:	d110      	bne.n	8012f88 <ce303_current+0x1100>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+4])-0x30)*100;
 8012f66:	8a3b      	ldrh	r3, [r7, #16]
 8012f68:	3304      	adds	r3, #4
 8012f6a:	4a5b      	ldr	r2, [pc, #364]	; (80130d8 <ce303_current+0x1250>)
 8012f6c:	5cd3      	ldrb	r3, [r2, r3]
 8012f6e:	3b30      	subs	r3, #48	; 0x30
 8012f70:	b29b      	uxth	r3, r3
 8012f72:	461a      	mov	r2, r3
 8012f74:	0092      	lsls	r2, r2, #2
 8012f76:	4413      	add	r3, r2
 8012f78:	461a      	mov	r2, r3
 8012f7a:	0091      	lsls	r1, r2, #2
 8012f7c:	461a      	mov	r2, r3
 8012f7e:	460b      	mov	r3, r1
 8012f80:	4413      	add	r3, r2
 8012f82:	009b      	lsls	r3, r3, #2
 8012f84:	82fb      	strh	r3, [r7, #22]
 8012f86:	e070      	b.n	801306a <ce303_current+0x11e2>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 2 разряда после запятой
 8012f88:	8a3b      	ldrh	r3, [r7, #16]
 8012f8a:	3306      	adds	r3, #6
 8012f8c:	4a52      	ldr	r2, [pc, #328]	; (80130d8 <ce303_current+0x1250>)
 8012f8e:	5cd3      	ldrb	r3, [r2, r3]
 8012f90:	2b29      	cmp	r3, #41	; 0x29
 8012f92:	d117      	bne.n	8012fc4 <ce303_current+0x113c>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30))*10;
 8012f94:	8a3b      	ldrh	r3, [r7, #16]
 8012f96:	3304      	adds	r3, #4
 8012f98:	4a4f      	ldr	r2, [pc, #316]	; (80130d8 <ce303_current+0x1250>)
 8012f9a:	5cd3      	ldrb	r3, [r2, r3]
 8012f9c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8012fa0:	4613      	mov	r3, r2
 8012fa2:	009b      	lsls	r3, r3, #2
 8012fa4:	4413      	add	r3, r2
 8012fa6:	005b      	lsls	r3, r3, #1
 8012fa8:	4619      	mov	r1, r3
 8012faa:	8a3b      	ldrh	r3, [r7, #16]
 8012fac:	3305      	adds	r3, #5
 8012fae:	4a4a      	ldr	r2, [pc, #296]	; (80130d8 <ce303_current+0x1250>)
 8012fb0:	5cd3      	ldrb	r3, [r2, r3]
 8012fb2:	3b30      	subs	r3, #48	; 0x30
 8012fb4:	440b      	add	r3, r1
 8012fb6:	b29b      	uxth	r3, r3
 8012fb8:	461a      	mov	r2, r3
 8012fba:	0092      	lsls	r2, r2, #2
 8012fbc:	4413      	add	r3, r2
 8012fbe:	005b      	lsls	r3, r3, #1
 8012fc0:	82fb      	strh	r3, [r7, #22]
 8012fc2:	e052      	b.n	801306a <ce303_current+0x11e2>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 3 разряда после запятой
 8012fc4:	8a3b      	ldrh	r3, [r7, #16]
 8012fc6:	3307      	adds	r3, #7
 8012fc8:	4a43      	ldr	r2, [pc, #268]	; (80130d8 <ce303_current+0x1250>)
 8012fca:	5cd3      	ldrb	r3, [r2, r3]
 8012fcc:	2b29      	cmp	r3, #41	; 0x29
 8012fce:	d126      	bne.n	801301e <ce303_current+0x1196>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 8012fd0:	8a3b      	ldrh	r3, [r7, #16]
 8012fd2:	3304      	adds	r3, #4
 8012fd4:	4a40      	ldr	r2, [pc, #256]	; (80130d8 <ce303_current+0x1250>)
 8012fd6:	5cd3      	ldrb	r3, [r2, r3]
 8012fd8:	3b30      	subs	r3, #48	; 0x30
 8012fda:	b29b      	uxth	r3, r3
 8012fdc:	461a      	mov	r2, r3
 8012fde:	0092      	lsls	r2, r2, #2
 8012fe0:	4413      	add	r3, r2
 8012fe2:	461a      	mov	r2, r3
 8012fe4:	0091      	lsls	r1, r2, #2
 8012fe6:	461a      	mov	r2, r3
 8012fe8:	460b      	mov	r3, r1
 8012fea:	4413      	add	r3, r2
 8012fec:	009b      	lsls	r3, r3, #2
 8012fee:	b29a      	uxth	r2, r3
 8012ff0:	8a3b      	ldrh	r3, [r7, #16]
 8012ff2:	3305      	adds	r3, #5
 8012ff4:	4938      	ldr	r1, [pc, #224]	; (80130d8 <ce303_current+0x1250>)
 8012ff6:	5ccb      	ldrb	r3, [r1, r3]
 8012ff8:	3b30      	subs	r3, #48	; 0x30
 8012ffa:	b29b      	uxth	r3, r3
 8012ffc:	4619      	mov	r1, r3
 8012ffe:	0089      	lsls	r1, r1, #2
 8013000:	440b      	add	r3, r1
 8013002:	005b      	lsls	r3, r3, #1
 8013004:	b29b      	uxth	r3, r3
 8013006:	4413      	add	r3, r2
 8013008:	b29a      	uxth	r2, r3
 801300a:	8a3b      	ldrh	r3, [r7, #16]
 801300c:	3306      	adds	r3, #6
 801300e:	4932      	ldr	r1, [pc, #200]	; (80130d8 <ce303_current+0x1250>)
 8013010:	5ccb      	ldrb	r3, [r1, r3]
 8013012:	b29b      	uxth	r3, r3
 8013014:	4413      	add	r3, r2
 8013016:	b29b      	uxth	r3, r3
 8013018:	3b30      	subs	r3, #48	; 0x30
 801301a:	82fb      	strh	r3, [r7, #22]
 801301c:	e025      	b.n	801306a <ce303_current+0x11e2>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 801301e:	8a3b      	ldrh	r3, [r7, #16]
 8013020:	3304      	adds	r3, #4
 8013022:	4a2d      	ldr	r2, [pc, #180]	; (80130d8 <ce303_current+0x1250>)
 8013024:	5cd3      	ldrb	r3, [r2, r3]
 8013026:	3b30      	subs	r3, #48	; 0x30
 8013028:	b29b      	uxth	r3, r3
 801302a:	461a      	mov	r2, r3
 801302c:	0092      	lsls	r2, r2, #2
 801302e:	4413      	add	r3, r2
 8013030:	461a      	mov	r2, r3
 8013032:	0091      	lsls	r1, r2, #2
 8013034:	461a      	mov	r2, r3
 8013036:	460b      	mov	r3, r1
 8013038:	4413      	add	r3, r2
 801303a:	009b      	lsls	r3, r3, #2
 801303c:	b29a      	uxth	r2, r3
 801303e:	8a3b      	ldrh	r3, [r7, #16]
 8013040:	3305      	adds	r3, #5
 8013042:	4925      	ldr	r1, [pc, #148]	; (80130d8 <ce303_current+0x1250>)
 8013044:	5ccb      	ldrb	r3, [r1, r3]
 8013046:	3b30      	subs	r3, #48	; 0x30
 8013048:	b29b      	uxth	r3, r3
 801304a:	4619      	mov	r1, r3
 801304c:	0089      	lsls	r1, r1, #2
 801304e:	440b      	add	r3, r1
 8013050:	005b      	lsls	r3, r3, #1
 8013052:	b29b      	uxth	r3, r3
 8013054:	4413      	add	r3, r2
 8013056:	b29a      	uxth	r2, r3
 8013058:	8a3b      	ldrh	r3, [r7, #16]
 801305a:	3306      	adds	r3, #6
 801305c:	491e      	ldr	r1, [pc, #120]	; (80130d8 <ce303_current+0x1250>)
 801305e:	5ccb      	ldrb	r3, [r1, r3]
 8013060:	b29b      	uxth	r3, r3
 8013062:	4413      	add	r3, r2
 8013064:	b29b      	uxth	r3, r3
 8013066:	3b30      	subs	r3, #48	; 0x30
 8013068:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801306a:	4b1c      	ldr	r3, [pc, #112]	; (80130dc <ce303_current+0x1254>)
 801306c:	681b      	ldr	r3, [r3, #0]
 801306e:	f04f 31ff 	mov.w	r1, #4294967295
 8013072:	4618      	mov	r0, r3
 8013074:	f7f5 fc52 	bl	800891c <osMutexWait>
				fm25v02_write(2*CE_303_CURRENT_C_REG, ((uint8_t)(temp>>8)) );
 8013078:	89fb      	ldrh	r3, [r7, #14]
 801307a:	0a1b      	lsrs	r3, r3, #8
 801307c:	b29b      	uxth	r3, r3
 801307e:	b2db      	uxtb	r3, r3
 8013080:	4619      	mov	r1, r3
 8013082:	f242 0042 	movw	r0, #8258	; 0x2042
 8013086:	f003 fe0b 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_C_REG+1, ((uint8_t)(temp&0x00FF)) );
 801308a:	89fb      	ldrh	r3, [r7, #14]
 801308c:	b2db      	uxtb	r3, r3
 801308e:	4619      	mov	r1, r3
 8013090:	f242 0043 	movw	r0, #8259	; 0x2043
 8013094:	f003 fe04 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_C_REG, ((uint8_t)(temp_mil>>8)) );
 8013098:	8afb      	ldrh	r3, [r7, #22]
 801309a:	0a1b      	lsrs	r3, r3, #8
 801309c:	b29b      	uxth	r3, r3
 801309e:	b2db      	uxtb	r3, r3
 80130a0:	4619      	mov	r1, r3
 80130a2:	f242 0048 	movw	r0, #8264	; 0x2048
 80130a6:	f003 fdfb 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_C_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 80130aa:	8afb      	ldrh	r3, [r7, #22]
 80130ac:	b2db      	uxtb	r3, r3
 80130ae:	4619      	mov	r1, r3
 80130b0:	f242 0049 	movw	r0, #8265	; 0x2049
 80130b4:	f003 fdf4 	bl	8016ca0 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 80130b8:	4b08      	ldr	r3, [pc, #32]	; (80130dc <ce303_current+0x1254>)
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	4618      	mov	r0, r3
 80130be:	f7f5 fc7b 	bl	80089b8 <osMutexRelease>
				status_registers.ce303_current_c_reg = temp;
 80130c2:	4a07      	ldr	r2, [pc, #28]	; (80130e0 <ce303_current+0x1258>)
 80130c4:	89fb      	ldrh	r3, [r7, #14]
 80130c6:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42
				status_registers.ce303_current_mil_c_reg = temp_mil;
 80130ca:	4a05      	ldr	r2, [pc, #20]	; (80130e0 <ce303_current+0x1258>)
 80130cc:	8afb      	ldrh	r3, [r7, #22]
 80130ce:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
				current_c_state = 1;
 80130d2:	2301      	movs	r3, #1
 80130d4:	74fb      	strb	r3, [r7, #19]
 80130d6:	e0f4      	b.n	80132c2 <ce303_current+0x143a>
 80130d8:	2000994c 	.word	0x2000994c
 80130dc:	20009af8 	.word	0x20009af8
 80130e0:	2000a174 	.word	0x2000a174
			}

			else if( meter_rx_buffer[i+4] == 0x2E)
 80130e4:	8a3b      	ldrh	r3, [r7, #16]
 80130e6:	3304      	adds	r3, #4
 80130e8:	4a85      	ldr	r2, [pc, #532]	; (8013300 <ce303_current+0x1478>)
 80130ea:	5cd3      	ldrb	r3, [r2, r3]
 80130ec:	2b2e      	cmp	r3, #46	; 0x2e
 80130ee:	f040 80e8 	bne.w	80132c2 <ce303_current+0x143a>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+3])-0x30);
 80130f2:	8a3b      	ldrh	r3, [r7, #16]
 80130f4:	3301      	adds	r3, #1
 80130f6:	4a82      	ldr	r2, [pc, #520]	; (8013300 <ce303_current+0x1478>)
 80130f8:	5cd3      	ldrb	r3, [r2, r3]
 80130fa:	3b30      	subs	r3, #48	; 0x30
 80130fc:	b29b      	uxth	r3, r3
 80130fe:	461a      	mov	r2, r3
 8013100:	0092      	lsls	r2, r2, #2
 8013102:	4413      	add	r3, r2
 8013104:	461a      	mov	r2, r3
 8013106:	0091      	lsls	r1, r2, #2
 8013108:	461a      	mov	r2, r3
 801310a:	460b      	mov	r3, r1
 801310c:	4413      	add	r3, r2
 801310e:	009b      	lsls	r3, r3, #2
 8013110:	b29a      	uxth	r2, r3
 8013112:	8a3b      	ldrh	r3, [r7, #16]
 8013114:	3302      	adds	r3, #2
 8013116:	497a      	ldr	r1, [pc, #488]	; (8013300 <ce303_current+0x1478>)
 8013118:	5ccb      	ldrb	r3, [r1, r3]
 801311a:	3b30      	subs	r3, #48	; 0x30
 801311c:	b29b      	uxth	r3, r3
 801311e:	4619      	mov	r1, r3
 8013120:	0089      	lsls	r1, r1, #2
 8013122:	440b      	add	r3, r1
 8013124:	005b      	lsls	r3, r3, #1
 8013126:	b29b      	uxth	r3, r3
 8013128:	4413      	add	r3, r2
 801312a:	b29a      	uxth	r2, r3
 801312c:	8a3b      	ldrh	r3, [r7, #16]
 801312e:	3303      	adds	r3, #3
 8013130:	4973      	ldr	r1, [pc, #460]	; (8013300 <ce303_current+0x1478>)
 8013132:	5ccb      	ldrb	r3, [r1, r3]
 8013134:	b29b      	uxth	r3, r3
 8013136:	4413      	add	r3, r2
 8013138:	b29b      	uxth	r3, r3
 801313a:	3b30      	subs	r3, #48	; 0x30
 801313c:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+6] == 0x29 ) // если 1 разряд после запятой
 801313e:	8a3b      	ldrh	r3, [r7, #16]
 8013140:	3306      	adds	r3, #6
 8013142:	4a6f      	ldr	r2, [pc, #444]	; (8013300 <ce303_current+0x1478>)
 8013144:	5cd3      	ldrb	r3, [r2, r3]
 8013146:	2b29      	cmp	r3, #41	; 0x29
 8013148:	d110      	bne.n	801316c <ce303_current+0x12e4>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+5])-0x30)*100;
 801314a:	8a3b      	ldrh	r3, [r7, #16]
 801314c:	3305      	adds	r3, #5
 801314e:	4a6c      	ldr	r2, [pc, #432]	; (8013300 <ce303_current+0x1478>)
 8013150:	5cd3      	ldrb	r3, [r2, r3]
 8013152:	3b30      	subs	r3, #48	; 0x30
 8013154:	b29b      	uxth	r3, r3
 8013156:	461a      	mov	r2, r3
 8013158:	0092      	lsls	r2, r2, #2
 801315a:	4413      	add	r3, r2
 801315c:	461a      	mov	r2, r3
 801315e:	0091      	lsls	r1, r2, #2
 8013160:	461a      	mov	r2, r3
 8013162:	460b      	mov	r3, r1
 8013164:	4413      	add	r3, r2
 8013166:	009b      	lsls	r3, r3, #2
 8013168:	82fb      	strh	r3, [r7, #22]
 801316a:	e070      	b.n	801324e <ce303_current+0x13c6>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 2 разряда после запятой
 801316c:	8a3b      	ldrh	r3, [r7, #16]
 801316e:	3307      	adds	r3, #7
 8013170:	4a63      	ldr	r2, [pc, #396]	; (8013300 <ce303_current+0x1478>)
 8013172:	5cd3      	ldrb	r3, [r2, r3]
 8013174:	2b29      	cmp	r3, #41	; 0x29
 8013176:	d117      	bne.n	80131a8 <ce303_current+0x1320>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30))*10;
 8013178:	8a3b      	ldrh	r3, [r7, #16]
 801317a:	3305      	adds	r3, #5
 801317c:	4a60      	ldr	r2, [pc, #384]	; (8013300 <ce303_current+0x1478>)
 801317e:	5cd3      	ldrb	r3, [r2, r3]
 8013180:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8013184:	4613      	mov	r3, r2
 8013186:	009b      	lsls	r3, r3, #2
 8013188:	4413      	add	r3, r2
 801318a:	005b      	lsls	r3, r3, #1
 801318c:	4619      	mov	r1, r3
 801318e:	8a3b      	ldrh	r3, [r7, #16]
 8013190:	3306      	adds	r3, #6
 8013192:	4a5b      	ldr	r2, [pc, #364]	; (8013300 <ce303_current+0x1478>)
 8013194:	5cd3      	ldrb	r3, [r2, r3]
 8013196:	3b30      	subs	r3, #48	; 0x30
 8013198:	440b      	add	r3, r1
 801319a:	b29b      	uxth	r3, r3
 801319c:	461a      	mov	r2, r3
 801319e:	0092      	lsls	r2, r2, #2
 80131a0:	4413      	add	r3, r2
 80131a2:	005b      	lsls	r3, r3, #1
 80131a4:	82fb      	strh	r3, [r7, #22]
 80131a6:	e052      	b.n	801324e <ce303_current+0x13c6>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 3 разряда после запятой
 80131a8:	8a3b      	ldrh	r3, [r7, #16]
 80131aa:	3308      	adds	r3, #8
 80131ac:	4a54      	ldr	r2, [pc, #336]	; (8013300 <ce303_current+0x1478>)
 80131ae:	5cd3      	ldrb	r3, [r2, r3]
 80131b0:	2b29      	cmp	r3, #41	; 0x29
 80131b2:	d126      	bne.n	8013202 <ce303_current+0x137a>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 80131b4:	8a3b      	ldrh	r3, [r7, #16]
 80131b6:	3305      	adds	r3, #5
 80131b8:	4a51      	ldr	r2, [pc, #324]	; (8013300 <ce303_current+0x1478>)
 80131ba:	5cd3      	ldrb	r3, [r2, r3]
 80131bc:	3b30      	subs	r3, #48	; 0x30
 80131be:	b29b      	uxth	r3, r3
 80131c0:	461a      	mov	r2, r3
 80131c2:	0092      	lsls	r2, r2, #2
 80131c4:	4413      	add	r3, r2
 80131c6:	461a      	mov	r2, r3
 80131c8:	0091      	lsls	r1, r2, #2
 80131ca:	461a      	mov	r2, r3
 80131cc:	460b      	mov	r3, r1
 80131ce:	4413      	add	r3, r2
 80131d0:	009b      	lsls	r3, r3, #2
 80131d2:	b29a      	uxth	r2, r3
 80131d4:	8a3b      	ldrh	r3, [r7, #16]
 80131d6:	3306      	adds	r3, #6
 80131d8:	4949      	ldr	r1, [pc, #292]	; (8013300 <ce303_current+0x1478>)
 80131da:	5ccb      	ldrb	r3, [r1, r3]
 80131dc:	3b30      	subs	r3, #48	; 0x30
 80131de:	b29b      	uxth	r3, r3
 80131e0:	4619      	mov	r1, r3
 80131e2:	0089      	lsls	r1, r1, #2
 80131e4:	440b      	add	r3, r1
 80131e6:	005b      	lsls	r3, r3, #1
 80131e8:	b29b      	uxth	r3, r3
 80131ea:	4413      	add	r3, r2
 80131ec:	b29a      	uxth	r2, r3
 80131ee:	8a3b      	ldrh	r3, [r7, #16]
 80131f0:	3307      	adds	r3, #7
 80131f2:	4943      	ldr	r1, [pc, #268]	; (8013300 <ce303_current+0x1478>)
 80131f4:	5ccb      	ldrb	r3, [r1, r3]
 80131f6:	b29b      	uxth	r3, r3
 80131f8:	4413      	add	r3, r2
 80131fa:	b29b      	uxth	r3, r3
 80131fc:	3b30      	subs	r3, #48	; 0x30
 80131fe:	82fb      	strh	r3, [r7, #22]
 8013200:	e025      	b.n	801324e <ce303_current+0x13c6>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 8013202:	8a3b      	ldrh	r3, [r7, #16]
 8013204:	3305      	adds	r3, #5
 8013206:	4a3e      	ldr	r2, [pc, #248]	; (8013300 <ce303_current+0x1478>)
 8013208:	5cd3      	ldrb	r3, [r2, r3]
 801320a:	3b30      	subs	r3, #48	; 0x30
 801320c:	b29b      	uxth	r3, r3
 801320e:	461a      	mov	r2, r3
 8013210:	0092      	lsls	r2, r2, #2
 8013212:	4413      	add	r3, r2
 8013214:	461a      	mov	r2, r3
 8013216:	0091      	lsls	r1, r2, #2
 8013218:	461a      	mov	r2, r3
 801321a:	460b      	mov	r3, r1
 801321c:	4413      	add	r3, r2
 801321e:	009b      	lsls	r3, r3, #2
 8013220:	b29a      	uxth	r2, r3
 8013222:	8a3b      	ldrh	r3, [r7, #16]
 8013224:	3306      	adds	r3, #6
 8013226:	4936      	ldr	r1, [pc, #216]	; (8013300 <ce303_current+0x1478>)
 8013228:	5ccb      	ldrb	r3, [r1, r3]
 801322a:	3b30      	subs	r3, #48	; 0x30
 801322c:	b29b      	uxth	r3, r3
 801322e:	4619      	mov	r1, r3
 8013230:	0089      	lsls	r1, r1, #2
 8013232:	440b      	add	r3, r1
 8013234:	005b      	lsls	r3, r3, #1
 8013236:	b29b      	uxth	r3, r3
 8013238:	4413      	add	r3, r2
 801323a:	b29a      	uxth	r2, r3
 801323c:	8a3b      	ldrh	r3, [r7, #16]
 801323e:	3307      	adds	r3, #7
 8013240:	492f      	ldr	r1, [pc, #188]	; (8013300 <ce303_current+0x1478>)
 8013242:	5ccb      	ldrb	r3, [r1, r3]
 8013244:	b29b      	uxth	r3, r3
 8013246:	4413      	add	r3, r2
 8013248:	b29b      	uxth	r3, r3
 801324a:	3b30      	subs	r3, #48	; 0x30
 801324c:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801324e:	4b2d      	ldr	r3, [pc, #180]	; (8013304 <ce303_current+0x147c>)
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	f04f 31ff 	mov.w	r1, #4294967295
 8013256:	4618      	mov	r0, r3
 8013258:	f7f5 fb60 	bl	800891c <osMutexWait>
				fm25v02_write(2*CE_303_CURRENT_C_REG, ((uint8_t)(temp>>8)) );
 801325c:	89fb      	ldrh	r3, [r7, #14]
 801325e:	0a1b      	lsrs	r3, r3, #8
 8013260:	b29b      	uxth	r3, r3
 8013262:	b2db      	uxtb	r3, r3
 8013264:	4619      	mov	r1, r3
 8013266:	f242 0042 	movw	r0, #8258	; 0x2042
 801326a:	f003 fd19 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_C_REG+1, ((uint8_t)(temp&0x00FF)) );
 801326e:	89fb      	ldrh	r3, [r7, #14]
 8013270:	b2db      	uxtb	r3, r3
 8013272:	4619      	mov	r1, r3
 8013274:	f242 0043 	movw	r0, #8259	; 0x2043
 8013278:	f003 fd12 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_C_REG, ((uint8_t)(temp_mil>>8)) );
 801327c:	8afb      	ldrh	r3, [r7, #22]
 801327e:	0a1b      	lsrs	r3, r3, #8
 8013280:	b29b      	uxth	r3, r3
 8013282:	b2db      	uxtb	r3, r3
 8013284:	4619      	mov	r1, r3
 8013286:	f242 0048 	movw	r0, #8264	; 0x2048
 801328a:	f003 fd09 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_CURRENT_MIL_C_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 801328e:	8afb      	ldrh	r3, [r7, #22]
 8013290:	b2db      	uxtb	r3, r3
 8013292:	4619      	mov	r1, r3
 8013294:	f242 0049 	movw	r0, #8265	; 0x2049
 8013298:	f003 fd02 	bl	8016ca0 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 801329c:	4b19      	ldr	r3, [pc, #100]	; (8013304 <ce303_current+0x147c>)
 801329e:	681b      	ldr	r3, [r3, #0]
 80132a0:	4618      	mov	r0, r3
 80132a2:	f7f5 fb89 	bl	80089b8 <osMutexRelease>
				status_registers.ce303_current_c_reg = temp;
 80132a6:	4a18      	ldr	r2, [pc, #96]	; (8013308 <ce303_current+0x1480>)
 80132a8:	89fb      	ldrh	r3, [r7, #14]
 80132aa:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42
				status_registers.ce303_current_mil_c_reg = temp_mil;
 80132ae:	4a16      	ldr	r2, [pc, #88]	; (8013308 <ce303_current+0x1480>)
 80132b0:	8afb      	ldrh	r3, [r7, #22]
 80132b2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
				current_c_state = 1;
 80132b6:	2301      	movs	r3, #1
 80132b8:	74fb      	strb	r3, [r7, #19]
 80132ba:	e002      	b.n	80132c2 <ce303_current+0x143a>
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 80132bc:	bf00      	nop
 80132be:	e000      	b.n	80132c2 <ce303_current+0x143a>
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 80132c0:	bf00      	nop
	for(uint16_t i=0; i<256; i++)
 80132c2:	8a3b      	ldrh	r3, [r7, #16]
 80132c4:	3301      	adds	r3, #1
 80132c6:	823b      	strh	r3, [r7, #16]
 80132c8:	8a3b      	ldrh	r3, [r7, #16]
 80132ca:	2bff      	cmp	r3, #255	; 0xff
 80132cc:	f67e afd3 	bls.w	8012276 <ce303_current+0x3ee>
			}
		}

	}

	meter_rx_number = 0;
 80132d0:	4b0e      	ldr	r3, [pc, #56]	; (801330c <ce303_current+0x1484>)
 80132d2:	2200      	movs	r2, #0
 80132d4:	701a      	strb	r2, [r3, #0]
	meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 80132d6:	f7fd fb71 	bl	80109bc <meter_rx_buffer_clear>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 80132da:	2201      	movs	r2, #1
 80132dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80132e0:	480b      	ldr	r0, [pc, #44]	; (8013310 <ce303_current+0x1488>)
 80132e2:	f7f0 fdbd 	bl	8003e60 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart6, &end_buf[0], 5); // передаем команду
 80132e6:	2205      	movs	r2, #5
 80132e8:	490a      	ldr	r1, [pc, #40]	; (8013314 <ce303_current+0x148c>)
 80132ea:	480b      	ldr	r0, [pc, #44]	; (8013318 <ce303_current+0x1490>)
 80132ec:	f7f4 f8d6 	bl	800749c <HAL_UART_Transmit_DMA>
	HAL_Delay(1000);
 80132f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80132f4:	f7ef f9f4 	bl	80026e0 <HAL_Delay>

}
 80132f8:	bf00      	nop
 80132fa:	3718      	adds	r7, #24
 80132fc:	46bd      	mov	sp, r7
 80132fe:	bd80      	pop	{r7, pc}
 8013300:	2000994c 	.word	0x2000994c
 8013304:	20009af8 	.word	0x20009af8
 8013308:	2000a174 	.word	0x2000a174
 801330c:	20000865 	.word	0x20000865
 8013310:	40021800 	.word	0x40021800
 8013314:	20000034 	.word	0x20000034
 8013318:	20009d00 	.word	0x20009d00

0801331c <ce303_power>:

void ce303_power (uint8_t meter_id)
{
 801331c:	b580      	push	{r7, lr}
 801331e:	b086      	sub	sp, #24
 8013320:	af00      	add	r7, sp, #0
 8013322:	4603      	mov	r3, r0
 8013324:	71fb      	strb	r3, [r7, #7]
	uint16_t temp_mil;
	uint8_t power_a_state; // переменные состояния прочтения значений мощности ( если переменная равна 0, то значение мощности не прочитано, если 1 - значение прочитанно )
	uint8_t power_b_state;
	uint8_t power_c_state;

	if( (meter_id>99)&&(meter_id<1000) )
 8013326:	79fb      	ldrb	r3, [r7, #7]
 8013328:	2b63      	cmp	r3, #99	; 0x63
 801332a:	d962      	bls.n	80133f2 <ce303_power+0xd6>
	{
		start_buf[0] = 0x2F;
 801332c:	4b9d      	ldr	r3, [pc, #628]	; (80135a4 <ce303_power+0x288>)
 801332e:	222f      	movs	r2, #47	; 0x2f
 8013330:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 8013332:	4b9c      	ldr	r3, [pc, #624]	; (80135a4 <ce303_power+0x288>)
 8013334:	223f      	movs	r2, #63	; 0x3f
 8013336:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/100) + 0x30;
 8013338:	79fb      	ldrb	r3, [r7, #7]
 801333a:	4a9b      	ldr	r2, [pc, #620]	; (80135a8 <ce303_power+0x28c>)
 801333c:	fba2 2303 	umull	r2, r3, r2, r3
 8013340:	095b      	lsrs	r3, r3, #5
 8013342:	b2db      	uxtb	r3, r3
 8013344:	3330      	adds	r3, #48	; 0x30
 8013346:	b2da      	uxtb	r2, r3
 8013348:	4b96      	ldr	r3, [pc, #600]	; (80135a4 <ce303_power+0x288>)
 801334a:	709a      	strb	r2, [r3, #2]
		start_buf[3] = ((meter_id - (meter_id/100)*100)/10) + 0x30;
 801334c:	79fa      	ldrb	r2, [r7, #7]
 801334e:	79fb      	ldrb	r3, [r7, #7]
 8013350:	4995      	ldr	r1, [pc, #596]	; (80135a8 <ce303_power+0x28c>)
 8013352:	fba1 1303 	umull	r1, r3, r1, r3
 8013356:	095b      	lsrs	r3, r3, #5
 8013358:	b2db      	uxtb	r3, r3
 801335a:	4619      	mov	r1, r3
 801335c:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8013360:	fb03 f301 	mul.w	r3, r3, r1
 8013364:	4413      	add	r3, r2
 8013366:	4a91      	ldr	r2, [pc, #580]	; (80135ac <ce303_power+0x290>)
 8013368:	fb82 1203 	smull	r1, r2, r2, r3
 801336c:	1092      	asrs	r2, r2, #2
 801336e:	17db      	asrs	r3, r3, #31
 8013370:	1ad3      	subs	r3, r2, r3
 8013372:	b2db      	uxtb	r3, r3
 8013374:	3330      	adds	r3, #48	; 0x30
 8013376:	b2da      	uxtb	r2, r3
 8013378:	4b8a      	ldr	r3, [pc, #552]	; (80135a4 <ce303_power+0x288>)
 801337a:	70da      	strb	r2, [r3, #3]
		start_buf[4] = ((meter_id - ((meter_id/100)*100)) - (((meter_id - ((meter_id/100)*100))/10)*10)) + 0x30 ;
 801337c:	79fa      	ldrb	r2, [r7, #7]
 801337e:	79fb      	ldrb	r3, [r7, #7]
 8013380:	4989      	ldr	r1, [pc, #548]	; (80135a8 <ce303_power+0x28c>)
 8013382:	fba1 1303 	umull	r1, r3, r1, r3
 8013386:	095b      	lsrs	r3, r3, #5
 8013388:	b2db      	uxtb	r3, r3
 801338a:	4619      	mov	r1, r3
 801338c:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8013390:	fb03 f301 	mul.w	r3, r3, r1
 8013394:	441a      	add	r2, r3
 8013396:	4b85      	ldr	r3, [pc, #532]	; (80135ac <ce303_power+0x290>)
 8013398:	fb83 1302 	smull	r1, r3, r3, r2
 801339c:	1099      	asrs	r1, r3, #2
 801339e:	17d3      	asrs	r3, r2, #31
 80133a0:	1ac9      	subs	r1, r1, r3
 80133a2:	460b      	mov	r3, r1
 80133a4:	009b      	lsls	r3, r3, #2
 80133a6:	440b      	add	r3, r1
 80133a8:	005b      	lsls	r3, r3, #1
 80133aa:	1ad1      	subs	r1, r2, r3
 80133ac:	b2cb      	uxtb	r3, r1
 80133ae:	3330      	adds	r3, #48	; 0x30
 80133b0:	b2da      	uxtb	r2, r3
 80133b2:	4b7c      	ldr	r3, [pc, #496]	; (80135a4 <ce303_power+0x288>)
 80133b4:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x21;
 80133b6:	4b7b      	ldr	r3, [pc, #492]	; (80135a4 <ce303_power+0x288>)
 80133b8:	2221      	movs	r2, #33	; 0x21
 80133ba:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0D;
 80133bc:	4b79      	ldr	r3, [pc, #484]	; (80135a4 <ce303_power+0x288>)
 80133be:	220d      	movs	r2, #13
 80133c0:	719a      	strb	r2, [r3, #6]
		start_buf[7] = 0x0A;
 80133c2:	4b78      	ldr	r3, [pc, #480]	; (80135a4 <ce303_power+0x288>)
 80133c4:	220a      	movs	r2, #10
 80133c6:	71da      	strb	r2, [r3, #7]

		meter_rx_number = 0;
 80133c8:	4b79      	ldr	r3, [pc, #484]	; (80135b0 <ce303_power+0x294>)
 80133ca:	2200      	movs	r2, #0
 80133cc:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 80133ce:	f7fd faf5 	bl	80109bc <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 80133d2:	2201      	movs	r2, #1
 80133d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80133d8:	4876      	ldr	r0, [pc, #472]	; (80135b4 <ce303_power+0x298>)
 80133da:	f7f0 fd41 	bl	8003e60 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 8); // передаем команду
 80133de:	2208      	movs	r2, #8
 80133e0:	4970      	ldr	r1, [pc, #448]	; (80135a4 <ce303_power+0x288>)
 80133e2:	4875      	ldr	r0, [pc, #468]	; (80135b8 <ce303_power+0x29c>)
 80133e4:	f7f4 f85a 	bl	800749c <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 80133e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80133ec:	f7ef f978 	bl	80026e0 <HAL_Delay>
 80133f0:	e072      	b.n	80134d8 <ce303_power+0x1bc>

	}
	else if( (meter_id>9)&&(meter_id<100) )
 80133f2:	79fb      	ldrb	r3, [r7, #7]
 80133f4:	2b09      	cmp	r3, #9
 80133f6:	d944      	bls.n	8013482 <ce303_power+0x166>
 80133f8:	79fb      	ldrb	r3, [r7, #7]
 80133fa:	2b63      	cmp	r3, #99	; 0x63
 80133fc:	d841      	bhi.n	8013482 <ce303_power+0x166>
	{
		start_buf[0] = 0x2F;
 80133fe:	4b69      	ldr	r3, [pc, #420]	; (80135a4 <ce303_power+0x288>)
 8013400:	222f      	movs	r2, #47	; 0x2f
 8013402:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 8013404:	4b67      	ldr	r3, [pc, #412]	; (80135a4 <ce303_power+0x288>)
 8013406:	223f      	movs	r2, #63	; 0x3f
 8013408:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/10) + 0x30;
 801340a:	79fb      	ldrb	r3, [r7, #7]
 801340c:	4a6b      	ldr	r2, [pc, #428]	; (80135bc <ce303_power+0x2a0>)
 801340e:	fba2 2303 	umull	r2, r3, r2, r3
 8013412:	08db      	lsrs	r3, r3, #3
 8013414:	b2db      	uxtb	r3, r3
 8013416:	3330      	adds	r3, #48	; 0x30
 8013418:	b2da      	uxtb	r2, r3
 801341a:	4b62      	ldr	r3, [pc, #392]	; (80135a4 <ce303_power+0x288>)
 801341c:	709a      	strb	r2, [r3, #2]
		start_buf[3] = (meter_id - ((meter_id/10)*10)) + 0x30;
 801341e:	79fb      	ldrb	r3, [r7, #7]
 8013420:	4a66      	ldr	r2, [pc, #408]	; (80135bc <ce303_power+0x2a0>)
 8013422:	fba2 2303 	umull	r2, r3, r2, r3
 8013426:	08db      	lsrs	r3, r3, #3
 8013428:	b2db      	uxtb	r3, r3
 801342a:	461a      	mov	r2, r3
 801342c:	0152      	lsls	r2, r2, #5
 801342e:	1ad2      	subs	r2, r2, r3
 8013430:	0092      	lsls	r2, r2, #2
 8013432:	1ad3      	subs	r3, r2, r3
 8013434:	005b      	lsls	r3, r3, #1
 8013436:	b2da      	uxtb	r2, r3
 8013438:	79fb      	ldrb	r3, [r7, #7]
 801343a:	4413      	add	r3, r2
 801343c:	b2db      	uxtb	r3, r3
 801343e:	3330      	adds	r3, #48	; 0x30
 8013440:	b2da      	uxtb	r2, r3
 8013442:	4b58      	ldr	r3, [pc, #352]	; (80135a4 <ce303_power+0x288>)
 8013444:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x21;
 8013446:	4b57      	ldr	r3, [pc, #348]	; (80135a4 <ce303_power+0x288>)
 8013448:	2221      	movs	r2, #33	; 0x21
 801344a:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0D;
 801344c:	4b55      	ldr	r3, [pc, #340]	; (80135a4 <ce303_power+0x288>)
 801344e:	220d      	movs	r2, #13
 8013450:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0A;
 8013452:	4b54      	ldr	r3, [pc, #336]	; (80135a4 <ce303_power+0x288>)
 8013454:	220a      	movs	r2, #10
 8013456:	719a      	strb	r2, [r3, #6]

		meter_rx_number = 0;
 8013458:	4b55      	ldr	r3, [pc, #340]	; (80135b0 <ce303_power+0x294>)
 801345a:	2200      	movs	r2, #0
 801345c:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 801345e:	f7fd faad 	bl	80109bc <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8013462:	2201      	movs	r2, #1
 8013464:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8013468:	4852      	ldr	r0, [pc, #328]	; (80135b4 <ce303_power+0x298>)
 801346a:	f7f0 fcf9 	bl	8003e60 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 7); // передаем команду
 801346e:	2207      	movs	r2, #7
 8013470:	494c      	ldr	r1, [pc, #304]	; (80135a4 <ce303_power+0x288>)
 8013472:	4851      	ldr	r0, [pc, #324]	; (80135b8 <ce303_power+0x29c>)
 8013474:	f7f4 f812 	bl	800749c <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 8013478:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801347c:	f7ef f930 	bl	80026e0 <HAL_Delay>
 8013480:	e02a      	b.n	80134d8 <ce303_power+0x1bc>

	}
	else if( (meter_id>=0)&&(meter_id<10) )
 8013482:	79fb      	ldrb	r3, [r7, #7]
 8013484:	2b09      	cmp	r3, #9
 8013486:	d827      	bhi.n	80134d8 <ce303_power+0x1bc>
	{
		start_buf[0] = 0x2F;
 8013488:	4b46      	ldr	r3, [pc, #280]	; (80135a4 <ce303_power+0x288>)
 801348a:	222f      	movs	r2, #47	; 0x2f
 801348c:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 801348e:	4b45      	ldr	r3, [pc, #276]	; (80135a4 <ce303_power+0x288>)
 8013490:	223f      	movs	r2, #63	; 0x3f
 8013492:	705a      	strb	r2, [r3, #1]
		start_buf[2] = meter_id + 0x30;
 8013494:	79fb      	ldrb	r3, [r7, #7]
 8013496:	3330      	adds	r3, #48	; 0x30
 8013498:	b2da      	uxtb	r2, r3
 801349a:	4b42      	ldr	r3, [pc, #264]	; (80135a4 <ce303_power+0x288>)
 801349c:	709a      	strb	r2, [r3, #2]
		start_buf[3] = 0x21;
 801349e:	4b41      	ldr	r3, [pc, #260]	; (80135a4 <ce303_power+0x288>)
 80134a0:	2221      	movs	r2, #33	; 0x21
 80134a2:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x0D;
 80134a4:	4b3f      	ldr	r3, [pc, #252]	; (80135a4 <ce303_power+0x288>)
 80134a6:	220d      	movs	r2, #13
 80134a8:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0A;
 80134aa:	4b3e      	ldr	r3, [pc, #248]	; (80135a4 <ce303_power+0x288>)
 80134ac:	220a      	movs	r2, #10
 80134ae:	715a      	strb	r2, [r3, #5]

		meter_rx_number = 0;
 80134b0:	4b3f      	ldr	r3, [pc, #252]	; (80135b0 <ce303_power+0x294>)
 80134b2:	2200      	movs	r2, #0
 80134b4:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 80134b6:	f7fd fa81 	bl	80109bc <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 80134ba:	2201      	movs	r2, #1
 80134bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80134c0:	483c      	ldr	r0, [pc, #240]	; (80135b4 <ce303_power+0x298>)
 80134c2:	f7f0 fccd 	bl	8003e60 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 6); // передаем команду
 80134c6:	2206      	movs	r2, #6
 80134c8:	4936      	ldr	r1, [pc, #216]	; (80135a4 <ce303_power+0x288>)
 80134ca:	483b      	ldr	r0, [pc, #236]	; (80135b8 <ce303_power+0x29c>)
 80134cc:	f7f3 ffe6 	bl	800749c <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 80134d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80134d4:	f7ef f904 	bl	80026e0 <HAL_Delay>
	}


	if( (meter_id>99)&&(meter_id<1000) )
 80134d8:	79fb      	ldrb	r3, [r7, #7]
 80134da:	2b63      	cmp	r3, #99	; 0x63
 80134dc:	d970      	bls.n	80135c0 <ce303_power+0x2a4>
	{
		start_buf[0] = 0x2F;
 80134de:	4b31      	ldr	r3, [pc, #196]	; (80135a4 <ce303_power+0x288>)
 80134e0:	222f      	movs	r2, #47	; 0x2f
 80134e2:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 80134e4:	4b2f      	ldr	r3, [pc, #188]	; (80135a4 <ce303_power+0x288>)
 80134e6:	223f      	movs	r2, #63	; 0x3f
 80134e8:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/100) + 0x30;
 80134ea:	79fb      	ldrb	r3, [r7, #7]
 80134ec:	4a2e      	ldr	r2, [pc, #184]	; (80135a8 <ce303_power+0x28c>)
 80134ee:	fba2 2303 	umull	r2, r3, r2, r3
 80134f2:	095b      	lsrs	r3, r3, #5
 80134f4:	b2db      	uxtb	r3, r3
 80134f6:	3330      	adds	r3, #48	; 0x30
 80134f8:	b2da      	uxtb	r2, r3
 80134fa:	4b2a      	ldr	r3, [pc, #168]	; (80135a4 <ce303_power+0x288>)
 80134fc:	709a      	strb	r2, [r3, #2]
		start_buf[3] = ((meter_id - (meter_id/100)*100)/10) + 0x30;
 80134fe:	79fa      	ldrb	r2, [r7, #7]
 8013500:	79fb      	ldrb	r3, [r7, #7]
 8013502:	4929      	ldr	r1, [pc, #164]	; (80135a8 <ce303_power+0x28c>)
 8013504:	fba1 1303 	umull	r1, r3, r1, r3
 8013508:	095b      	lsrs	r3, r3, #5
 801350a:	b2db      	uxtb	r3, r3
 801350c:	4619      	mov	r1, r3
 801350e:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8013512:	fb03 f301 	mul.w	r3, r3, r1
 8013516:	4413      	add	r3, r2
 8013518:	4a24      	ldr	r2, [pc, #144]	; (80135ac <ce303_power+0x290>)
 801351a:	fb82 1203 	smull	r1, r2, r2, r3
 801351e:	1092      	asrs	r2, r2, #2
 8013520:	17db      	asrs	r3, r3, #31
 8013522:	1ad3      	subs	r3, r2, r3
 8013524:	b2db      	uxtb	r3, r3
 8013526:	3330      	adds	r3, #48	; 0x30
 8013528:	b2da      	uxtb	r2, r3
 801352a:	4b1e      	ldr	r3, [pc, #120]	; (80135a4 <ce303_power+0x288>)
 801352c:	70da      	strb	r2, [r3, #3]
		start_buf[4] = ((meter_id - ((meter_id/100)*100)) - (((meter_id - ((meter_id/100)*100))/10)*10)) + 0x30 ;
 801352e:	79fa      	ldrb	r2, [r7, #7]
 8013530:	79fb      	ldrb	r3, [r7, #7]
 8013532:	491d      	ldr	r1, [pc, #116]	; (80135a8 <ce303_power+0x28c>)
 8013534:	fba1 1303 	umull	r1, r3, r1, r3
 8013538:	095b      	lsrs	r3, r3, #5
 801353a:	b2db      	uxtb	r3, r3
 801353c:	4619      	mov	r1, r3
 801353e:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8013542:	fb03 f301 	mul.w	r3, r3, r1
 8013546:	441a      	add	r2, r3
 8013548:	4b18      	ldr	r3, [pc, #96]	; (80135ac <ce303_power+0x290>)
 801354a:	fb83 1302 	smull	r1, r3, r3, r2
 801354e:	1099      	asrs	r1, r3, #2
 8013550:	17d3      	asrs	r3, r2, #31
 8013552:	1ac9      	subs	r1, r1, r3
 8013554:	460b      	mov	r3, r1
 8013556:	009b      	lsls	r3, r3, #2
 8013558:	440b      	add	r3, r1
 801355a:	005b      	lsls	r3, r3, #1
 801355c:	1ad1      	subs	r1, r2, r3
 801355e:	b2cb      	uxtb	r3, r1
 8013560:	3330      	adds	r3, #48	; 0x30
 8013562:	b2da      	uxtb	r2, r3
 8013564:	4b0f      	ldr	r3, [pc, #60]	; (80135a4 <ce303_power+0x288>)
 8013566:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x21;
 8013568:	4b0e      	ldr	r3, [pc, #56]	; (80135a4 <ce303_power+0x288>)
 801356a:	2221      	movs	r2, #33	; 0x21
 801356c:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0D;
 801356e:	4b0d      	ldr	r3, [pc, #52]	; (80135a4 <ce303_power+0x288>)
 8013570:	220d      	movs	r2, #13
 8013572:	719a      	strb	r2, [r3, #6]
		start_buf[7] = 0x0A;
 8013574:	4b0b      	ldr	r3, [pc, #44]	; (80135a4 <ce303_power+0x288>)
 8013576:	220a      	movs	r2, #10
 8013578:	71da      	strb	r2, [r3, #7]

		meter_rx_number = 0;
 801357a:	4b0d      	ldr	r3, [pc, #52]	; (80135b0 <ce303_power+0x294>)
 801357c:	2200      	movs	r2, #0
 801357e:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8013580:	f7fd fa1c 	bl	80109bc <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8013584:	2201      	movs	r2, #1
 8013586:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801358a:	480a      	ldr	r0, [pc, #40]	; (80135b4 <ce303_power+0x298>)
 801358c:	f7f0 fc68 	bl	8003e60 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 8); // передаем команду
 8013590:	2208      	movs	r2, #8
 8013592:	4904      	ldr	r1, [pc, #16]	; (80135a4 <ce303_power+0x288>)
 8013594:	4808      	ldr	r0, [pc, #32]	; (80135b8 <ce303_power+0x29c>)
 8013596:	f7f3 ff81 	bl	800749c <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 801359a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801359e:	f7ef f89f 	bl	80026e0 <HAL_Delay>
 80135a2:	e080      	b.n	80136a6 <ce303_power+0x38a>
 80135a4:	20000014 	.word	0x20000014
 80135a8:	51eb851f 	.word	0x51eb851f
 80135ac:	66666667 	.word	0x66666667
 80135b0:	20000865 	.word	0x20000865
 80135b4:	40021800 	.word	0x40021800
 80135b8:	20009d00 	.word	0x20009d00
 80135bc:	cccccccd 	.word	0xcccccccd

	}
	else if( (meter_id>9)&&(meter_id<100) )
 80135c0:	79fb      	ldrb	r3, [r7, #7]
 80135c2:	2b09      	cmp	r3, #9
 80135c4:	d944      	bls.n	8013650 <ce303_power+0x334>
 80135c6:	79fb      	ldrb	r3, [r7, #7]
 80135c8:	2b63      	cmp	r3, #99	; 0x63
 80135ca:	d841      	bhi.n	8013650 <ce303_power+0x334>
	{
		start_buf[0] = 0x2F;
 80135cc:	4b90      	ldr	r3, [pc, #576]	; (8013810 <ce303_power+0x4f4>)
 80135ce:	222f      	movs	r2, #47	; 0x2f
 80135d0:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 80135d2:	4b8f      	ldr	r3, [pc, #572]	; (8013810 <ce303_power+0x4f4>)
 80135d4:	223f      	movs	r2, #63	; 0x3f
 80135d6:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/10) + 0x30;
 80135d8:	79fb      	ldrb	r3, [r7, #7]
 80135da:	4a8e      	ldr	r2, [pc, #568]	; (8013814 <ce303_power+0x4f8>)
 80135dc:	fba2 2303 	umull	r2, r3, r2, r3
 80135e0:	08db      	lsrs	r3, r3, #3
 80135e2:	b2db      	uxtb	r3, r3
 80135e4:	3330      	adds	r3, #48	; 0x30
 80135e6:	b2da      	uxtb	r2, r3
 80135e8:	4b89      	ldr	r3, [pc, #548]	; (8013810 <ce303_power+0x4f4>)
 80135ea:	709a      	strb	r2, [r3, #2]
		start_buf[3] = (meter_id - ((meter_id/10)*10)) + 0x30;
 80135ec:	79fb      	ldrb	r3, [r7, #7]
 80135ee:	4a89      	ldr	r2, [pc, #548]	; (8013814 <ce303_power+0x4f8>)
 80135f0:	fba2 2303 	umull	r2, r3, r2, r3
 80135f4:	08db      	lsrs	r3, r3, #3
 80135f6:	b2db      	uxtb	r3, r3
 80135f8:	461a      	mov	r2, r3
 80135fa:	0152      	lsls	r2, r2, #5
 80135fc:	1ad2      	subs	r2, r2, r3
 80135fe:	0092      	lsls	r2, r2, #2
 8013600:	1ad3      	subs	r3, r2, r3
 8013602:	005b      	lsls	r3, r3, #1
 8013604:	b2da      	uxtb	r2, r3
 8013606:	79fb      	ldrb	r3, [r7, #7]
 8013608:	4413      	add	r3, r2
 801360a:	b2db      	uxtb	r3, r3
 801360c:	3330      	adds	r3, #48	; 0x30
 801360e:	b2da      	uxtb	r2, r3
 8013610:	4b7f      	ldr	r3, [pc, #508]	; (8013810 <ce303_power+0x4f4>)
 8013612:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x21;
 8013614:	4b7e      	ldr	r3, [pc, #504]	; (8013810 <ce303_power+0x4f4>)
 8013616:	2221      	movs	r2, #33	; 0x21
 8013618:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0D;
 801361a:	4b7d      	ldr	r3, [pc, #500]	; (8013810 <ce303_power+0x4f4>)
 801361c:	220d      	movs	r2, #13
 801361e:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0A;
 8013620:	4b7b      	ldr	r3, [pc, #492]	; (8013810 <ce303_power+0x4f4>)
 8013622:	220a      	movs	r2, #10
 8013624:	719a      	strb	r2, [r3, #6]

		meter_rx_number = 0;
 8013626:	4b7c      	ldr	r3, [pc, #496]	; (8013818 <ce303_power+0x4fc>)
 8013628:	2200      	movs	r2, #0
 801362a:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 801362c:	f7fd f9c6 	bl	80109bc <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8013630:	2201      	movs	r2, #1
 8013632:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8013636:	4879      	ldr	r0, [pc, #484]	; (801381c <ce303_power+0x500>)
 8013638:	f7f0 fc12 	bl	8003e60 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 7); // передаем команду
 801363c:	2207      	movs	r2, #7
 801363e:	4974      	ldr	r1, [pc, #464]	; (8013810 <ce303_power+0x4f4>)
 8013640:	4877      	ldr	r0, [pc, #476]	; (8013820 <ce303_power+0x504>)
 8013642:	f7f3 ff2b 	bl	800749c <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 8013646:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801364a:	f7ef f849 	bl	80026e0 <HAL_Delay>
 801364e:	e02a      	b.n	80136a6 <ce303_power+0x38a>

	}
	else if( (meter_id>=0)&&(meter_id<10) )
 8013650:	79fb      	ldrb	r3, [r7, #7]
 8013652:	2b09      	cmp	r3, #9
 8013654:	d827      	bhi.n	80136a6 <ce303_power+0x38a>
	{
		start_buf[0] = 0x2F;
 8013656:	4b6e      	ldr	r3, [pc, #440]	; (8013810 <ce303_power+0x4f4>)
 8013658:	222f      	movs	r2, #47	; 0x2f
 801365a:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 801365c:	4b6c      	ldr	r3, [pc, #432]	; (8013810 <ce303_power+0x4f4>)
 801365e:	223f      	movs	r2, #63	; 0x3f
 8013660:	705a      	strb	r2, [r3, #1]
		start_buf[2] = meter_id + 0x30;
 8013662:	79fb      	ldrb	r3, [r7, #7]
 8013664:	3330      	adds	r3, #48	; 0x30
 8013666:	b2da      	uxtb	r2, r3
 8013668:	4b69      	ldr	r3, [pc, #420]	; (8013810 <ce303_power+0x4f4>)
 801366a:	709a      	strb	r2, [r3, #2]
		start_buf[3] = 0x21;
 801366c:	4b68      	ldr	r3, [pc, #416]	; (8013810 <ce303_power+0x4f4>)
 801366e:	2221      	movs	r2, #33	; 0x21
 8013670:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x0D;
 8013672:	4b67      	ldr	r3, [pc, #412]	; (8013810 <ce303_power+0x4f4>)
 8013674:	220d      	movs	r2, #13
 8013676:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0A;
 8013678:	4b65      	ldr	r3, [pc, #404]	; (8013810 <ce303_power+0x4f4>)
 801367a:	220a      	movs	r2, #10
 801367c:	715a      	strb	r2, [r3, #5]

		meter_rx_number = 0;
 801367e:	4b66      	ldr	r3, [pc, #408]	; (8013818 <ce303_power+0x4fc>)
 8013680:	2200      	movs	r2, #0
 8013682:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8013684:	f7fd f99a 	bl	80109bc <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8013688:	2201      	movs	r2, #1
 801368a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801368e:	4863      	ldr	r0, [pc, #396]	; (801381c <ce303_power+0x500>)
 8013690:	f7f0 fbe6 	bl	8003e60 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 6); // передаем команду
 8013694:	2206      	movs	r2, #6
 8013696:	495e      	ldr	r1, [pc, #376]	; (8013810 <ce303_power+0x4f4>)
 8013698:	4861      	ldr	r0, [pc, #388]	; (8013820 <ce303_power+0x504>)
 801369a:	f7f3 feff 	bl	800749c <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 801369e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80136a2:	f7ef f81d 	bl	80026e0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
	HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 6); // передаем команду
	HAL_Delay(1000); // ждем
	*/

	meter_rx_number = 0;
 80136a6:	4b5c      	ldr	r3, [pc, #368]	; (8013818 <ce303_power+0x4fc>)
 80136a8:	2200      	movs	r2, #0
 80136aa:	701a      	strb	r2, [r3, #0]
	meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 80136ac:	f7fd f986 	bl	80109bc <meter_rx_buffer_clear>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 80136b0:	2201      	movs	r2, #1
 80136b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80136b6:	4859      	ldr	r0, [pc, #356]	; (801381c <ce303_power+0x500>)
 80136b8:	f7f0 fbd2 	bl	8003e60 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart6, &password_buf[0], 6); // передаем команду
 80136bc:	2206      	movs	r2, #6
 80136be:	4959      	ldr	r1, [pc, #356]	; (8013824 <ce303_power+0x508>)
 80136c0:	4857      	ldr	r0, [pc, #348]	; (8013820 <ce303_power+0x504>)
 80136c2:	f7f3 feeb 	bl	800749c <HAL_UART_Transmit_DMA>
	HAL_Delay(1000);
 80136c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80136ca:	f7ef f809 	bl	80026e0 <HAL_Delay>

	meter_rx_number = 0;
 80136ce:	4b52      	ldr	r3, [pc, #328]	; (8013818 <ce303_power+0x4fc>)
 80136d0:	2200      	movs	r2, #0
 80136d2:	701a      	strb	r2, [r3, #0]
	meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 80136d4:	f7fd f972 	bl	80109bc <meter_rx_buffer_clear>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 80136d8:	2201      	movs	r2, #1
 80136da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80136de:	484f      	ldr	r0, [pc, #316]	; (801381c <ce303_power+0x500>)
 80136e0:	f7f0 fbbe 	bl	8003e60 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart6, &power_buf[0], 13); // передаем команду
 80136e4:	220d      	movs	r2, #13
 80136e6:	4950      	ldr	r1, [pc, #320]	; (8013828 <ce303_power+0x50c>)
 80136e8:	484d      	ldr	r0, [pc, #308]	; (8013820 <ce303_power+0x504>)
 80136ea:	f7f3 fed7 	bl	800749c <HAL_UART_Transmit_DMA>
	HAL_Delay(1000);
 80136ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80136f2:	f7ee fff5 	bl	80026e0 <HAL_Delay>

	power_a_state = 0; // обнуляем переменные состояния прочтения мощщности перед их прочтением
 80136f6:	2300      	movs	r3, #0
 80136f8:	757b      	strb	r3, [r7, #21]
	power_b_state = 0;
 80136fa:	2300      	movs	r3, #0
 80136fc:	753b      	strb	r3, [r7, #20]
	power_c_state = 0;
 80136fe:	2300      	movs	r3, #0
 8013700:	74fb      	strb	r3, [r7, #19]

	for(uint16_t i=0; i<256; i++)
 8013702:	2300      	movs	r3, #0
 8013704:	823b      	strh	r3, [r7, #16]
 8013706:	f001 b82b 	b.w	8014760 <ce303_power+0x1444>
	{

		if( (meter_rx_buffer[i] == 0x28) && (power_a_state==0) && (power_b_state==0) && (power_c_state==0) ) // 0х28 означает символ "(" в ASCII таблице
 801370a:	8a3b      	ldrh	r3, [r7, #16]
 801370c:	4a47      	ldr	r2, [pc, #284]	; (801382c <ce303_power+0x510>)
 801370e:	5cd3      	ldrb	r3, [r2, r3]
 8013710:	2b28      	cmp	r3, #40	; 0x28
 8013712:	f040 82ba 	bne.w	8013c8a <ce303_power+0x96e>
 8013716:	7d7b      	ldrb	r3, [r7, #21]
 8013718:	2b00      	cmp	r3, #0
 801371a:	f040 82b6 	bne.w	8013c8a <ce303_power+0x96e>
 801371e:	7d3b      	ldrb	r3, [r7, #20]
 8013720:	2b00      	cmp	r3, #0
 8013722:	f040 82b2 	bne.w	8013c8a <ce303_power+0x96e>
 8013726:	7cfb      	ldrb	r3, [r7, #19]
 8013728:	2b00      	cmp	r3, #0
 801372a:	f040 82ae 	bne.w	8013c8a <ce303_power+0x96e>
		{
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 801372e:	8a3b      	ldrh	r3, [r7, #16]
 8013730:	3302      	adds	r3, #2
 8013732:	4a3e      	ldr	r2, [pc, #248]	; (801382c <ce303_power+0x510>)
 8013734:	5cd3      	ldrb	r3, [r2, r3]
 8013736:	2b2e      	cmp	r3, #46	; 0x2e
 8013738:	f040 80d8 	bne.w	80138ec <ce303_power+0x5d0>
			{
				temp = (uint16_t)(meter_rx_buffer[i+1]-0x30);
 801373c:	8a3b      	ldrh	r3, [r7, #16]
 801373e:	3301      	adds	r3, #1
 8013740:	4a3a      	ldr	r2, [pc, #232]	; (801382c <ce303_power+0x510>)
 8013742:	5cd3      	ldrb	r3, [r2, r3]
 8013744:	b29b      	uxth	r3, r3
 8013746:	3b30      	subs	r3, #48	; 0x30
 8013748:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+4] == 0x29 ) // если 1 разряд после запятой
 801374a:	8a3b      	ldrh	r3, [r7, #16]
 801374c:	3304      	adds	r3, #4
 801374e:	4a37      	ldr	r2, [pc, #220]	; (801382c <ce303_power+0x510>)
 8013750:	5cd3      	ldrb	r3, [r2, r3]
 8013752:	2b29      	cmp	r3, #41	; 0x29
 8013754:	d110      	bne.n	8013778 <ce303_power+0x45c>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+3])-0x30)*100;
 8013756:	8a3b      	ldrh	r3, [r7, #16]
 8013758:	3303      	adds	r3, #3
 801375a:	4a34      	ldr	r2, [pc, #208]	; (801382c <ce303_power+0x510>)
 801375c:	5cd3      	ldrb	r3, [r2, r3]
 801375e:	3b30      	subs	r3, #48	; 0x30
 8013760:	b29b      	uxth	r3, r3
 8013762:	461a      	mov	r2, r3
 8013764:	0092      	lsls	r2, r2, #2
 8013766:	4413      	add	r3, r2
 8013768:	461a      	mov	r2, r3
 801376a:	0091      	lsls	r1, r2, #2
 801376c:	461a      	mov	r2, r3
 801376e:	460b      	mov	r3, r1
 8013770:	4413      	add	r3, r2
 8013772:	009b      	lsls	r3, r3, #2
 8013774:	82fb      	strh	r3, [r7, #22]
 8013776:	e081      	b.n	801387c <ce303_power+0x560>
				}
				else if( meter_rx_buffer[i+5] == 0x29 ) // если 2 разряда после запятой
 8013778:	8a3b      	ldrh	r3, [r7, #16]
 801377a:	3305      	adds	r3, #5
 801377c:	4a2b      	ldr	r2, [pc, #172]	; (801382c <ce303_power+0x510>)
 801377e:	5cd3      	ldrb	r3, [r2, r3]
 8013780:	2b29      	cmp	r3, #41	; 0x29
 8013782:	d117      	bne.n	80137b4 <ce303_power+0x498>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30))*10;
 8013784:	8a3b      	ldrh	r3, [r7, #16]
 8013786:	3303      	adds	r3, #3
 8013788:	4a28      	ldr	r2, [pc, #160]	; (801382c <ce303_power+0x510>)
 801378a:	5cd3      	ldrb	r3, [r2, r3]
 801378c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8013790:	4613      	mov	r3, r2
 8013792:	009b      	lsls	r3, r3, #2
 8013794:	4413      	add	r3, r2
 8013796:	005b      	lsls	r3, r3, #1
 8013798:	4619      	mov	r1, r3
 801379a:	8a3b      	ldrh	r3, [r7, #16]
 801379c:	3304      	adds	r3, #4
 801379e:	4a23      	ldr	r2, [pc, #140]	; (801382c <ce303_power+0x510>)
 80137a0:	5cd3      	ldrb	r3, [r2, r3]
 80137a2:	3b30      	subs	r3, #48	; 0x30
 80137a4:	440b      	add	r3, r1
 80137a6:	b29b      	uxth	r3, r3
 80137a8:	461a      	mov	r2, r3
 80137aa:	0092      	lsls	r2, r2, #2
 80137ac:	4413      	add	r3, r2
 80137ae:	005b      	lsls	r3, r3, #1
 80137b0:	82fb      	strh	r3, [r7, #22]
 80137b2:	e063      	b.n	801387c <ce303_power+0x560>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 3 разряда после запятой
 80137b4:	8a3b      	ldrh	r3, [r7, #16]
 80137b6:	3306      	adds	r3, #6
 80137b8:	4a1c      	ldr	r2, [pc, #112]	; (801382c <ce303_power+0x510>)
 80137ba:	5cd3      	ldrb	r3, [r2, r3]
 80137bc:	2b29      	cmp	r3, #41	; 0x29
 80137be:	d137      	bne.n	8013830 <ce303_power+0x514>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 80137c0:	8a3b      	ldrh	r3, [r7, #16]
 80137c2:	3303      	adds	r3, #3
 80137c4:	4a19      	ldr	r2, [pc, #100]	; (801382c <ce303_power+0x510>)
 80137c6:	5cd3      	ldrb	r3, [r2, r3]
 80137c8:	3b30      	subs	r3, #48	; 0x30
 80137ca:	b29b      	uxth	r3, r3
 80137cc:	461a      	mov	r2, r3
 80137ce:	0092      	lsls	r2, r2, #2
 80137d0:	4413      	add	r3, r2
 80137d2:	461a      	mov	r2, r3
 80137d4:	0091      	lsls	r1, r2, #2
 80137d6:	461a      	mov	r2, r3
 80137d8:	460b      	mov	r3, r1
 80137da:	4413      	add	r3, r2
 80137dc:	009b      	lsls	r3, r3, #2
 80137de:	b29a      	uxth	r2, r3
 80137e0:	8a3b      	ldrh	r3, [r7, #16]
 80137e2:	3304      	adds	r3, #4
 80137e4:	4911      	ldr	r1, [pc, #68]	; (801382c <ce303_power+0x510>)
 80137e6:	5ccb      	ldrb	r3, [r1, r3]
 80137e8:	3b30      	subs	r3, #48	; 0x30
 80137ea:	b29b      	uxth	r3, r3
 80137ec:	4619      	mov	r1, r3
 80137ee:	0089      	lsls	r1, r1, #2
 80137f0:	440b      	add	r3, r1
 80137f2:	005b      	lsls	r3, r3, #1
 80137f4:	b29b      	uxth	r3, r3
 80137f6:	4413      	add	r3, r2
 80137f8:	b29a      	uxth	r2, r3
 80137fa:	8a3b      	ldrh	r3, [r7, #16]
 80137fc:	3305      	adds	r3, #5
 80137fe:	490b      	ldr	r1, [pc, #44]	; (801382c <ce303_power+0x510>)
 8013800:	5ccb      	ldrb	r3, [r1, r3]
 8013802:	b29b      	uxth	r3, r3
 8013804:	4413      	add	r3, r2
 8013806:	b29b      	uxth	r3, r3
 8013808:	3b30      	subs	r3, #48	; 0x30
 801380a:	82fb      	strh	r3, [r7, #22]
 801380c:	e036      	b.n	801387c <ce303_power+0x560>
 801380e:	bf00      	nop
 8013810:	20000014 	.word	0x20000014
 8013814:	cccccccd 	.word	0xcccccccd
 8013818:	20000865 	.word	0x20000865
 801381c:	40021800 	.word	0x40021800
 8013820:	20009d00 	.word	0x20009d00
 8013824:	2000001c 	.word	0x2000001c
 8013828:	2000004c 	.word	0x2000004c
 801382c:	2000994c 	.word	0x2000994c
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 8013830:	8a3b      	ldrh	r3, [r7, #16]
 8013832:	3303      	adds	r3, #3
 8013834:	4a9b      	ldr	r2, [pc, #620]	; (8013aa4 <ce303_power+0x788>)
 8013836:	5cd3      	ldrb	r3, [r2, r3]
 8013838:	3b30      	subs	r3, #48	; 0x30
 801383a:	b29b      	uxth	r3, r3
 801383c:	461a      	mov	r2, r3
 801383e:	0092      	lsls	r2, r2, #2
 8013840:	4413      	add	r3, r2
 8013842:	461a      	mov	r2, r3
 8013844:	0091      	lsls	r1, r2, #2
 8013846:	461a      	mov	r2, r3
 8013848:	460b      	mov	r3, r1
 801384a:	4413      	add	r3, r2
 801384c:	009b      	lsls	r3, r3, #2
 801384e:	b29a      	uxth	r2, r3
 8013850:	8a3b      	ldrh	r3, [r7, #16]
 8013852:	3304      	adds	r3, #4
 8013854:	4993      	ldr	r1, [pc, #588]	; (8013aa4 <ce303_power+0x788>)
 8013856:	5ccb      	ldrb	r3, [r1, r3]
 8013858:	3b30      	subs	r3, #48	; 0x30
 801385a:	b29b      	uxth	r3, r3
 801385c:	4619      	mov	r1, r3
 801385e:	0089      	lsls	r1, r1, #2
 8013860:	440b      	add	r3, r1
 8013862:	005b      	lsls	r3, r3, #1
 8013864:	b29b      	uxth	r3, r3
 8013866:	4413      	add	r3, r2
 8013868:	b29a      	uxth	r2, r3
 801386a:	8a3b      	ldrh	r3, [r7, #16]
 801386c:	3305      	adds	r3, #5
 801386e:	498d      	ldr	r1, [pc, #564]	; (8013aa4 <ce303_power+0x788>)
 8013870:	5ccb      	ldrb	r3, [r1, r3]
 8013872:	b29b      	uxth	r3, r3
 8013874:	4413      	add	r3, r2
 8013876:	b29b      	uxth	r3, r3
 8013878:	3b30      	subs	r3, #48	; 0x30
 801387a:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801387c:	4b8a      	ldr	r3, [pc, #552]	; (8013aa8 <ce303_power+0x78c>)
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	f04f 31ff 	mov.w	r1, #4294967295
 8013884:	4618      	mov	r0, r3
 8013886:	f7f5 f849 	bl	800891c <osMutexWait>
				fm25v02_write(2*CE_303_POWER_A_REG, ((uint8_t)(temp>>8)) );
 801388a:	89fb      	ldrh	r3, [r7, #14]
 801388c:	0a1b      	lsrs	r3, r3, #8
 801388e:	b29b      	uxth	r3, r3
 8013890:	b2db      	uxtb	r3, r3
 8013892:	4619      	mov	r1, r3
 8013894:	f242 0056 	movw	r0, #8278	; 0x2056
 8013898:	f003 fa02 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_A_REG+1, ((uint8_t)(temp&0x00FF)) );
 801389c:	89fb      	ldrh	r3, [r7, #14]
 801389e:	b2db      	uxtb	r3, r3
 80138a0:	4619      	mov	r1, r3
 80138a2:	f242 0057 	movw	r0, #8279	; 0x2057
 80138a6:	f003 f9fb 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_A_REG, ((uint8_t)(temp_mil>>8)) );
 80138aa:	8afb      	ldrh	r3, [r7, #22]
 80138ac:	0a1b      	lsrs	r3, r3, #8
 80138ae:	b29b      	uxth	r3, r3
 80138b0:	b2db      	uxtb	r3, r3
 80138b2:	4619      	mov	r1, r3
 80138b4:	f242 005c 	movw	r0, #8284	; 0x205c
 80138b8:	f003 f9f2 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_A_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 80138bc:	8afb      	ldrh	r3, [r7, #22]
 80138be:	b2db      	uxtb	r3, r3
 80138c0:	4619      	mov	r1, r3
 80138c2:	f242 005d 	movw	r0, #8285	; 0x205d
 80138c6:	f003 f9eb 	bl	8016ca0 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 80138ca:	4b77      	ldr	r3, [pc, #476]	; (8013aa8 <ce303_power+0x78c>)
 80138cc:	681b      	ldr	r3, [r3, #0]
 80138ce:	4618      	mov	r0, r3
 80138d0:	f7f5 f872 	bl	80089b8 <osMutexRelease>
				status_registers.ce303_power_a_reg = temp;
 80138d4:	4a75      	ldr	r2, [pc, #468]	; (8013aac <ce303_power+0x790>)
 80138d6:	89fb      	ldrh	r3, [r7, #14]
 80138d8:	f8a2 3056 	strh.w	r3, [r2, #86]	; 0x56
				status_registers.ce303_power_mil_a_reg =  temp_mil;
 80138dc:	4a73      	ldr	r2, [pc, #460]	; (8013aac <ce303_power+0x790>)
 80138de:	8afb      	ldrh	r3, [r7, #22]
 80138e0:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
				power_a_state = 1;
 80138e4:	2301      	movs	r3, #1
 80138e6:	757b      	strb	r3, [r7, #21]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 80138e8:	f000 bf34 	b.w	8014754 <ce303_power+0x1438>
			}
			else if( meter_rx_buffer[i+3] == 0x2E)
 80138ec:	8a3b      	ldrh	r3, [r7, #16]
 80138ee:	3303      	adds	r3, #3
 80138f0:	4a6c      	ldr	r2, [pc, #432]	; (8013aa4 <ce303_power+0x788>)
 80138f2:	5cd3      	ldrb	r3, [r2, r3]
 80138f4:	2b2e      	cmp	r3, #46	; 0x2e
 80138f6:	f040 80db 	bne.w	8013ab0 <ce303_power+0x794>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+2])-0x30);
 80138fa:	8a3b      	ldrh	r3, [r7, #16]
 80138fc:	3301      	adds	r3, #1
 80138fe:	4a69      	ldr	r2, [pc, #420]	; (8013aa4 <ce303_power+0x788>)
 8013900:	5cd3      	ldrb	r3, [r2, r3]
 8013902:	3b30      	subs	r3, #48	; 0x30
 8013904:	b29b      	uxth	r3, r3
 8013906:	461a      	mov	r2, r3
 8013908:	0092      	lsls	r2, r2, #2
 801390a:	4413      	add	r3, r2
 801390c:	005b      	lsls	r3, r3, #1
 801390e:	b29a      	uxth	r2, r3
 8013910:	8a3b      	ldrh	r3, [r7, #16]
 8013912:	3302      	adds	r3, #2
 8013914:	4963      	ldr	r1, [pc, #396]	; (8013aa4 <ce303_power+0x788>)
 8013916:	5ccb      	ldrb	r3, [r1, r3]
 8013918:	b29b      	uxth	r3, r3
 801391a:	4413      	add	r3, r2
 801391c:	b29b      	uxth	r3, r3
 801391e:	3b30      	subs	r3, #48	; 0x30
 8013920:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+5] == 0x29 ) // если 1 разряд после запятой
 8013922:	8a3b      	ldrh	r3, [r7, #16]
 8013924:	3305      	adds	r3, #5
 8013926:	4a5f      	ldr	r2, [pc, #380]	; (8013aa4 <ce303_power+0x788>)
 8013928:	5cd3      	ldrb	r3, [r2, r3]
 801392a:	2b29      	cmp	r3, #41	; 0x29
 801392c:	d110      	bne.n	8013950 <ce303_power+0x634>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+4])-0x30)*100;
 801392e:	8a3b      	ldrh	r3, [r7, #16]
 8013930:	3304      	adds	r3, #4
 8013932:	4a5c      	ldr	r2, [pc, #368]	; (8013aa4 <ce303_power+0x788>)
 8013934:	5cd3      	ldrb	r3, [r2, r3]
 8013936:	3b30      	subs	r3, #48	; 0x30
 8013938:	b29b      	uxth	r3, r3
 801393a:	461a      	mov	r2, r3
 801393c:	0092      	lsls	r2, r2, #2
 801393e:	4413      	add	r3, r2
 8013940:	461a      	mov	r2, r3
 8013942:	0091      	lsls	r1, r2, #2
 8013944:	461a      	mov	r2, r3
 8013946:	460b      	mov	r3, r1
 8013948:	4413      	add	r3, r2
 801394a:	009b      	lsls	r3, r3, #2
 801394c:	82fb      	strh	r3, [r7, #22]
 801394e:	e070      	b.n	8013a32 <ce303_power+0x716>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 2 разряда после запятой
 8013950:	8a3b      	ldrh	r3, [r7, #16]
 8013952:	3306      	adds	r3, #6
 8013954:	4a53      	ldr	r2, [pc, #332]	; (8013aa4 <ce303_power+0x788>)
 8013956:	5cd3      	ldrb	r3, [r2, r3]
 8013958:	2b29      	cmp	r3, #41	; 0x29
 801395a:	d117      	bne.n	801398c <ce303_power+0x670>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30))*10;
 801395c:	8a3b      	ldrh	r3, [r7, #16]
 801395e:	3304      	adds	r3, #4
 8013960:	4a50      	ldr	r2, [pc, #320]	; (8013aa4 <ce303_power+0x788>)
 8013962:	5cd3      	ldrb	r3, [r2, r3]
 8013964:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8013968:	4613      	mov	r3, r2
 801396a:	009b      	lsls	r3, r3, #2
 801396c:	4413      	add	r3, r2
 801396e:	005b      	lsls	r3, r3, #1
 8013970:	4619      	mov	r1, r3
 8013972:	8a3b      	ldrh	r3, [r7, #16]
 8013974:	3305      	adds	r3, #5
 8013976:	4a4b      	ldr	r2, [pc, #300]	; (8013aa4 <ce303_power+0x788>)
 8013978:	5cd3      	ldrb	r3, [r2, r3]
 801397a:	3b30      	subs	r3, #48	; 0x30
 801397c:	440b      	add	r3, r1
 801397e:	b29b      	uxth	r3, r3
 8013980:	461a      	mov	r2, r3
 8013982:	0092      	lsls	r2, r2, #2
 8013984:	4413      	add	r3, r2
 8013986:	005b      	lsls	r3, r3, #1
 8013988:	82fb      	strh	r3, [r7, #22]
 801398a:	e052      	b.n	8013a32 <ce303_power+0x716>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 3 разряда после запятой
 801398c:	8a3b      	ldrh	r3, [r7, #16]
 801398e:	3307      	adds	r3, #7
 8013990:	4a44      	ldr	r2, [pc, #272]	; (8013aa4 <ce303_power+0x788>)
 8013992:	5cd3      	ldrb	r3, [r2, r3]
 8013994:	2b29      	cmp	r3, #41	; 0x29
 8013996:	d126      	bne.n	80139e6 <ce303_power+0x6ca>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 8013998:	8a3b      	ldrh	r3, [r7, #16]
 801399a:	3304      	adds	r3, #4
 801399c:	4a41      	ldr	r2, [pc, #260]	; (8013aa4 <ce303_power+0x788>)
 801399e:	5cd3      	ldrb	r3, [r2, r3]
 80139a0:	3b30      	subs	r3, #48	; 0x30
 80139a2:	b29b      	uxth	r3, r3
 80139a4:	461a      	mov	r2, r3
 80139a6:	0092      	lsls	r2, r2, #2
 80139a8:	4413      	add	r3, r2
 80139aa:	461a      	mov	r2, r3
 80139ac:	0091      	lsls	r1, r2, #2
 80139ae:	461a      	mov	r2, r3
 80139b0:	460b      	mov	r3, r1
 80139b2:	4413      	add	r3, r2
 80139b4:	009b      	lsls	r3, r3, #2
 80139b6:	b29a      	uxth	r2, r3
 80139b8:	8a3b      	ldrh	r3, [r7, #16]
 80139ba:	3305      	adds	r3, #5
 80139bc:	4939      	ldr	r1, [pc, #228]	; (8013aa4 <ce303_power+0x788>)
 80139be:	5ccb      	ldrb	r3, [r1, r3]
 80139c0:	3b30      	subs	r3, #48	; 0x30
 80139c2:	b29b      	uxth	r3, r3
 80139c4:	4619      	mov	r1, r3
 80139c6:	0089      	lsls	r1, r1, #2
 80139c8:	440b      	add	r3, r1
 80139ca:	005b      	lsls	r3, r3, #1
 80139cc:	b29b      	uxth	r3, r3
 80139ce:	4413      	add	r3, r2
 80139d0:	b29a      	uxth	r2, r3
 80139d2:	8a3b      	ldrh	r3, [r7, #16]
 80139d4:	3306      	adds	r3, #6
 80139d6:	4933      	ldr	r1, [pc, #204]	; (8013aa4 <ce303_power+0x788>)
 80139d8:	5ccb      	ldrb	r3, [r1, r3]
 80139da:	b29b      	uxth	r3, r3
 80139dc:	4413      	add	r3, r2
 80139de:	b29b      	uxth	r3, r3
 80139e0:	3b30      	subs	r3, #48	; 0x30
 80139e2:	82fb      	strh	r3, [r7, #22]
 80139e4:	e025      	b.n	8013a32 <ce303_power+0x716>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 80139e6:	8a3b      	ldrh	r3, [r7, #16]
 80139e8:	3304      	adds	r3, #4
 80139ea:	4a2e      	ldr	r2, [pc, #184]	; (8013aa4 <ce303_power+0x788>)
 80139ec:	5cd3      	ldrb	r3, [r2, r3]
 80139ee:	3b30      	subs	r3, #48	; 0x30
 80139f0:	b29b      	uxth	r3, r3
 80139f2:	461a      	mov	r2, r3
 80139f4:	0092      	lsls	r2, r2, #2
 80139f6:	4413      	add	r3, r2
 80139f8:	461a      	mov	r2, r3
 80139fa:	0091      	lsls	r1, r2, #2
 80139fc:	461a      	mov	r2, r3
 80139fe:	460b      	mov	r3, r1
 8013a00:	4413      	add	r3, r2
 8013a02:	009b      	lsls	r3, r3, #2
 8013a04:	b29a      	uxth	r2, r3
 8013a06:	8a3b      	ldrh	r3, [r7, #16]
 8013a08:	3305      	adds	r3, #5
 8013a0a:	4926      	ldr	r1, [pc, #152]	; (8013aa4 <ce303_power+0x788>)
 8013a0c:	5ccb      	ldrb	r3, [r1, r3]
 8013a0e:	3b30      	subs	r3, #48	; 0x30
 8013a10:	b29b      	uxth	r3, r3
 8013a12:	4619      	mov	r1, r3
 8013a14:	0089      	lsls	r1, r1, #2
 8013a16:	440b      	add	r3, r1
 8013a18:	005b      	lsls	r3, r3, #1
 8013a1a:	b29b      	uxth	r3, r3
 8013a1c:	4413      	add	r3, r2
 8013a1e:	b29a      	uxth	r2, r3
 8013a20:	8a3b      	ldrh	r3, [r7, #16]
 8013a22:	3306      	adds	r3, #6
 8013a24:	491f      	ldr	r1, [pc, #124]	; (8013aa4 <ce303_power+0x788>)
 8013a26:	5ccb      	ldrb	r3, [r1, r3]
 8013a28:	b29b      	uxth	r3, r3
 8013a2a:	4413      	add	r3, r2
 8013a2c:	b29b      	uxth	r3, r3
 8013a2e:	3b30      	subs	r3, #48	; 0x30
 8013a30:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8013a32:	4b1d      	ldr	r3, [pc, #116]	; (8013aa8 <ce303_power+0x78c>)
 8013a34:	681b      	ldr	r3, [r3, #0]
 8013a36:	f04f 31ff 	mov.w	r1, #4294967295
 8013a3a:	4618      	mov	r0, r3
 8013a3c:	f7f4 ff6e 	bl	800891c <osMutexWait>
				fm25v02_write(2*CE_303_POWER_A_REG, ((uint8_t)(temp>>8)) );
 8013a40:	89fb      	ldrh	r3, [r7, #14]
 8013a42:	0a1b      	lsrs	r3, r3, #8
 8013a44:	b29b      	uxth	r3, r3
 8013a46:	b2db      	uxtb	r3, r3
 8013a48:	4619      	mov	r1, r3
 8013a4a:	f242 0056 	movw	r0, #8278	; 0x2056
 8013a4e:	f003 f927 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_A_REG+1, ((uint8_t)(temp&0x00FF)) );
 8013a52:	89fb      	ldrh	r3, [r7, #14]
 8013a54:	b2db      	uxtb	r3, r3
 8013a56:	4619      	mov	r1, r3
 8013a58:	f242 0057 	movw	r0, #8279	; 0x2057
 8013a5c:	f003 f920 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_A_REG, ((uint8_t)(temp_mil>>8)) );
 8013a60:	8afb      	ldrh	r3, [r7, #22]
 8013a62:	0a1b      	lsrs	r3, r3, #8
 8013a64:	b29b      	uxth	r3, r3
 8013a66:	b2db      	uxtb	r3, r3
 8013a68:	4619      	mov	r1, r3
 8013a6a:	f242 005c 	movw	r0, #8284	; 0x205c
 8013a6e:	f003 f917 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_A_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 8013a72:	8afb      	ldrh	r3, [r7, #22]
 8013a74:	b2db      	uxtb	r3, r3
 8013a76:	4619      	mov	r1, r3
 8013a78:	f242 005d 	movw	r0, #8285	; 0x205d
 8013a7c:	f003 f910 	bl	8016ca0 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8013a80:	4b09      	ldr	r3, [pc, #36]	; (8013aa8 <ce303_power+0x78c>)
 8013a82:	681b      	ldr	r3, [r3, #0]
 8013a84:	4618      	mov	r0, r3
 8013a86:	f7f4 ff97 	bl	80089b8 <osMutexRelease>
				status_registers.ce303_power_a_reg = temp;
 8013a8a:	4a08      	ldr	r2, [pc, #32]	; (8013aac <ce303_power+0x790>)
 8013a8c:	89fb      	ldrh	r3, [r7, #14]
 8013a8e:	f8a2 3056 	strh.w	r3, [r2, #86]	; 0x56
				status_registers.ce303_power_mil_a_reg = temp_mil;
 8013a92:	4a06      	ldr	r2, [pc, #24]	; (8013aac <ce303_power+0x790>)
 8013a94:	8afb      	ldrh	r3, [r7, #22]
 8013a96:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
				power_a_state = 1;
 8013a9a:	2301      	movs	r3, #1
 8013a9c:	757b      	strb	r3, [r7, #21]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8013a9e:	f000 be59 	b.w	8014754 <ce303_power+0x1438>
 8013aa2:	bf00      	nop
 8013aa4:	2000994c 	.word	0x2000994c
 8013aa8:	20009af8 	.word	0x20009af8
 8013aac:	2000a174 	.word	0x2000a174
			}

			else if( meter_rx_buffer[i+4] == 0x2E)
 8013ab0:	8a3b      	ldrh	r3, [r7, #16]
 8013ab2:	3304      	adds	r3, #4
 8013ab4:	4a9f      	ldr	r2, [pc, #636]	; (8013d34 <ce303_power+0xa18>)
 8013ab6:	5cd3      	ldrb	r3, [r2, r3]
 8013ab8:	2b2e      	cmp	r3, #46	; 0x2e
 8013aba:	f040 864b 	bne.w	8014754 <ce303_power+0x1438>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+3])-0x30);
 8013abe:	8a3b      	ldrh	r3, [r7, #16]
 8013ac0:	3301      	adds	r3, #1
 8013ac2:	4a9c      	ldr	r2, [pc, #624]	; (8013d34 <ce303_power+0xa18>)
 8013ac4:	5cd3      	ldrb	r3, [r2, r3]
 8013ac6:	3b30      	subs	r3, #48	; 0x30
 8013ac8:	b29b      	uxth	r3, r3
 8013aca:	461a      	mov	r2, r3
 8013acc:	0092      	lsls	r2, r2, #2
 8013ace:	4413      	add	r3, r2
 8013ad0:	461a      	mov	r2, r3
 8013ad2:	0091      	lsls	r1, r2, #2
 8013ad4:	461a      	mov	r2, r3
 8013ad6:	460b      	mov	r3, r1
 8013ad8:	4413      	add	r3, r2
 8013ada:	009b      	lsls	r3, r3, #2
 8013adc:	b29a      	uxth	r2, r3
 8013ade:	8a3b      	ldrh	r3, [r7, #16]
 8013ae0:	3302      	adds	r3, #2
 8013ae2:	4994      	ldr	r1, [pc, #592]	; (8013d34 <ce303_power+0xa18>)
 8013ae4:	5ccb      	ldrb	r3, [r1, r3]
 8013ae6:	3b30      	subs	r3, #48	; 0x30
 8013ae8:	b29b      	uxth	r3, r3
 8013aea:	4619      	mov	r1, r3
 8013aec:	0089      	lsls	r1, r1, #2
 8013aee:	440b      	add	r3, r1
 8013af0:	005b      	lsls	r3, r3, #1
 8013af2:	b29b      	uxth	r3, r3
 8013af4:	4413      	add	r3, r2
 8013af6:	b29a      	uxth	r2, r3
 8013af8:	8a3b      	ldrh	r3, [r7, #16]
 8013afa:	3303      	adds	r3, #3
 8013afc:	498d      	ldr	r1, [pc, #564]	; (8013d34 <ce303_power+0xa18>)
 8013afe:	5ccb      	ldrb	r3, [r1, r3]
 8013b00:	b29b      	uxth	r3, r3
 8013b02:	4413      	add	r3, r2
 8013b04:	b29b      	uxth	r3, r3
 8013b06:	3b30      	subs	r3, #48	; 0x30
 8013b08:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+6] == 0x29 ) // если 1 разряд после запятой
 8013b0a:	8a3b      	ldrh	r3, [r7, #16]
 8013b0c:	3306      	adds	r3, #6
 8013b0e:	4a89      	ldr	r2, [pc, #548]	; (8013d34 <ce303_power+0xa18>)
 8013b10:	5cd3      	ldrb	r3, [r2, r3]
 8013b12:	2b29      	cmp	r3, #41	; 0x29
 8013b14:	d110      	bne.n	8013b38 <ce303_power+0x81c>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+5])-0x30)*100;
 8013b16:	8a3b      	ldrh	r3, [r7, #16]
 8013b18:	3305      	adds	r3, #5
 8013b1a:	4a86      	ldr	r2, [pc, #536]	; (8013d34 <ce303_power+0xa18>)
 8013b1c:	5cd3      	ldrb	r3, [r2, r3]
 8013b1e:	3b30      	subs	r3, #48	; 0x30
 8013b20:	b29b      	uxth	r3, r3
 8013b22:	461a      	mov	r2, r3
 8013b24:	0092      	lsls	r2, r2, #2
 8013b26:	4413      	add	r3, r2
 8013b28:	461a      	mov	r2, r3
 8013b2a:	0091      	lsls	r1, r2, #2
 8013b2c:	461a      	mov	r2, r3
 8013b2e:	460b      	mov	r3, r1
 8013b30:	4413      	add	r3, r2
 8013b32:	009b      	lsls	r3, r3, #2
 8013b34:	82fb      	strh	r3, [r7, #22]
 8013b36:	e070      	b.n	8013c1a <ce303_power+0x8fe>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 2 разряда после запятой
 8013b38:	8a3b      	ldrh	r3, [r7, #16]
 8013b3a:	3307      	adds	r3, #7
 8013b3c:	4a7d      	ldr	r2, [pc, #500]	; (8013d34 <ce303_power+0xa18>)
 8013b3e:	5cd3      	ldrb	r3, [r2, r3]
 8013b40:	2b29      	cmp	r3, #41	; 0x29
 8013b42:	d117      	bne.n	8013b74 <ce303_power+0x858>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30))*10;
 8013b44:	8a3b      	ldrh	r3, [r7, #16]
 8013b46:	3305      	adds	r3, #5
 8013b48:	4a7a      	ldr	r2, [pc, #488]	; (8013d34 <ce303_power+0xa18>)
 8013b4a:	5cd3      	ldrb	r3, [r2, r3]
 8013b4c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8013b50:	4613      	mov	r3, r2
 8013b52:	009b      	lsls	r3, r3, #2
 8013b54:	4413      	add	r3, r2
 8013b56:	005b      	lsls	r3, r3, #1
 8013b58:	4619      	mov	r1, r3
 8013b5a:	8a3b      	ldrh	r3, [r7, #16]
 8013b5c:	3306      	adds	r3, #6
 8013b5e:	4a75      	ldr	r2, [pc, #468]	; (8013d34 <ce303_power+0xa18>)
 8013b60:	5cd3      	ldrb	r3, [r2, r3]
 8013b62:	3b30      	subs	r3, #48	; 0x30
 8013b64:	440b      	add	r3, r1
 8013b66:	b29b      	uxth	r3, r3
 8013b68:	461a      	mov	r2, r3
 8013b6a:	0092      	lsls	r2, r2, #2
 8013b6c:	4413      	add	r3, r2
 8013b6e:	005b      	lsls	r3, r3, #1
 8013b70:	82fb      	strh	r3, [r7, #22]
 8013b72:	e052      	b.n	8013c1a <ce303_power+0x8fe>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 3 разряда после запятой
 8013b74:	8a3b      	ldrh	r3, [r7, #16]
 8013b76:	3308      	adds	r3, #8
 8013b78:	4a6e      	ldr	r2, [pc, #440]	; (8013d34 <ce303_power+0xa18>)
 8013b7a:	5cd3      	ldrb	r3, [r2, r3]
 8013b7c:	2b29      	cmp	r3, #41	; 0x29
 8013b7e:	d126      	bne.n	8013bce <ce303_power+0x8b2>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 8013b80:	8a3b      	ldrh	r3, [r7, #16]
 8013b82:	3305      	adds	r3, #5
 8013b84:	4a6b      	ldr	r2, [pc, #428]	; (8013d34 <ce303_power+0xa18>)
 8013b86:	5cd3      	ldrb	r3, [r2, r3]
 8013b88:	3b30      	subs	r3, #48	; 0x30
 8013b8a:	b29b      	uxth	r3, r3
 8013b8c:	461a      	mov	r2, r3
 8013b8e:	0092      	lsls	r2, r2, #2
 8013b90:	4413      	add	r3, r2
 8013b92:	461a      	mov	r2, r3
 8013b94:	0091      	lsls	r1, r2, #2
 8013b96:	461a      	mov	r2, r3
 8013b98:	460b      	mov	r3, r1
 8013b9a:	4413      	add	r3, r2
 8013b9c:	009b      	lsls	r3, r3, #2
 8013b9e:	b29a      	uxth	r2, r3
 8013ba0:	8a3b      	ldrh	r3, [r7, #16]
 8013ba2:	3306      	adds	r3, #6
 8013ba4:	4963      	ldr	r1, [pc, #396]	; (8013d34 <ce303_power+0xa18>)
 8013ba6:	5ccb      	ldrb	r3, [r1, r3]
 8013ba8:	3b30      	subs	r3, #48	; 0x30
 8013baa:	b29b      	uxth	r3, r3
 8013bac:	4619      	mov	r1, r3
 8013bae:	0089      	lsls	r1, r1, #2
 8013bb0:	440b      	add	r3, r1
 8013bb2:	005b      	lsls	r3, r3, #1
 8013bb4:	b29b      	uxth	r3, r3
 8013bb6:	4413      	add	r3, r2
 8013bb8:	b29a      	uxth	r2, r3
 8013bba:	8a3b      	ldrh	r3, [r7, #16]
 8013bbc:	3307      	adds	r3, #7
 8013bbe:	495d      	ldr	r1, [pc, #372]	; (8013d34 <ce303_power+0xa18>)
 8013bc0:	5ccb      	ldrb	r3, [r1, r3]
 8013bc2:	b29b      	uxth	r3, r3
 8013bc4:	4413      	add	r3, r2
 8013bc6:	b29b      	uxth	r3, r3
 8013bc8:	3b30      	subs	r3, #48	; 0x30
 8013bca:	82fb      	strh	r3, [r7, #22]
 8013bcc:	e025      	b.n	8013c1a <ce303_power+0x8fe>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 8013bce:	8a3b      	ldrh	r3, [r7, #16]
 8013bd0:	3305      	adds	r3, #5
 8013bd2:	4a58      	ldr	r2, [pc, #352]	; (8013d34 <ce303_power+0xa18>)
 8013bd4:	5cd3      	ldrb	r3, [r2, r3]
 8013bd6:	3b30      	subs	r3, #48	; 0x30
 8013bd8:	b29b      	uxth	r3, r3
 8013bda:	461a      	mov	r2, r3
 8013bdc:	0092      	lsls	r2, r2, #2
 8013bde:	4413      	add	r3, r2
 8013be0:	461a      	mov	r2, r3
 8013be2:	0091      	lsls	r1, r2, #2
 8013be4:	461a      	mov	r2, r3
 8013be6:	460b      	mov	r3, r1
 8013be8:	4413      	add	r3, r2
 8013bea:	009b      	lsls	r3, r3, #2
 8013bec:	b29a      	uxth	r2, r3
 8013bee:	8a3b      	ldrh	r3, [r7, #16]
 8013bf0:	3306      	adds	r3, #6
 8013bf2:	4950      	ldr	r1, [pc, #320]	; (8013d34 <ce303_power+0xa18>)
 8013bf4:	5ccb      	ldrb	r3, [r1, r3]
 8013bf6:	3b30      	subs	r3, #48	; 0x30
 8013bf8:	b29b      	uxth	r3, r3
 8013bfa:	4619      	mov	r1, r3
 8013bfc:	0089      	lsls	r1, r1, #2
 8013bfe:	440b      	add	r3, r1
 8013c00:	005b      	lsls	r3, r3, #1
 8013c02:	b29b      	uxth	r3, r3
 8013c04:	4413      	add	r3, r2
 8013c06:	b29a      	uxth	r2, r3
 8013c08:	8a3b      	ldrh	r3, [r7, #16]
 8013c0a:	3307      	adds	r3, #7
 8013c0c:	4949      	ldr	r1, [pc, #292]	; (8013d34 <ce303_power+0xa18>)
 8013c0e:	5ccb      	ldrb	r3, [r1, r3]
 8013c10:	b29b      	uxth	r3, r3
 8013c12:	4413      	add	r3, r2
 8013c14:	b29b      	uxth	r3, r3
 8013c16:	3b30      	subs	r3, #48	; 0x30
 8013c18:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8013c1a:	4b47      	ldr	r3, [pc, #284]	; (8013d38 <ce303_power+0xa1c>)
 8013c1c:	681b      	ldr	r3, [r3, #0]
 8013c1e:	f04f 31ff 	mov.w	r1, #4294967295
 8013c22:	4618      	mov	r0, r3
 8013c24:	f7f4 fe7a 	bl	800891c <osMutexWait>
				fm25v02_write(2*CE_303_POWER_A_REG, ((uint8_t)(temp>>8)) );
 8013c28:	89fb      	ldrh	r3, [r7, #14]
 8013c2a:	0a1b      	lsrs	r3, r3, #8
 8013c2c:	b29b      	uxth	r3, r3
 8013c2e:	b2db      	uxtb	r3, r3
 8013c30:	4619      	mov	r1, r3
 8013c32:	f242 0056 	movw	r0, #8278	; 0x2056
 8013c36:	f003 f833 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_A_REG+1, ((uint8_t)(temp&0x00FF)) );
 8013c3a:	89fb      	ldrh	r3, [r7, #14]
 8013c3c:	b2db      	uxtb	r3, r3
 8013c3e:	4619      	mov	r1, r3
 8013c40:	f242 0057 	movw	r0, #8279	; 0x2057
 8013c44:	f003 f82c 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_A_REG, ((uint8_t)(temp_mil>>8)) );
 8013c48:	8afb      	ldrh	r3, [r7, #22]
 8013c4a:	0a1b      	lsrs	r3, r3, #8
 8013c4c:	b29b      	uxth	r3, r3
 8013c4e:	b2db      	uxtb	r3, r3
 8013c50:	4619      	mov	r1, r3
 8013c52:	f242 005c 	movw	r0, #8284	; 0x205c
 8013c56:	f003 f823 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_A_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 8013c5a:	8afb      	ldrh	r3, [r7, #22]
 8013c5c:	b2db      	uxtb	r3, r3
 8013c5e:	4619      	mov	r1, r3
 8013c60:	f242 005d 	movw	r0, #8285	; 0x205d
 8013c64:	f003 f81c 	bl	8016ca0 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8013c68:	4b33      	ldr	r3, [pc, #204]	; (8013d38 <ce303_power+0xa1c>)
 8013c6a:	681b      	ldr	r3, [r3, #0]
 8013c6c:	4618      	mov	r0, r3
 8013c6e:	f7f4 fea3 	bl	80089b8 <osMutexRelease>
				status_registers.ce303_power_a_reg = temp;
 8013c72:	4a32      	ldr	r2, [pc, #200]	; (8013d3c <ce303_power+0xa20>)
 8013c74:	89fb      	ldrh	r3, [r7, #14]
 8013c76:	f8a2 3056 	strh.w	r3, [r2, #86]	; 0x56
				status_registers.ce303_power_mil_a_reg = temp_mil;
 8013c7a:	4a30      	ldr	r2, [pc, #192]	; (8013d3c <ce303_power+0xa20>)
 8013c7c:	8afb      	ldrh	r3, [r7, #22]
 8013c7e:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
				power_a_state = 1;
 8013c82:	2301      	movs	r3, #1
 8013c84:	757b      	strb	r3, [r7, #21]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8013c86:	f000 bd65 	b.w	8014754 <ce303_power+0x1438>
			}
		}

		else if( (meter_rx_buffer[i] == 0x28) && (power_a_state==1) && (power_b_state==0) && (power_c_state==0) )
 8013c8a:	8a3b      	ldrh	r3, [r7, #16]
 8013c8c:	4a29      	ldr	r2, [pc, #164]	; (8013d34 <ce303_power+0xa18>)
 8013c8e:	5cd3      	ldrb	r3, [r2, r3]
 8013c90:	2b28      	cmp	r3, #40	; 0x28
 8013c92:	f040 82ad 	bne.w	80141f0 <ce303_power+0xed4>
 8013c96:	7d7b      	ldrb	r3, [r7, #21]
 8013c98:	2b01      	cmp	r3, #1
 8013c9a:	f040 82a9 	bne.w	80141f0 <ce303_power+0xed4>
 8013c9e:	7d3b      	ldrb	r3, [r7, #20]
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	f040 82a5 	bne.w	80141f0 <ce303_power+0xed4>
 8013ca6:	7cfb      	ldrb	r3, [r7, #19]
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	f040 82a1 	bne.w	80141f0 <ce303_power+0xed4>
		{
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8013cae:	8a3b      	ldrh	r3, [r7, #16]
 8013cb0:	3302      	adds	r3, #2
 8013cb2:	4a20      	ldr	r2, [pc, #128]	; (8013d34 <ce303_power+0xa18>)
 8013cb4:	5cd3      	ldrb	r3, [r2, r3]
 8013cb6:	2b2e      	cmp	r3, #46	; 0x2e
 8013cb8:	f040 80cd 	bne.w	8013e56 <ce303_power+0xb3a>
			{
				temp = (uint16_t)(meter_rx_buffer[i+1]-0x30);
 8013cbc:	8a3b      	ldrh	r3, [r7, #16]
 8013cbe:	3301      	adds	r3, #1
 8013cc0:	4a1c      	ldr	r2, [pc, #112]	; (8013d34 <ce303_power+0xa18>)
 8013cc2:	5cd3      	ldrb	r3, [r2, r3]
 8013cc4:	b29b      	uxth	r3, r3
 8013cc6:	3b30      	subs	r3, #48	; 0x30
 8013cc8:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+4] == 0x29 ) // если 1 разряд после запятой
 8013cca:	8a3b      	ldrh	r3, [r7, #16]
 8013ccc:	3304      	adds	r3, #4
 8013cce:	4a19      	ldr	r2, [pc, #100]	; (8013d34 <ce303_power+0xa18>)
 8013cd0:	5cd3      	ldrb	r3, [r2, r3]
 8013cd2:	2b29      	cmp	r3, #41	; 0x29
 8013cd4:	d110      	bne.n	8013cf8 <ce303_power+0x9dc>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+3])-0x30)*100;
 8013cd6:	8a3b      	ldrh	r3, [r7, #16]
 8013cd8:	3303      	adds	r3, #3
 8013cda:	4a16      	ldr	r2, [pc, #88]	; (8013d34 <ce303_power+0xa18>)
 8013cdc:	5cd3      	ldrb	r3, [r2, r3]
 8013cde:	3b30      	subs	r3, #48	; 0x30
 8013ce0:	b29b      	uxth	r3, r3
 8013ce2:	461a      	mov	r2, r3
 8013ce4:	0092      	lsls	r2, r2, #2
 8013ce6:	4413      	add	r3, r2
 8013ce8:	461a      	mov	r2, r3
 8013cea:	0091      	lsls	r1, r2, #2
 8013cec:	461a      	mov	r2, r3
 8013cee:	460b      	mov	r3, r1
 8013cf0:	4413      	add	r3, r2
 8013cf2:	009b      	lsls	r3, r3, #2
 8013cf4:	82fb      	strh	r3, [r7, #22]
 8013cf6:	e076      	b.n	8013de6 <ce303_power+0xaca>
				}
				else if( meter_rx_buffer[i+5] == 0x29 ) // если 2 разряда после запятой
 8013cf8:	8a3b      	ldrh	r3, [r7, #16]
 8013cfa:	3305      	adds	r3, #5
 8013cfc:	4a0d      	ldr	r2, [pc, #52]	; (8013d34 <ce303_power+0xa18>)
 8013cfe:	5cd3      	ldrb	r3, [r2, r3]
 8013d00:	2b29      	cmp	r3, #41	; 0x29
 8013d02:	d11d      	bne.n	8013d40 <ce303_power+0xa24>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30))*10;
 8013d04:	8a3b      	ldrh	r3, [r7, #16]
 8013d06:	3303      	adds	r3, #3
 8013d08:	4a0a      	ldr	r2, [pc, #40]	; (8013d34 <ce303_power+0xa18>)
 8013d0a:	5cd3      	ldrb	r3, [r2, r3]
 8013d0c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8013d10:	4613      	mov	r3, r2
 8013d12:	009b      	lsls	r3, r3, #2
 8013d14:	4413      	add	r3, r2
 8013d16:	005b      	lsls	r3, r3, #1
 8013d18:	4619      	mov	r1, r3
 8013d1a:	8a3b      	ldrh	r3, [r7, #16]
 8013d1c:	3304      	adds	r3, #4
 8013d1e:	4a05      	ldr	r2, [pc, #20]	; (8013d34 <ce303_power+0xa18>)
 8013d20:	5cd3      	ldrb	r3, [r2, r3]
 8013d22:	3b30      	subs	r3, #48	; 0x30
 8013d24:	440b      	add	r3, r1
 8013d26:	b29b      	uxth	r3, r3
 8013d28:	461a      	mov	r2, r3
 8013d2a:	0092      	lsls	r2, r2, #2
 8013d2c:	4413      	add	r3, r2
 8013d2e:	005b      	lsls	r3, r3, #1
 8013d30:	82fb      	strh	r3, [r7, #22]
 8013d32:	e058      	b.n	8013de6 <ce303_power+0xaca>
 8013d34:	2000994c 	.word	0x2000994c
 8013d38:	20009af8 	.word	0x20009af8
 8013d3c:	2000a174 	.word	0x2000a174
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 3 разряда после запятой
 8013d40:	8a3b      	ldrh	r3, [r7, #16]
 8013d42:	3306      	adds	r3, #6
 8013d44:	4ab1      	ldr	r2, [pc, #708]	; (801400c <ce303_power+0xcf0>)
 8013d46:	5cd3      	ldrb	r3, [r2, r3]
 8013d48:	2b29      	cmp	r3, #41	; 0x29
 8013d4a:	d126      	bne.n	8013d9a <ce303_power+0xa7e>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 8013d4c:	8a3b      	ldrh	r3, [r7, #16]
 8013d4e:	3303      	adds	r3, #3
 8013d50:	4aae      	ldr	r2, [pc, #696]	; (801400c <ce303_power+0xcf0>)
 8013d52:	5cd3      	ldrb	r3, [r2, r3]
 8013d54:	3b30      	subs	r3, #48	; 0x30
 8013d56:	b29b      	uxth	r3, r3
 8013d58:	461a      	mov	r2, r3
 8013d5a:	0092      	lsls	r2, r2, #2
 8013d5c:	4413      	add	r3, r2
 8013d5e:	461a      	mov	r2, r3
 8013d60:	0091      	lsls	r1, r2, #2
 8013d62:	461a      	mov	r2, r3
 8013d64:	460b      	mov	r3, r1
 8013d66:	4413      	add	r3, r2
 8013d68:	009b      	lsls	r3, r3, #2
 8013d6a:	b29a      	uxth	r2, r3
 8013d6c:	8a3b      	ldrh	r3, [r7, #16]
 8013d6e:	3304      	adds	r3, #4
 8013d70:	49a6      	ldr	r1, [pc, #664]	; (801400c <ce303_power+0xcf0>)
 8013d72:	5ccb      	ldrb	r3, [r1, r3]
 8013d74:	3b30      	subs	r3, #48	; 0x30
 8013d76:	b29b      	uxth	r3, r3
 8013d78:	4619      	mov	r1, r3
 8013d7a:	0089      	lsls	r1, r1, #2
 8013d7c:	440b      	add	r3, r1
 8013d7e:	005b      	lsls	r3, r3, #1
 8013d80:	b29b      	uxth	r3, r3
 8013d82:	4413      	add	r3, r2
 8013d84:	b29a      	uxth	r2, r3
 8013d86:	8a3b      	ldrh	r3, [r7, #16]
 8013d88:	3305      	adds	r3, #5
 8013d8a:	49a0      	ldr	r1, [pc, #640]	; (801400c <ce303_power+0xcf0>)
 8013d8c:	5ccb      	ldrb	r3, [r1, r3]
 8013d8e:	b29b      	uxth	r3, r3
 8013d90:	4413      	add	r3, r2
 8013d92:	b29b      	uxth	r3, r3
 8013d94:	3b30      	subs	r3, #48	; 0x30
 8013d96:	82fb      	strh	r3, [r7, #22]
 8013d98:	e025      	b.n	8013de6 <ce303_power+0xaca>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 8013d9a:	8a3b      	ldrh	r3, [r7, #16]
 8013d9c:	3303      	adds	r3, #3
 8013d9e:	4a9b      	ldr	r2, [pc, #620]	; (801400c <ce303_power+0xcf0>)
 8013da0:	5cd3      	ldrb	r3, [r2, r3]
 8013da2:	3b30      	subs	r3, #48	; 0x30
 8013da4:	b29b      	uxth	r3, r3
 8013da6:	461a      	mov	r2, r3
 8013da8:	0092      	lsls	r2, r2, #2
 8013daa:	4413      	add	r3, r2
 8013dac:	461a      	mov	r2, r3
 8013dae:	0091      	lsls	r1, r2, #2
 8013db0:	461a      	mov	r2, r3
 8013db2:	460b      	mov	r3, r1
 8013db4:	4413      	add	r3, r2
 8013db6:	009b      	lsls	r3, r3, #2
 8013db8:	b29a      	uxth	r2, r3
 8013dba:	8a3b      	ldrh	r3, [r7, #16]
 8013dbc:	3304      	adds	r3, #4
 8013dbe:	4993      	ldr	r1, [pc, #588]	; (801400c <ce303_power+0xcf0>)
 8013dc0:	5ccb      	ldrb	r3, [r1, r3]
 8013dc2:	3b30      	subs	r3, #48	; 0x30
 8013dc4:	b29b      	uxth	r3, r3
 8013dc6:	4619      	mov	r1, r3
 8013dc8:	0089      	lsls	r1, r1, #2
 8013dca:	440b      	add	r3, r1
 8013dcc:	005b      	lsls	r3, r3, #1
 8013dce:	b29b      	uxth	r3, r3
 8013dd0:	4413      	add	r3, r2
 8013dd2:	b29a      	uxth	r2, r3
 8013dd4:	8a3b      	ldrh	r3, [r7, #16]
 8013dd6:	3305      	adds	r3, #5
 8013dd8:	498c      	ldr	r1, [pc, #560]	; (801400c <ce303_power+0xcf0>)
 8013dda:	5ccb      	ldrb	r3, [r1, r3]
 8013ddc:	b29b      	uxth	r3, r3
 8013dde:	4413      	add	r3, r2
 8013de0:	b29b      	uxth	r3, r3
 8013de2:	3b30      	subs	r3, #48	; 0x30
 8013de4:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8013de6:	4b8a      	ldr	r3, [pc, #552]	; (8014010 <ce303_power+0xcf4>)
 8013de8:	681b      	ldr	r3, [r3, #0]
 8013dea:	f04f 31ff 	mov.w	r1, #4294967295
 8013dee:	4618      	mov	r0, r3
 8013df0:	f7f4 fd94 	bl	800891c <osMutexWait>
				fm25v02_write(2*CE_303_POWER_B_REG, ((uint8_t)(temp>>8)) );
 8013df4:	89fb      	ldrh	r3, [r7, #14]
 8013df6:	0a1b      	lsrs	r3, r3, #8
 8013df8:	b29b      	uxth	r3, r3
 8013dfa:	b2db      	uxtb	r3, r3
 8013dfc:	4619      	mov	r1, r3
 8013dfe:	f242 0058 	movw	r0, #8280	; 0x2058
 8013e02:	f002 ff4d 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_B_REG+1, ((uint8_t)(temp&0x00FF)) );
 8013e06:	89fb      	ldrh	r3, [r7, #14]
 8013e08:	b2db      	uxtb	r3, r3
 8013e0a:	4619      	mov	r1, r3
 8013e0c:	f242 0059 	movw	r0, #8281	; 0x2059
 8013e10:	f002 ff46 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_B_REG, ((uint8_t)(temp_mil>>8)) );
 8013e14:	8afb      	ldrh	r3, [r7, #22]
 8013e16:	0a1b      	lsrs	r3, r3, #8
 8013e18:	b29b      	uxth	r3, r3
 8013e1a:	b2db      	uxtb	r3, r3
 8013e1c:	4619      	mov	r1, r3
 8013e1e:	f242 005e 	movw	r0, #8286	; 0x205e
 8013e22:	f002 ff3d 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_B_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 8013e26:	8afb      	ldrh	r3, [r7, #22]
 8013e28:	b2db      	uxtb	r3, r3
 8013e2a:	4619      	mov	r1, r3
 8013e2c:	f242 005f 	movw	r0, #8287	; 0x205f
 8013e30:	f002 ff36 	bl	8016ca0 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8013e34:	4b76      	ldr	r3, [pc, #472]	; (8014010 <ce303_power+0xcf4>)
 8013e36:	681b      	ldr	r3, [r3, #0]
 8013e38:	4618      	mov	r0, r3
 8013e3a:	f7f4 fdbd 	bl	80089b8 <osMutexRelease>
				status_registers.ce303_power_b_reg = temp;
 8013e3e:	4a75      	ldr	r2, [pc, #468]	; (8014014 <ce303_power+0xcf8>)
 8013e40:	89fb      	ldrh	r3, [r7, #14]
 8013e42:	f8a2 3058 	strh.w	r3, [r2, #88]	; 0x58
				status_registers.ce303_power_mil_b_reg =  temp_mil;
 8013e46:	4a73      	ldr	r2, [pc, #460]	; (8014014 <ce303_power+0xcf8>)
 8013e48:	8afb      	ldrh	r3, [r7, #22]
 8013e4a:	f8a2 305e 	strh.w	r3, [r2, #94]	; 0x5e
				power_b_state = 1;
 8013e4e:	2301      	movs	r3, #1
 8013e50:	753b      	strb	r3, [r7, #20]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8013e52:	f000 bc81 	b.w	8014758 <ce303_power+0x143c>
			}
			else if( meter_rx_buffer[i+3] == 0x2E)
 8013e56:	8a3b      	ldrh	r3, [r7, #16]
 8013e58:	3303      	adds	r3, #3
 8013e5a:	4a6c      	ldr	r2, [pc, #432]	; (801400c <ce303_power+0xcf0>)
 8013e5c:	5cd3      	ldrb	r3, [r2, r3]
 8013e5e:	2b2e      	cmp	r3, #46	; 0x2e
 8013e60:	f040 80da 	bne.w	8014018 <ce303_power+0xcfc>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+2])-0x30);
 8013e64:	8a3b      	ldrh	r3, [r7, #16]
 8013e66:	3301      	adds	r3, #1
 8013e68:	4a68      	ldr	r2, [pc, #416]	; (801400c <ce303_power+0xcf0>)
 8013e6a:	5cd3      	ldrb	r3, [r2, r3]
 8013e6c:	3b30      	subs	r3, #48	; 0x30
 8013e6e:	b29b      	uxth	r3, r3
 8013e70:	461a      	mov	r2, r3
 8013e72:	0092      	lsls	r2, r2, #2
 8013e74:	4413      	add	r3, r2
 8013e76:	005b      	lsls	r3, r3, #1
 8013e78:	b29a      	uxth	r2, r3
 8013e7a:	8a3b      	ldrh	r3, [r7, #16]
 8013e7c:	3302      	adds	r3, #2
 8013e7e:	4963      	ldr	r1, [pc, #396]	; (801400c <ce303_power+0xcf0>)
 8013e80:	5ccb      	ldrb	r3, [r1, r3]
 8013e82:	b29b      	uxth	r3, r3
 8013e84:	4413      	add	r3, r2
 8013e86:	b29b      	uxth	r3, r3
 8013e88:	3b30      	subs	r3, #48	; 0x30
 8013e8a:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+5] == 0x29 ) // если 1 разряд после запятой
 8013e8c:	8a3b      	ldrh	r3, [r7, #16]
 8013e8e:	3305      	adds	r3, #5
 8013e90:	4a5e      	ldr	r2, [pc, #376]	; (801400c <ce303_power+0xcf0>)
 8013e92:	5cd3      	ldrb	r3, [r2, r3]
 8013e94:	2b29      	cmp	r3, #41	; 0x29
 8013e96:	d110      	bne.n	8013eba <ce303_power+0xb9e>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+4])-0x30)*100;
 8013e98:	8a3b      	ldrh	r3, [r7, #16]
 8013e9a:	3304      	adds	r3, #4
 8013e9c:	4a5b      	ldr	r2, [pc, #364]	; (801400c <ce303_power+0xcf0>)
 8013e9e:	5cd3      	ldrb	r3, [r2, r3]
 8013ea0:	3b30      	subs	r3, #48	; 0x30
 8013ea2:	b29b      	uxth	r3, r3
 8013ea4:	461a      	mov	r2, r3
 8013ea6:	0092      	lsls	r2, r2, #2
 8013ea8:	4413      	add	r3, r2
 8013eaa:	461a      	mov	r2, r3
 8013eac:	0091      	lsls	r1, r2, #2
 8013eae:	461a      	mov	r2, r3
 8013eb0:	460b      	mov	r3, r1
 8013eb2:	4413      	add	r3, r2
 8013eb4:	009b      	lsls	r3, r3, #2
 8013eb6:	82fb      	strh	r3, [r7, #22]
 8013eb8:	e070      	b.n	8013f9c <ce303_power+0xc80>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 2 разряда после запятой
 8013eba:	8a3b      	ldrh	r3, [r7, #16]
 8013ebc:	3306      	adds	r3, #6
 8013ebe:	4a53      	ldr	r2, [pc, #332]	; (801400c <ce303_power+0xcf0>)
 8013ec0:	5cd3      	ldrb	r3, [r2, r3]
 8013ec2:	2b29      	cmp	r3, #41	; 0x29
 8013ec4:	d117      	bne.n	8013ef6 <ce303_power+0xbda>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30))*10;
 8013ec6:	8a3b      	ldrh	r3, [r7, #16]
 8013ec8:	3304      	adds	r3, #4
 8013eca:	4a50      	ldr	r2, [pc, #320]	; (801400c <ce303_power+0xcf0>)
 8013ecc:	5cd3      	ldrb	r3, [r2, r3]
 8013ece:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8013ed2:	4613      	mov	r3, r2
 8013ed4:	009b      	lsls	r3, r3, #2
 8013ed6:	4413      	add	r3, r2
 8013ed8:	005b      	lsls	r3, r3, #1
 8013eda:	4619      	mov	r1, r3
 8013edc:	8a3b      	ldrh	r3, [r7, #16]
 8013ede:	3305      	adds	r3, #5
 8013ee0:	4a4a      	ldr	r2, [pc, #296]	; (801400c <ce303_power+0xcf0>)
 8013ee2:	5cd3      	ldrb	r3, [r2, r3]
 8013ee4:	3b30      	subs	r3, #48	; 0x30
 8013ee6:	440b      	add	r3, r1
 8013ee8:	b29b      	uxth	r3, r3
 8013eea:	461a      	mov	r2, r3
 8013eec:	0092      	lsls	r2, r2, #2
 8013eee:	4413      	add	r3, r2
 8013ef0:	005b      	lsls	r3, r3, #1
 8013ef2:	82fb      	strh	r3, [r7, #22]
 8013ef4:	e052      	b.n	8013f9c <ce303_power+0xc80>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 3 разряда после запятой
 8013ef6:	8a3b      	ldrh	r3, [r7, #16]
 8013ef8:	3307      	adds	r3, #7
 8013efa:	4a44      	ldr	r2, [pc, #272]	; (801400c <ce303_power+0xcf0>)
 8013efc:	5cd3      	ldrb	r3, [r2, r3]
 8013efe:	2b29      	cmp	r3, #41	; 0x29
 8013f00:	d126      	bne.n	8013f50 <ce303_power+0xc34>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 8013f02:	8a3b      	ldrh	r3, [r7, #16]
 8013f04:	3304      	adds	r3, #4
 8013f06:	4a41      	ldr	r2, [pc, #260]	; (801400c <ce303_power+0xcf0>)
 8013f08:	5cd3      	ldrb	r3, [r2, r3]
 8013f0a:	3b30      	subs	r3, #48	; 0x30
 8013f0c:	b29b      	uxth	r3, r3
 8013f0e:	461a      	mov	r2, r3
 8013f10:	0092      	lsls	r2, r2, #2
 8013f12:	4413      	add	r3, r2
 8013f14:	461a      	mov	r2, r3
 8013f16:	0091      	lsls	r1, r2, #2
 8013f18:	461a      	mov	r2, r3
 8013f1a:	460b      	mov	r3, r1
 8013f1c:	4413      	add	r3, r2
 8013f1e:	009b      	lsls	r3, r3, #2
 8013f20:	b29a      	uxth	r2, r3
 8013f22:	8a3b      	ldrh	r3, [r7, #16]
 8013f24:	3305      	adds	r3, #5
 8013f26:	4939      	ldr	r1, [pc, #228]	; (801400c <ce303_power+0xcf0>)
 8013f28:	5ccb      	ldrb	r3, [r1, r3]
 8013f2a:	3b30      	subs	r3, #48	; 0x30
 8013f2c:	b29b      	uxth	r3, r3
 8013f2e:	4619      	mov	r1, r3
 8013f30:	0089      	lsls	r1, r1, #2
 8013f32:	440b      	add	r3, r1
 8013f34:	005b      	lsls	r3, r3, #1
 8013f36:	b29b      	uxth	r3, r3
 8013f38:	4413      	add	r3, r2
 8013f3a:	b29a      	uxth	r2, r3
 8013f3c:	8a3b      	ldrh	r3, [r7, #16]
 8013f3e:	3306      	adds	r3, #6
 8013f40:	4932      	ldr	r1, [pc, #200]	; (801400c <ce303_power+0xcf0>)
 8013f42:	5ccb      	ldrb	r3, [r1, r3]
 8013f44:	b29b      	uxth	r3, r3
 8013f46:	4413      	add	r3, r2
 8013f48:	b29b      	uxth	r3, r3
 8013f4a:	3b30      	subs	r3, #48	; 0x30
 8013f4c:	82fb      	strh	r3, [r7, #22]
 8013f4e:	e025      	b.n	8013f9c <ce303_power+0xc80>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 8013f50:	8a3b      	ldrh	r3, [r7, #16]
 8013f52:	3304      	adds	r3, #4
 8013f54:	4a2d      	ldr	r2, [pc, #180]	; (801400c <ce303_power+0xcf0>)
 8013f56:	5cd3      	ldrb	r3, [r2, r3]
 8013f58:	3b30      	subs	r3, #48	; 0x30
 8013f5a:	b29b      	uxth	r3, r3
 8013f5c:	461a      	mov	r2, r3
 8013f5e:	0092      	lsls	r2, r2, #2
 8013f60:	4413      	add	r3, r2
 8013f62:	461a      	mov	r2, r3
 8013f64:	0091      	lsls	r1, r2, #2
 8013f66:	461a      	mov	r2, r3
 8013f68:	460b      	mov	r3, r1
 8013f6a:	4413      	add	r3, r2
 8013f6c:	009b      	lsls	r3, r3, #2
 8013f6e:	b29a      	uxth	r2, r3
 8013f70:	8a3b      	ldrh	r3, [r7, #16]
 8013f72:	3305      	adds	r3, #5
 8013f74:	4925      	ldr	r1, [pc, #148]	; (801400c <ce303_power+0xcf0>)
 8013f76:	5ccb      	ldrb	r3, [r1, r3]
 8013f78:	3b30      	subs	r3, #48	; 0x30
 8013f7a:	b29b      	uxth	r3, r3
 8013f7c:	4619      	mov	r1, r3
 8013f7e:	0089      	lsls	r1, r1, #2
 8013f80:	440b      	add	r3, r1
 8013f82:	005b      	lsls	r3, r3, #1
 8013f84:	b29b      	uxth	r3, r3
 8013f86:	4413      	add	r3, r2
 8013f88:	b29a      	uxth	r2, r3
 8013f8a:	8a3b      	ldrh	r3, [r7, #16]
 8013f8c:	3306      	adds	r3, #6
 8013f8e:	491f      	ldr	r1, [pc, #124]	; (801400c <ce303_power+0xcf0>)
 8013f90:	5ccb      	ldrb	r3, [r1, r3]
 8013f92:	b29b      	uxth	r3, r3
 8013f94:	4413      	add	r3, r2
 8013f96:	b29b      	uxth	r3, r3
 8013f98:	3b30      	subs	r3, #48	; 0x30
 8013f9a:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8013f9c:	4b1c      	ldr	r3, [pc, #112]	; (8014010 <ce303_power+0xcf4>)
 8013f9e:	681b      	ldr	r3, [r3, #0]
 8013fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8013fa4:	4618      	mov	r0, r3
 8013fa6:	f7f4 fcb9 	bl	800891c <osMutexWait>
				fm25v02_write(2*CE_303_POWER_B_REG, ((uint8_t)(temp>>8)) );
 8013faa:	89fb      	ldrh	r3, [r7, #14]
 8013fac:	0a1b      	lsrs	r3, r3, #8
 8013fae:	b29b      	uxth	r3, r3
 8013fb0:	b2db      	uxtb	r3, r3
 8013fb2:	4619      	mov	r1, r3
 8013fb4:	f242 0058 	movw	r0, #8280	; 0x2058
 8013fb8:	f002 fe72 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_B_REG+1, ((uint8_t)(temp&0x00FF)) );
 8013fbc:	89fb      	ldrh	r3, [r7, #14]
 8013fbe:	b2db      	uxtb	r3, r3
 8013fc0:	4619      	mov	r1, r3
 8013fc2:	f242 0059 	movw	r0, #8281	; 0x2059
 8013fc6:	f002 fe6b 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_B_REG, ((uint8_t)(temp_mil>>8)) );
 8013fca:	8afb      	ldrh	r3, [r7, #22]
 8013fcc:	0a1b      	lsrs	r3, r3, #8
 8013fce:	b29b      	uxth	r3, r3
 8013fd0:	b2db      	uxtb	r3, r3
 8013fd2:	4619      	mov	r1, r3
 8013fd4:	f242 005e 	movw	r0, #8286	; 0x205e
 8013fd8:	f002 fe62 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_B_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 8013fdc:	8afb      	ldrh	r3, [r7, #22]
 8013fde:	b2db      	uxtb	r3, r3
 8013fe0:	4619      	mov	r1, r3
 8013fe2:	f242 005f 	movw	r0, #8287	; 0x205f
 8013fe6:	f002 fe5b 	bl	8016ca0 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8013fea:	4b09      	ldr	r3, [pc, #36]	; (8014010 <ce303_power+0xcf4>)
 8013fec:	681b      	ldr	r3, [r3, #0]
 8013fee:	4618      	mov	r0, r3
 8013ff0:	f7f4 fce2 	bl	80089b8 <osMutexRelease>
				status_registers.ce303_power_b_reg = temp;
 8013ff4:	4a07      	ldr	r2, [pc, #28]	; (8014014 <ce303_power+0xcf8>)
 8013ff6:	89fb      	ldrh	r3, [r7, #14]
 8013ff8:	f8a2 3058 	strh.w	r3, [r2, #88]	; 0x58
				status_registers.ce303_power_mil_b_reg = temp_mil;
 8013ffc:	4a05      	ldr	r2, [pc, #20]	; (8014014 <ce303_power+0xcf8>)
 8013ffe:	8afb      	ldrh	r3, [r7, #22]
 8014000:	f8a2 305e 	strh.w	r3, [r2, #94]	; 0x5e
				power_b_state = 1;
 8014004:	2301      	movs	r3, #1
 8014006:	753b      	strb	r3, [r7, #20]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8014008:	e3a6      	b.n	8014758 <ce303_power+0x143c>
 801400a:	bf00      	nop
 801400c:	2000994c 	.word	0x2000994c
 8014010:	20009af8 	.word	0x20009af8
 8014014:	2000a174 	.word	0x2000a174
			}

			else if( meter_rx_buffer[i+4] == 0x2E)
 8014018:	8a3b      	ldrh	r3, [r7, #16]
 801401a:	3304      	adds	r3, #4
 801401c:	4a9f      	ldr	r2, [pc, #636]	; (801429c <ce303_power+0xf80>)
 801401e:	5cd3      	ldrb	r3, [r2, r3]
 8014020:	2b2e      	cmp	r3, #46	; 0x2e
 8014022:	f040 8399 	bne.w	8014758 <ce303_power+0x143c>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+3])-0x30);
 8014026:	8a3b      	ldrh	r3, [r7, #16]
 8014028:	3301      	adds	r3, #1
 801402a:	4a9c      	ldr	r2, [pc, #624]	; (801429c <ce303_power+0xf80>)
 801402c:	5cd3      	ldrb	r3, [r2, r3]
 801402e:	3b30      	subs	r3, #48	; 0x30
 8014030:	b29b      	uxth	r3, r3
 8014032:	461a      	mov	r2, r3
 8014034:	0092      	lsls	r2, r2, #2
 8014036:	4413      	add	r3, r2
 8014038:	461a      	mov	r2, r3
 801403a:	0091      	lsls	r1, r2, #2
 801403c:	461a      	mov	r2, r3
 801403e:	460b      	mov	r3, r1
 8014040:	4413      	add	r3, r2
 8014042:	009b      	lsls	r3, r3, #2
 8014044:	b29a      	uxth	r2, r3
 8014046:	8a3b      	ldrh	r3, [r7, #16]
 8014048:	3302      	adds	r3, #2
 801404a:	4994      	ldr	r1, [pc, #592]	; (801429c <ce303_power+0xf80>)
 801404c:	5ccb      	ldrb	r3, [r1, r3]
 801404e:	3b30      	subs	r3, #48	; 0x30
 8014050:	b29b      	uxth	r3, r3
 8014052:	4619      	mov	r1, r3
 8014054:	0089      	lsls	r1, r1, #2
 8014056:	440b      	add	r3, r1
 8014058:	005b      	lsls	r3, r3, #1
 801405a:	b29b      	uxth	r3, r3
 801405c:	4413      	add	r3, r2
 801405e:	b29a      	uxth	r2, r3
 8014060:	8a3b      	ldrh	r3, [r7, #16]
 8014062:	3303      	adds	r3, #3
 8014064:	498d      	ldr	r1, [pc, #564]	; (801429c <ce303_power+0xf80>)
 8014066:	5ccb      	ldrb	r3, [r1, r3]
 8014068:	b29b      	uxth	r3, r3
 801406a:	4413      	add	r3, r2
 801406c:	b29b      	uxth	r3, r3
 801406e:	3b30      	subs	r3, #48	; 0x30
 8014070:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+6] == 0x29 ) // если 1 разряд после запятой
 8014072:	8a3b      	ldrh	r3, [r7, #16]
 8014074:	3306      	adds	r3, #6
 8014076:	4a89      	ldr	r2, [pc, #548]	; (801429c <ce303_power+0xf80>)
 8014078:	5cd3      	ldrb	r3, [r2, r3]
 801407a:	2b29      	cmp	r3, #41	; 0x29
 801407c:	d110      	bne.n	80140a0 <ce303_power+0xd84>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+5])-0x30)*100;
 801407e:	8a3b      	ldrh	r3, [r7, #16]
 8014080:	3305      	adds	r3, #5
 8014082:	4a86      	ldr	r2, [pc, #536]	; (801429c <ce303_power+0xf80>)
 8014084:	5cd3      	ldrb	r3, [r2, r3]
 8014086:	3b30      	subs	r3, #48	; 0x30
 8014088:	b29b      	uxth	r3, r3
 801408a:	461a      	mov	r2, r3
 801408c:	0092      	lsls	r2, r2, #2
 801408e:	4413      	add	r3, r2
 8014090:	461a      	mov	r2, r3
 8014092:	0091      	lsls	r1, r2, #2
 8014094:	461a      	mov	r2, r3
 8014096:	460b      	mov	r3, r1
 8014098:	4413      	add	r3, r2
 801409a:	009b      	lsls	r3, r3, #2
 801409c:	82fb      	strh	r3, [r7, #22]
 801409e:	e070      	b.n	8014182 <ce303_power+0xe66>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 2 разряда после запятой
 80140a0:	8a3b      	ldrh	r3, [r7, #16]
 80140a2:	3307      	adds	r3, #7
 80140a4:	4a7d      	ldr	r2, [pc, #500]	; (801429c <ce303_power+0xf80>)
 80140a6:	5cd3      	ldrb	r3, [r2, r3]
 80140a8:	2b29      	cmp	r3, #41	; 0x29
 80140aa:	d117      	bne.n	80140dc <ce303_power+0xdc0>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30))*10;
 80140ac:	8a3b      	ldrh	r3, [r7, #16]
 80140ae:	3305      	adds	r3, #5
 80140b0:	4a7a      	ldr	r2, [pc, #488]	; (801429c <ce303_power+0xf80>)
 80140b2:	5cd3      	ldrb	r3, [r2, r3]
 80140b4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80140b8:	4613      	mov	r3, r2
 80140ba:	009b      	lsls	r3, r3, #2
 80140bc:	4413      	add	r3, r2
 80140be:	005b      	lsls	r3, r3, #1
 80140c0:	4619      	mov	r1, r3
 80140c2:	8a3b      	ldrh	r3, [r7, #16]
 80140c4:	3306      	adds	r3, #6
 80140c6:	4a75      	ldr	r2, [pc, #468]	; (801429c <ce303_power+0xf80>)
 80140c8:	5cd3      	ldrb	r3, [r2, r3]
 80140ca:	3b30      	subs	r3, #48	; 0x30
 80140cc:	440b      	add	r3, r1
 80140ce:	b29b      	uxth	r3, r3
 80140d0:	461a      	mov	r2, r3
 80140d2:	0092      	lsls	r2, r2, #2
 80140d4:	4413      	add	r3, r2
 80140d6:	005b      	lsls	r3, r3, #1
 80140d8:	82fb      	strh	r3, [r7, #22]
 80140da:	e052      	b.n	8014182 <ce303_power+0xe66>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 3 разряда после запятой
 80140dc:	8a3b      	ldrh	r3, [r7, #16]
 80140de:	3308      	adds	r3, #8
 80140e0:	4a6e      	ldr	r2, [pc, #440]	; (801429c <ce303_power+0xf80>)
 80140e2:	5cd3      	ldrb	r3, [r2, r3]
 80140e4:	2b29      	cmp	r3, #41	; 0x29
 80140e6:	d126      	bne.n	8014136 <ce303_power+0xe1a>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 80140e8:	8a3b      	ldrh	r3, [r7, #16]
 80140ea:	3305      	adds	r3, #5
 80140ec:	4a6b      	ldr	r2, [pc, #428]	; (801429c <ce303_power+0xf80>)
 80140ee:	5cd3      	ldrb	r3, [r2, r3]
 80140f0:	3b30      	subs	r3, #48	; 0x30
 80140f2:	b29b      	uxth	r3, r3
 80140f4:	461a      	mov	r2, r3
 80140f6:	0092      	lsls	r2, r2, #2
 80140f8:	4413      	add	r3, r2
 80140fa:	461a      	mov	r2, r3
 80140fc:	0091      	lsls	r1, r2, #2
 80140fe:	461a      	mov	r2, r3
 8014100:	460b      	mov	r3, r1
 8014102:	4413      	add	r3, r2
 8014104:	009b      	lsls	r3, r3, #2
 8014106:	b29a      	uxth	r2, r3
 8014108:	8a3b      	ldrh	r3, [r7, #16]
 801410a:	3306      	adds	r3, #6
 801410c:	4963      	ldr	r1, [pc, #396]	; (801429c <ce303_power+0xf80>)
 801410e:	5ccb      	ldrb	r3, [r1, r3]
 8014110:	3b30      	subs	r3, #48	; 0x30
 8014112:	b29b      	uxth	r3, r3
 8014114:	4619      	mov	r1, r3
 8014116:	0089      	lsls	r1, r1, #2
 8014118:	440b      	add	r3, r1
 801411a:	005b      	lsls	r3, r3, #1
 801411c:	b29b      	uxth	r3, r3
 801411e:	4413      	add	r3, r2
 8014120:	b29a      	uxth	r2, r3
 8014122:	8a3b      	ldrh	r3, [r7, #16]
 8014124:	3307      	adds	r3, #7
 8014126:	495d      	ldr	r1, [pc, #372]	; (801429c <ce303_power+0xf80>)
 8014128:	5ccb      	ldrb	r3, [r1, r3]
 801412a:	b29b      	uxth	r3, r3
 801412c:	4413      	add	r3, r2
 801412e:	b29b      	uxth	r3, r3
 8014130:	3b30      	subs	r3, #48	; 0x30
 8014132:	82fb      	strh	r3, [r7, #22]
 8014134:	e025      	b.n	8014182 <ce303_power+0xe66>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 8014136:	8a3b      	ldrh	r3, [r7, #16]
 8014138:	3305      	adds	r3, #5
 801413a:	4a58      	ldr	r2, [pc, #352]	; (801429c <ce303_power+0xf80>)
 801413c:	5cd3      	ldrb	r3, [r2, r3]
 801413e:	3b30      	subs	r3, #48	; 0x30
 8014140:	b29b      	uxth	r3, r3
 8014142:	461a      	mov	r2, r3
 8014144:	0092      	lsls	r2, r2, #2
 8014146:	4413      	add	r3, r2
 8014148:	461a      	mov	r2, r3
 801414a:	0091      	lsls	r1, r2, #2
 801414c:	461a      	mov	r2, r3
 801414e:	460b      	mov	r3, r1
 8014150:	4413      	add	r3, r2
 8014152:	009b      	lsls	r3, r3, #2
 8014154:	b29a      	uxth	r2, r3
 8014156:	8a3b      	ldrh	r3, [r7, #16]
 8014158:	3306      	adds	r3, #6
 801415a:	4950      	ldr	r1, [pc, #320]	; (801429c <ce303_power+0xf80>)
 801415c:	5ccb      	ldrb	r3, [r1, r3]
 801415e:	3b30      	subs	r3, #48	; 0x30
 8014160:	b29b      	uxth	r3, r3
 8014162:	4619      	mov	r1, r3
 8014164:	0089      	lsls	r1, r1, #2
 8014166:	440b      	add	r3, r1
 8014168:	005b      	lsls	r3, r3, #1
 801416a:	b29b      	uxth	r3, r3
 801416c:	4413      	add	r3, r2
 801416e:	b29a      	uxth	r2, r3
 8014170:	8a3b      	ldrh	r3, [r7, #16]
 8014172:	3307      	adds	r3, #7
 8014174:	4949      	ldr	r1, [pc, #292]	; (801429c <ce303_power+0xf80>)
 8014176:	5ccb      	ldrb	r3, [r1, r3]
 8014178:	b29b      	uxth	r3, r3
 801417a:	4413      	add	r3, r2
 801417c:	b29b      	uxth	r3, r3
 801417e:	3b30      	subs	r3, #48	; 0x30
 8014180:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8014182:	4b47      	ldr	r3, [pc, #284]	; (80142a0 <ce303_power+0xf84>)
 8014184:	681b      	ldr	r3, [r3, #0]
 8014186:	f04f 31ff 	mov.w	r1, #4294967295
 801418a:	4618      	mov	r0, r3
 801418c:	f7f4 fbc6 	bl	800891c <osMutexWait>
				fm25v02_write(2*CE_303_POWER_B_REG, ((uint8_t)(temp>>8)) );
 8014190:	89fb      	ldrh	r3, [r7, #14]
 8014192:	0a1b      	lsrs	r3, r3, #8
 8014194:	b29b      	uxth	r3, r3
 8014196:	b2db      	uxtb	r3, r3
 8014198:	4619      	mov	r1, r3
 801419a:	f242 0058 	movw	r0, #8280	; 0x2058
 801419e:	f002 fd7f 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_B_REG+1, ((uint8_t)(temp&0x00FF)) );
 80141a2:	89fb      	ldrh	r3, [r7, #14]
 80141a4:	b2db      	uxtb	r3, r3
 80141a6:	4619      	mov	r1, r3
 80141a8:	f242 0059 	movw	r0, #8281	; 0x2059
 80141ac:	f002 fd78 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_B_REG, ((uint8_t)(temp_mil>>8)) );
 80141b0:	8afb      	ldrh	r3, [r7, #22]
 80141b2:	0a1b      	lsrs	r3, r3, #8
 80141b4:	b29b      	uxth	r3, r3
 80141b6:	b2db      	uxtb	r3, r3
 80141b8:	4619      	mov	r1, r3
 80141ba:	f242 005e 	movw	r0, #8286	; 0x205e
 80141be:	f002 fd6f 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_B_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 80141c2:	8afb      	ldrh	r3, [r7, #22]
 80141c4:	b2db      	uxtb	r3, r3
 80141c6:	4619      	mov	r1, r3
 80141c8:	f242 005f 	movw	r0, #8287	; 0x205f
 80141cc:	f002 fd68 	bl	8016ca0 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 80141d0:	4b33      	ldr	r3, [pc, #204]	; (80142a0 <ce303_power+0xf84>)
 80141d2:	681b      	ldr	r3, [r3, #0]
 80141d4:	4618      	mov	r0, r3
 80141d6:	f7f4 fbef 	bl	80089b8 <osMutexRelease>
				status_registers.ce303_power_b_reg = temp;
 80141da:	4a32      	ldr	r2, [pc, #200]	; (80142a4 <ce303_power+0xf88>)
 80141dc:	89fb      	ldrh	r3, [r7, #14]
 80141de:	f8a2 3058 	strh.w	r3, [r2, #88]	; 0x58
				status_registers.ce303_power_mil_b_reg = temp_mil;
 80141e2:	4a30      	ldr	r2, [pc, #192]	; (80142a4 <ce303_power+0xf88>)
 80141e4:	8afb      	ldrh	r3, [r7, #22]
 80141e6:	f8a2 305e 	strh.w	r3, [r2, #94]	; 0x5e
				power_b_state = 1;
 80141ea:	2301      	movs	r3, #1
 80141ec:	753b      	strb	r3, [r7, #20]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 80141ee:	e2b3      	b.n	8014758 <ce303_power+0x143c>
			}
		}

		else if( (meter_rx_buffer[i] == 0x28) && (power_a_state==1) && (power_b_state==1) && (power_c_state==0) )
 80141f0:	8a3b      	ldrh	r3, [r7, #16]
 80141f2:	4a2a      	ldr	r2, [pc, #168]	; (801429c <ce303_power+0xf80>)
 80141f4:	5cd3      	ldrb	r3, [r2, r3]
 80141f6:	2b28      	cmp	r3, #40	; 0x28
 80141f8:	f040 82af 	bne.w	801475a <ce303_power+0x143e>
 80141fc:	7d7b      	ldrb	r3, [r7, #21]
 80141fe:	2b01      	cmp	r3, #1
 8014200:	f040 82ab 	bne.w	801475a <ce303_power+0x143e>
 8014204:	7d3b      	ldrb	r3, [r7, #20]
 8014206:	2b01      	cmp	r3, #1
 8014208:	f040 82a7 	bne.w	801475a <ce303_power+0x143e>
 801420c:	7cfb      	ldrb	r3, [r7, #19]
 801420e:	2b00      	cmp	r3, #0
 8014210:	f040 82a3 	bne.w	801475a <ce303_power+0x143e>
		{
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8014214:	8a3b      	ldrh	r3, [r7, #16]
 8014216:	3302      	adds	r3, #2
 8014218:	4a20      	ldr	r2, [pc, #128]	; (801429c <ce303_power+0xf80>)
 801421a:	5cd3      	ldrb	r3, [r2, r3]
 801421c:	2b2e      	cmp	r3, #46	; 0x2e
 801421e:	f040 80cd 	bne.w	80143bc <ce303_power+0x10a0>
			{
				temp = (uint16_t)(meter_rx_buffer[i+1]-0x30);
 8014222:	8a3b      	ldrh	r3, [r7, #16]
 8014224:	3301      	adds	r3, #1
 8014226:	4a1d      	ldr	r2, [pc, #116]	; (801429c <ce303_power+0xf80>)
 8014228:	5cd3      	ldrb	r3, [r2, r3]
 801422a:	b29b      	uxth	r3, r3
 801422c:	3b30      	subs	r3, #48	; 0x30
 801422e:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+4] == 0x29 ) // если 1 разряд после запятой
 8014230:	8a3b      	ldrh	r3, [r7, #16]
 8014232:	3304      	adds	r3, #4
 8014234:	4a19      	ldr	r2, [pc, #100]	; (801429c <ce303_power+0xf80>)
 8014236:	5cd3      	ldrb	r3, [r2, r3]
 8014238:	2b29      	cmp	r3, #41	; 0x29
 801423a:	d110      	bne.n	801425e <ce303_power+0xf42>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+3])-0x30)*100;
 801423c:	8a3b      	ldrh	r3, [r7, #16]
 801423e:	3303      	adds	r3, #3
 8014240:	4a16      	ldr	r2, [pc, #88]	; (801429c <ce303_power+0xf80>)
 8014242:	5cd3      	ldrb	r3, [r2, r3]
 8014244:	3b30      	subs	r3, #48	; 0x30
 8014246:	b29b      	uxth	r3, r3
 8014248:	461a      	mov	r2, r3
 801424a:	0092      	lsls	r2, r2, #2
 801424c:	4413      	add	r3, r2
 801424e:	461a      	mov	r2, r3
 8014250:	0091      	lsls	r1, r2, #2
 8014252:	461a      	mov	r2, r3
 8014254:	460b      	mov	r3, r1
 8014256:	4413      	add	r3, r2
 8014258:	009b      	lsls	r3, r3, #2
 801425a:	82fb      	strh	r3, [r7, #22]
 801425c:	e077      	b.n	801434e <ce303_power+0x1032>
				}
				else if( meter_rx_buffer[i+5] == 0x29 ) // если 2 разряда после запятой
 801425e:	8a3b      	ldrh	r3, [r7, #16]
 8014260:	3305      	adds	r3, #5
 8014262:	4a0e      	ldr	r2, [pc, #56]	; (801429c <ce303_power+0xf80>)
 8014264:	5cd3      	ldrb	r3, [r2, r3]
 8014266:	2b29      	cmp	r3, #41	; 0x29
 8014268:	d11e      	bne.n	80142a8 <ce303_power+0xf8c>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30))*10;
 801426a:	8a3b      	ldrh	r3, [r7, #16]
 801426c:	3303      	adds	r3, #3
 801426e:	4a0b      	ldr	r2, [pc, #44]	; (801429c <ce303_power+0xf80>)
 8014270:	5cd3      	ldrb	r3, [r2, r3]
 8014272:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8014276:	4613      	mov	r3, r2
 8014278:	009b      	lsls	r3, r3, #2
 801427a:	4413      	add	r3, r2
 801427c:	005b      	lsls	r3, r3, #1
 801427e:	4619      	mov	r1, r3
 8014280:	8a3b      	ldrh	r3, [r7, #16]
 8014282:	3304      	adds	r3, #4
 8014284:	4a05      	ldr	r2, [pc, #20]	; (801429c <ce303_power+0xf80>)
 8014286:	5cd3      	ldrb	r3, [r2, r3]
 8014288:	3b30      	subs	r3, #48	; 0x30
 801428a:	440b      	add	r3, r1
 801428c:	b29b      	uxth	r3, r3
 801428e:	461a      	mov	r2, r3
 8014290:	0092      	lsls	r2, r2, #2
 8014292:	4413      	add	r3, r2
 8014294:	005b      	lsls	r3, r3, #1
 8014296:	82fb      	strh	r3, [r7, #22]
 8014298:	e059      	b.n	801434e <ce303_power+0x1032>
 801429a:	bf00      	nop
 801429c:	2000994c 	.word	0x2000994c
 80142a0:	20009af8 	.word	0x20009af8
 80142a4:	2000a174 	.word	0x2000a174
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 3 разряда после запятой
 80142a8:	8a3b      	ldrh	r3, [r7, #16]
 80142aa:	3306      	adds	r3, #6
 80142ac:	4ab0      	ldr	r2, [pc, #704]	; (8014570 <ce303_power+0x1254>)
 80142ae:	5cd3      	ldrb	r3, [r2, r3]
 80142b0:	2b29      	cmp	r3, #41	; 0x29
 80142b2:	d126      	bne.n	8014302 <ce303_power+0xfe6>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 80142b4:	8a3b      	ldrh	r3, [r7, #16]
 80142b6:	3303      	adds	r3, #3
 80142b8:	4aad      	ldr	r2, [pc, #692]	; (8014570 <ce303_power+0x1254>)
 80142ba:	5cd3      	ldrb	r3, [r2, r3]
 80142bc:	3b30      	subs	r3, #48	; 0x30
 80142be:	b29b      	uxth	r3, r3
 80142c0:	461a      	mov	r2, r3
 80142c2:	0092      	lsls	r2, r2, #2
 80142c4:	4413      	add	r3, r2
 80142c6:	461a      	mov	r2, r3
 80142c8:	0091      	lsls	r1, r2, #2
 80142ca:	461a      	mov	r2, r3
 80142cc:	460b      	mov	r3, r1
 80142ce:	4413      	add	r3, r2
 80142d0:	009b      	lsls	r3, r3, #2
 80142d2:	b29a      	uxth	r2, r3
 80142d4:	8a3b      	ldrh	r3, [r7, #16]
 80142d6:	3304      	adds	r3, #4
 80142d8:	49a5      	ldr	r1, [pc, #660]	; (8014570 <ce303_power+0x1254>)
 80142da:	5ccb      	ldrb	r3, [r1, r3]
 80142dc:	3b30      	subs	r3, #48	; 0x30
 80142de:	b29b      	uxth	r3, r3
 80142e0:	4619      	mov	r1, r3
 80142e2:	0089      	lsls	r1, r1, #2
 80142e4:	440b      	add	r3, r1
 80142e6:	005b      	lsls	r3, r3, #1
 80142e8:	b29b      	uxth	r3, r3
 80142ea:	4413      	add	r3, r2
 80142ec:	b29a      	uxth	r2, r3
 80142ee:	8a3b      	ldrh	r3, [r7, #16]
 80142f0:	3305      	adds	r3, #5
 80142f2:	499f      	ldr	r1, [pc, #636]	; (8014570 <ce303_power+0x1254>)
 80142f4:	5ccb      	ldrb	r3, [r1, r3]
 80142f6:	b29b      	uxth	r3, r3
 80142f8:	4413      	add	r3, r2
 80142fa:	b29b      	uxth	r3, r3
 80142fc:	3b30      	subs	r3, #48	; 0x30
 80142fe:	82fb      	strh	r3, [r7, #22]
 8014300:	e025      	b.n	801434e <ce303_power+0x1032>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 8014302:	8a3b      	ldrh	r3, [r7, #16]
 8014304:	3303      	adds	r3, #3
 8014306:	4a9a      	ldr	r2, [pc, #616]	; (8014570 <ce303_power+0x1254>)
 8014308:	5cd3      	ldrb	r3, [r2, r3]
 801430a:	3b30      	subs	r3, #48	; 0x30
 801430c:	b29b      	uxth	r3, r3
 801430e:	461a      	mov	r2, r3
 8014310:	0092      	lsls	r2, r2, #2
 8014312:	4413      	add	r3, r2
 8014314:	461a      	mov	r2, r3
 8014316:	0091      	lsls	r1, r2, #2
 8014318:	461a      	mov	r2, r3
 801431a:	460b      	mov	r3, r1
 801431c:	4413      	add	r3, r2
 801431e:	009b      	lsls	r3, r3, #2
 8014320:	b29a      	uxth	r2, r3
 8014322:	8a3b      	ldrh	r3, [r7, #16]
 8014324:	3304      	adds	r3, #4
 8014326:	4992      	ldr	r1, [pc, #584]	; (8014570 <ce303_power+0x1254>)
 8014328:	5ccb      	ldrb	r3, [r1, r3]
 801432a:	3b30      	subs	r3, #48	; 0x30
 801432c:	b29b      	uxth	r3, r3
 801432e:	4619      	mov	r1, r3
 8014330:	0089      	lsls	r1, r1, #2
 8014332:	440b      	add	r3, r1
 8014334:	005b      	lsls	r3, r3, #1
 8014336:	b29b      	uxth	r3, r3
 8014338:	4413      	add	r3, r2
 801433a:	b29a      	uxth	r2, r3
 801433c:	8a3b      	ldrh	r3, [r7, #16]
 801433e:	3305      	adds	r3, #5
 8014340:	498b      	ldr	r1, [pc, #556]	; (8014570 <ce303_power+0x1254>)
 8014342:	5ccb      	ldrb	r3, [r1, r3]
 8014344:	b29b      	uxth	r3, r3
 8014346:	4413      	add	r3, r2
 8014348:	b29b      	uxth	r3, r3
 801434a:	3b30      	subs	r3, #48	; 0x30
 801434c:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801434e:	4b89      	ldr	r3, [pc, #548]	; (8014574 <ce303_power+0x1258>)
 8014350:	681b      	ldr	r3, [r3, #0]
 8014352:	f04f 31ff 	mov.w	r1, #4294967295
 8014356:	4618      	mov	r0, r3
 8014358:	f7f4 fae0 	bl	800891c <osMutexWait>
				fm25v02_write(2*CE_303_POWER_C_REG, ((uint8_t)(temp>>8)) );
 801435c:	89fb      	ldrh	r3, [r7, #14]
 801435e:	0a1b      	lsrs	r3, r3, #8
 8014360:	b29b      	uxth	r3, r3
 8014362:	b2db      	uxtb	r3, r3
 8014364:	4619      	mov	r1, r3
 8014366:	f242 005a 	movw	r0, #8282	; 0x205a
 801436a:	f002 fc99 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_C_REG+1, ((uint8_t)(temp&0x00FF)) );
 801436e:	89fb      	ldrh	r3, [r7, #14]
 8014370:	b2db      	uxtb	r3, r3
 8014372:	4619      	mov	r1, r3
 8014374:	f242 005b 	movw	r0, #8283	; 0x205b
 8014378:	f002 fc92 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_C_REG, ((uint8_t)(temp_mil>>8)) );
 801437c:	8afb      	ldrh	r3, [r7, #22]
 801437e:	0a1b      	lsrs	r3, r3, #8
 8014380:	b29b      	uxth	r3, r3
 8014382:	b2db      	uxtb	r3, r3
 8014384:	4619      	mov	r1, r3
 8014386:	f242 0060 	movw	r0, #8288	; 0x2060
 801438a:	f002 fc89 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_C_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 801438e:	8afb      	ldrh	r3, [r7, #22]
 8014390:	b2db      	uxtb	r3, r3
 8014392:	4619      	mov	r1, r3
 8014394:	f242 0061 	movw	r0, #8289	; 0x2061
 8014398:	f002 fc82 	bl	8016ca0 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 801439c:	4b75      	ldr	r3, [pc, #468]	; (8014574 <ce303_power+0x1258>)
 801439e:	681b      	ldr	r3, [r3, #0]
 80143a0:	4618      	mov	r0, r3
 80143a2:	f7f4 fb09 	bl	80089b8 <osMutexRelease>
				status_registers.ce303_power_c_reg = temp;
 80143a6:	4a74      	ldr	r2, [pc, #464]	; (8014578 <ce303_power+0x125c>)
 80143a8:	89fb      	ldrh	r3, [r7, #14]
 80143aa:	f8a2 305a 	strh.w	r3, [r2, #90]	; 0x5a
				status_registers.ce303_power_mil_c_reg = temp_mil;
 80143ae:	4a72      	ldr	r2, [pc, #456]	; (8014578 <ce303_power+0x125c>)
 80143b0:	8afb      	ldrh	r3, [r7, #22]
 80143b2:	f8a2 3060 	strh.w	r3, [r2, #96]	; 0x60
				power_c_state = 1;
 80143b6:	2301      	movs	r3, #1
 80143b8:	74fb      	strb	r3, [r7, #19]
 80143ba:	e1ce      	b.n	801475a <ce303_power+0x143e>
			}
			else if( meter_rx_buffer[i+3] == 0x2E)
 80143bc:	8a3b      	ldrh	r3, [r7, #16]
 80143be:	3303      	adds	r3, #3
 80143c0:	4a6b      	ldr	r2, [pc, #428]	; (8014570 <ce303_power+0x1254>)
 80143c2:	5cd3      	ldrb	r3, [r2, r3]
 80143c4:	2b2e      	cmp	r3, #46	; 0x2e
 80143c6:	f040 80d9 	bne.w	801457c <ce303_power+0x1260>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+2])-0x30);
 80143ca:	8a3b      	ldrh	r3, [r7, #16]
 80143cc:	3301      	adds	r3, #1
 80143ce:	4a68      	ldr	r2, [pc, #416]	; (8014570 <ce303_power+0x1254>)
 80143d0:	5cd3      	ldrb	r3, [r2, r3]
 80143d2:	3b30      	subs	r3, #48	; 0x30
 80143d4:	b29b      	uxth	r3, r3
 80143d6:	461a      	mov	r2, r3
 80143d8:	0092      	lsls	r2, r2, #2
 80143da:	4413      	add	r3, r2
 80143dc:	005b      	lsls	r3, r3, #1
 80143de:	b29a      	uxth	r2, r3
 80143e0:	8a3b      	ldrh	r3, [r7, #16]
 80143e2:	3302      	adds	r3, #2
 80143e4:	4962      	ldr	r1, [pc, #392]	; (8014570 <ce303_power+0x1254>)
 80143e6:	5ccb      	ldrb	r3, [r1, r3]
 80143e8:	b29b      	uxth	r3, r3
 80143ea:	4413      	add	r3, r2
 80143ec:	b29b      	uxth	r3, r3
 80143ee:	3b30      	subs	r3, #48	; 0x30
 80143f0:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+5] == 0x29 ) // если 1 разряд после запятой
 80143f2:	8a3b      	ldrh	r3, [r7, #16]
 80143f4:	3305      	adds	r3, #5
 80143f6:	4a5e      	ldr	r2, [pc, #376]	; (8014570 <ce303_power+0x1254>)
 80143f8:	5cd3      	ldrb	r3, [r2, r3]
 80143fa:	2b29      	cmp	r3, #41	; 0x29
 80143fc:	d110      	bne.n	8014420 <ce303_power+0x1104>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+4])-0x30)*100;
 80143fe:	8a3b      	ldrh	r3, [r7, #16]
 8014400:	3304      	adds	r3, #4
 8014402:	4a5b      	ldr	r2, [pc, #364]	; (8014570 <ce303_power+0x1254>)
 8014404:	5cd3      	ldrb	r3, [r2, r3]
 8014406:	3b30      	subs	r3, #48	; 0x30
 8014408:	b29b      	uxth	r3, r3
 801440a:	461a      	mov	r2, r3
 801440c:	0092      	lsls	r2, r2, #2
 801440e:	4413      	add	r3, r2
 8014410:	461a      	mov	r2, r3
 8014412:	0091      	lsls	r1, r2, #2
 8014414:	461a      	mov	r2, r3
 8014416:	460b      	mov	r3, r1
 8014418:	4413      	add	r3, r2
 801441a:	009b      	lsls	r3, r3, #2
 801441c:	82fb      	strh	r3, [r7, #22]
 801441e:	e070      	b.n	8014502 <ce303_power+0x11e6>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 2 разряда после запятой
 8014420:	8a3b      	ldrh	r3, [r7, #16]
 8014422:	3306      	adds	r3, #6
 8014424:	4a52      	ldr	r2, [pc, #328]	; (8014570 <ce303_power+0x1254>)
 8014426:	5cd3      	ldrb	r3, [r2, r3]
 8014428:	2b29      	cmp	r3, #41	; 0x29
 801442a:	d117      	bne.n	801445c <ce303_power+0x1140>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30))*10;
 801442c:	8a3b      	ldrh	r3, [r7, #16]
 801442e:	3304      	adds	r3, #4
 8014430:	4a4f      	ldr	r2, [pc, #316]	; (8014570 <ce303_power+0x1254>)
 8014432:	5cd3      	ldrb	r3, [r2, r3]
 8014434:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8014438:	4613      	mov	r3, r2
 801443a:	009b      	lsls	r3, r3, #2
 801443c:	4413      	add	r3, r2
 801443e:	005b      	lsls	r3, r3, #1
 8014440:	4619      	mov	r1, r3
 8014442:	8a3b      	ldrh	r3, [r7, #16]
 8014444:	3305      	adds	r3, #5
 8014446:	4a4a      	ldr	r2, [pc, #296]	; (8014570 <ce303_power+0x1254>)
 8014448:	5cd3      	ldrb	r3, [r2, r3]
 801444a:	3b30      	subs	r3, #48	; 0x30
 801444c:	440b      	add	r3, r1
 801444e:	b29b      	uxth	r3, r3
 8014450:	461a      	mov	r2, r3
 8014452:	0092      	lsls	r2, r2, #2
 8014454:	4413      	add	r3, r2
 8014456:	005b      	lsls	r3, r3, #1
 8014458:	82fb      	strh	r3, [r7, #22]
 801445a:	e052      	b.n	8014502 <ce303_power+0x11e6>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 3 разряда после запятой
 801445c:	8a3b      	ldrh	r3, [r7, #16]
 801445e:	3307      	adds	r3, #7
 8014460:	4a43      	ldr	r2, [pc, #268]	; (8014570 <ce303_power+0x1254>)
 8014462:	5cd3      	ldrb	r3, [r2, r3]
 8014464:	2b29      	cmp	r3, #41	; 0x29
 8014466:	d126      	bne.n	80144b6 <ce303_power+0x119a>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 8014468:	8a3b      	ldrh	r3, [r7, #16]
 801446a:	3304      	adds	r3, #4
 801446c:	4a40      	ldr	r2, [pc, #256]	; (8014570 <ce303_power+0x1254>)
 801446e:	5cd3      	ldrb	r3, [r2, r3]
 8014470:	3b30      	subs	r3, #48	; 0x30
 8014472:	b29b      	uxth	r3, r3
 8014474:	461a      	mov	r2, r3
 8014476:	0092      	lsls	r2, r2, #2
 8014478:	4413      	add	r3, r2
 801447a:	461a      	mov	r2, r3
 801447c:	0091      	lsls	r1, r2, #2
 801447e:	461a      	mov	r2, r3
 8014480:	460b      	mov	r3, r1
 8014482:	4413      	add	r3, r2
 8014484:	009b      	lsls	r3, r3, #2
 8014486:	b29a      	uxth	r2, r3
 8014488:	8a3b      	ldrh	r3, [r7, #16]
 801448a:	3305      	adds	r3, #5
 801448c:	4938      	ldr	r1, [pc, #224]	; (8014570 <ce303_power+0x1254>)
 801448e:	5ccb      	ldrb	r3, [r1, r3]
 8014490:	3b30      	subs	r3, #48	; 0x30
 8014492:	b29b      	uxth	r3, r3
 8014494:	4619      	mov	r1, r3
 8014496:	0089      	lsls	r1, r1, #2
 8014498:	440b      	add	r3, r1
 801449a:	005b      	lsls	r3, r3, #1
 801449c:	b29b      	uxth	r3, r3
 801449e:	4413      	add	r3, r2
 80144a0:	b29a      	uxth	r2, r3
 80144a2:	8a3b      	ldrh	r3, [r7, #16]
 80144a4:	3306      	adds	r3, #6
 80144a6:	4932      	ldr	r1, [pc, #200]	; (8014570 <ce303_power+0x1254>)
 80144a8:	5ccb      	ldrb	r3, [r1, r3]
 80144aa:	b29b      	uxth	r3, r3
 80144ac:	4413      	add	r3, r2
 80144ae:	b29b      	uxth	r3, r3
 80144b0:	3b30      	subs	r3, #48	; 0x30
 80144b2:	82fb      	strh	r3, [r7, #22]
 80144b4:	e025      	b.n	8014502 <ce303_power+0x11e6>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 80144b6:	8a3b      	ldrh	r3, [r7, #16]
 80144b8:	3304      	adds	r3, #4
 80144ba:	4a2d      	ldr	r2, [pc, #180]	; (8014570 <ce303_power+0x1254>)
 80144bc:	5cd3      	ldrb	r3, [r2, r3]
 80144be:	3b30      	subs	r3, #48	; 0x30
 80144c0:	b29b      	uxth	r3, r3
 80144c2:	461a      	mov	r2, r3
 80144c4:	0092      	lsls	r2, r2, #2
 80144c6:	4413      	add	r3, r2
 80144c8:	461a      	mov	r2, r3
 80144ca:	0091      	lsls	r1, r2, #2
 80144cc:	461a      	mov	r2, r3
 80144ce:	460b      	mov	r3, r1
 80144d0:	4413      	add	r3, r2
 80144d2:	009b      	lsls	r3, r3, #2
 80144d4:	b29a      	uxth	r2, r3
 80144d6:	8a3b      	ldrh	r3, [r7, #16]
 80144d8:	3305      	adds	r3, #5
 80144da:	4925      	ldr	r1, [pc, #148]	; (8014570 <ce303_power+0x1254>)
 80144dc:	5ccb      	ldrb	r3, [r1, r3]
 80144de:	3b30      	subs	r3, #48	; 0x30
 80144e0:	b29b      	uxth	r3, r3
 80144e2:	4619      	mov	r1, r3
 80144e4:	0089      	lsls	r1, r1, #2
 80144e6:	440b      	add	r3, r1
 80144e8:	005b      	lsls	r3, r3, #1
 80144ea:	b29b      	uxth	r3, r3
 80144ec:	4413      	add	r3, r2
 80144ee:	b29a      	uxth	r2, r3
 80144f0:	8a3b      	ldrh	r3, [r7, #16]
 80144f2:	3306      	adds	r3, #6
 80144f4:	491e      	ldr	r1, [pc, #120]	; (8014570 <ce303_power+0x1254>)
 80144f6:	5ccb      	ldrb	r3, [r1, r3]
 80144f8:	b29b      	uxth	r3, r3
 80144fa:	4413      	add	r3, r2
 80144fc:	b29b      	uxth	r3, r3
 80144fe:	3b30      	subs	r3, #48	; 0x30
 8014500:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8014502:	4b1c      	ldr	r3, [pc, #112]	; (8014574 <ce303_power+0x1258>)
 8014504:	681b      	ldr	r3, [r3, #0]
 8014506:	f04f 31ff 	mov.w	r1, #4294967295
 801450a:	4618      	mov	r0, r3
 801450c:	f7f4 fa06 	bl	800891c <osMutexWait>
				fm25v02_write(2*CE_303_POWER_C_REG, ((uint8_t)(temp>>8)) );
 8014510:	89fb      	ldrh	r3, [r7, #14]
 8014512:	0a1b      	lsrs	r3, r3, #8
 8014514:	b29b      	uxth	r3, r3
 8014516:	b2db      	uxtb	r3, r3
 8014518:	4619      	mov	r1, r3
 801451a:	f242 005a 	movw	r0, #8282	; 0x205a
 801451e:	f002 fbbf 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_C_REG+1, ((uint8_t)(temp&0x00FF)) );
 8014522:	89fb      	ldrh	r3, [r7, #14]
 8014524:	b2db      	uxtb	r3, r3
 8014526:	4619      	mov	r1, r3
 8014528:	f242 005b 	movw	r0, #8283	; 0x205b
 801452c:	f002 fbb8 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_C_REG, ((uint8_t)(temp_mil>>8)) );
 8014530:	8afb      	ldrh	r3, [r7, #22]
 8014532:	0a1b      	lsrs	r3, r3, #8
 8014534:	b29b      	uxth	r3, r3
 8014536:	b2db      	uxtb	r3, r3
 8014538:	4619      	mov	r1, r3
 801453a:	f242 0060 	movw	r0, #8288	; 0x2060
 801453e:	f002 fbaf 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_C_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 8014542:	8afb      	ldrh	r3, [r7, #22]
 8014544:	b2db      	uxtb	r3, r3
 8014546:	4619      	mov	r1, r3
 8014548:	f242 0061 	movw	r0, #8289	; 0x2061
 801454c:	f002 fba8 	bl	8016ca0 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8014550:	4b08      	ldr	r3, [pc, #32]	; (8014574 <ce303_power+0x1258>)
 8014552:	681b      	ldr	r3, [r3, #0]
 8014554:	4618      	mov	r0, r3
 8014556:	f7f4 fa2f 	bl	80089b8 <osMutexRelease>
				status_registers.ce303_power_c_reg = temp;
 801455a:	4a07      	ldr	r2, [pc, #28]	; (8014578 <ce303_power+0x125c>)
 801455c:	89fb      	ldrh	r3, [r7, #14]
 801455e:	f8a2 305a 	strh.w	r3, [r2, #90]	; 0x5a
				status_registers.ce303_power_mil_c_reg = temp_mil;
 8014562:	4a05      	ldr	r2, [pc, #20]	; (8014578 <ce303_power+0x125c>)
 8014564:	8afb      	ldrh	r3, [r7, #22]
 8014566:	f8a2 3060 	strh.w	r3, [r2, #96]	; 0x60
				power_c_state = 1;
 801456a:	2301      	movs	r3, #1
 801456c:	74fb      	strb	r3, [r7, #19]
 801456e:	e0f4      	b.n	801475a <ce303_power+0x143e>
 8014570:	2000994c 	.word	0x2000994c
 8014574:	20009af8 	.word	0x20009af8
 8014578:	2000a174 	.word	0x2000a174
			}

			else if( meter_rx_buffer[i+4] == 0x2E)
 801457c:	8a3b      	ldrh	r3, [r7, #16]
 801457e:	3304      	adds	r3, #4
 8014580:	4a85      	ldr	r2, [pc, #532]	; (8014798 <ce303_power+0x147c>)
 8014582:	5cd3      	ldrb	r3, [r2, r3]
 8014584:	2b2e      	cmp	r3, #46	; 0x2e
 8014586:	f040 80e8 	bne.w	801475a <ce303_power+0x143e>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+3])-0x30);
 801458a:	8a3b      	ldrh	r3, [r7, #16]
 801458c:	3301      	adds	r3, #1
 801458e:	4a82      	ldr	r2, [pc, #520]	; (8014798 <ce303_power+0x147c>)
 8014590:	5cd3      	ldrb	r3, [r2, r3]
 8014592:	3b30      	subs	r3, #48	; 0x30
 8014594:	b29b      	uxth	r3, r3
 8014596:	461a      	mov	r2, r3
 8014598:	0092      	lsls	r2, r2, #2
 801459a:	4413      	add	r3, r2
 801459c:	461a      	mov	r2, r3
 801459e:	0091      	lsls	r1, r2, #2
 80145a0:	461a      	mov	r2, r3
 80145a2:	460b      	mov	r3, r1
 80145a4:	4413      	add	r3, r2
 80145a6:	009b      	lsls	r3, r3, #2
 80145a8:	b29a      	uxth	r2, r3
 80145aa:	8a3b      	ldrh	r3, [r7, #16]
 80145ac:	3302      	adds	r3, #2
 80145ae:	497a      	ldr	r1, [pc, #488]	; (8014798 <ce303_power+0x147c>)
 80145b0:	5ccb      	ldrb	r3, [r1, r3]
 80145b2:	3b30      	subs	r3, #48	; 0x30
 80145b4:	b29b      	uxth	r3, r3
 80145b6:	4619      	mov	r1, r3
 80145b8:	0089      	lsls	r1, r1, #2
 80145ba:	440b      	add	r3, r1
 80145bc:	005b      	lsls	r3, r3, #1
 80145be:	b29b      	uxth	r3, r3
 80145c0:	4413      	add	r3, r2
 80145c2:	b29a      	uxth	r2, r3
 80145c4:	8a3b      	ldrh	r3, [r7, #16]
 80145c6:	3303      	adds	r3, #3
 80145c8:	4973      	ldr	r1, [pc, #460]	; (8014798 <ce303_power+0x147c>)
 80145ca:	5ccb      	ldrb	r3, [r1, r3]
 80145cc:	b29b      	uxth	r3, r3
 80145ce:	4413      	add	r3, r2
 80145d0:	b29b      	uxth	r3, r3
 80145d2:	3b30      	subs	r3, #48	; 0x30
 80145d4:	81fb      	strh	r3, [r7, #14]

				if( meter_rx_buffer[i+6] == 0x29 ) // если 1 разряд после запятой
 80145d6:	8a3b      	ldrh	r3, [r7, #16]
 80145d8:	3306      	adds	r3, #6
 80145da:	4a6f      	ldr	r2, [pc, #444]	; (8014798 <ce303_power+0x147c>)
 80145dc:	5cd3      	ldrb	r3, [r2, r3]
 80145de:	2b29      	cmp	r3, #41	; 0x29
 80145e0:	d110      	bne.n	8014604 <ce303_power+0x12e8>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+5])-0x30)*100;
 80145e2:	8a3b      	ldrh	r3, [r7, #16]
 80145e4:	3305      	adds	r3, #5
 80145e6:	4a6c      	ldr	r2, [pc, #432]	; (8014798 <ce303_power+0x147c>)
 80145e8:	5cd3      	ldrb	r3, [r2, r3]
 80145ea:	3b30      	subs	r3, #48	; 0x30
 80145ec:	b29b      	uxth	r3, r3
 80145ee:	461a      	mov	r2, r3
 80145f0:	0092      	lsls	r2, r2, #2
 80145f2:	4413      	add	r3, r2
 80145f4:	461a      	mov	r2, r3
 80145f6:	0091      	lsls	r1, r2, #2
 80145f8:	461a      	mov	r2, r3
 80145fa:	460b      	mov	r3, r1
 80145fc:	4413      	add	r3, r2
 80145fe:	009b      	lsls	r3, r3, #2
 8014600:	82fb      	strh	r3, [r7, #22]
 8014602:	e070      	b.n	80146e6 <ce303_power+0x13ca>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 2 разряда после запятой
 8014604:	8a3b      	ldrh	r3, [r7, #16]
 8014606:	3307      	adds	r3, #7
 8014608:	4a63      	ldr	r2, [pc, #396]	; (8014798 <ce303_power+0x147c>)
 801460a:	5cd3      	ldrb	r3, [r2, r3]
 801460c:	2b29      	cmp	r3, #41	; 0x29
 801460e:	d117      	bne.n	8014640 <ce303_power+0x1324>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30))*10;
 8014610:	8a3b      	ldrh	r3, [r7, #16]
 8014612:	3305      	adds	r3, #5
 8014614:	4a60      	ldr	r2, [pc, #384]	; (8014798 <ce303_power+0x147c>)
 8014616:	5cd3      	ldrb	r3, [r2, r3]
 8014618:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801461c:	4613      	mov	r3, r2
 801461e:	009b      	lsls	r3, r3, #2
 8014620:	4413      	add	r3, r2
 8014622:	005b      	lsls	r3, r3, #1
 8014624:	4619      	mov	r1, r3
 8014626:	8a3b      	ldrh	r3, [r7, #16]
 8014628:	3306      	adds	r3, #6
 801462a:	4a5b      	ldr	r2, [pc, #364]	; (8014798 <ce303_power+0x147c>)
 801462c:	5cd3      	ldrb	r3, [r2, r3]
 801462e:	3b30      	subs	r3, #48	; 0x30
 8014630:	440b      	add	r3, r1
 8014632:	b29b      	uxth	r3, r3
 8014634:	461a      	mov	r2, r3
 8014636:	0092      	lsls	r2, r2, #2
 8014638:	4413      	add	r3, r2
 801463a:	005b      	lsls	r3, r3, #1
 801463c:	82fb      	strh	r3, [r7, #22]
 801463e:	e052      	b.n	80146e6 <ce303_power+0x13ca>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 3 разряда после запятой
 8014640:	8a3b      	ldrh	r3, [r7, #16]
 8014642:	3308      	adds	r3, #8
 8014644:	4a54      	ldr	r2, [pc, #336]	; (8014798 <ce303_power+0x147c>)
 8014646:	5cd3      	ldrb	r3, [r2, r3]
 8014648:	2b29      	cmp	r3, #41	; 0x29
 801464a:	d126      	bne.n	801469a <ce303_power+0x137e>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 801464c:	8a3b      	ldrh	r3, [r7, #16]
 801464e:	3305      	adds	r3, #5
 8014650:	4a51      	ldr	r2, [pc, #324]	; (8014798 <ce303_power+0x147c>)
 8014652:	5cd3      	ldrb	r3, [r2, r3]
 8014654:	3b30      	subs	r3, #48	; 0x30
 8014656:	b29b      	uxth	r3, r3
 8014658:	461a      	mov	r2, r3
 801465a:	0092      	lsls	r2, r2, #2
 801465c:	4413      	add	r3, r2
 801465e:	461a      	mov	r2, r3
 8014660:	0091      	lsls	r1, r2, #2
 8014662:	461a      	mov	r2, r3
 8014664:	460b      	mov	r3, r1
 8014666:	4413      	add	r3, r2
 8014668:	009b      	lsls	r3, r3, #2
 801466a:	b29a      	uxth	r2, r3
 801466c:	8a3b      	ldrh	r3, [r7, #16]
 801466e:	3306      	adds	r3, #6
 8014670:	4949      	ldr	r1, [pc, #292]	; (8014798 <ce303_power+0x147c>)
 8014672:	5ccb      	ldrb	r3, [r1, r3]
 8014674:	3b30      	subs	r3, #48	; 0x30
 8014676:	b29b      	uxth	r3, r3
 8014678:	4619      	mov	r1, r3
 801467a:	0089      	lsls	r1, r1, #2
 801467c:	440b      	add	r3, r1
 801467e:	005b      	lsls	r3, r3, #1
 8014680:	b29b      	uxth	r3, r3
 8014682:	4413      	add	r3, r2
 8014684:	b29a      	uxth	r2, r3
 8014686:	8a3b      	ldrh	r3, [r7, #16]
 8014688:	3307      	adds	r3, #7
 801468a:	4943      	ldr	r1, [pc, #268]	; (8014798 <ce303_power+0x147c>)
 801468c:	5ccb      	ldrb	r3, [r1, r3]
 801468e:	b29b      	uxth	r3, r3
 8014690:	4413      	add	r3, r2
 8014692:	b29b      	uxth	r3, r3
 8014694:	3b30      	subs	r3, #48	; 0x30
 8014696:	82fb      	strh	r3, [r7, #22]
 8014698:	e025      	b.n	80146e6 <ce303_power+0x13ca>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 801469a:	8a3b      	ldrh	r3, [r7, #16]
 801469c:	3305      	adds	r3, #5
 801469e:	4a3e      	ldr	r2, [pc, #248]	; (8014798 <ce303_power+0x147c>)
 80146a0:	5cd3      	ldrb	r3, [r2, r3]
 80146a2:	3b30      	subs	r3, #48	; 0x30
 80146a4:	b29b      	uxth	r3, r3
 80146a6:	461a      	mov	r2, r3
 80146a8:	0092      	lsls	r2, r2, #2
 80146aa:	4413      	add	r3, r2
 80146ac:	461a      	mov	r2, r3
 80146ae:	0091      	lsls	r1, r2, #2
 80146b0:	461a      	mov	r2, r3
 80146b2:	460b      	mov	r3, r1
 80146b4:	4413      	add	r3, r2
 80146b6:	009b      	lsls	r3, r3, #2
 80146b8:	b29a      	uxth	r2, r3
 80146ba:	8a3b      	ldrh	r3, [r7, #16]
 80146bc:	3306      	adds	r3, #6
 80146be:	4936      	ldr	r1, [pc, #216]	; (8014798 <ce303_power+0x147c>)
 80146c0:	5ccb      	ldrb	r3, [r1, r3]
 80146c2:	3b30      	subs	r3, #48	; 0x30
 80146c4:	b29b      	uxth	r3, r3
 80146c6:	4619      	mov	r1, r3
 80146c8:	0089      	lsls	r1, r1, #2
 80146ca:	440b      	add	r3, r1
 80146cc:	005b      	lsls	r3, r3, #1
 80146ce:	b29b      	uxth	r3, r3
 80146d0:	4413      	add	r3, r2
 80146d2:	b29a      	uxth	r2, r3
 80146d4:	8a3b      	ldrh	r3, [r7, #16]
 80146d6:	3307      	adds	r3, #7
 80146d8:	492f      	ldr	r1, [pc, #188]	; (8014798 <ce303_power+0x147c>)
 80146da:	5ccb      	ldrb	r3, [r1, r3]
 80146dc:	b29b      	uxth	r3, r3
 80146de:	4413      	add	r3, r2
 80146e0:	b29b      	uxth	r3, r3
 80146e2:	3b30      	subs	r3, #48	; 0x30
 80146e4:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 80146e6:	4b2d      	ldr	r3, [pc, #180]	; (801479c <ce303_power+0x1480>)
 80146e8:	681b      	ldr	r3, [r3, #0]
 80146ea:	f04f 31ff 	mov.w	r1, #4294967295
 80146ee:	4618      	mov	r0, r3
 80146f0:	f7f4 f914 	bl	800891c <osMutexWait>
				fm25v02_write(2*CE_303_POWER_C_REG, ((uint8_t)(temp>>8)) );
 80146f4:	89fb      	ldrh	r3, [r7, #14]
 80146f6:	0a1b      	lsrs	r3, r3, #8
 80146f8:	b29b      	uxth	r3, r3
 80146fa:	b2db      	uxtb	r3, r3
 80146fc:	4619      	mov	r1, r3
 80146fe:	f242 005a 	movw	r0, #8282	; 0x205a
 8014702:	f002 facd 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_C_REG+1, ((uint8_t)(temp&0x00FF)) );
 8014706:	89fb      	ldrh	r3, [r7, #14]
 8014708:	b2db      	uxtb	r3, r3
 801470a:	4619      	mov	r1, r3
 801470c:	f242 005b 	movw	r0, #8283	; 0x205b
 8014710:	f002 fac6 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_C_REG, ((uint8_t)(temp_mil>>8)) );
 8014714:	8afb      	ldrh	r3, [r7, #22]
 8014716:	0a1b      	lsrs	r3, r3, #8
 8014718:	b29b      	uxth	r3, r3
 801471a:	b2db      	uxtb	r3, r3
 801471c:	4619      	mov	r1, r3
 801471e:	f242 0060 	movw	r0, #8288	; 0x2060
 8014722:	f002 fabd 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_POWER_MIL_C_REG+1, ((uint8_t)(temp_mil&0x00FF)) );
 8014726:	8afb      	ldrh	r3, [r7, #22]
 8014728:	b2db      	uxtb	r3, r3
 801472a:	4619      	mov	r1, r3
 801472c:	f242 0061 	movw	r0, #8289	; 0x2061
 8014730:	f002 fab6 	bl	8016ca0 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8014734:	4b19      	ldr	r3, [pc, #100]	; (801479c <ce303_power+0x1480>)
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	4618      	mov	r0, r3
 801473a:	f7f4 f93d 	bl	80089b8 <osMutexRelease>
				status_registers.ce303_power_c_reg = temp;
 801473e:	4a18      	ldr	r2, [pc, #96]	; (80147a0 <ce303_power+0x1484>)
 8014740:	89fb      	ldrh	r3, [r7, #14]
 8014742:	f8a2 305a 	strh.w	r3, [r2, #90]	; 0x5a
				status_registers.ce303_power_mil_c_reg = temp_mil;
 8014746:	4a16      	ldr	r2, [pc, #88]	; (80147a0 <ce303_power+0x1484>)
 8014748:	8afb      	ldrh	r3, [r7, #22]
 801474a:	f8a2 3060 	strh.w	r3, [r2, #96]	; 0x60
				power_c_state = 1;
 801474e:	2301      	movs	r3, #1
 8014750:	74fb      	strb	r3, [r7, #19]
 8014752:	e002      	b.n	801475a <ce303_power+0x143e>
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8014754:	bf00      	nop
 8014756:	e000      	b.n	801475a <ce303_power+0x143e>
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице
 8014758:	bf00      	nop
	for(uint16_t i=0; i<256; i++)
 801475a:	8a3b      	ldrh	r3, [r7, #16]
 801475c:	3301      	adds	r3, #1
 801475e:	823b      	strh	r3, [r7, #16]
 8014760:	8a3b      	ldrh	r3, [r7, #16]
 8014762:	2bff      	cmp	r3, #255	; 0xff
 8014764:	f67e afd1 	bls.w	801370a <ce303_power+0x3ee>
			}
		}

	}

	meter_rx_number = 0;
 8014768:	4b0e      	ldr	r3, [pc, #56]	; (80147a4 <ce303_power+0x1488>)
 801476a:	2200      	movs	r2, #0
 801476c:	701a      	strb	r2, [r3, #0]
	meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 801476e:	f7fc f925 	bl	80109bc <meter_rx_buffer_clear>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8014772:	2201      	movs	r2, #1
 8014774:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014778:	480b      	ldr	r0, [pc, #44]	; (80147a8 <ce303_power+0x148c>)
 801477a:	f7ef fb71 	bl	8003e60 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart6, &end_buf[0], 5); // передаем команду
 801477e:	2205      	movs	r2, #5
 8014780:	490a      	ldr	r1, [pc, #40]	; (80147ac <ce303_power+0x1490>)
 8014782:	480b      	ldr	r0, [pc, #44]	; (80147b0 <ce303_power+0x1494>)
 8014784:	f7f2 fe8a 	bl	800749c <HAL_UART_Transmit_DMA>
	HAL_Delay(1000);
 8014788:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801478c:	f7ed ffa8 	bl	80026e0 <HAL_Delay>

}
 8014790:	bf00      	nop
 8014792:	3718      	adds	r7, #24
 8014794:	46bd      	mov	sp, r7
 8014796:	bd80      	pop	{r7, pc}
 8014798:	2000994c 	.word	0x2000994c
 801479c:	20009af8 	.word	0x20009af8
 80147a0:	2000a174 	.word	0x2000a174
 80147a4:	20000865 	.word	0x20000865
 80147a8:	40021800 	.word	0x40021800
 80147ac:	20000034 	.word	0x20000034
 80147b0:	20009d00 	.word	0x20009d00

080147b4 <ce303_tarif>:

void ce303_tarif (uint8_t meter_id)
{
 80147b4:	b580      	push	{r7, lr}
 80147b6:	b086      	sub	sp, #24
 80147b8:	af00      	add	r7, sp, #0
 80147ba:	4603      	mov	r3, r0
 80147bc:	71fb      	strb	r3, [r7, #7]
	uint8_t tarif_2_state;
	uint8_t tarif_3_state;
	uint8_t tarif_4_state;
	uint8_t tarif_5_state;

	if( (meter_id>99)&&(meter_id<1000) )
 80147be:	79fb      	ldrb	r3, [r7, #7]
 80147c0:	2b63      	cmp	r3, #99	; 0x63
 80147c2:	d962      	bls.n	801488a <ce303_tarif+0xd6>
	{
		start_buf[0] = 0x2F;
 80147c4:	4b9d      	ldr	r3, [pc, #628]	; (8014a3c <ce303_tarif+0x288>)
 80147c6:	222f      	movs	r2, #47	; 0x2f
 80147c8:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 80147ca:	4b9c      	ldr	r3, [pc, #624]	; (8014a3c <ce303_tarif+0x288>)
 80147cc:	223f      	movs	r2, #63	; 0x3f
 80147ce:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/100) + 0x30;
 80147d0:	79fb      	ldrb	r3, [r7, #7]
 80147d2:	4a9b      	ldr	r2, [pc, #620]	; (8014a40 <ce303_tarif+0x28c>)
 80147d4:	fba2 2303 	umull	r2, r3, r2, r3
 80147d8:	095b      	lsrs	r3, r3, #5
 80147da:	b2db      	uxtb	r3, r3
 80147dc:	3330      	adds	r3, #48	; 0x30
 80147de:	b2da      	uxtb	r2, r3
 80147e0:	4b96      	ldr	r3, [pc, #600]	; (8014a3c <ce303_tarif+0x288>)
 80147e2:	709a      	strb	r2, [r3, #2]
		start_buf[3] = ((meter_id - (meter_id/100)*100)/10) + 0x30;
 80147e4:	79fa      	ldrb	r2, [r7, #7]
 80147e6:	79fb      	ldrb	r3, [r7, #7]
 80147e8:	4995      	ldr	r1, [pc, #596]	; (8014a40 <ce303_tarif+0x28c>)
 80147ea:	fba1 1303 	umull	r1, r3, r1, r3
 80147ee:	095b      	lsrs	r3, r3, #5
 80147f0:	b2db      	uxtb	r3, r3
 80147f2:	4619      	mov	r1, r3
 80147f4:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80147f8:	fb03 f301 	mul.w	r3, r3, r1
 80147fc:	4413      	add	r3, r2
 80147fe:	4a91      	ldr	r2, [pc, #580]	; (8014a44 <ce303_tarif+0x290>)
 8014800:	fb82 1203 	smull	r1, r2, r2, r3
 8014804:	1092      	asrs	r2, r2, #2
 8014806:	17db      	asrs	r3, r3, #31
 8014808:	1ad3      	subs	r3, r2, r3
 801480a:	b2db      	uxtb	r3, r3
 801480c:	3330      	adds	r3, #48	; 0x30
 801480e:	b2da      	uxtb	r2, r3
 8014810:	4b8a      	ldr	r3, [pc, #552]	; (8014a3c <ce303_tarif+0x288>)
 8014812:	70da      	strb	r2, [r3, #3]
		start_buf[4] = ((meter_id - ((meter_id/100)*100)) - (((meter_id - ((meter_id/100)*100))/10)*10)) + 0x30 ;
 8014814:	79fa      	ldrb	r2, [r7, #7]
 8014816:	79fb      	ldrb	r3, [r7, #7]
 8014818:	4989      	ldr	r1, [pc, #548]	; (8014a40 <ce303_tarif+0x28c>)
 801481a:	fba1 1303 	umull	r1, r3, r1, r3
 801481e:	095b      	lsrs	r3, r3, #5
 8014820:	b2db      	uxtb	r3, r3
 8014822:	4619      	mov	r1, r3
 8014824:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8014828:	fb03 f301 	mul.w	r3, r3, r1
 801482c:	441a      	add	r2, r3
 801482e:	4b85      	ldr	r3, [pc, #532]	; (8014a44 <ce303_tarif+0x290>)
 8014830:	fb83 1302 	smull	r1, r3, r3, r2
 8014834:	1099      	asrs	r1, r3, #2
 8014836:	17d3      	asrs	r3, r2, #31
 8014838:	1ac9      	subs	r1, r1, r3
 801483a:	460b      	mov	r3, r1
 801483c:	009b      	lsls	r3, r3, #2
 801483e:	440b      	add	r3, r1
 8014840:	005b      	lsls	r3, r3, #1
 8014842:	1ad1      	subs	r1, r2, r3
 8014844:	b2cb      	uxtb	r3, r1
 8014846:	3330      	adds	r3, #48	; 0x30
 8014848:	b2da      	uxtb	r2, r3
 801484a:	4b7c      	ldr	r3, [pc, #496]	; (8014a3c <ce303_tarif+0x288>)
 801484c:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x21;
 801484e:	4b7b      	ldr	r3, [pc, #492]	; (8014a3c <ce303_tarif+0x288>)
 8014850:	2221      	movs	r2, #33	; 0x21
 8014852:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0D;
 8014854:	4b79      	ldr	r3, [pc, #484]	; (8014a3c <ce303_tarif+0x288>)
 8014856:	220d      	movs	r2, #13
 8014858:	719a      	strb	r2, [r3, #6]
		start_buf[7] = 0x0A;
 801485a:	4b78      	ldr	r3, [pc, #480]	; (8014a3c <ce303_tarif+0x288>)
 801485c:	220a      	movs	r2, #10
 801485e:	71da      	strb	r2, [r3, #7]

		meter_rx_number = 0;
 8014860:	4b79      	ldr	r3, [pc, #484]	; (8014a48 <ce303_tarif+0x294>)
 8014862:	2200      	movs	r2, #0
 8014864:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8014866:	f7fc f8a9 	bl	80109bc <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 801486a:	2201      	movs	r2, #1
 801486c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014870:	4876      	ldr	r0, [pc, #472]	; (8014a4c <ce303_tarif+0x298>)
 8014872:	f7ef faf5 	bl	8003e60 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 8); // передаем команду
 8014876:	2208      	movs	r2, #8
 8014878:	4970      	ldr	r1, [pc, #448]	; (8014a3c <ce303_tarif+0x288>)
 801487a:	4875      	ldr	r0, [pc, #468]	; (8014a50 <ce303_tarif+0x29c>)
 801487c:	f7f2 fe0e 	bl	800749c <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 8014880:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014884:	f7ed ff2c 	bl	80026e0 <HAL_Delay>
 8014888:	e072      	b.n	8014970 <ce303_tarif+0x1bc>

	}
	else if( (meter_id>9)&&(meter_id<100) )
 801488a:	79fb      	ldrb	r3, [r7, #7]
 801488c:	2b09      	cmp	r3, #9
 801488e:	d944      	bls.n	801491a <ce303_tarif+0x166>
 8014890:	79fb      	ldrb	r3, [r7, #7]
 8014892:	2b63      	cmp	r3, #99	; 0x63
 8014894:	d841      	bhi.n	801491a <ce303_tarif+0x166>
	{
		start_buf[0] = 0x2F;
 8014896:	4b69      	ldr	r3, [pc, #420]	; (8014a3c <ce303_tarif+0x288>)
 8014898:	222f      	movs	r2, #47	; 0x2f
 801489a:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 801489c:	4b67      	ldr	r3, [pc, #412]	; (8014a3c <ce303_tarif+0x288>)
 801489e:	223f      	movs	r2, #63	; 0x3f
 80148a0:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/10) + 0x30;
 80148a2:	79fb      	ldrb	r3, [r7, #7]
 80148a4:	4a6b      	ldr	r2, [pc, #428]	; (8014a54 <ce303_tarif+0x2a0>)
 80148a6:	fba2 2303 	umull	r2, r3, r2, r3
 80148aa:	08db      	lsrs	r3, r3, #3
 80148ac:	b2db      	uxtb	r3, r3
 80148ae:	3330      	adds	r3, #48	; 0x30
 80148b0:	b2da      	uxtb	r2, r3
 80148b2:	4b62      	ldr	r3, [pc, #392]	; (8014a3c <ce303_tarif+0x288>)
 80148b4:	709a      	strb	r2, [r3, #2]
		start_buf[3] = (meter_id - ((meter_id/10)*10)) + 0x30;
 80148b6:	79fb      	ldrb	r3, [r7, #7]
 80148b8:	4a66      	ldr	r2, [pc, #408]	; (8014a54 <ce303_tarif+0x2a0>)
 80148ba:	fba2 2303 	umull	r2, r3, r2, r3
 80148be:	08db      	lsrs	r3, r3, #3
 80148c0:	b2db      	uxtb	r3, r3
 80148c2:	461a      	mov	r2, r3
 80148c4:	0152      	lsls	r2, r2, #5
 80148c6:	1ad2      	subs	r2, r2, r3
 80148c8:	0092      	lsls	r2, r2, #2
 80148ca:	1ad3      	subs	r3, r2, r3
 80148cc:	005b      	lsls	r3, r3, #1
 80148ce:	b2da      	uxtb	r2, r3
 80148d0:	79fb      	ldrb	r3, [r7, #7]
 80148d2:	4413      	add	r3, r2
 80148d4:	b2db      	uxtb	r3, r3
 80148d6:	3330      	adds	r3, #48	; 0x30
 80148d8:	b2da      	uxtb	r2, r3
 80148da:	4b58      	ldr	r3, [pc, #352]	; (8014a3c <ce303_tarif+0x288>)
 80148dc:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x21;
 80148de:	4b57      	ldr	r3, [pc, #348]	; (8014a3c <ce303_tarif+0x288>)
 80148e0:	2221      	movs	r2, #33	; 0x21
 80148e2:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0D;
 80148e4:	4b55      	ldr	r3, [pc, #340]	; (8014a3c <ce303_tarif+0x288>)
 80148e6:	220d      	movs	r2, #13
 80148e8:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0A;
 80148ea:	4b54      	ldr	r3, [pc, #336]	; (8014a3c <ce303_tarif+0x288>)
 80148ec:	220a      	movs	r2, #10
 80148ee:	719a      	strb	r2, [r3, #6]

		meter_rx_number = 0;
 80148f0:	4b55      	ldr	r3, [pc, #340]	; (8014a48 <ce303_tarif+0x294>)
 80148f2:	2200      	movs	r2, #0
 80148f4:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 80148f6:	f7fc f861 	bl	80109bc <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 80148fa:	2201      	movs	r2, #1
 80148fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014900:	4852      	ldr	r0, [pc, #328]	; (8014a4c <ce303_tarif+0x298>)
 8014902:	f7ef faad 	bl	8003e60 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 7); // передаем команду
 8014906:	2207      	movs	r2, #7
 8014908:	494c      	ldr	r1, [pc, #304]	; (8014a3c <ce303_tarif+0x288>)
 801490a:	4851      	ldr	r0, [pc, #324]	; (8014a50 <ce303_tarif+0x29c>)
 801490c:	f7f2 fdc6 	bl	800749c <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 8014910:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014914:	f7ed fee4 	bl	80026e0 <HAL_Delay>
 8014918:	e02a      	b.n	8014970 <ce303_tarif+0x1bc>

	}
	else if( (meter_id>=0)&&(meter_id<10) )
 801491a:	79fb      	ldrb	r3, [r7, #7]
 801491c:	2b09      	cmp	r3, #9
 801491e:	d827      	bhi.n	8014970 <ce303_tarif+0x1bc>
	{
		start_buf[0] = 0x2F;
 8014920:	4b46      	ldr	r3, [pc, #280]	; (8014a3c <ce303_tarif+0x288>)
 8014922:	222f      	movs	r2, #47	; 0x2f
 8014924:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 8014926:	4b45      	ldr	r3, [pc, #276]	; (8014a3c <ce303_tarif+0x288>)
 8014928:	223f      	movs	r2, #63	; 0x3f
 801492a:	705a      	strb	r2, [r3, #1]
		start_buf[2] = meter_id + 0x30;
 801492c:	79fb      	ldrb	r3, [r7, #7]
 801492e:	3330      	adds	r3, #48	; 0x30
 8014930:	b2da      	uxtb	r2, r3
 8014932:	4b42      	ldr	r3, [pc, #264]	; (8014a3c <ce303_tarif+0x288>)
 8014934:	709a      	strb	r2, [r3, #2]
		start_buf[3] = 0x21;
 8014936:	4b41      	ldr	r3, [pc, #260]	; (8014a3c <ce303_tarif+0x288>)
 8014938:	2221      	movs	r2, #33	; 0x21
 801493a:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x0D;
 801493c:	4b3f      	ldr	r3, [pc, #252]	; (8014a3c <ce303_tarif+0x288>)
 801493e:	220d      	movs	r2, #13
 8014940:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0A;
 8014942:	4b3e      	ldr	r3, [pc, #248]	; (8014a3c <ce303_tarif+0x288>)
 8014944:	220a      	movs	r2, #10
 8014946:	715a      	strb	r2, [r3, #5]

		meter_rx_number = 0;
 8014948:	4b3f      	ldr	r3, [pc, #252]	; (8014a48 <ce303_tarif+0x294>)
 801494a:	2200      	movs	r2, #0
 801494c:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 801494e:	f7fc f835 	bl	80109bc <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8014952:	2201      	movs	r2, #1
 8014954:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014958:	483c      	ldr	r0, [pc, #240]	; (8014a4c <ce303_tarif+0x298>)
 801495a:	f7ef fa81 	bl	8003e60 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 6); // передаем команду
 801495e:	2206      	movs	r2, #6
 8014960:	4936      	ldr	r1, [pc, #216]	; (8014a3c <ce303_tarif+0x288>)
 8014962:	483b      	ldr	r0, [pc, #236]	; (8014a50 <ce303_tarif+0x29c>)
 8014964:	f7f2 fd9a 	bl	800749c <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 8014968:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801496c:	f7ed feb8 	bl	80026e0 <HAL_Delay>
	}

	if( (meter_id>99)&&(meter_id<1000) )
 8014970:	79fb      	ldrb	r3, [r7, #7]
 8014972:	2b63      	cmp	r3, #99	; 0x63
 8014974:	d970      	bls.n	8014a58 <ce303_tarif+0x2a4>
	{
		start_buf[0] = 0x2F;
 8014976:	4b31      	ldr	r3, [pc, #196]	; (8014a3c <ce303_tarif+0x288>)
 8014978:	222f      	movs	r2, #47	; 0x2f
 801497a:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 801497c:	4b2f      	ldr	r3, [pc, #188]	; (8014a3c <ce303_tarif+0x288>)
 801497e:	223f      	movs	r2, #63	; 0x3f
 8014980:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/100) + 0x30;
 8014982:	79fb      	ldrb	r3, [r7, #7]
 8014984:	4a2e      	ldr	r2, [pc, #184]	; (8014a40 <ce303_tarif+0x28c>)
 8014986:	fba2 2303 	umull	r2, r3, r2, r3
 801498a:	095b      	lsrs	r3, r3, #5
 801498c:	b2db      	uxtb	r3, r3
 801498e:	3330      	adds	r3, #48	; 0x30
 8014990:	b2da      	uxtb	r2, r3
 8014992:	4b2a      	ldr	r3, [pc, #168]	; (8014a3c <ce303_tarif+0x288>)
 8014994:	709a      	strb	r2, [r3, #2]
		start_buf[3] = ((meter_id - (meter_id/100)*100)/10) + 0x30;
 8014996:	79fa      	ldrb	r2, [r7, #7]
 8014998:	79fb      	ldrb	r3, [r7, #7]
 801499a:	4929      	ldr	r1, [pc, #164]	; (8014a40 <ce303_tarif+0x28c>)
 801499c:	fba1 1303 	umull	r1, r3, r1, r3
 80149a0:	095b      	lsrs	r3, r3, #5
 80149a2:	b2db      	uxtb	r3, r3
 80149a4:	4619      	mov	r1, r3
 80149a6:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80149aa:	fb03 f301 	mul.w	r3, r3, r1
 80149ae:	4413      	add	r3, r2
 80149b0:	4a24      	ldr	r2, [pc, #144]	; (8014a44 <ce303_tarif+0x290>)
 80149b2:	fb82 1203 	smull	r1, r2, r2, r3
 80149b6:	1092      	asrs	r2, r2, #2
 80149b8:	17db      	asrs	r3, r3, #31
 80149ba:	1ad3      	subs	r3, r2, r3
 80149bc:	b2db      	uxtb	r3, r3
 80149be:	3330      	adds	r3, #48	; 0x30
 80149c0:	b2da      	uxtb	r2, r3
 80149c2:	4b1e      	ldr	r3, [pc, #120]	; (8014a3c <ce303_tarif+0x288>)
 80149c4:	70da      	strb	r2, [r3, #3]
		start_buf[4] = ((meter_id - ((meter_id/100)*100)) - (((meter_id - ((meter_id/100)*100))/10)*10)) + 0x30 ;
 80149c6:	79fa      	ldrb	r2, [r7, #7]
 80149c8:	79fb      	ldrb	r3, [r7, #7]
 80149ca:	491d      	ldr	r1, [pc, #116]	; (8014a40 <ce303_tarif+0x28c>)
 80149cc:	fba1 1303 	umull	r1, r3, r1, r3
 80149d0:	095b      	lsrs	r3, r3, #5
 80149d2:	b2db      	uxtb	r3, r3
 80149d4:	4619      	mov	r1, r3
 80149d6:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80149da:	fb03 f301 	mul.w	r3, r3, r1
 80149de:	441a      	add	r2, r3
 80149e0:	4b18      	ldr	r3, [pc, #96]	; (8014a44 <ce303_tarif+0x290>)
 80149e2:	fb83 1302 	smull	r1, r3, r3, r2
 80149e6:	1099      	asrs	r1, r3, #2
 80149e8:	17d3      	asrs	r3, r2, #31
 80149ea:	1ac9      	subs	r1, r1, r3
 80149ec:	460b      	mov	r3, r1
 80149ee:	009b      	lsls	r3, r3, #2
 80149f0:	440b      	add	r3, r1
 80149f2:	005b      	lsls	r3, r3, #1
 80149f4:	1ad1      	subs	r1, r2, r3
 80149f6:	b2cb      	uxtb	r3, r1
 80149f8:	3330      	adds	r3, #48	; 0x30
 80149fa:	b2da      	uxtb	r2, r3
 80149fc:	4b0f      	ldr	r3, [pc, #60]	; (8014a3c <ce303_tarif+0x288>)
 80149fe:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x21;
 8014a00:	4b0e      	ldr	r3, [pc, #56]	; (8014a3c <ce303_tarif+0x288>)
 8014a02:	2221      	movs	r2, #33	; 0x21
 8014a04:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0D;
 8014a06:	4b0d      	ldr	r3, [pc, #52]	; (8014a3c <ce303_tarif+0x288>)
 8014a08:	220d      	movs	r2, #13
 8014a0a:	719a      	strb	r2, [r3, #6]
		start_buf[7] = 0x0A;
 8014a0c:	4b0b      	ldr	r3, [pc, #44]	; (8014a3c <ce303_tarif+0x288>)
 8014a0e:	220a      	movs	r2, #10
 8014a10:	71da      	strb	r2, [r3, #7]

		meter_rx_number = 0;
 8014a12:	4b0d      	ldr	r3, [pc, #52]	; (8014a48 <ce303_tarif+0x294>)
 8014a14:	2200      	movs	r2, #0
 8014a16:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8014a18:	f7fb ffd0 	bl	80109bc <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8014a1c:	2201      	movs	r2, #1
 8014a1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014a22:	480a      	ldr	r0, [pc, #40]	; (8014a4c <ce303_tarif+0x298>)
 8014a24:	f7ef fa1c 	bl	8003e60 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 8); // передаем команду
 8014a28:	2208      	movs	r2, #8
 8014a2a:	4904      	ldr	r1, [pc, #16]	; (8014a3c <ce303_tarif+0x288>)
 8014a2c:	4808      	ldr	r0, [pc, #32]	; (8014a50 <ce303_tarif+0x29c>)
 8014a2e:	f7f2 fd35 	bl	800749c <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 8014a32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014a36:	f7ed fe53 	bl	80026e0 <HAL_Delay>
 8014a3a:	e080      	b.n	8014b3e <ce303_tarif+0x38a>
 8014a3c:	20000014 	.word	0x20000014
 8014a40:	51eb851f 	.word	0x51eb851f
 8014a44:	66666667 	.word	0x66666667
 8014a48:	20000865 	.word	0x20000865
 8014a4c:	40021800 	.word	0x40021800
 8014a50:	20009d00 	.word	0x20009d00
 8014a54:	cccccccd 	.word	0xcccccccd

	}
	else if( (meter_id>9)&&(meter_id<100) )
 8014a58:	79fb      	ldrb	r3, [r7, #7]
 8014a5a:	2b09      	cmp	r3, #9
 8014a5c:	d944      	bls.n	8014ae8 <ce303_tarif+0x334>
 8014a5e:	79fb      	ldrb	r3, [r7, #7]
 8014a60:	2b63      	cmp	r3, #99	; 0x63
 8014a62:	d841      	bhi.n	8014ae8 <ce303_tarif+0x334>
	{
		start_buf[0] = 0x2F;
 8014a64:	4b98      	ldr	r3, [pc, #608]	; (8014cc8 <ce303_tarif+0x514>)
 8014a66:	222f      	movs	r2, #47	; 0x2f
 8014a68:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 8014a6a:	4b97      	ldr	r3, [pc, #604]	; (8014cc8 <ce303_tarif+0x514>)
 8014a6c:	223f      	movs	r2, #63	; 0x3f
 8014a6e:	705a      	strb	r2, [r3, #1]
		start_buf[2] = (meter_id/10) + 0x30;
 8014a70:	79fb      	ldrb	r3, [r7, #7]
 8014a72:	4a96      	ldr	r2, [pc, #600]	; (8014ccc <ce303_tarif+0x518>)
 8014a74:	fba2 2303 	umull	r2, r3, r2, r3
 8014a78:	08db      	lsrs	r3, r3, #3
 8014a7a:	b2db      	uxtb	r3, r3
 8014a7c:	3330      	adds	r3, #48	; 0x30
 8014a7e:	b2da      	uxtb	r2, r3
 8014a80:	4b91      	ldr	r3, [pc, #580]	; (8014cc8 <ce303_tarif+0x514>)
 8014a82:	709a      	strb	r2, [r3, #2]
		start_buf[3] = (meter_id - ((meter_id/10)*10)) + 0x30;
 8014a84:	79fb      	ldrb	r3, [r7, #7]
 8014a86:	4a91      	ldr	r2, [pc, #580]	; (8014ccc <ce303_tarif+0x518>)
 8014a88:	fba2 2303 	umull	r2, r3, r2, r3
 8014a8c:	08db      	lsrs	r3, r3, #3
 8014a8e:	b2db      	uxtb	r3, r3
 8014a90:	461a      	mov	r2, r3
 8014a92:	0152      	lsls	r2, r2, #5
 8014a94:	1ad2      	subs	r2, r2, r3
 8014a96:	0092      	lsls	r2, r2, #2
 8014a98:	1ad3      	subs	r3, r2, r3
 8014a9a:	005b      	lsls	r3, r3, #1
 8014a9c:	b2da      	uxtb	r2, r3
 8014a9e:	79fb      	ldrb	r3, [r7, #7]
 8014aa0:	4413      	add	r3, r2
 8014aa2:	b2db      	uxtb	r3, r3
 8014aa4:	3330      	adds	r3, #48	; 0x30
 8014aa6:	b2da      	uxtb	r2, r3
 8014aa8:	4b87      	ldr	r3, [pc, #540]	; (8014cc8 <ce303_tarif+0x514>)
 8014aaa:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x21;
 8014aac:	4b86      	ldr	r3, [pc, #536]	; (8014cc8 <ce303_tarif+0x514>)
 8014aae:	2221      	movs	r2, #33	; 0x21
 8014ab0:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0D;
 8014ab2:	4b85      	ldr	r3, [pc, #532]	; (8014cc8 <ce303_tarif+0x514>)
 8014ab4:	220d      	movs	r2, #13
 8014ab6:	715a      	strb	r2, [r3, #5]
		start_buf[6] = 0x0A;
 8014ab8:	4b83      	ldr	r3, [pc, #524]	; (8014cc8 <ce303_tarif+0x514>)
 8014aba:	220a      	movs	r2, #10
 8014abc:	719a      	strb	r2, [r3, #6]

		meter_rx_number = 0;
 8014abe:	4b84      	ldr	r3, [pc, #528]	; (8014cd0 <ce303_tarif+0x51c>)
 8014ac0:	2200      	movs	r2, #0
 8014ac2:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8014ac4:	f7fb ff7a 	bl	80109bc <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8014ac8:	2201      	movs	r2, #1
 8014aca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014ace:	4881      	ldr	r0, [pc, #516]	; (8014cd4 <ce303_tarif+0x520>)
 8014ad0:	f7ef f9c6 	bl	8003e60 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 7); // передаем команду
 8014ad4:	2207      	movs	r2, #7
 8014ad6:	497c      	ldr	r1, [pc, #496]	; (8014cc8 <ce303_tarif+0x514>)
 8014ad8:	487f      	ldr	r0, [pc, #508]	; (8014cd8 <ce303_tarif+0x524>)
 8014ada:	f7f2 fcdf 	bl	800749c <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 8014ade:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014ae2:	f7ed fdfd 	bl	80026e0 <HAL_Delay>
 8014ae6:	e02a      	b.n	8014b3e <ce303_tarif+0x38a>

	}
	else if( (meter_id>=0)&&(meter_id<10) )
 8014ae8:	79fb      	ldrb	r3, [r7, #7]
 8014aea:	2b09      	cmp	r3, #9
 8014aec:	d827      	bhi.n	8014b3e <ce303_tarif+0x38a>
	{
		start_buf[0] = 0x2F;
 8014aee:	4b76      	ldr	r3, [pc, #472]	; (8014cc8 <ce303_tarif+0x514>)
 8014af0:	222f      	movs	r2, #47	; 0x2f
 8014af2:	701a      	strb	r2, [r3, #0]
		start_buf[1] = 0x3F;
 8014af4:	4b74      	ldr	r3, [pc, #464]	; (8014cc8 <ce303_tarif+0x514>)
 8014af6:	223f      	movs	r2, #63	; 0x3f
 8014af8:	705a      	strb	r2, [r3, #1]
		start_buf[2] = meter_id + 0x30;
 8014afa:	79fb      	ldrb	r3, [r7, #7]
 8014afc:	3330      	adds	r3, #48	; 0x30
 8014afe:	b2da      	uxtb	r2, r3
 8014b00:	4b71      	ldr	r3, [pc, #452]	; (8014cc8 <ce303_tarif+0x514>)
 8014b02:	709a      	strb	r2, [r3, #2]
		start_buf[3] = 0x21;
 8014b04:	4b70      	ldr	r3, [pc, #448]	; (8014cc8 <ce303_tarif+0x514>)
 8014b06:	2221      	movs	r2, #33	; 0x21
 8014b08:	70da      	strb	r2, [r3, #3]
		start_buf[4] = 0x0D;
 8014b0a:	4b6f      	ldr	r3, [pc, #444]	; (8014cc8 <ce303_tarif+0x514>)
 8014b0c:	220d      	movs	r2, #13
 8014b0e:	711a      	strb	r2, [r3, #4]
		start_buf[5] = 0x0A;
 8014b10:	4b6d      	ldr	r3, [pc, #436]	; (8014cc8 <ce303_tarif+0x514>)
 8014b12:	220a      	movs	r2, #10
 8014b14:	715a      	strb	r2, [r3, #5]

		meter_rx_number = 0;
 8014b16:	4b6e      	ldr	r3, [pc, #440]	; (8014cd0 <ce303_tarif+0x51c>)
 8014b18:	2200      	movs	r2, #0
 8014b1a:	701a      	strb	r2, [r3, #0]
		meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8014b1c:	f7fb ff4e 	bl	80109bc <meter_rx_buffer_clear>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8014b20:	2201      	movs	r2, #1
 8014b22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014b26:	486b      	ldr	r0, [pc, #428]	; (8014cd4 <ce303_tarif+0x520>)
 8014b28:	f7ef f99a 	bl	8003e60 <HAL_GPIO_WritePin>
		HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 6); // передаем команду
 8014b2c:	2206      	movs	r2, #6
 8014b2e:	4966      	ldr	r1, [pc, #408]	; (8014cc8 <ce303_tarif+0x514>)
 8014b30:	4869      	ldr	r0, [pc, #420]	; (8014cd8 <ce303_tarif+0x524>)
 8014b32:	f7f2 fcb3 	bl	800749c <HAL_UART_Transmit_DMA>
		HAL_Delay(1000); // ждем
 8014b36:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014b3a:	f7ed fdd1 	bl	80026e0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
	HAL_UART_Transmit_DMA(&huart6, &start_buf[0], 6); // передаем команду
	HAL_Delay(1000); // ждем
	*/

	meter_rx_number = 0;
 8014b3e:	4b64      	ldr	r3, [pc, #400]	; (8014cd0 <ce303_tarif+0x51c>)
 8014b40:	2200      	movs	r2, #0
 8014b42:	701a      	strb	r2, [r3, #0]
	meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8014b44:	f7fb ff3a 	bl	80109bc <meter_rx_buffer_clear>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8014b48:	2201      	movs	r2, #1
 8014b4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014b4e:	4861      	ldr	r0, [pc, #388]	; (8014cd4 <ce303_tarif+0x520>)
 8014b50:	f7ef f986 	bl	8003e60 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart6, &password_buf[0], 6); // передаем команду
 8014b54:	2206      	movs	r2, #6
 8014b56:	4961      	ldr	r1, [pc, #388]	; (8014cdc <ce303_tarif+0x528>)
 8014b58:	485f      	ldr	r0, [pc, #380]	; (8014cd8 <ce303_tarif+0x524>)
 8014b5a:	f7f2 fc9f 	bl	800749c <HAL_UART_Transmit_DMA>
	HAL_Delay(1000);
 8014b5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014b62:	f7ed fdbd 	bl	80026e0 <HAL_Delay>

	meter_rx_number = 0;
 8014b66:	4b5a      	ldr	r3, [pc, #360]	; (8014cd0 <ce303_tarif+0x51c>)
 8014b68:	2200      	movs	r2, #0
 8014b6a:	701a      	strb	r2, [r3, #0]
	meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8014b6c:	f7fb ff26 	bl	80109bc <meter_rx_buffer_clear>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8014b70:	2201      	movs	r2, #1
 8014b72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8014b76:	4857      	ldr	r0, [pc, #348]	; (8014cd4 <ce303_tarif+0x520>)
 8014b78:	f7ef f972 	bl	8003e60 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart6, &tarif_buf[0], 13); // передаем команду
 8014b7c:	220d      	movs	r2, #13
 8014b7e:	4958      	ldr	r1, [pc, #352]	; (8014ce0 <ce303_tarif+0x52c>)
 8014b80:	4855      	ldr	r0, [pc, #340]	; (8014cd8 <ce303_tarif+0x524>)
 8014b82:	f7f2 fc8b 	bl	800749c <HAL_UART_Transmit_DMA>
	HAL_Delay(1000);
 8014b86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8014b8a:	f7ed fda9 	bl	80026e0 <HAL_Delay>

	tarif_general_state = 0; // обнуляем переменные состояния прочтения мощщности перед их прочтением
 8014b8e:	2300      	movs	r3, #0
 8014b90:	757b      	strb	r3, [r7, #21]
	tarif_1_state = 0;
 8014b92:	2300      	movs	r3, #0
 8014b94:	753b      	strb	r3, [r7, #20]
	tarif_2_state = 0;
 8014b96:	2300      	movs	r3, #0
 8014b98:	74fb      	strb	r3, [r7, #19]
	tarif_3_state = 0;
 8014b9a:	2300      	movs	r3, #0
 8014b9c:	74bb      	strb	r3, [r7, #18]
	tarif_4_state = 0;
 8014b9e:	2300      	movs	r3, #0
 8014ba0:	73fb      	strb	r3, [r7, #15]
	tarif_5_state = 0;
 8014ba2:	2300      	movs	r3, #0
 8014ba4:	73bb      	strb	r3, [r7, #14]

	for(uint16_t i=0; i<256; i++)
 8014ba6:	2300      	movs	r3, #0
 8014ba8:	823b      	strh	r3, [r7, #16]
 8014baa:	f002 b814 	b.w	8016bd6 <ce303_tarif+0x2422>
	{
		if( (meter_rx_buffer[i] == 0x28) && (tarif_general_state==0) && (tarif_1_state==0) && (tarif_2_state==0) && (tarif_3_state==0) && (tarif_4_state==0) && (tarif_5_state==0) ) // 0х28 означает символ "(" в ASCII таблице
 8014bae:	8a3b      	ldrh	r3, [r7, #16]
 8014bb0:	4a4c      	ldr	r2, [pc, #304]	; (8014ce4 <ce303_tarif+0x530>)
 8014bb2:	5cd3      	ldrb	r3, [r2, r3]
 8014bb4:	2b28      	cmp	r3, #40	; 0x28
 8014bb6:	f040 8400 	bne.w	80153ba <ce303_tarif+0xc06>
 8014bba:	7d7b      	ldrb	r3, [r7, #21]
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	f040 83fc 	bne.w	80153ba <ce303_tarif+0xc06>
 8014bc2:	7d3b      	ldrb	r3, [r7, #20]
 8014bc4:	2b00      	cmp	r3, #0
 8014bc6:	f040 83f8 	bne.w	80153ba <ce303_tarif+0xc06>
 8014bca:	7cfb      	ldrb	r3, [r7, #19]
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	f040 83f4 	bne.w	80153ba <ce303_tarif+0xc06>
 8014bd2:	7cbb      	ldrb	r3, [r7, #18]
 8014bd4:	2b00      	cmp	r3, #0
 8014bd6:	f040 83f0 	bne.w	80153ba <ce303_tarif+0xc06>
 8014bda:	7bfb      	ldrb	r3, [r7, #15]
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	f040 83ec 	bne.w	80153ba <ce303_tarif+0xc06>
 8014be2:	7bbb      	ldrb	r3, [r7, #14]
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	f040 83e8 	bne.w	80153ba <ce303_tarif+0xc06>
		{
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 8014bea:	8a3b      	ldrh	r3, [r7, #16]
 8014bec:	3302      	adds	r3, #2
 8014bee:	4a3d      	ldr	r2, [pc, #244]	; (8014ce4 <ce303_tarif+0x530>)
 8014bf0:	5cd3      	ldrb	r3, [r2, r3]
 8014bf2:	2b2e      	cmp	r3, #46	; 0x2e
 8014bf4:	f040 80ec 	bne.w	8014dd0 <ce303_tarif+0x61c>
			{
				temp = (uint32_t)(meter_rx_buffer[i+1]-0x30);
 8014bf8:	8a3b      	ldrh	r3, [r7, #16]
 8014bfa:	3301      	adds	r3, #1
 8014bfc:	4a39      	ldr	r2, [pc, #228]	; (8014ce4 <ce303_tarif+0x530>)
 8014bfe:	5cd3      	ldrb	r3, [r2, r3]
 8014c00:	3b30      	subs	r3, #48	; 0x30
 8014c02:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+4] == 0x29 ) // если 1 разряд после запятой
 8014c04:	8a3b      	ldrh	r3, [r7, #16]
 8014c06:	3304      	adds	r3, #4
 8014c08:	4a36      	ldr	r2, [pc, #216]	; (8014ce4 <ce303_tarif+0x530>)
 8014c0a:	5cd3      	ldrb	r3, [r2, r3]
 8014c0c:	2b29      	cmp	r3, #41	; 0x29
 8014c0e:	d110      	bne.n	8014c32 <ce303_tarif+0x47e>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+3])-0x30)*100;
 8014c10:	8a3b      	ldrh	r3, [r7, #16]
 8014c12:	3303      	adds	r3, #3
 8014c14:	4a33      	ldr	r2, [pc, #204]	; (8014ce4 <ce303_tarif+0x530>)
 8014c16:	5cd3      	ldrb	r3, [r2, r3]
 8014c18:	3b30      	subs	r3, #48	; 0x30
 8014c1a:	b29b      	uxth	r3, r3
 8014c1c:	461a      	mov	r2, r3
 8014c1e:	0092      	lsls	r2, r2, #2
 8014c20:	4413      	add	r3, r2
 8014c22:	461a      	mov	r2, r3
 8014c24:	0091      	lsls	r1, r2, #2
 8014c26:	461a      	mov	r2, r3
 8014c28:	460b      	mov	r3, r1
 8014c2a:	4413      	add	r3, r2
 8014c2c:	009b      	lsls	r3, r3, #2
 8014c2e:	82fb      	strh	r3, [r7, #22]
 8014c30:	e080      	b.n	8014d34 <ce303_tarif+0x580>
				}
				else if( meter_rx_buffer[i+5] == 0x29 ) // если 2 разряда после запятой
 8014c32:	8a3b      	ldrh	r3, [r7, #16]
 8014c34:	3305      	adds	r3, #5
 8014c36:	4a2b      	ldr	r2, [pc, #172]	; (8014ce4 <ce303_tarif+0x530>)
 8014c38:	5cd3      	ldrb	r3, [r2, r3]
 8014c3a:	2b29      	cmp	r3, #41	; 0x29
 8014c3c:	d117      	bne.n	8014c6e <ce303_tarif+0x4ba>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30))*10;
 8014c3e:	8a3b      	ldrh	r3, [r7, #16]
 8014c40:	3303      	adds	r3, #3
 8014c42:	4a28      	ldr	r2, [pc, #160]	; (8014ce4 <ce303_tarif+0x530>)
 8014c44:	5cd3      	ldrb	r3, [r2, r3]
 8014c46:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8014c4a:	4613      	mov	r3, r2
 8014c4c:	009b      	lsls	r3, r3, #2
 8014c4e:	4413      	add	r3, r2
 8014c50:	005b      	lsls	r3, r3, #1
 8014c52:	4619      	mov	r1, r3
 8014c54:	8a3b      	ldrh	r3, [r7, #16]
 8014c56:	3304      	adds	r3, #4
 8014c58:	4a22      	ldr	r2, [pc, #136]	; (8014ce4 <ce303_tarif+0x530>)
 8014c5a:	5cd3      	ldrb	r3, [r2, r3]
 8014c5c:	3b30      	subs	r3, #48	; 0x30
 8014c5e:	440b      	add	r3, r1
 8014c60:	b29b      	uxth	r3, r3
 8014c62:	461a      	mov	r2, r3
 8014c64:	0092      	lsls	r2, r2, #2
 8014c66:	4413      	add	r3, r2
 8014c68:	005b      	lsls	r3, r3, #1
 8014c6a:	82fb      	strh	r3, [r7, #22]
 8014c6c:	e062      	b.n	8014d34 <ce303_tarif+0x580>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 3 разряда после запятой
 8014c6e:	8a3b      	ldrh	r3, [r7, #16]
 8014c70:	3306      	adds	r3, #6
 8014c72:	4a1c      	ldr	r2, [pc, #112]	; (8014ce4 <ce303_tarif+0x530>)
 8014c74:	5cd3      	ldrb	r3, [r2, r3]
 8014c76:	2b29      	cmp	r3, #41	; 0x29
 8014c78:	d136      	bne.n	8014ce8 <ce303_tarif+0x534>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 8014c7a:	8a3b      	ldrh	r3, [r7, #16]
 8014c7c:	3303      	adds	r3, #3
 8014c7e:	4a19      	ldr	r2, [pc, #100]	; (8014ce4 <ce303_tarif+0x530>)
 8014c80:	5cd3      	ldrb	r3, [r2, r3]
 8014c82:	3b30      	subs	r3, #48	; 0x30
 8014c84:	b29b      	uxth	r3, r3
 8014c86:	461a      	mov	r2, r3
 8014c88:	0092      	lsls	r2, r2, #2
 8014c8a:	4413      	add	r3, r2
 8014c8c:	461a      	mov	r2, r3
 8014c8e:	0091      	lsls	r1, r2, #2
 8014c90:	461a      	mov	r2, r3
 8014c92:	460b      	mov	r3, r1
 8014c94:	4413      	add	r3, r2
 8014c96:	009b      	lsls	r3, r3, #2
 8014c98:	b29a      	uxth	r2, r3
 8014c9a:	8a3b      	ldrh	r3, [r7, #16]
 8014c9c:	3304      	adds	r3, #4
 8014c9e:	4911      	ldr	r1, [pc, #68]	; (8014ce4 <ce303_tarif+0x530>)
 8014ca0:	5ccb      	ldrb	r3, [r1, r3]
 8014ca2:	3b30      	subs	r3, #48	; 0x30
 8014ca4:	b29b      	uxth	r3, r3
 8014ca6:	4619      	mov	r1, r3
 8014ca8:	0089      	lsls	r1, r1, #2
 8014caa:	440b      	add	r3, r1
 8014cac:	005b      	lsls	r3, r3, #1
 8014cae:	b29b      	uxth	r3, r3
 8014cb0:	4413      	add	r3, r2
 8014cb2:	b29a      	uxth	r2, r3
 8014cb4:	8a3b      	ldrh	r3, [r7, #16]
 8014cb6:	3305      	adds	r3, #5
 8014cb8:	490a      	ldr	r1, [pc, #40]	; (8014ce4 <ce303_tarif+0x530>)
 8014cba:	5ccb      	ldrb	r3, [r1, r3]
 8014cbc:	b29b      	uxth	r3, r3
 8014cbe:	4413      	add	r3, r2
 8014cc0:	b29b      	uxth	r3, r3
 8014cc2:	3b30      	subs	r3, #48	; 0x30
 8014cc4:	82fb      	strh	r3, [r7, #22]
 8014cc6:	e035      	b.n	8014d34 <ce303_tarif+0x580>
 8014cc8:	20000014 	.word	0x20000014
 8014ccc:	cccccccd 	.word	0xcccccccd
 8014cd0:	20000865 	.word	0x20000865
 8014cd4:	40021800 	.word	0x40021800
 8014cd8:	20009d00 	.word	0x20009d00
 8014cdc:	2000001c 	.word	0x2000001c
 8014ce0:	2000005c 	.word	0x2000005c
 8014ce4:	2000994c 	.word	0x2000994c
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 8014ce8:	8a3b      	ldrh	r3, [r7, #16]
 8014cea:	3303      	adds	r3, #3
 8014cec:	4ab0      	ldr	r2, [pc, #704]	; (8014fb0 <ce303_tarif+0x7fc>)
 8014cee:	5cd3      	ldrb	r3, [r2, r3]
 8014cf0:	3b30      	subs	r3, #48	; 0x30
 8014cf2:	b29b      	uxth	r3, r3
 8014cf4:	461a      	mov	r2, r3
 8014cf6:	0092      	lsls	r2, r2, #2
 8014cf8:	4413      	add	r3, r2
 8014cfa:	461a      	mov	r2, r3
 8014cfc:	0091      	lsls	r1, r2, #2
 8014cfe:	461a      	mov	r2, r3
 8014d00:	460b      	mov	r3, r1
 8014d02:	4413      	add	r3, r2
 8014d04:	009b      	lsls	r3, r3, #2
 8014d06:	b29a      	uxth	r2, r3
 8014d08:	8a3b      	ldrh	r3, [r7, #16]
 8014d0a:	3304      	adds	r3, #4
 8014d0c:	49a8      	ldr	r1, [pc, #672]	; (8014fb0 <ce303_tarif+0x7fc>)
 8014d0e:	5ccb      	ldrb	r3, [r1, r3]
 8014d10:	3b30      	subs	r3, #48	; 0x30
 8014d12:	b29b      	uxth	r3, r3
 8014d14:	4619      	mov	r1, r3
 8014d16:	0089      	lsls	r1, r1, #2
 8014d18:	440b      	add	r3, r1
 8014d1a:	005b      	lsls	r3, r3, #1
 8014d1c:	b29b      	uxth	r3, r3
 8014d1e:	4413      	add	r3, r2
 8014d20:	b29a      	uxth	r2, r3
 8014d22:	8a3b      	ldrh	r3, [r7, #16]
 8014d24:	3305      	adds	r3, #5
 8014d26:	49a2      	ldr	r1, [pc, #648]	; (8014fb0 <ce303_tarif+0x7fc>)
 8014d28:	5ccb      	ldrb	r3, [r1, r3]
 8014d2a:	b29b      	uxth	r3, r3
 8014d2c:	4413      	add	r3, r2
 8014d2e:	b29b      	uxth	r3, r3
 8014d30:	3b30      	subs	r3, #48	; 0x30
 8014d32:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8014d34:	4b9f      	ldr	r3, [pc, #636]	; (8014fb4 <ce303_tarif+0x800>)
 8014d36:	681b      	ldr	r3, [r3, #0]
 8014d38:	f04f 31ff 	mov.w	r1, #4294967295
 8014d3c:	4618      	mov	r0, r3
 8014d3e:	f7f3 fded 	bl	800891c <osMutexWait>
				fm25v02_write(2*CE_303_TOTAL_POWER_H_REG, ((uint8_t)(temp>>24)) );
 8014d42:	68bb      	ldr	r3, [r7, #8]
 8014d44:	0e1b      	lsrs	r3, r3, #24
 8014d46:	b2db      	uxtb	r3, r3
 8014d48:	4619      	mov	r1, r3
 8014d4a:	f242 0082 	movw	r0, #8322	; 0x2082
 8014d4e:	f001 ffa7 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 8014d52:	68bb      	ldr	r3, [r7, #8]
 8014d54:	0c1b      	lsrs	r3, r3, #16
 8014d56:	b2db      	uxtb	r3, r3
 8014d58:	4619      	mov	r1, r3
 8014d5a:	f242 0083 	movw	r0, #8323	; 0x2083
 8014d5e:	f001 ff9f 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_L_REG, ((uint8_t)(temp>>8)) );
 8014d62:	68bb      	ldr	r3, [r7, #8]
 8014d64:	0a1b      	lsrs	r3, r3, #8
 8014d66:	b2db      	uxtb	r3, r3
 8014d68:	4619      	mov	r1, r3
 8014d6a:	f242 0084 	movw	r0, #8324	; 0x2084
 8014d6e:	f001 ff97 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_L_REG+1, ((uint8_t)temp) );
 8014d72:	68bb      	ldr	r3, [r7, #8]
 8014d74:	b2db      	uxtb	r3, r3
 8014d76:	4619      	mov	r1, r3
 8014d78:	f242 0085 	movw	r0, #8325	; 0x2085
 8014d7c:	f001 ff90 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_M_REG, ((uint8_t)(temp_mil>>8)) );
 8014d80:	8afb      	ldrh	r3, [r7, #22]
 8014d82:	0a1b      	lsrs	r3, r3, #8
 8014d84:	b29b      	uxth	r3, r3
 8014d86:	b2db      	uxtb	r3, r3
 8014d88:	4619      	mov	r1, r3
 8014d8a:	f242 0086 	movw	r0, #8326	; 0x2086
 8014d8e:	f001 ff87 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_M_REG+1, ((uint8_t)(temp_mil)) );
 8014d92:	8afb      	ldrh	r3, [r7, #22]
 8014d94:	b2db      	uxtb	r3, r3
 8014d96:	4619      	mov	r1, r3
 8014d98:	f242 0087 	movw	r0, #8327	; 0x2087
 8014d9c:	f001 ff80 	bl	8016ca0 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8014da0:	4b84      	ldr	r3, [pc, #528]	; (8014fb4 <ce303_tarif+0x800>)
 8014da2:	681b      	ldr	r3, [r3, #0]
 8014da4:	4618      	mov	r0, r3
 8014da6:	f7f3 fe07 	bl	80089b8 <osMutexRelease>
				status_registers.ce303_total_power_h_reg = (uint16_t)(temp>>16);
 8014daa:	68bb      	ldr	r3, [r7, #8]
 8014dac:	0c1b      	lsrs	r3, r3, #16
 8014dae:	b29a      	uxth	r2, r3
 8014db0:	4b81      	ldr	r3, [pc, #516]	; (8014fb8 <ce303_tarif+0x804>)
 8014db2:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
				status_registers.ce303_total_power_l_reg = (uint16_t)temp;
 8014db6:	68bb      	ldr	r3, [r7, #8]
 8014db8:	b29a      	uxth	r2, r3
 8014dba:	4b7f      	ldr	r3, [pc, #508]	; (8014fb8 <ce303_tarif+0x804>)
 8014dbc:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
				status_registers.ce303_total_power_m_reg =  temp_mil;
 8014dc0:	4a7d      	ldr	r2, [pc, #500]	; (8014fb8 <ce303_tarif+0x804>)
 8014dc2:	8afb      	ldrh	r3, [r7, #22]
 8014dc4:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
				tarif_general_state = 1;
 8014dc8:	2301      	movs	r3, #1
 8014dca:	757b      	strb	r3, [r7, #21]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 8014dcc:	f001 befb 	b.w	8016bc6 <ce303_tarif+0x2412>

			}

			else if( meter_rx_buffer[i+3] == 0x2E) // 2 цифры перед запятой
 8014dd0:	8a3b      	ldrh	r3, [r7, #16]
 8014dd2:	3303      	adds	r3, #3
 8014dd4:	4a76      	ldr	r2, [pc, #472]	; (8014fb0 <ce303_tarif+0x7fc>)
 8014dd6:	5cd3      	ldrb	r3, [r2, r3]
 8014dd8:	2b2e      	cmp	r3, #46	; 0x2e
 8014dda:	f040 80ef 	bne.w	8014fbc <ce303_tarif+0x808>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+2])-0x30);
 8014dde:	8a3b      	ldrh	r3, [r7, #16]
 8014de0:	3301      	adds	r3, #1
 8014de2:	4a73      	ldr	r2, [pc, #460]	; (8014fb0 <ce303_tarif+0x7fc>)
 8014de4:	5cd3      	ldrb	r3, [r2, r3]
 8014de6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8014dea:	4613      	mov	r3, r2
 8014dec:	009b      	lsls	r3, r3, #2
 8014dee:	4413      	add	r3, r2
 8014df0:	005b      	lsls	r3, r3, #1
 8014df2:	4619      	mov	r1, r3
 8014df4:	8a3b      	ldrh	r3, [r7, #16]
 8014df6:	3302      	adds	r3, #2
 8014df8:	4a6d      	ldr	r2, [pc, #436]	; (8014fb0 <ce303_tarif+0x7fc>)
 8014dfa:	5cd3      	ldrb	r3, [r2, r3]
 8014dfc:	3b30      	subs	r3, #48	; 0x30
 8014dfe:	440b      	add	r3, r1
 8014e00:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+5] == 0x29 ) // если 1 разряд после запятой
 8014e02:	8a3b      	ldrh	r3, [r7, #16]
 8014e04:	3305      	adds	r3, #5
 8014e06:	4a6a      	ldr	r2, [pc, #424]	; (8014fb0 <ce303_tarif+0x7fc>)
 8014e08:	5cd3      	ldrb	r3, [r2, r3]
 8014e0a:	2b29      	cmp	r3, #41	; 0x29
 8014e0c:	d110      	bne.n	8014e30 <ce303_tarif+0x67c>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+4])-0x30)*100;
 8014e0e:	8a3b      	ldrh	r3, [r7, #16]
 8014e10:	3304      	adds	r3, #4
 8014e12:	4a67      	ldr	r2, [pc, #412]	; (8014fb0 <ce303_tarif+0x7fc>)
 8014e14:	5cd3      	ldrb	r3, [r2, r3]
 8014e16:	3b30      	subs	r3, #48	; 0x30
 8014e18:	b29b      	uxth	r3, r3
 8014e1a:	461a      	mov	r2, r3
 8014e1c:	0092      	lsls	r2, r2, #2
 8014e1e:	4413      	add	r3, r2
 8014e20:	461a      	mov	r2, r3
 8014e22:	0091      	lsls	r1, r2, #2
 8014e24:	461a      	mov	r2, r3
 8014e26:	460b      	mov	r3, r1
 8014e28:	4413      	add	r3, r2
 8014e2a:	009b      	lsls	r3, r3, #2
 8014e2c:	82fb      	strh	r3, [r7, #22]
 8014e2e:	e070      	b.n	8014f12 <ce303_tarif+0x75e>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 2 разряда после запятой
 8014e30:	8a3b      	ldrh	r3, [r7, #16]
 8014e32:	3306      	adds	r3, #6
 8014e34:	4a5e      	ldr	r2, [pc, #376]	; (8014fb0 <ce303_tarif+0x7fc>)
 8014e36:	5cd3      	ldrb	r3, [r2, r3]
 8014e38:	2b29      	cmp	r3, #41	; 0x29
 8014e3a:	d117      	bne.n	8014e6c <ce303_tarif+0x6b8>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30))*10;
 8014e3c:	8a3b      	ldrh	r3, [r7, #16]
 8014e3e:	3304      	adds	r3, #4
 8014e40:	4a5b      	ldr	r2, [pc, #364]	; (8014fb0 <ce303_tarif+0x7fc>)
 8014e42:	5cd3      	ldrb	r3, [r2, r3]
 8014e44:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8014e48:	4613      	mov	r3, r2
 8014e4a:	009b      	lsls	r3, r3, #2
 8014e4c:	4413      	add	r3, r2
 8014e4e:	005b      	lsls	r3, r3, #1
 8014e50:	4619      	mov	r1, r3
 8014e52:	8a3b      	ldrh	r3, [r7, #16]
 8014e54:	3305      	adds	r3, #5
 8014e56:	4a56      	ldr	r2, [pc, #344]	; (8014fb0 <ce303_tarif+0x7fc>)
 8014e58:	5cd3      	ldrb	r3, [r2, r3]
 8014e5a:	3b30      	subs	r3, #48	; 0x30
 8014e5c:	440b      	add	r3, r1
 8014e5e:	b29b      	uxth	r3, r3
 8014e60:	461a      	mov	r2, r3
 8014e62:	0092      	lsls	r2, r2, #2
 8014e64:	4413      	add	r3, r2
 8014e66:	005b      	lsls	r3, r3, #1
 8014e68:	82fb      	strh	r3, [r7, #22]
 8014e6a:	e052      	b.n	8014f12 <ce303_tarif+0x75e>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 3 разряда после запятой
 8014e6c:	8a3b      	ldrh	r3, [r7, #16]
 8014e6e:	3307      	adds	r3, #7
 8014e70:	4a4f      	ldr	r2, [pc, #316]	; (8014fb0 <ce303_tarif+0x7fc>)
 8014e72:	5cd3      	ldrb	r3, [r2, r3]
 8014e74:	2b29      	cmp	r3, #41	; 0x29
 8014e76:	d126      	bne.n	8014ec6 <ce303_tarif+0x712>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 8014e78:	8a3b      	ldrh	r3, [r7, #16]
 8014e7a:	3304      	adds	r3, #4
 8014e7c:	4a4c      	ldr	r2, [pc, #304]	; (8014fb0 <ce303_tarif+0x7fc>)
 8014e7e:	5cd3      	ldrb	r3, [r2, r3]
 8014e80:	3b30      	subs	r3, #48	; 0x30
 8014e82:	b29b      	uxth	r3, r3
 8014e84:	461a      	mov	r2, r3
 8014e86:	0092      	lsls	r2, r2, #2
 8014e88:	4413      	add	r3, r2
 8014e8a:	461a      	mov	r2, r3
 8014e8c:	0091      	lsls	r1, r2, #2
 8014e8e:	461a      	mov	r2, r3
 8014e90:	460b      	mov	r3, r1
 8014e92:	4413      	add	r3, r2
 8014e94:	009b      	lsls	r3, r3, #2
 8014e96:	b29a      	uxth	r2, r3
 8014e98:	8a3b      	ldrh	r3, [r7, #16]
 8014e9a:	3305      	adds	r3, #5
 8014e9c:	4944      	ldr	r1, [pc, #272]	; (8014fb0 <ce303_tarif+0x7fc>)
 8014e9e:	5ccb      	ldrb	r3, [r1, r3]
 8014ea0:	3b30      	subs	r3, #48	; 0x30
 8014ea2:	b29b      	uxth	r3, r3
 8014ea4:	4619      	mov	r1, r3
 8014ea6:	0089      	lsls	r1, r1, #2
 8014ea8:	440b      	add	r3, r1
 8014eaa:	005b      	lsls	r3, r3, #1
 8014eac:	b29b      	uxth	r3, r3
 8014eae:	4413      	add	r3, r2
 8014eb0:	b29a      	uxth	r2, r3
 8014eb2:	8a3b      	ldrh	r3, [r7, #16]
 8014eb4:	3306      	adds	r3, #6
 8014eb6:	493e      	ldr	r1, [pc, #248]	; (8014fb0 <ce303_tarif+0x7fc>)
 8014eb8:	5ccb      	ldrb	r3, [r1, r3]
 8014eba:	b29b      	uxth	r3, r3
 8014ebc:	4413      	add	r3, r2
 8014ebe:	b29b      	uxth	r3, r3
 8014ec0:	3b30      	subs	r3, #48	; 0x30
 8014ec2:	82fb      	strh	r3, [r7, #22]
 8014ec4:	e025      	b.n	8014f12 <ce303_tarif+0x75e>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 8014ec6:	8a3b      	ldrh	r3, [r7, #16]
 8014ec8:	3304      	adds	r3, #4
 8014eca:	4a39      	ldr	r2, [pc, #228]	; (8014fb0 <ce303_tarif+0x7fc>)
 8014ecc:	5cd3      	ldrb	r3, [r2, r3]
 8014ece:	3b30      	subs	r3, #48	; 0x30
 8014ed0:	b29b      	uxth	r3, r3
 8014ed2:	461a      	mov	r2, r3
 8014ed4:	0092      	lsls	r2, r2, #2
 8014ed6:	4413      	add	r3, r2
 8014ed8:	461a      	mov	r2, r3
 8014eda:	0091      	lsls	r1, r2, #2
 8014edc:	461a      	mov	r2, r3
 8014ede:	460b      	mov	r3, r1
 8014ee0:	4413      	add	r3, r2
 8014ee2:	009b      	lsls	r3, r3, #2
 8014ee4:	b29a      	uxth	r2, r3
 8014ee6:	8a3b      	ldrh	r3, [r7, #16]
 8014ee8:	3305      	adds	r3, #5
 8014eea:	4931      	ldr	r1, [pc, #196]	; (8014fb0 <ce303_tarif+0x7fc>)
 8014eec:	5ccb      	ldrb	r3, [r1, r3]
 8014eee:	3b30      	subs	r3, #48	; 0x30
 8014ef0:	b29b      	uxth	r3, r3
 8014ef2:	4619      	mov	r1, r3
 8014ef4:	0089      	lsls	r1, r1, #2
 8014ef6:	440b      	add	r3, r1
 8014ef8:	005b      	lsls	r3, r3, #1
 8014efa:	b29b      	uxth	r3, r3
 8014efc:	4413      	add	r3, r2
 8014efe:	b29a      	uxth	r2, r3
 8014f00:	8a3b      	ldrh	r3, [r7, #16]
 8014f02:	3306      	adds	r3, #6
 8014f04:	492a      	ldr	r1, [pc, #168]	; (8014fb0 <ce303_tarif+0x7fc>)
 8014f06:	5ccb      	ldrb	r3, [r1, r3]
 8014f08:	b29b      	uxth	r3, r3
 8014f0a:	4413      	add	r3, r2
 8014f0c:	b29b      	uxth	r3, r3
 8014f0e:	3b30      	subs	r3, #48	; 0x30
 8014f10:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8014f12:	4b28      	ldr	r3, [pc, #160]	; (8014fb4 <ce303_tarif+0x800>)
 8014f14:	681b      	ldr	r3, [r3, #0]
 8014f16:	f04f 31ff 	mov.w	r1, #4294967295
 8014f1a:	4618      	mov	r0, r3
 8014f1c:	f7f3 fcfe 	bl	800891c <osMutexWait>
				fm25v02_write(2*CE_303_TOTAL_POWER_H_REG, ((uint8_t)(temp>>24)) );
 8014f20:	68bb      	ldr	r3, [r7, #8]
 8014f22:	0e1b      	lsrs	r3, r3, #24
 8014f24:	b2db      	uxtb	r3, r3
 8014f26:	4619      	mov	r1, r3
 8014f28:	f242 0082 	movw	r0, #8322	; 0x2082
 8014f2c:	f001 feb8 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 8014f30:	68bb      	ldr	r3, [r7, #8]
 8014f32:	0c1b      	lsrs	r3, r3, #16
 8014f34:	b2db      	uxtb	r3, r3
 8014f36:	4619      	mov	r1, r3
 8014f38:	f242 0083 	movw	r0, #8323	; 0x2083
 8014f3c:	f001 feb0 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_L_REG, ((uint8_t)(temp>>8)) );
 8014f40:	68bb      	ldr	r3, [r7, #8]
 8014f42:	0a1b      	lsrs	r3, r3, #8
 8014f44:	b2db      	uxtb	r3, r3
 8014f46:	4619      	mov	r1, r3
 8014f48:	f242 0084 	movw	r0, #8324	; 0x2084
 8014f4c:	f001 fea8 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_L_REG+1, ((uint8_t)temp) );
 8014f50:	68bb      	ldr	r3, [r7, #8]
 8014f52:	b2db      	uxtb	r3, r3
 8014f54:	4619      	mov	r1, r3
 8014f56:	f242 0085 	movw	r0, #8325	; 0x2085
 8014f5a:	f001 fea1 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_M_REG, ((uint8_t)(temp_mil>>8)) );
 8014f5e:	8afb      	ldrh	r3, [r7, #22]
 8014f60:	0a1b      	lsrs	r3, r3, #8
 8014f62:	b29b      	uxth	r3, r3
 8014f64:	b2db      	uxtb	r3, r3
 8014f66:	4619      	mov	r1, r3
 8014f68:	f242 0086 	movw	r0, #8326	; 0x2086
 8014f6c:	f001 fe98 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_M_REG+1, ((uint8_t)(temp_mil)) );
 8014f70:	8afb      	ldrh	r3, [r7, #22]
 8014f72:	b2db      	uxtb	r3, r3
 8014f74:	4619      	mov	r1, r3
 8014f76:	f242 0087 	movw	r0, #8327	; 0x2087
 8014f7a:	f001 fe91 	bl	8016ca0 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8014f7e:	4b0d      	ldr	r3, [pc, #52]	; (8014fb4 <ce303_tarif+0x800>)
 8014f80:	681b      	ldr	r3, [r3, #0]
 8014f82:	4618      	mov	r0, r3
 8014f84:	f7f3 fd18 	bl	80089b8 <osMutexRelease>
				status_registers.ce303_total_power_h_reg = (uint16_t)(temp>>16);
 8014f88:	68bb      	ldr	r3, [r7, #8]
 8014f8a:	0c1b      	lsrs	r3, r3, #16
 8014f8c:	b29a      	uxth	r2, r3
 8014f8e:	4b0a      	ldr	r3, [pc, #40]	; (8014fb8 <ce303_tarif+0x804>)
 8014f90:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
				status_registers.ce303_total_power_l_reg = (uint16_t)temp;
 8014f94:	68bb      	ldr	r3, [r7, #8]
 8014f96:	b29a      	uxth	r2, r3
 8014f98:	4b07      	ldr	r3, [pc, #28]	; (8014fb8 <ce303_tarif+0x804>)
 8014f9a:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
				status_registers.ce303_total_power_m_reg =  temp_mil;
 8014f9e:	4a06      	ldr	r2, [pc, #24]	; (8014fb8 <ce303_tarif+0x804>)
 8014fa0:	8afb      	ldrh	r3, [r7, #22]
 8014fa2:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
				tarif_general_state = 1;
 8014fa6:	2301      	movs	r3, #1
 8014fa8:	757b      	strb	r3, [r7, #21]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 8014faa:	f001 be0c 	b.w	8016bc6 <ce303_tarif+0x2412>
 8014fae:	bf00      	nop
 8014fb0:	2000994c 	.word	0x2000994c
 8014fb4:	20009af8 	.word	0x20009af8
 8014fb8:	2000a174 	.word	0x2000a174

			}

			else if( meter_rx_buffer[i+4] == 0x2E) // 3 цифры перед запятой
 8014fbc:	8a3b      	ldrh	r3, [r7, #16]
 8014fbe:	3304      	adds	r3, #4
 8014fc0:	4aaa      	ldr	r2, [pc, #680]	; (801526c <ce303_tarif+0xab8>)
 8014fc2:	5cd3      	ldrb	r3, [r2, r3]
 8014fc4:	2b2e      	cmp	r3, #46	; 0x2e
 8014fc6:	f040 80f0 	bne.w	80151aa <ce303_tarif+0x9f6>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+3])-0x30);
 8014fca:	8a3b      	ldrh	r3, [r7, #16]
 8014fcc:	3301      	adds	r3, #1
 8014fce:	4aa7      	ldr	r2, [pc, #668]	; (801526c <ce303_tarif+0xab8>)
 8014fd0:	5cd3      	ldrb	r3, [r2, r3]
 8014fd2:	3b30      	subs	r3, #48	; 0x30
 8014fd4:	2264      	movs	r2, #100	; 0x64
 8014fd6:	fb02 f103 	mul.w	r1, r2, r3
 8014fda:	8a3b      	ldrh	r3, [r7, #16]
 8014fdc:	3302      	adds	r3, #2
 8014fde:	4aa3      	ldr	r2, [pc, #652]	; (801526c <ce303_tarif+0xab8>)
 8014fe0:	5cd3      	ldrb	r3, [r2, r3]
 8014fe2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8014fe6:	4613      	mov	r3, r2
 8014fe8:	009b      	lsls	r3, r3, #2
 8014fea:	4413      	add	r3, r2
 8014fec:	005b      	lsls	r3, r3, #1
 8014fee:	18ca      	adds	r2, r1, r3
 8014ff0:	8a3b      	ldrh	r3, [r7, #16]
 8014ff2:	3303      	adds	r3, #3
 8014ff4:	499d      	ldr	r1, [pc, #628]	; (801526c <ce303_tarif+0xab8>)
 8014ff6:	5ccb      	ldrb	r3, [r1, r3]
 8014ff8:	3b30      	subs	r3, #48	; 0x30
 8014ffa:	4413      	add	r3, r2
 8014ffc:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+6] == 0x29 ) // если 1 разряд после запятой
 8014ffe:	8a3b      	ldrh	r3, [r7, #16]
 8015000:	3306      	adds	r3, #6
 8015002:	4a9a      	ldr	r2, [pc, #616]	; (801526c <ce303_tarif+0xab8>)
 8015004:	5cd3      	ldrb	r3, [r2, r3]
 8015006:	2b29      	cmp	r3, #41	; 0x29
 8015008:	d110      	bne.n	801502c <ce303_tarif+0x878>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+5])-0x30)*100;
 801500a:	8a3b      	ldrh	r3, [r7, #16]
 801500c:	3305      	adds	r3, #5
 801500e:	4a97      	ldr	r2, [pc, #604]	; (801526c <ce303_tarif+0xab8>)
 8015010:	5cd3      	ldrb	r3, [r2, r3]
 8015012:	3b30      	subs	r3, #48	; 0x30
 8015014:	b29b      	uxth	r3, r3
 8015016:	461a      	mov	r2, r3
 8015018:	0092      	lsls	r2, r2, #2
 801501a:	4413      	add	r3, r2
 801501c:	461a      	mov	r2, r3
 801501e:	0091      	lsls	r1, r2, #2
 8015020:	461a      	mov	r2, r3
 8015022:	460b      	mov	r3, r1
 8015024:	4413      	add	r3, r2
 8015026:	009b      	lsls	r3, r3, #2
 8015028:	82fb      	strh	r3, [r7, #22]
 801502a:	e070      	b.n	801510e <ce303_tarif+0x95a>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 2 разряда после запятой
 801502c:	8a3b      	ldrh	r3, [r7, #16]
 801502e:	3307      	adds	r3, #7
 8015030:	4a8e      	ldr	r2, [pc, #568]	; (801526c <ce303_tarif+0xab8>)
 8015032:	5cd3      	ldrb	r3, [r2, r3]
 8015034:	2b29      	cmp	r3, #41	; 0x29
 8015036:	d117      	bne.n	8015068 <ce303_tarif+0x8b4>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30))*10;
 8015038:	8a3b      	ldrh	r3, [r7, #16]
 801503a:	3305      	adds	r3, #5
 801503c:	4a8b      	ldr	r2, [pc, #556]	; (801526c <ce303_tarif+0xab8>)
 801503e:	5cd3      	ldrb	r3, [r2, r3]
 8015040:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8015044:	4613      	mov	r3, r2
 8015046:	009b      	lsls	r3, r3, #2
 8015048:	4413      	add	r3, r2
 801504a:	005b      	lsls	r3, r3, #1
 801504c:	4619      	mov	r1, r3
 801504e:	8a3b      	ldrh	r3, [r7, #16]
 8015050:	3306      	adds	r3, #6
 8015052:	4a86      	ldr	r2, [pc, #536]	; (801526c <ce303_tarif+0xab8>)
 8015054:	5cd3      	ldrb	r3, [r2, r3]
 8015056:	3b30      	subs	r3, #48	; 0x30
 8015058:	440b      	add	r3, r1
 801505a:	b29b      	uxth	r3, r3
 801505c:	461a      	mov	r2, r3
 801505e:	0092      	lsls	r2, r2, #2
 8015060:	4413      	add	r3, r2
 8015062:	005b      	lsls	r3, r3, #1
 8015064:	82fb      	strh	r3, [r7, #22]
 8015066:	e052      	b.n	801510e <ce303_tarif+0x95a>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 3 разряда после запятой
 8015068:	8a3b      	ldrh	r3, [r7, #16]
 801506a:	3308      	adds	r3, #8
 801506c:	4a7f      	ldr	r2, [pc, #508]	; (801526c <ce303_tarif+0xab8>)
 801506e:	5cd3      	ldrb	r3, [r2, r3]
 8015070:	2b29      	cmp	r3, #41	; 0x29
 8015072:	d126      	bne.n	80150c2 <ce303_tarif+0x90e>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 8015074:	8a3b      	ldrh	r3, [r7, #16]
 8015076:	3305      	adds	r3, #5
 8015078:	4a7c      	ldr	r2, [pc, #496]	; (801526c <ce303_tarif+0xab8>)
 801507a:	5cd3      	ldrb	r3, [r2, r3]
 801507c:	3b30      	subs	r3, #48	; 0x30
 801507e:	b29b      	uxth	r3, r3
 8015080:	461a      	mov	r2, r3
 8015082:	0092      	lsls	r2, r2, #2
 8015084:	4413      	add	r3, r2
 8015086:	461a      	mov	r2, r3
 8015088:	0091      	lsls	r1, r2, #2
 801508a:	461a      	mov	r2, r3
 801508c:	460b      	mov	r3, r1
 801508e:	4413      	add	r3, r2
 8015090:	009b      	lsls	r3, r3, #2
 8015092:	b29a      	uxth	r2, r3
 8015094:	8a3b      	ldrh	r3, [r7, #16]
 8015096:	3306      	adds	r3, #6
 8015098:	4974      	ldr	r1, [pc, #464]	; (801526c <ce303_tarif+0xab8>)
 801509a:	5ccb      	ldrb	r3, [r1, r3]
 801509c:	3b30      	subs	r3, #48	; 0x30
 801509e:	b29b      	uxth	r3, r3
 80150a0:	4619      	mov	r1, r3
 80150a2:	0089      	lsls	r1, r1, #2
 80150a4:	440b      	add	r3, r1
 80150a6:	005b      	lsls	r3, r3, #1
 80150a8:	b29b      	uxth	r3, r3
 80150aa:	4413      	add	r3, r2
 80150ac:	b29a      	uxth	r2, r3
 80150ae:	8a3b      	ldrh	r3, [r7, #16]
 80150b0:	3307      	adds	r3, #7
 80150b2:	496e      	ldr	r1, [pc, #440]	; (801526c <ce303_tarif+0xab8>)
 80150b4:	5ccb      	ldrb	r3, [r1, r3]
 80150b6:	b29b      	uxth	r3, r3
 80150b8:	4413      	add	r3, r2
 80150ba:	b29b      	uxth	r3, r3
 80150bc:	3b30      	subs	r3, #48	; 0x30
 80150be:	82fb      	strh	r3, [r7, #22]
 80150c0:	e025      	b.n	801510e <ce303_tarif+0x95a>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 80150c2:	8a3b      	ldrh	r3, [r7, #16]
 80150c4:	3305      	adds	r3, #5
 80150c6:	4a69      	ldr	r2, [pc, #420]	; (801526c <ce303_tarif+0xab8>)
 80150c8:	5cd3      	ldrb	r3, [r2, r3]
 80150ca:	3b30      	subs	r3, #48	; 0x30
 80150cc:	b29b      	uxth	r3, r3
 80150ce:	461a      	mov	r2, r3
 80150d0:	0092      	lsls	r2, r2, #2
 80150d2:	4413      	add	r3, r2
 80150d4:	461a      	mov	r2, r3
 80150d6:	0091      	lsls	r1, r2, #2
 80150d8:	461a      	mov	r2, r3
 80150da:	460b      	mov	r3, r1
 80150dc:	4413      	add	r3, r2
 80150de:	009b      	lsls	r3, r3, #2
 80150e0:	b29a      	uxth	r2, r3
 80150e2:	8a3b      	ldrh	r3, [r7, #16]
 80150e4:	3306      	adds	r3, #6
 80150e6:	4961      	ldr	r1, [pc, #388]	; (801526c <ce303_tarif+0xab8>)
 80150e8:	5ccb      	ldrb	r3, [r1, r3]
 80150ea:	3b30      	subs	r3, #48	; 0x30
 80150ec:	b29b      	uxth	r3, r3
 80150ee:	4619      	mov	r1, r3
 80150f0:	0089      	lsls	r1, r1, #2
 80150f2:	440b      	add	r3, r1
 80150f4:	005b      	lsls	r3, r3, #1
 80150f6:	b29b      	uxth	r3, r3
 80150f8:	4413      	add	r3, r2
 80150fa:	b29a      	uxth	r2, r3
 80150fc:	8a3b      	ldrh	r3, [r7, #16]
 80150fe:	3307      	adds	r3, #7
 8015100:	495a      	ldr	r1, [pc, #360]	; (801526c <ce303_tarif+0xab8>)
 8015102:	5ccb      	ldrb	r3, [r1, r3]
 8015104:	b29b      	uxth	r3, r3
 8015106:	4413      	add	r3, r2
 8015108:	b29b      	uxth	r3, r3
 801510a:	3b30      	subs	r3, #48	; 0x30
 801510c:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801510e:	4b58      	ldr	r3, [pc, #352]	; (8015270 <ce303_tarif+0xabc>)
 8015110:	681b      	ldr	r3, [r3, #0]
 8015112:	f04f 31ff 	mov.w	r1, #4294967295
 8015116:	4618      	mov	r0, r3
 8015118:	f7f3 fc00 	bl	800891c <osMutexWait>
				fm25v02_write(2*CE_303_TOTAL_POWER_H_REG, ((uint8_t)(temp>>24)) );
 801511c:	68bb      	ldr	r3, [r7, #8]
 801511e:	0e1b      	lsrs	r3, r3, #24
 8015120:	b2db      	uxtb	r3, r3
 8015122:	4619      	mov	r1, r3
 8015124:	f242 0082 	movw	r0, #8322	; 0x2082
 8015128:	f001 fdba 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 801512c:	68bb      	ldr	r3, [r7, #8]
 801512e:	0c1b      	lsrs	r3, r3, #16
 8015130:	b2db      	uxtb	r3, r3
 8015132:	4619      	mov	r1, r3
 8015134:	f242 0083 	movw	r0, #8323	; 0x2083
 8015138:	f001 fdb2 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_L_REG, ((uint8_t)(temp>>8)) );
 801513c:	68bb      	ldr	r3, [r7, #8]
 801513e:	0a1b      	lsrs	r3, r3, #8
 8015140:	b2db      	uxtb	r3, r3
 8015142:	4619      	mov	r1, r3
 8015144:	f242 0084 	movw	r0, #8324	; 0x2084
 8015148:	f001 fdaa 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_L_REG+1, ((uint8_t)temp) );
 801514c:	68bb      	ldr	r3, [r7, #8]
 801514e:	b2db      	uxtb	r3, r3
 8015150:	4619      	mov	r1, r3
 8015152:	f242 0085 	movw	r0, #8325	; 0x2085
 8015156:	f001 fda3 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_M_REG, ((uint8_t)(temp_mil>>8)) );
 801515a:	8afb      	ldrh	r3, [r7, #22]
 801515c:	0a1b      	lsrs	r3, r3, #8
 801515e:	b29b      	uxth	r3, r3
 8015160:	b2db      	uxtb	r3, r3
 8015162:	4619      	mov	r1, r3
 8015164:	f242 0086 	movw	r0, #8326	; 0x2086
 8015168:	f001 fd9a 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_M_REG+1, ((uint8_t)(temp_mil)) );
 801516c:	8afb      	ldrh	r3, [r7, #22]
 801516e:	b2db      	uxtb	r3, r3
 8015170:	4619      	mov	r1, r3
 8015172:	f242 0087 	movw	r0, #8327	; 0x2087
 8015176:	f001 fd93 	bl	8016ca0 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 801517a:	4b3d      	ldr	r3, [pc, #244]	; (8015270 <ce303_tarif+0xabc>)
 801517c:	681b      	ldr	r3, [r3, #0]
 801517e:	4618      	mov	r0, r3
 8015180:	f7f3 fc1a 	bl	80089b8 <osMutexRelease>
				status_registers.ce303_total_power_h_reg = (uint16_t)(temp>>16);
 8015184:	68bb      	ldr	r3, [r7, #8]
 8015186:	0c1b      	lsrs	r3, r3, #16
 8015188:	b29a      	uxth	r2, r3
 801518a:	4b3a      	ldr	r3, [pc, #232]	; (8015274 <ce303_tarif+0xac0>)
 801518c:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
				status_registers.ce303_total_power_l_reg = (uint16_t)temp;
 8015190:	68bb      	ldr	r3, [r7, #8]
 8015192:	b29a      	uxth	r2, r3
 8015194:	4b37      	ldr	r3, [pc, #220]	; (8015274 <ce303_tarif+0xac0>)
 8015196:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
				status_registers.ce303_total_power_m_reg =  temp_mil;
 801519a:	4a36      	ldr	r2, [pc, #216]	; (8015274 <ce303_tarif+0xac0>)
 801519c:	8afb      	ldrh	r3, [r7, #22]
 801519e:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
				tarif_general_state = 1;
 80151a2:	2301      	movs	r3, #1
 80151a4:	757b      	strb	r3, [r7, #21]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 80151a6:	f001 bd0e 	b.w	8016bc6 <ce303_tarif+0x2412>

			}

			else if( meter_rx_buffer[i+5] == 0x2E) // четыре цифры перед запятой
 80151aa:	8a3b      	ldrh	r3, [r7, #16]
 80151ac:	3305      	adds	r3, #5
 80151ae:	4a2f      	ldr	r2, [pc, #188]	; (801526c <ce303_tarif+0xab8>)
 80151b0:	5cd3      	ldrb	r3, [r2, r3]
 80151b2:	2b2e      	cmp	r3, #46	; 0x2e
 80151b4:	f041 8507 	bne.w	8016bc6 <ce303_tarif+0x2412>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30);
 80151b8:	8a3b      	ldrh	r3, [r7, #16]
 80151ba:	3301      	adds	r3, #1
 80151bc:	4a2b      	ldr	r2, [pc, #172]	; (801526c <ce303_tarif+0xab8>)
 80151be:	5cd3      	ldrb	r3, [r2, r3]
 80151c0:	3b30      	subs	r3, #48	; 0x30
 80151c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80151c6:	fb02 f203 	mul.w	r2, r2, r3
 80151ca:	8a3b      	ldrh	r3, [r7, #16]
 80151cc:	3302      	adds	r3, #2
 80151ce:	4927      	ldr	r1, [pc, #156]	; (801526c <ce303_tarif+0xab8>)
 80151d0:	5ccb      	ldrb	r3, [r1, r3]
 80151d2:	3b30      	subs	r3, #48	; 0x30
 80151d4:	2164      	movs	r1, #100	; 0x64
 80151d6:	fb01 f303 	mul.w	r3, r1, r3
 80151da:	18d1      	adds	r1, r2, r3
 80151dc:	8a3b      	ldrh	r3, [r7, #16]
 80151de:	3303      	adds	r3, #3
 80151e0:	4a22      	ldr	r2, [pc, #136]	; (801526c <ce303_tarif+0xab8>)
 80151e2:	5cd3      	ldrb	r3, [r2, r3]
 80151e4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80151e8:	4613      	mov	r3, r2
 80151ea:	009b      	lsls	r3, r3, #2
 80151ec:	4413      	add	r3, r2
 80151ee:	005b      	lsls	r3, r3, #1
 80151f0:	18ca      	adds	r2, r1, r3
 80151f2:	8a3b      	ldrh	r3, [r7, #16]
 80151f4:	3304      	adds	r3, #4
 80151f6:	491d      	ldr	r1, [pc, #116]	; (801526c <ce303_tarif+0xab8>)
 80151f8:	5ccb      	ldrb	r3, [r1, r3]
 80151fa:	3b30      	subs	r3, #48	; 0x30
 80151fc:	4413      	add	r3, r2
 80151fe:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+7] == 0x29 ) // если 1 разряд после запятой
 8015200:	8a3b      	ldrh	r3, [r7, #16]
 8015202:	3307      	adds	r3, #7
 8015204:	4a19      	ldr	r2, [pc, #100]	; (801526c <ce303_tarif+0xab8>)
 8015206:	5cd3      	ldrb	r3, [r2, r3]
 8015208:	2b29      	cmp	r3, #41	; 0x29
 801520a:	d110      	bne.n	801522e <ce303_tarif+0xa7a>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+6])-0x30)*100;
 801520c:	8a3b      	ldrh	r3, [r7, #16]
 801520e:	3306      	adds	r3, #6
 8015210:	4a16      	ldr	r2, [pc, #88]	; (801526c <ce303_tarif+0xab8>)
 8015212:	5cd3      	ldrb	r3, [r2, r3]
 8015214:	3b30      	subs	r3, #48	; 0x30
 8015216:	b29b      	uxth	r3, r3
 8015218:	461a      	mov	r2, r3
 801521a:	0092      	lsls	r2, r2, #2
 801521c:	4413      	add	r3, r2
 801521e:	461a      	mov	r2, r3
 8015220:	0091      	lsls	r1, r2, #2
 8015222:	461a      	mov	r2, r3
 8015224:	460b      	mov	r3, r1
 8015226:	4413      	add	r3, r2
 8015228:	009b      	lsls	r3, r3, #2
 801522a:	82fb      	strh	r3, [r7, #22]
 801522c:	e077      	b.n	801531e <ce303_tarif+0xb6a>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 2 разряда после запятой
 801522e:	8a3b      	ldrh	r3, [r7, #16]
 8015230:	3308      	adds	r3, #8
 8015232:	4a0e      	ldr	r2, [pc, #56]	; (801526c <ce303_tarif+0xab8>)
 8015234:	5cd3      	ldrb	r3, [r2, r3]
 8015236:	2b29      	cmp	r3, #41	; 0x29
 8015238:	d11e      	bne.n	8015278 <ce303_tarif+0xac4>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30))*10;
 801523a:	8a3b      	ldrh	r3, [r7, #16]
 801523c:	3306      	adds	r3, #6
 801523e:	4a0b      	ldr	r2, [pc, #44]	; (801526c <ce303_tarif+0xab8>)
 8015240:	5cd3      	ldrb	r3, [r2, r3]
 8015242:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8015246:	4613      	mov	r3, r2
 8015248:	009b      	lsls	r3, r3, #2
 801524a:	4413      	add	r3, r2
 801524c:	005b      	lsls	r3, r3, #1
 801524e:	4619      	mov	r1, r3
 8015250:	8a3b      	ldrh	r3, [r7, #16]
 8015252:	3307      	adds	r3, #7
 8015254:	4a05      	ldr	r2, [pc, #20]	; (801526c <ce303_tarif+0xab8>)
 8015256:	5cd3      	ldrb	r3, [r2, r3]
 8015258:	3b30      	subs	r3, #48	; 0x30
 801525a:	440b      	add	r3, r1
 801525c:	b29b      	uxth	r3, r3
 801525e:	461a      	mov	r2, r3
 8015260:	0092      	lsls	r2, r2, #2
 8015262:	4413      	add	r3, r2
 8015264:	005b      	lsls	r3, r3, #1
 8015266:	82fb      	strh	r3, [r7, #22]
 8015268:	e059      	b.n	801531e <ce303_tarif+0xb6a>
 801526a:	bf00      	nop
 801526c:	2000994c 	.word	0x2000994c
 8015270:	20009af8 	.word	0x20009af8
 8015274:	2000a174 	.word	0x2000a174
				}
				else if( meter_rx_buffer[i+9] == 0x29 ) // если 3 разряда после запятой
 8015278:	8a3b      	ldrh	r3, [r7, #16]
 801527a:	3309      	adds	r3, #9
 801527c:	4a95      	ldr	r2, [pc, #596]	; (80154d4 <ce303_tarif+0xd20>)
 801527e:	5cd3      	ldrb	r3, [r2, r3]
 8015280:	2b29      	cmp	r3, #41	; 0x29
 8015282:	d126      	bne.n	80152d2 <ce303_tarif+0xb1e>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
 8015284:	8a3b      	ldrh	r3, [r7, #16]
 8015286:	3306      	adds	r3, #6
 8015288:	4a92      	ldr	r2, [pc, #584]	; (80154d4 <ce303_tarif+0xd20>)
 801528a:	5cd3      	ldrb	r3, [r2, r3]
 801528c:	3b30      	subs	r3, #48	; 0x30
 801528e:	b29b      	uxth	r3, r3
 8015290:	461a      	mov	r2, r3
 8015292:	0092      	lsls	r2, r2, #2
 8015294:	4413      	add	r3, r2
 8015296:	461a      	mov	r2, r3
 8015298:	0091      	lsls	r1, r2, #2
 801529a:	461a      	mov	r2, r3
 801529c:	460b      	mov	r3, r1
 801529e:	4413      	add	r3, r2
 80152a0:	009b      	lsls	r3, r3, #2
 80152a2:	b29a      	uxth	r2, r3
 80152a4:	8a3b      	ldrh	r3, [r7, #16]
 80152a6:	3307      	adds	r3, #7
 80152a8:	498a      	ldr	r1, [pc, #552]	; (80154d4 <ce303_tarif+0xd20>)
 80152aa:	5ccb      	ldrb	r3, [r1, r3]
 80152ac:	3b30      	subs	r3, #48	; 0x30
 80152ae:	b29b      	uxth	r3, r3
 80152b0:	4619      	mov	r1, r3
 80152b2:	0089      	lsls	r1, r1, #2
 80152b4:	440b      	add	r3, r1
 80152b6:	005b      	lsls	r3, r3, #1
 80152b8:	b29b      	uxth	r3, r3
 80152ba:	4413      	add	r3, r2
 80152bc:	b29a      	uxth	r2, r3
 80152be:	8a3b      	ldrh	r3, [r7, #16]
 80152c0:	3308      	adds	r3, #8
 80152c2:	4984      	ldr	r1, [pc, #528]	; (80154d4 <ce303_tarif+0xd20>)
 80152c4:	5ccb      	ldrb	r3, [r1, r3]
 80152c6:	b29b      	uxth	r3, r3
 80152c8:	4413      	add	r3, r2
 80152ca:	b29b      	uxth	r3, r3
 80152cc:	3b30      	subs	r3, #48	; 0x30
 80152ce:	82fb      	strh	r3, [r7, #22]
 80152d0:	e025      	b.n	801531e <ce303_tarif+0xb6a>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
 80152d2:	8a3b      	ldrh	r3, [r7, #16]
 80152d4:	3306      	adds	r3, #6
 80152d6:	4a7f      	ldr	r2, [pc, #508]	; (80154d4 <ce303_tarif+0xd20>)
 80152d8:	5cd3      	ldrb	r3, [r2, r3]
 80152da:	3b30      	subs	r3, #48	; 0x30
 80152dc:	b29b      	uxth	r3, r3
 80152de:	461a      	mov	r2, r3
 80152e0:	0092      	lsls	r2, r2, #2
 80152e2:	4413      	add	r3, r2
 80152e4:	461a      	mov	r2, r3
 80152e6:	0091      	lsls	r1, r2, #2
 80152e8:	461a      	mov	r2, r3
 80152ea:	460b      	mov	r3, r1
 80152ec:	4413      	add	r3, r2
 80152ee:	009b      	lsls	r3, r3, #2
 80152f0:	b29a      	uxth	r2, r3
 80152f2:	8a3b      	ldrh	r3, [r7, #16]
 80152f4:	3307      	adds	r3, #7
 80152f6:	4977      	ldr	r1, [pc, #476]	; (80154d4 <ce303_tarif+0xd20>)
 80152f8:	5ccb      	ldrb	r3, [r1, r3]
 80152fa:	3b30      	subs	r3, #48	; 0x30
 80152fc:	b29b      	uxth	r3, r3
 80152fe:	4619      	mov	r1, r3
 8015300:	0089      	lsls	r1, r1, #2
 8015302:	440b      	add	r3, r1
 8015304:	005b      	lsls	r3, r3, #1
 8015306:	b29b      	uxth	r3, r3
 8015308:	4413      	add	r3, r2
 801530a:	b29a      	uxth	r2, r3
 801530c:	8a3b      	ldrh	r3, [r7, #16]
 801530e:	3308      	adds	r3, #8
 8015310:	4970      	ldr	r1, [pc, #448]	; (80154d4 <ce303_tarif+0xd20>)
 8015312:	5ccb      	ldrb	r3, [r1, r3]
 8015314:	b29b      	uxth	r3, r3
 8015316:	4413      	add	r3, r2
 8015318:	b29b      	uxth	r3, r3
 801531a:	3b30      	subs	r3, #48	; 0x30
 801531c:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801531e:	4b6e      	ldr	r3, [pc, #440]	; (80154d8 <ce303_tarif+0xd24>)
 8015320:	681b      	ldr	r3, [r3, #0]
 8015322:	f04f 31ff 	mov.w	r1, #4294967295
 8015326:	4618      	mov	r0, r3
 8015328:	f7f3 faf8 	bl	800891c <osMutexWait>
				fm25v02_write(2*CE_303_TOTAL_POWER_H_REG, ((uint8_t)(temp>>24)) );
 801532c:	68bb      	ldr	r3, [r7, #8]
 801532e:	0e1b      	lsrs	r3, r3, #24
 8015330:	b2db      	uxtb	r3, r3
 8015332:	4619      	mov	r1, r3
 8015334:	f242 0082 	movw	r0, #8322	; 0x2082
 8015338:	f001 fcb2 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 801533c:	68bb      	ldr	r3, [r7, #8]
 801533e:	0c1b      	lsrs	r3, r3, #16
 8015340:	b2db      	uxtb	r3, r3
 8015342:	4619      	mov	r1, r3
 8015344:	f242 0083 	movw	r0, #8323	; 0x2083
 8015348:	f001 fcaa 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_L_REG, ((uint8_t)(temp>>8)) );
 801534c:	68bb      	ldr	r3, [r7, #8]
 801534e:	0a1b      	lsrs	r3, r3, #8
 8015350:	b2db      	uxtb	r3, r3
 8015352:	4619      	mov	r1, r3
 8015354:	f242 0084 	movw	r0, #8324	; 0x2084
 8015358:	f001 fca2 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_L_REG+1, ((uint8_t)temp) );
 801535c:	68bb      	ldr	r3, [r7, #8]
 801535e:	b2db      	uxtb	r3, r3
 8015360:	4619      	mov	r1, r3
 8015362:	f242 0085 	movw	r0, #8325	; 0x2085
 8015366:	f001 fc9b 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_M_REG, ((uint8_t)(temp_mil>>8)) );
 801536a:	8afb      	ldrh	r3, [r7, #22]
 801536c:	0a1b      	lsrs	r3, r3, #8
 801536e:	b29b      	uxth	r3, r3
 8015370:	b2db      	uxtb	r3, r3
 8015372:	4619      	mov	r1, r3
 8015374:	f242 0086 	movw	r0, #8326	; 0x2086
 8015378:	f001 fc92 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TOTAL_POWER_M_REG+1, ((uint8_t)(temp_mil)) );
 801537c:	8afb      	ldrh	r3, [r7, #22]
 801537e:	b2db      	uxtb	r3, r3
 8015380:	4619      	mov	r1, r3
 8015382:	f242 0087 	movw	r0, #8327	; 0x2087
 8015386:	f001 fc8b 	bl	8016ca0 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 801538a:	4b53      	ldr	r3, [pc, #332]	; (80154d8 <ce303_tarif+0xd24>)
 801538c:	681b      	ldr	r3, [r3, #0]
 801538e:	4618      	mov	r0, r3
 8015390:	f7f3 fb12 	bl	80089b8 <osMutexRelease>
				status_registers.ce303_total_power_h_reg = (uint16_t)(temp>>16);
 8015394:	68bb      	ldr	r3, [r7, #8]
 8015396:	0c1b      	lsrs	r3, r3, #16
 8015398:	b29a      	uxth	r2, r3
 801539a:	4b50      	ldr	r3, [pc, #320]	; (80154dc <ce303_tarif+0xd28>)
 801539c:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
				status_registers.ce303_total_power_l_reg = (uint16_t)temp;
 80153a0:	68bb      	ldr	r3, [r7, #8]
 80153a2:	b29a      	uxth	r2, r3
 80153a4:	4b4d      	ldr	r3, [pc, #308]	; (80154dc <ce303_tarif+0xd28>)
 80153a6:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
				status_registers.ce303_total_power_m_reg =  temp_mil;
 80153aa:	4a4c      	ldr	r2, [pc, #304]	; (80154dc <ce303_tarif+0xd28>)
 80153ac:	8afb      	ldrh	r3, [r7, #22]
 80153ae:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
				tarif_general_state = 1;
 80153b2:	2301      	movs	r3, #1
 80153b4:	757b      	strb	r3, [r7, #21]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 80153b6:	f001 bc06 	b.w	8016bc6 <ce303_tarif+0x2412>

			}

		}

		else if( (meter_rx_buffer[i] == 0x28) && (tarif_general_state==1) && (tarif_1_state==0) && (tarif_2_state==0) && (tarif_3_state==0) && (tarif_4_state==0) && (tarif_5_state==0) ) // 0х28 означает символ "(" в ASCII таблице
 80153ba:	8a3b      	ldrh	r3, [r7, #16]
 80153bc:	4a45      	ldr	r2, [pc, #276]	; (80154d4 <ce303_tarif+0xd20>)
 80153be:	5cd3      	ldrb	r3, [r2, r3]
 80153c0:	2b28      	cmp	r3, #40	; 0x28
 80153c2:	f040 83f6 	bne.w	8015bb2 <ce303_tarif+0x13fe>
 80153c6:	7d7b      	ldrb	r3, [r7, #21]
 80153c8:	2b01      	cmp	r3, #1
 80153ca:	f040 83f2 	bne.w	8015bb2 <ce303_tarif+0x13fe>
 80153ce:	7d3b      	ldrb	r3, [r7, #20]
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	f040 83ee 	bne.w	8015bb2 <ce303_tarif+0x13fe>
 80153d6:	7cfb      	ldrb	r3, [r7, #19]
 80153d8:	2b00      	cmp	r3, #0
 80153da:	f040 83ea 	bne.w	8015bb2 <ce303_tarif+0x13fe>
 80153de:	7cbb      	ldrb	r3, [r7, #18]
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	f040 83e6 	bne.w	8015bb2 <ce303_tarif+0x13fe>
 80153e6:	7bfb      	ldrb	r3, [r7, #15]
 80153e8:	2b00      	cmp	r3, #0
 80153ea:	f040 83e2 	bne.w	8015bb2 <ce303_tarif+0x13fe>
 80153ee:	7bbb      	ldrb	r3, [r7, #14]
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	f040 83de 	bne.w	8015bb2 <ce303_tarif+0x13fe>
		{
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 80153f6:	8a3b      	ldrh	r3, [r7, #16]
 80153f8:	3302      	adds	r3, #2
 80153fa:	4a36      	ldr	r2, [pc, #216]	; (80154d4 <ce303_tarif+0xd20>)
 80153fc:	5cd3      	ldrb	r3, [r2, r3]
 80153fe:	2b2e      	cmp	r3, #46	; 0x2e
 8015400:	f040 80e2 	bne.w	80155c8 <ce303_tarif+0xe14>
			{
				temp = (uint32_t)(meter_rx_buffer[i+1]-0x30);
 8015404:	8a3b      	ldrh	r3, [r7, #16]
 8015406:	3301      	adds	r3, #1
 8015408:	4a32      	ldr	r2, [pc, #200]	; (80154d4 <ce303_tarif+0xd20>)
 801540a:	5cd3      	ldrb	r3, [r2, r3]
 801540c:	3b30      	subs	r3, #48	; 0x30
 801540e:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+4] == 0x29 ) // если 1 разряд после запятой
 8015410:	8a3b      	ldrh	r3, [r7, #16]
 8015412:	3304      	adds	r3, #4
 8015414:	4a2f      	ldr	r2, [pc, #188]	; (80154d4 <ce303_tarif+0xd20>)
 8015416:	5cd3      	ldrb	r3, [r2, r3]
 8015418:	2b29      	cmp	r3, #41	; 0x29
 801541a:	d110      	bne.n	801543e <ce303_tarif+0xc8a>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+3])-0x30)*100;
 801541c:	8a3b      	ldrh	r3, [r7, #16]
 801541e:	3303      	adds	r3, #3
 8015420:	4a2c      	ldr	r2, [pc, #176]	; (80154d4 <ce303_tarif+0xd20>)
 8015422:	5cd3      	ldrb	r3, [r2, r3]
 8015424:	3b30      	subs	r3, #48	; 0x30
 8015426:	b29b      	uxth	r3, r3
 8015428:	461a      	mov	r2, r3
 801542a:	0092      	lsls	r2, r2, #2
 801542c:	4413      	add	r3, r2
 801542e:	461a      	mov	r2, r3
 8015430:	0091      	lsls	r1, r2, #2
 8015432:	461a      	mov	r2, r3
 8015434:	460b      	mov	r3, r1
 8015436:	4413      	add	r3, r2
 8015438:	009b      	lsls	r3, r3, #2
 801543a:	82fb      	strh	r3, [r7, #22]
 801543c:	e076      	b.n	801552c <ce303_tarif+0xd78>
				}
				else if( meter_rx_buffer[i+5] == 0x29 ) // если 2 разряда после запятой
 801543e:	8a3b      	ldrh	r3, [r7, #16]
 8015440:	3305      	adds	r3, #5
 8015442:	4a24      	ldr	r2, [pc, #144]	; (80154d4 <ce303_tarif+0xd20>)
 8015444:	5cd3      	ldrb	r3, [r2, r3]
 8015446:	2b29      	cmp	r3, #41	; 0x29
 8015448:	d117      	bne.n	801547a <ce303_tarif+0xcc6>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30))*10;
 801544a:	8a3b      	ldrh	r3, [r7, #16]
 801544c:	3303      	adds	r3, #3
 801544e:	4a21      	ldr	r2, [pc, #132]	; (80154d4 <ce303_tarif+0xd20>)
 8015450:	5cd3      	ldrb	r3, [r2, r3]
 8015452:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8015456:	4613      	mov	r3, r2
 8015458:	009b      	lsls	r3, r3, #2
 801545a:	4413      	add	r3, r2
 801545c:	005b      	lsls	r3, r3, #1
 801545e:	4619      	mov	r1, r3
 8015460:	8a3b      	ldrh	r3, [r7, #16]
 8015462:	3304      	adds	r3, #4
 8015464:	4a1b      	ldr	r2, [pc, #108]	; (80154d4 <ce303_tarif+0xd20>)
 8015466:	5cd3      	ldrb	r3, [r2, r3]
 8015468:	3b30      	subs	r3, #48	; 0x30
 801546a:	440b      	add	r3, r1
 801546c:	b29b      	uxth	r3, r3
 801546e:	461a      	mov	r2, r3
 8015470:	0092      	lsls	r2, r2, #2
 8015472:	4413      	add	r3, r2
 8015474:	005b      	lsls	r3, r3, #1
 8015476:	82fb      	strh	r3, [r7, #22]
 8015478:	e058      	b.n	801552c <ce303_tarif+0xd78>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 3 разряда после запятой
 801547a:	8a3b      	ldrh	r3, [r7, #16]
 801547c:	3306      	adds	r3, #6
 801547e:	4a15      	ldr	r2, [pc, #84]	; (80154d4 <ce303_tarif+0xd20>)
 8015480:	5cd3      	ldrb	r3, [r2, r3]
 8015482:	2b29      	cmp	r3, #41	; 0x29
 8015484:	d12c      	bne.n	80154e0 <ce303_tarif+0xd2c>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 8015486:	8a3b      	ldrh	r3, [r7, #16]
 8015488:	3303      	adds	r3, #3
 801548a:	4a12      	ldr	r2, [pc, #72]	; (80154d4 <ce303_tarif+0xd20>)
 801548c:	5cd3      	ldrb	r3, [r2, r3]
 801548e:	3b30      	subs	r3, #48	; 0x30
 8015490:	b29b      	uxth	r3, r3
 8015492:	461a      	mov	r2, r3
 8015494:	0092      	lsls	r2, r2, #2
 8015496:	4413      	add	r3, r2
 8015498:	461a      	mov	r2, r3
 801549a:	0091      	lsls	r1, r2, #2
 801549c:	461a      	mov	r2, r3
 801549e:	460b      	mov	r3, r1
 80154a0:	4413      	add	r3, r2
 80154a2:	009b      	lsls	r3, r3, #2
 80154a4:	b29a      	uxth	r2, r3
 80154a6:	8a3b      	ldrh	r3, [r7, #16]
 80154a8:	3304      	adds	r3, #4
 80154aa:	490a      	ldr	r1, [pc, #40]	; (80154d4 <ce303_tarif+0xd20>)
 80154ac:	5ccb      	ldrb	r3, [r1, r3]
 80154ae:	3b30      	subs	r3, #48	; 0x30
 80154b0:	b29b      	uxth	r3, r3
 80154b2:	4619      	mov	r1, r3
 80154b4:	0089      	lsls	r1, r1, #2
 80154b6:	440b      	add	r3, r1
 80154b8:	005b      	lsls	r3, r3, #1
 80154ba:	b29b      	uxth	r3, r3
 80154bc:	4413      	add	r3, r2
 80154be:	b29a      	uxth	r2, r3
 80154c0:	8a3b      	ldrh	r3, [r7, #16]
 80154c2:	3305      	adds	r3, #5
 80154c4:	4903      	ldr	r1, [pc, #12]	; (80154d4 <ce303_tarif+0xd20>)
 80154c6:	5ccb      	ldrb	r3, [r1, r3]
 80154c8:	b29b      	uxth	r3, r3
 80154ca:	4413      	add	r3, r2
 80154cc:	b29b      	uxth	r3, r3
 80154ce:	3b30      	subs	r3, #48	; 0x30
 80154d0:	82fb      	strh	r3, [r7, #22]
 80154d2:	e02b      	b.n	801552c <ce303_tarif+0xd78>
 80154d4:	2000994c 	.word	0x2000994c
 80154d8:	20009af8 	.word	0x20009af8
 80154dc:	2000a174 	.word	0x2000a174
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 80154e0:	8a3b      	ldrh	r3, [r7, #16]
 80154e2:	3303      	adds	r3, #3
 80154e4:	4ab0      	ldr	r2, [pc, #704]	; (80157a8 <ce303_tarif+0xff4>)
 80154e6:	5cd3      	ldrb	r3, [r2, r3]
 80154e8:	3b30      	subs	r3, #48	; 0x30
 80154ea:	b29b      	uxth	r3, r3
 80154ec:	461a      	mov	r2, r3
 80154ee:	0092      	lsls	r2, r2, #2
 80154f0:	4413      	add	r3, r2
 80154f2:	461a      	mov	r2, r3
 80154f4:	0091      	lsls	r1, r2, #2
 80154f6:	461a      	mov	r2, r3
 80154f8:	460b      	mov	r3, r1
 80154fa:	4413      	add	r3, r2
 80154fc:	009b      	lsls	r3, r3, #2
 80154fe:	b29a      	uxth	r2, r3
 8015500:	8a3b      	ldrh	r3, [r7, #16]
 8015502:	3304      	adds	r3, #4
 8015504:	49a8      	ldr	r1, [pc, #672]	; (80157a8 <ce303_tarif+0xff4>)
 8015506:	5ccb      	ldrb	r3, [r1, r3]
 8015508:	3b30      	subs	r3, #48	; 0x30
 801550a:	b29b      	uxth	r3, r3
 801550c:	4619      	mov	r1, r3
 801550e:	0089      	lsls	r1, r1, #2
 8015510:	440b      	add	r3, r1
 8015512:	005b      	lsls	r3, r3, #1
 8015514:	b29b      	uxth	r3, r3
 8015516:	4413      	add	r3, r2
 8015518:	b29a      	uxth	r2, r3
 801551a:	8a3b      	ldrh	r3, [r7, #16]
 801551c:	3305      	adds	r3, #5
 801551e:	49a2      	ldr	r1, [pc, #648]	; (80157a8 <ce303_tarif+0xff4>)
 8015520:	5ccb      	ldrb	r3, [r1, r3]
 8015522:	b29b      	uxth	r3, r3
 8015524:	4413      	add	r3, r2
 8015526:	b29b      	uxth	r3, r3
 8015528:	3b30      	subs	r3, #48	; 0x30
 801552a:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801552c:	4b9f      	ldr	r3, [pc, #636]	; (80157ac <ce303_tarif+0xff8>)
 801552e:	681b      	ldr	r3, [r3, #0]
 8015530:	f04f 31ff 	mov.w	r1, #4294967295
 8015534:	4618      	mov	r0, r3
 8015536:	f7f3 f9f1 	bl	800891c <osMutexWait>
				fm25v02_write(2*CE_303_TARIF1_POWER_H_REG, ((uint8_t)(temp>>24)) );
 801553a:	68bb      	ldr	r3, [r7, #8]
 801553c:	0e1b      	lsrs	r3, r3, #24
 801553e:	b2db      	uxtb	r3, r3
 8015540:	4619      	mov	r1, r3
 8015542:	f242 0088 	movw	r0, #8328	; 0x2088
 8015546:	f001 fbab 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 801554a:	68bb      	ldr	r3, [r7, #8]
 801554c:	0c1b      	lsrs	r3, r3, #16
 801554e:	b2db      	uxtb	r3, r3
 8015550:	4619      	mov	r1, r3
 8015552:	f242 0089 	movw	r0, #8329	; 0x2089
 8015556:	f001 fba3 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_L_REG, ((uint8_t)(temp>>8)) );
 801555a:	68bb      	ldr	r3, [r7, #8]
 801555c:	0a1b      	lsrs	r3, r3, #8
 801555e:	b2db      	uxtb	r3, r3
 8015560:	4619      	mov	r1, r3
 8015562:	f242 008a 	movw	r0, #8330	; 0x208a
 8015566:	f001 fb9b 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_L_REG+1, ((uint8_t)temp) );
 801556a:	68bb      	ldr	r3, [r7, #8]
 801556c:	b2db      	uxtb	r3, r3
 801556e:	4619      	mov	r1, r3
 8015570:	f242 008b 	movw	r0, #8331	; 0x208b
 8015574:	f001 fb94 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_MIL_REG, ((uint8_t)(temp_mil>>8)) );
 8015578:	8afb      	ldrh	r3, [r7, #22]
 801557a:	0a1b      	lsrs	r3, r3, #8
 801557c:	b29b      	uxth	r3, r3
 801557e:	b2db      	uxtb	r3, r3
 8015580:	4619      	mov	r1, r3
 8015582:	f242 008c 	movw	r0, #8332	; 0x208c
 8015586:	f001 fb8b 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_MIL_REG+1, ((uint8_t)(temp_mil)) );
 801558a:	8afb      	ldrh	r3, [r7, #22]
 801558c:	b2db      	uxtb	r3, r3
 801558e:	4619      	mov	r1, r3
 8015590:	f242 008d 	movw	r0, #8333	; 0x208d
 8015594:	f001 fb84 	bl	8016ca0 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8015598:	4b84      	ldr	r3, [pc, #528]	; (80157ac <ce303_tarif+0xff8>)
 801559a:	681b      	ldr	r3, [r3, #0]
 801559c:	4618      	mov	r0, r3
 801559e:	f7f3 fa0b 	bl	80089b8 <osMutexRelease>
				status_registers.ce303_tarif1_power_h_reg = (uint16_t)(temp>>16);
 80155a2:	68bb      	ldr	r3, [r7, #8]
 80155a4:	0c1b      	lsrs	r3, r3, #16
 80155a6:	b29a      	uxth	r2, r3
 80155a8:	4b81      	ldr	r3, [pc, #516]	; (80157b0 <ce303_tarif+0xffc>)
 80155aa:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
				status_registers.ce303_tarif1_power_l_reg = (uint16_t)temp;
 80155ae:	68bb      	ldr	r3, [r7, #8]
 80155b0:	b29a      	uxth	r2, r3
 80155b2:	4b7f      	ldr	r3, [pc, #508]	; (80157b0 <ce303_tarif+0xffc>)
 80155b4:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
				status_registers.ce303_tarif1_power_mil_reg =  temp_mil;
 80155b8:	4a7d      	ldr	r2, [pc, #500]	; (80157b0 <ce303_tarif+0xffc>)
 80155ba:	8afb      	ldrh	r3, [r7, #22]
 80155bc:	f8a2 308c 	strh.w	r3, [r2, #140]	; 0x8c
				tarif_1_state = 1;
 80155c0:	2301      	movs	r3, #1
 80155c2:	753b      	strb	r3, [r7, #20]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 80155c4:	f001 bb01 	b.w	8016bca <ce303_tarif+0x2416>

			}

			else if( meter_rx_buffer[i+3] == 0x2E) // 2 цифры перед запятой
 80155c8:	8a3b      	ldrh	r3, [r7, #16]
 80155ca:	3303      	adds	r3, #3
 80155cc:	4a76      	ldr	r2, [pc, #472]	; (80157a8 <ce303_tarif+0xff4>)
 80155ce:	5cd3      	ldrb	r3, [r2, r3]
 80155d0:	2b2e      	cmp	r3, #46	; 0x2e
 80155d2:	f040 80ef 	bne.w	80157b4 <ce303_tarif+0x1000>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+2])-0x30);
 80155d6:	8a3b      	ldrh	r3, [r7, #16]
 80155d8:	3301      	adds	r3, #1
 80155da:	4a73      	ldr	r2, [pc, #460]	; (80157a8 <ce303_tarif+0xff4>)
 80155dc:	5cd3      	ldrb	r3, [r2, r3]
 80155de:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80155e2:	4613      	mov	r3, r2
 80155e4:	009b      	lsls	r3, r3, #2
 80155e6:	4413      	add	r3, r2
 80155e8:	005b      	lsls	r3, r3, #1
 80155ea:	4619      	mov	r1, r3
 80155ec:	8a3b      	ldrh	r3, [r7, #16]
 80155ee:	3302      	adds	r3, #2
 80155f0:	4a6d      	ldr	r2, [pc, #436]	; (80157a8 <ce303_tarif+0xff4>)
 80155f2:	5cd3      	ldrb	r3, [r2, r3]
 80155f4:	3b30      	subs	r3, #48	; 0x30
 80155f6:	440b      	add	r3, r1
 80155f8:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+5] == 0x29 ) // если 1 разряд после запятой
 80155fa:	8a3b      	ldrh	r3, [r7, #16]
 80155fc:	3305      	adds	r3, #5
 80155fe:	4a6a      	ldr	r2, [pc, #424]	; (80157a8 <ce303_tarif+0xff4>)
 8015600:	5cd3      	ldrb	r3, [r2, r3]
 8015602:	2b29      	cmp	r3, #41	; 0x29
 8015604:	d110      	bne.n	8015628 <ce303_tarif+0xe74>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+4])-0x30)*100;
 8015606:	8a3b      	ldrh	r3, [r7, #16]
 8015608:	3304      	adds	r3, #4
 801560a:	4a67      	ldr	r2, [pc, #412]	; (80157a8 <ce303_tarif+0xff4>)
 801560c:	5cd3      	ldrb	r3, [r2, r3]
 801560e:	3b30      	subs	r3, #48	; 0x30
 8015610:	b29b      	uxth	r3, r3
 8015612:	461a      	mov	r2, r3
 8015614:	0092      	lsls	r2, r2, #2
 8015616:	4413      	add	r3, r2
 8015618:	461a      	mov	r2, r3
 801561a:	0091      	lsls	r1, r2, #2
 801561c:	461a      	mov	r2, r3
 801561e:	460b      	mov	r3, r1
 8015620:	4413      	add	r3, r2
 8015622:	009b      	lsls	r3, r3, #2
 8015624:	82fb      	strh	r3, [r7, #22]
 8015626:	e070      	b.n	801570a <ce303_tarif+0xf56>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 2 разряда после запятой
 8015628:	8a3b      	ldrh	r3, [r7, #16]
 801562a:	3306      	adds	r3, #6
 801562c:	4a5e      	ldr	r2, [pc, #376]	; (80157a8 <ce303_tarif+0xff4>)
 801562e:	5cd3      	ldrb	r3, [r2, r3]
 8015630:	2b29      	cmp	r3, #41	; 0x29
 8015632:	d117      	bne.n	8015664 <ce303_tarif+0xeb0>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30))*10;
 8015634:	8a3b      	ldrh	r3, [r7, #16]
 8015636:	3304      	adds	r3, #4
 8015638:	4a5b      	ldr	r2, [pc, #364]	; (80157a8 <ce303_tarif+0xff4>)
 801563a:	5cd3      	ldrb	r3, [r2, r3]
 801563c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8015640:	4613      	mov	r3, r2
 8015642:	009b      	lsls	r3, r3, #2
 8015644:	4413      	add	r3, r2
 8015646:	005b      	lsls	r3, r3, #1
 8015648:	4619      	mov	r1, r3
 801564a:	8a3b      	ldrh	r3, [r7, #16]
 801564c:	3305      	adds	r3, #5
 801564e:	4a56      	ldr	r2, [pc, #344]	; (80157a8 <ce303_tarif+0xff4>)
 8015650:	5cd3      	ldrb	r3, [r2, r3]
 8015652:	3b30      	subs	r3, #48	; 0x30
 8015654:	440b      	add	r3, r1
 8015656:	b29b      	uxth	r3, r3
 8015658:	461a      	mov	r2, r3
 801565a:	0092      	lsls	r2, r2, #2
 801565c:	4413      	add	r3, r2
 801565e:	005b      	lsls	r3, r3, #1
 8015660:	82fb      	strh	r3, [r7, #22]
 8015662:	e052      	b.n	801570a <ce303_tarif+0xf56>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 3 разряда после запятой
 8015664:	8a3b      	ldrh	r3, [r7, #16]
 8015666:	3307      	adds	r3, #7
 8015668:	4a4f      	ldr	r2, [pc, #316]	; (80157a8 <ce303_tarif+0xff4>)
 801566a:	5cd3      	ldrb	r3, [r2, r3]
 801566c:	2b29      	cmp	r3, #41	; 0x29
 801566e:	d126      	bne.n	80156be <ce303_tarif+0xf0a>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 8015670:	8a3b      	ldrh	r3, [r7, #16]
 8015672:	3304      	adds	r3, #4
 8015674:	4a4c      	ldr	r2, [pc, #304]	; (80157a8 <ce303_tarif+0xff4>)
 8015676:	5cd3      	ldrb	r3, [r2, r3]
 8015678:	3b30      	subs	r3, #48	; 0x30
 801567a:	b29b      	uxth	r3, r3
 801567c:	461a      	mov	r2, r3
 801567e:	0092      	lsls	r2, r2, #2
 8015680:	4413      	add	r3, r2
 8015682:	461a      	mov	r2, r3
 8015684:	0091      	lsls	r1, r2, #2
 8015686:	461a      	mov	r2, r3
 8015688:	460b      	mov	r3, r1
 801568a:	4413      	add	r3, r2
 801568c:	009b      	lsls	r3, r3, #2
 801568e:	b29a      	uxth	r2, r3
 8015690:	8a3b      	ldrh	r3, [r7, #16]
 8015692:	3305      	adds	r3, #5
 8015694:	4944      	ldr	r1, [pc, #272]	; (80157a8 <ce303_tarif+0xff4>)
 8015696:	5ccb      	ldrb	r3, [r1, r3]
 8015698:	3b30      	subs	r3, #48	; 0x30
 801569a:	b29b      	uxth	r3, r3
 801569c:	4619      	mov	r1, r3
 801569e:	0089      	lsls	r1, r1, #2
 80156a0:	440b      	add	r3, r1
 80156a2:	005b      	lsls	r3, r3, #1
 80156a4:	b29b      	uxth	r3, r3
 80156a6:	4413      	add	r3, r2
 80156a8:	b29a      	uxth	r2, r3
 80156aa:	8a3b      	ldrh	r3, [r7, #16]
 80156ac:	3306      	adds	r3, #6
 80156ae:	493e      	ldr	r1, [pc, #248]	; (80157a8 <ce303_tarif+0xff4>)
 80156b0:	5ccb      	ldrb	r3, [r1, r3]
 80156b2:	b29b      	uxth	r3, r3
 80156b4:	4413      	add	r3, r2
 80156b6:	b29b      	uxth	r3, r3
 80156b8:	3b30      	subs	r3, #48	; 0x30
 80156ba:	82fb      	strh	r3, [r7, #22]
 80156bc:	e025      	b.n	801570a <ce303_tarif+0xf56>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 80156be:	8a3b      	ldrh	r3, [r7, #16]
 80156c0:	3304      	adds	r3, #4
 80156c2:	4a39      	ldr	r2, [pc, #228]	; (80157a8 <ce303_tarif+0xff4>)
 80156c4:	5cd3      	ldrb	r3, [r2, r3]
 80156c6:	3b30      	subs	r3, #48	; 0x30
 80156c8:	b29b      	uxth	r3, r3
 80156ca:	461a      	mov	r2, r3
 80156cc:	0092      	lsls	r2, r2, #2
 80156ce:	4413      	add	r3, r2
 80156d0:	461a      	mov	r2, r3
 80156d2:	0091      	lsls	r1, r2, #2
 80156d4:	461a      	mov	r2, r3
 80156d6:	460b      	mov	r3, r1
 80156d8:	4413      	add	r3, r2
 80156da:	009b      	lsls	r3, r3, #2
 80156dc:	b29a      	uxth	r2, r3
 80156de:	8a3b      	ldrh	r3, [r7, #16]
 80156e0:	3305      	adds	r3, #5
 80156e2:	4931      	ldr	r1, [pc, #196]	; (80157a8 <ce303_tarif+0xff4>)
 80156e4:	5ccb      	ldrb	r3, [r1, r3]
 80156e6:	3b30      	subs	r3, #48	; 0x30
 80156e8:	b29b      	uxth	r3, r3
 80156ea:	4619      	mov	r1, r3
 80156ec:	0089      	lsls	r1, r1, #2
 80156ee:	440b      	add	r3, r1
 80156f0:	005b      	lsls	r3, r3, #1
 80156f2:	b29b      	uxth	r3, r3
 80156f4:	4413      	add	r3, r2
 80156f6:	b29a      	uxth	r2, r3
 80156f8:	8a3b      	ldrh	r3, [r7, #16]
 80156fa:	3306      	adds	r3, #6
 80156fc:	492a      	ldr	r1, [pc, #168]	; (80157a8 <ce303_tarif+0xff4>)
 80156fe:	5ccb      	ldrb	r3, [r1, r3]
 8015700:	b29b      	uxth	r3, r3
 8015702:	4413      	add	r3, r2
 8015704:	b29b      	uxth	r3, r3
 8015706:	3b30      	subs	r3, #48	; 0x30
 8015708:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801570a:	4b28      	ldr	r3, [pc, #160]	; (80157ac <ce303_tarif+0xff8>)
 801570c:	681b      	ldr	r3, [r3, #0]
 801570e:	f04f 31ff 	mov.w	r1, #4294967295
 8015712:	4618      	mov	r0, r3
 8015714:	f7f3 f902 	bl	800891c <osMutexWait>
				fm25v02_write(2*CE_303_TARIF1_POWER_H_REG, ((uint8_t)(temp>>24)) );
 8015718:	68bb      	ldr	r3, [r7, #8]
 801571a:	0e1b      	lsrs	r3, r3, #24
 801571c:	b2db      	uxtb	r3, r3
 801571e:	4619      	mov	r1, r3
 8015720:	f242 0088 	movw	r0, #8328	; 0x2088
 8015724:	f001 fabc 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 8015728:	68bb      	ldr	r3, [r7, #8]
 801572a:	0c1b      	lsrs	r3, r3, #16
 801572c:	b2db      	uxtb	r3, r3
 801572e:	4619      	mov	r1, r3
 8015730:	f242 0089 	movw	r0, #8329	; 0x2089
 8015734:	f001 fab4 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_L_REG, ((uint8_t)(temp>>8)) );
 8015738:	68bb      	ldr	r3, [r7, #8]
 801573a:	0a1b      	lsrs	r3, r3, #8
 801573c:	b2db      	uxtb	r3, r3
 801573e:	4619      	mov	r1, r3
 8015740:	f242 008a 	movw	r0, #8330	; 0x208a
 8015744:	f001 faac 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_L_REG+1, ((uint8_t)temp) );
 8015748:	68bb      	ldr	r3, [r7, #8]
 801574a:	b2db      	uxtb	r3, r3
 801574c:	4619      	mov	r1, r3
 801574e:	f242 008b 	movw	r0, #8331	; 0x208b
 8015752:	f001 faa5 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_MIL_REG, ((uint8_t)(temp_mil>>8)) );
 8015756:	8afb      	ldrh	r3, [r7, #22]
 8015758:	0a1b      	lsrs	r3, r3, #8
 801575a:	b29b      	uxth	r3, r3
 801575c:	b2db      	uxtb	r3, r3
 801575e:	4619      	mov	r1, r3
 8015760:	f242 008c 	movw	r0, #8332	; 0x208c
 8015764:	f001 fa9c 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_MIL_REG+1, ((uint8_t)(temp_mil)) );
 8015768:	8afb      	ldrh	r3, [r7, #22]
 801576a:	b2db      	uxtb	r3, r3
 801576c:	4619      	mov	r1, r3
 801576e:	f242 008d 	movw	r0, #8333	; 0x208d
 8015772:	f001 fa95 	bl	8016ca0 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8015776:	4b0d      	ldr	r3, [pc, #52]	; (80157ac <ce303_tarif+0xff8>)
 8015778:	681b      	ldr	r3, [r3, #0]
 801577a:	4618      	mov	r0, r3
 801577c:	f7f3 f91c 	bl	80089b8 <osMutexRelease>
				status_registers.ce303_tarif1_power_h_reg = (uint16_t)(temp>>16);
 8015780:	68bb      	ldr	r3, [r7, #8]
 8015782:	0c1b      	lsrs	r3, r3, #16
 8015784:	b29a      	uxth	r2, r3
 8015786:	4b0a      	ldr	r3, [pc, #40]	; (80157b0 <ce303_tarif+0xffc>)
 8015788:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
				status_registers.ce303_tarif1_power_l_reg = (uint16_t)temp;
 801578c:	68bb      	ldr	r3, [r7, #8]
 801578e:	b29a      	uxth	r2, r3
 8015790:	4b07      	ldr	r3, [pc, #28]	; (80157b0 <ce303_tarif+0xffc>)
 8015792:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
				status_registers.ce303_tarif1_power_mil_reg =  temp_mil;
 8015796:	4a06      	ldr	r2, [pc, #24]	; (80157b0 <ce303_tarif+0xffc>)
 8015798:	8afb      	ldrh	r3, [r7, #22]
 801579a:	f8a2 308c 	strh.w	r3, [r2, #140]	; 0x8c
				tarif_1_state = 1;
 801579e:	2301      	movs	r3, #1
 80157a0:	753b      	strb	r3, [r7, #20]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 80157a2:	f001 ba12 	b.w	8016bca <ce303_tarif+0x2416>
 80157a6:	bf00      	nop
 80157a8:	2000994c 	.word	0x2000994c
 80157ac:	20009af8 	.word	0x20009af8
 80157b0:	2000a174 	.word	0x2000a174

			}

			else if( meter_rx_buffer[i+4] == 0x2E) // 3 цифры перед запятой
 80157b4:	8a3b      	ldrh	r3, [r7, #16]
 80157b6:	3304      	adds	r3, #4
 80157b8:	4aaa      	ldr	r2, [pc, #680]	; (8015a64 <ce303_tarif+0x12b0>)
 80157ba:	5cd3      	ldrb	r3, [r2, r3]
 80157bc:	2b2e      	cmp	r3, #46	; 0x2e
 80157be:	f040 80f0 	bne.w	80159a2 <ce303_tarif+0x11ee>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+3])-0x30);
 80157c2:	8a3b      	ldrh	r3, [r7, #16]
 80157c4:	3301      	adds	r3, #1
 80157c6:	4aa7      	ldr	r2, [pc, #668]	; (8015a64 <ce303_tarif+0x12b0>)
 80157c8:	5cd3      	ldrb	r3, [r2, r3]
 80157ca:	3b30      	subs	r3, #48	; 0x30
 80157cc:	2264      	movs	r2, #100	; 0x64
 80157ce:	fb02 f103 	mul.w	r1, r2, r3
 80157d2:	8a3b      	ldrh	r3, [r7, #16]
 80157d4:	3302      	adds	r3, #2
 80157d6:	4aa3      	ldr	r2, [pc, #652]	; (8015a64 <ce303_tarif+0x12b0>)
 80157d8:	5cd3      	ldrb	r3, [r2, r3]
 80157da:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80157de:	4613      	mov	r3, r2
 80157e0:	009b      	lsls	r3, r3, #2
 80157e2:	4413      	add	r3, r2
 80157e4:	005b      	lsls	r3, r3, #1
 80157e6:	18ca      	adds	r2, r1, r3
 80157e8:	8a3b      	ldrh	r3, [r7, #16]
 80157ea:	3303      	adds	r3, #3
 80157ec:	499d      	ldr	r1, [pc, #628]	; (8015a64 <ce303_tarif+0x12b0>)
 80157ee:	5ccb      	ldrb	r3, [r1, r3]
 80157f0:	3b30      	subs	r3, #48	; 0x30
 80157f2:	4413      	add	r3, r2
 80157f4:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+6] == 0x29 ) // если 1 разряд после запятой
 80157f6:	8a3b      	ldrh	r3, [r7, #16]
 80157f8:	3306      	adds	r3, #6
 80157fa:	4a9a      	ldr	r2, [pc, #616]	; (8015a64 <ce303_tarif+0x12b0>)
 80157fc:	5cd3      	ldrb	r3, [r2, r3]
 80157fe:	2b29      	cmp	r3, #41	; 0x29
 8015800:	d110      	bne.n	8015824 <ce303_tarif+0x1070>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+5])-0x30)*100;
 8015802:	8a3b      	ldrh	r3, [r7, #16]
 8015804:	3305      	adds	r3, #5
 8015806:	4a97      	ldr	r2, [pc, #604]	; (8015a64 <ce303_tarif+0x12b0>)
 8015808:	5cd3      	ldrb	r3, [r2, r3]
 801580a:	3b30      	subs	r3, #48	; 0x30
 801580c:	b29b      	uxth	r3, r3
 801580e:	461a      	mov	r2, r3
 8015810:	0092      	lsls	r2, r2, #2
 8015812:	4413      	add	r3, r2
 8015814:	461a      	mov	r2, r3
 8015816:	0091      	lsls	r1, r2, #2
 8015818:	461a      	mov	r2, r3
 801581a:	460b      	mov	r3, r1
 801581c:	4413      	add	r3, r2
 801581e:	009b      	lsls	r3, r3, #2
 8015820:	82fb      	strh	r3, [r7, #22]
 8015822:	e070      	b.n	8015906 <ce303_tarif+0x1152>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 2 разряда после запятой
 8015824:	8a3b      	ldrh	r3, [r7, #16]
 8015826:	3307      	adds	r3, #7
 8015828:	4a8e      	ldr	r2, [pc, #568]	; (8015a64 <ce303_tarif+0x12b0>)
 801582a:	5cd3      	ldrb	r3, [r2, r3]
 801582c:	2b29      	cmp	r3, #41	; 0x29
 801582e:	d117      	bne.n	8015860 <ce303_tarif+0x10ac>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30))*10;
 8015830:	8a3b      	ldrh	r3, [r7, #16]
 8015832:	3305      	adds	r3, #5
 8015834:	4a8b      	ldr	r2, [pc, #556]	; (8015a64 <ce303_tarif+0x12b0>)
 8015836:	5cd3      	ldrb	r3, [r2, r3]
 8015838:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801583c:	4613      	mov	r3, r2
 801583e:	009b      	lsls	r3, r3, #2
 8015840:	4413      	add	r3, r2
 8015842:	005b      	lsls	r3, r3, #1
 8015844:	4619      	mov	r1, r3
 8015846:	8a3b      	ldrh	r3, [r7, #16]
 8015848:	3306      	adds	r3, #6
 801584a:	4a86      	ldr	r2, [pc, #536]	; (8015a64 <ce303_tarif+0x12b0>)
 801584c:	5cd3      	ldrb	r3, [r2, r3]
 801584e:	3b30      	subs	r3, #48	; 0x30
 8015850:	440b      	add	r3, r1
 8015852:	b29b      	uxth	r3, r3
 8015854:	461a      	mov	r2, r3
 8015856:	0092      	lsls	r2, r2, #2
 8015858:	4413      	add	r3, r2
 801585a:	005b      	lsls	r3, r3, #1
 801585c:	82fb      	strh	r3, [r7, #22]
 801585e:	e052      	b.n	8015906 <ce303_tarif+0x1152>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 3 разряда после запятой
 8015860:	8a3b      	ldrh	r3, [r7, #16]
 8015862:	3308      	adds	r3, #8
 8015864:	4a7f      	ldr	r2, [pc, #508]	; (8015a64 <ce303_tarif+0x12b0>)
 8015866:	5cd3      	ldrb	r3, [r2, r3]
 8015868:	2b29      	cmp	r3, #41	; 0x29
 801586a:	d126      	bne.n	80158ba <ce303_tarif+0x1106>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 801586c:	8a3b      	ldrh	r3, [r7, #16]
 801586e:	3305      	adds	r3, #5
 8015870:	4a7c      	ldr	r2, [pc, #496]	; (8015a64 <ce303_tarif+0x12b0>)
 8015872:	5cd3      	ldrb	r3, [r2, r3]
 8015874:	3b30      	subs	r3, #48	; 0x30
 8015876:	b29b      	uxth	r3, r3
 8015878:	461a      	mov	r2, r3
 801587a:	0092      	lsls	r2, r2, #2
 801587c:	4413      	add	r3, r2
 801587e:	461a      	mov	r2, r3
 8015880:	0091      	lsls	r1, r2, #2
 8015882:	461a      	mov	r2, r3
 8015884:	460b      	mov	r3, r1
 8015886:	4413      	add	r3, r2
 8015888:	009b      	lsls	r3, r3, #2
 801588a:	b29a      	uxth	r2, r3
 801588c:	8a3b      	ldrh	r3, [r7, #16]
 801588e:	3306      	adds	r3, #6
 8015890:	4974      	ldr	r1, [pc, #464]	; (8015a64 <ce303_tarif+0x12b0>)
 8015892:	5ccb      	ldrb	r3, [r1, r3]
 8015894:	3b30      	subs	r3, #48	; 0x30
 8015896:	b29b      	uxth	r3, r3
 8015898:	4619      	mov	r1, r3
 801589a:	0089      	lsls	r1, r1, #2
 801589c:	440b      	add	r3, r1
 801589e:	005b      	lsls	r3, r3, #1
 80158a0:	b29b      	uxth	r3, r3
 80158a2:	4413      	add	r3, r2
 80158a4:	b29a      	uxth	r2, r3
 80158a6:	8a3b      	ldrh	r3, [r7, #16]
 80158a8:	3307      	adds	r3, #7
 80158aa:	496e      	ldr	r1, [pc, #440]	; (8015a64 <ce303_tarif+0x12b0>)
 80158ac:	5ccb      	ldrb	r3, [r1, r3]
 80158ae:	b29b      	uxth	r3, r3
 80158b0:	4413      	add	r3, r2
 80158b2:	b29b      	uxth	r3, r3
 80158b4:	3b30      	subs	r3, #48	; 0x30
 80158b6:	82fb      	strh	r3, [r7, #22]
 80158b8:	e025      	b.n	8015906 <ce303_tarif+0x1152>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 80158ba:	8a3b      	ldrh	r3, [r7, #16]
 80158bc:	3305      	adds	r3, #5
 80158be:	4a69      	ldr	r2, [pc, #420]	; (8015a64 <ce303_tarif+0x12b0>)
 80158c0:	5cd3      	ldrb	r3, [r2, r3]
 80158c2:	3b30      	subs	r3, #48	; 0x30
 80158c4:	b29b      	uxth	r3, r3
 80158c6:	461a      	mov	r2, r3
 80158c8:	0092      	lsls	r2, r2, #2
 80158ca:	4413      	add	r3, r2
 80158cc:	461a      	mov	r2, r3
 80158ce:	0091      	lsls	r1, r2, #2
 80158d0:	461a      	mov	r2, r3
 80158d2:	460b      	mov	r3, r1
 80158d4:	4413      	add	r3, r2
 80158d6:	009b      	lsls	r3, r3, #2
 80158d8:	b29a      	uxth	r2, r3
 80158da:	8a3b      	ldrh	r3, [r7, #16]
 80158dc:	3306      	adds	r3, #6
 80158de:	4961      	ldr	r1, [pc, #388]	; (8015a64 <ce303_tarif+0x12b0>)
 80158e0:	5ccb      	ldrb	r3, [r1, r3]
 80158e2:	3b30      	subs	r3, #48	; 0x30
 80158e4:	b29b      	uxth	r3, r3
 80158e6:	4619      	mov	r1, r3
 80158e8:	0089      	lsls	r1, r1, #2
 80158ea:	440b      	add	r3, r1
 80158ec:	005b      	lsls	r3, r3, #1
 80158ee:	b29b      	uxth	r3, r3
 80158f0:	4413      	add	r3, r2
 80158f2:	b29a      	uxth	r2, r3
 80158f4:	8a3b      	ldrh	r3, [r7, #16]
 80158f6:	3307      	adds	r3, #7
 80158f8:	495a      	ldr	r1, [pc, #360]	; (8015a64 <ce303_tarif+0x12b0>)
 80158fa:	5ccb      	ldrb	r3, [r1, r3]
 80158fc:	b29b      	uxth	r3, r3
 80158fe:	4413      	add	r3, r2
 8015900:	b29b      	uxth	r3, r3
 8015902:	3b30      	subs	r3, #48	; 0x30
 8015904:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8015906:	4b58      	ldr	r3, [pc, #352]	; (8015a68 <ce303_tarif+0x12b4>)
 8015908:	681b      	ldr	r3, [r3, #0]
 801590a:	f04f 31ff 	mov.w	r1, #4294967295
 801590e:	4618      	mov	r0, r3
 8015910:	f7f3 f804 	bl	800891c <osMutexWait>
				fm25v02_write(2*CE_303_TARIF1_POWER_H_REG, ((uint8_t)(temp>>24)) );
 8015914:	68bb      	ldr	r3, [r7, #8]
 8015916:	0e1b      	lsrs	r3, r3, #24
 8015918:	b2db      	uxtb	r3, r3
 801591a:	4619      	mov	r1, r3
 801591c:	f242 0088 	movw	r0, #8328	; 0x2088
 8015920:	f001 f9be 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 8015924:	68bb      	ldr	r3, [r7, #8]
 8015926:	0c1b      	lsrs	r3, r3, #16
 8015928:	b2db      	uxtb	r3, r3
 801592a:	4619      	mov	r1, r3
 801592c:	f242 0089 	movw	r0, #8329	; 0x2089
 8015930:	f001 f9b6 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_L_REG, ((uint8_t)(temp>>8)) );
 8015934:	68bb      	ldr	r3, [r7, #8]
 8015936:	0a1b      	lsrs	r3, r3, #8
 8015938:	b2db      	uxtb	r3, r3
 801593a:	4619      	mov	r1, r3
 801593c:	f242 008a 	movw	r0, #8330	; 0x208a
 8015940:	f001 f9ae 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_L_REG+1, ((uint8_t)temp) );
 8015944:	68bb      	ldr	r3, [r7, #8]
 8015946:	b2db      	uxtb	r3, r3
 8015948:	4619      	mov	r1, r3
 801594a:	f242 008b 	movw	r0, #8331	; 0x208b
 801594e:	f001 f9a7 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_MIL_REG, ((uint8_t)(temp_mil>>8)) );
 8015952:	8afb      	ldrh	r3, [r7, #22]
 8015954:	0a1b      	lsrs	r3, r3, #8
 8015956:	b29b      	uxth	r3, r3
 8015958:	b2db      	uxtb	r3, r3
 801595a:	4619      	mov	r1, r3
 801595c:	f242 008c 	movw	r0, #8332	; 0x208c
 8015960:	f001 f99e 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_MIL_REG+1, ((uint8_t)(temp_mil)) );
 8015964:	8afb      	ldrh	r3, [r7, #22]
 8015966:	b2db      	uxtb	r3, r3
 8015968:	4619      	mov	r1, r3
 801596a:	f242 008d 	movw	r0, #8333	; 0x208d
 801596e:	f001 f997 	bl	8016ca0 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8015972:	4b3d      	ldr	r3, [pc, #244]	; (8015a68 <ce303_tarif+0x12b4>)
 8015974:	681b      	ldr	r3, [r3, #0]
 8015976:	4618      	mov	r0, r3
 8015978:	f7f3 f81e 	bl	80089b8 <osMutexRelease>
				status_registers.ce303_tarif1_power_h_reg = (uint16_t)(temp>>16);
 801597c:	68bb      	ldr	r3, [r7, #8]
 801597e:	0c1b      	lsrs	r3, r3, #16
 8015980:	b29a      	uxth	r2, r3
 8015982:	4b3a      	ldr	r3, [pc, #232]	; (8015a6c <ce303_tarif+0x12b8>)
 8015984:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
				status_registers.ce303_tarif1_power_l_reg = (uint16_t)temp;
 8015988:	68bb      	ldr	r3, [r7, #8]
 801598a:	b29a      	uxth	r2, r3
 801598c:	4b37      	ldr	r3, [pc, #220]	; (8015a6c <ce303_tarif+0x12b8>)
 801598e:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
				status_registers.ce303_tarif1_power_mil_reg =  temp_mil;
 8015992:	4a36      	ldr	r2, [pc, #216]	; (8015a6c <ce303_tarif+0x12b8>)
 8015994:	8afb      	ldrh	r3, [r7, #22]
 8015996:	f8a2 308c 	strh.w	r3, [r2, #140]	; 0x8c
				tarif_1_state = 1;
 801599a:	2301      	movs	r3, #1
 801599c:	753b      	strb	r3, [r7, #20]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 801599e:	f001 b914 	b.w	8016bca <ce303_tarif+0x2416>

			}

			else if( meter_rx_buffer[i+5] == 0x2E) // четыре цифры перед запятой
 80159a2:	8a3b      	ldrh	r3, [r7, #16]
 80159a4:	3305      	adds	r3, #5
 80159a6:	4a2f      	ldr	r2, [pc, #188]	; (8015a64 <ce303_tarif+0x12b0>)
 80159a8:	5cd3      	ldrb	r3, [r2, r3]
 80159aa:	2b2e      	cmp	r3, #46	; 0x2e
 80159ac:	f041 810d 	bne.w	8016bca <ce303_tarif+0x2416>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30);
 80159b0:	8a3b      	ldrh	r3, [r7, #16]
 80159b2:	3301      	adds	r3, #1
 80159b4:	4a2b      	ldr	r2, [pc, #172]	; (8015a64 <ce303_tarif+0x12b0>)
 80159b6:	5cd3      	ldrb	r3, [r2, r3]
 80159b8:	3b30      	subs	r3, #48	; 0x30
 80159ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80159be:	fb02 f203 	mul.w	r2, r2, r3
 80159c2:	8a3b      	ldrh	r3, [r7, #16]
 80159c4:	3302      	adds	r3, #2
 80159c6:	4927      	ldr	r1, [pc, #156]	; (8015a64 <ce303_tarif+0x12b0>)
 80159c8:	5ccb      	ldrb	r3, [r1, r3]
 80159ca:	3b30      	subs	r3, #48	; 0x30
 80159cc:	2164      	movs	r1, #100	; 0x64
 80159ce:	fb01 f303 	mul.w	r3, r1, r3
 80159d2:	18d1      	adds	r1, r2, r3
 80159d4:	8a3b      	ldrh	r3, [r7, #16]
 80159d6:	3303      	adds	r3, #3
 80159d8:	4a22      	ldr	r2, [pc, #136]	; (8015a64 <ce303_tarif+0x12b0>)
 80159da:	5cd3      	ldrb	r3, [r2, r3]
 80159dc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80159e0:	4613      	mov	r3, r2
 80159e2:	009b      	lsls	r3, r3, #2
 80159e4:	4413      	add	r3, r2
 80159e6:	005b      	lsls	r3, r3, #1
 80159e8:	18ca      	adds	r2, r1, r3
 80159ea:	8a3b      	ldrh	r3, [r7, #16]
 80159ec:	3304      	adds	r3, #4
 80159ee:	491d      	ldr	r1, [pc, #116]	; (8015a64 <ce303_tarif+0x12b0>)
 80159f0:	5ccb      	ldrb	r3, [r1, r3]
 80159f2:	3b30      	subs	r3, #48	; 0x30
 80159f4:	4413      	add	r3, r2
 80159f6:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+7] == 0x29 ) // если 1 разряд после запятой
 80159f8:	8a3b      	ldrh	r3, [r7, #16]
 80159fa:	3307      	adds	r3, #7
 80159fc:	4a19      	ldr	r2, [pc, #100]	; (8015a64 <ce303_tarif+0x12b0>)
 80159fe:	5cd3      	ldrb	r3, [r2, r3]
 8015a00:	2b29      	cmp	r3, #41	; 0x29
 8015a02:	d110      	bne.n	8015a26 <ce303_tarif+0x1272>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+6])-0x30)*100;
 8015a04:	8a3b      	ldrh	r3, [r7, #16]
 8015a06:	3306      	adds	r3, #6
 8015a08:	4a16      	ldr	r2, [pc, #88]	; (8015a64 <ce303_tarif+0x12b0>)
 8015a0a:	5cd3      	ldrb	r3, [r2, r3]
 8015a0c:	3b30      	subs	r3, #48	; 0x30
 8015a0e:	b29b      	uxth	r3, r3
 8015a10:	461a      	mov	r2, r3
 8015a12:	0092      	lsls	r2, r2, #2
 8015a14:	4413      	add	r3, r2
 8015a16:	461a      	mov	r2, r3
 8015a18:	0091      	lsls	r1, r2, #2
 8015a1a:	461a      	mov	r2, r3
 8015a1c:	460b      	mov	r3, r1
 8015a1e:	4413      	add	r3, r2
 8015a20:	009b      	lsls	r3, r3, #2
 8015a22:	82fb      	strh	r3, [r7, #22]
 8015a24:	e077      	b.n	8015b16 <ce303_tarif+0x1362>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 2 разряда после запятой
 8015a26:	8a3b      	ldrh	r3, [r7, #16]
 8015a28:	3308      	adds	r3, #8
 8015a2a:	4a0e      	ldr	r2, [pc, #56]	; (8015a64 <ce303_tarif+0x12b0>)
 8015a2c:	5cd3      	ldrb	r3, [r2, r3]
 8015a2e:	2b29      	cmp	r3, #41	; 0x29
 8015a30:	d11e      	bne.n	8015a70 <ce303_tarif+0x12bc>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30))*10;
 8015a32:	8a3b      	ldrh	r3, [r7, #16]
 8015a34:	3306      	adds	r3, #6
 8015a36:	4a0b      	ldr	r2, [pc, #44]	; (8015a64 <ce303_tarif+0x12b0>)
 8015a38:	5cd3      	ldrb	r3, [r2, r3]
 8015a3a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8015a3e:	4613      	mov	r3, r2
 8015a40:	009b      	lsls	r3, r3, #2
 8015a42:	4413      	add	r3, r2
 8015a44:	005b      	lsls	r3, r3, #1
 8015a46:	4619      	mov	r1, r3
 8015a48:	8a3b      	ldrh	r3, [r7, #16]
 8015a4a:	3307      	adds	r3, #7
 8015a4c:	4a05      	ldr	r2, [pc, #20]	; (8015a64 <ce303_tarif+0x12b0>)
 8015a4e:	5cd3      	ldrb	r3, [r2, r3]
 8015a50:	3b30      	subs	r3, #48	; 0x30
 8015a52:	440b      	add	r3, r1
 8015a54:	b29b      	uxth	r3, r3
 8015a56:	461a      	mov	r2, r3
 8015a58:	0092      	lsls	r2, r2, #2
 8015a5a:	4413      	add	r3, r2
 8015a5c:	005b      	lsls	r3, r3, #1
 8015a5e:	82fb      	strh	r3, [r7, #22]
 8015a60:	e059      	b.n	8015b16 <ce303_tarif+0x1362>
 8015a62:	bf00      	nop
 8015a64:	2000994c 	.word	0x2000994c
 8015a68:	20009af8 	.word	0x20009af8
 8015a6c:	2000a174 	.word	0x2000a174
				}
				else if( meter_rx_buffer[i+9] == 0x29 ) // если 3 разряда после запятой
 8015a70:	8a3b      	ldrh	r3, [r7, #16]
 8015a72:	3309      	adds	r3, #9
 8015a74:	4a95      	ldr	r2, [pc, #596]	; (8015ccc <ce303_tarif+0x1518>)
 8015a76:	5cd3      	ldrb	r3, [r2, r3]
 8015a78:	2b29      	cmp	r3, #41	; 0x29
 8015a7a:	d126      	bne.n	8015aca <ce303_tarif+0x1316>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
 8015a7c:	8a3b      	ldrh	r3, [r7, #16]
 8015a7e:	3306      	adds	r3, #6
 8015a80:	4a92      	ldr	r2, [pc, #584]	; (8015ccc <ce303_tarif+0x1518>)
 8015a82:	5cd3      	ldrb	r3, [r2, r3]
 8015a84:	3b30      	subs	r3, #48	; 0x30
 8015a86:	b29b      	uxth	r3, r3
 8015a88:	461a      	mov	r2, r3
 8015a8a:	0092      	lsls	r2, r2, #2
 8015a8c:	4413      	add	r3, r2
 8015a8e:	461a      	mov	r2, r3
 8015a90:	0091      	lsls	r1, r2, #2
 8015a92:	461a      	mov	r2, r3
 8015a94:	460b      	mov	r3, r1
 8015a96:	4413      	add	r3, r2
 8015a98:	009b      	lsls	r3, r3, #2
 8015a9a:	b29a      	uxth	r2, r3
 8015a9c:	8a3b      	ldrh	r3, [r7, #16]
 8015a9e:	3307      	adds	r3, #7
 8015aa0:	498a      	ldr	r1, [pc, #552]	; (8015ccc <ce303_tarif+0x1518>)
 8015aa2:	5ccb      	ldrb	r3, [r1, r3]
 8015aa4:	3b30      	subs	r3, #48	; 0x30
 8015aa6:	b29b      	uxth	r3, r3
 8015aa8:	4619      	mov	r1, r3
 8015aaa:	0089      	lsls	r1, r1, #2
 8015aac:	440b      	add	r3, r1
 8015aae:	005b      	lsls	r3, r3, #1
 8015ab0:	b29b      	uxth	r3, r3
 8015ab2:	4413      	add	r3, r2
 8015ab4:	b29a      	uxth	r2, r3
 8015ab6:	8a3b      	ldrh	r3, [r7, #16]
 8015ab8:	3308      	adds	r3, #8
 8015aba:	4984      	ldr	r1, [pc, #528]	; (8015ccc <ce303_tarif+0x1518>)
 8015abc:	5ccb      	ldrb	r3, [r1, r3]
 8015abe:	b29b      	uxth	r3, r3
 8015ac0:	4413      	add	r3, r2
 8015ac2:	b29b      	uxth	r3, r3
 8015ac4:	3b30      	subs	r3, #48	; 0x30
 8015ac6:	82fb      	strh	r3, [r7, #22]
 8015ac8:	e025      	b.n	8015b16 <ce303_tarif+0x1362>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
 8015aca:	8a3b      	ldrh	r3, [r7, #16]
 8015acc:	3306      	adds	r3, #6
 8015ace:	4a7f      	ldr	r2, [pc, #508]	; (8015ccc <ce303_tarif+0x1518>)
 8015ad0:	5cd3      	ldrb	r3, [r2, r3]
 8015ad2:	3b30      	subs	r3, #48	; 0x30
 8015ad4:	b29b      	uxth	r3, r3
 8015ad6:	461a      	mov	r2, r3
 8015ad8:	0092      	lsls	r2, r2, #2
 8015ada:	4413      	add	r3, r2
 8015adc:	461a      	mov	r2, r3
 8015ade:	0091      	lsls	r1, r2, #2
 8015ae0:	461a      	mov	r2, r3
 8015ae2:	460b      	mov	r3, r1
 8015ae4:	4413      	add	r3, r2
 8015ae6:	009b      	lsls	r3, r3, #2
 8015ae8:	b29a      	uxth	r2, r3
 8015aea:	8a3b      	ldrh	r3, [r7, #16]
 8015aec:	3307      	adds	r3, #7
 8015aee:	4977      	ldr	r1, [pc, #476]	; (8015ccc <ce303_tarif+0x1518>)
 8015af0:	5ccb      	ldrb	r3, [r1, r3]
 8015af2:	3b30      	subs	r3, #48	; 0x30
 8015af4:	b29b      	uxth	r3, r3
 8015af6:	4619      	mov	r1, r3
 8015af8:	0089      	lsls	r1, r1, #2
 8015afa:	440b      	add	r3, r1
 8015afc:	005b      	lsls	r3, r3, #1
 8015afe:	b29b      	uxth	r3, r3
 8015b00:	4413      	add	r3, r2
 8015b02:	b29a      	uxth	r2, r3
 8015b04:	8a3b      	ldrh	r3, [r7, #16]
 8015b06:	3308      	adds	r3, #8
 8015b08:	4970      	ldr	r1, [pc, #448]	; (8015ccc <ce303_tarif+0x1518>)
 8015b0a:	5ccb      	ldrb	r3, [r1, r3]
 8015b0c:	b29b      	uxth	r3, r3
 8015b0e:	4413      	add	r3, r2
 8015b10:	b29b      	uxth	r3, r3
 8015b12:	3b30      	subs	r3, #48	; 0x30
 8015b14:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8015b16:	4b6e      	ldr	r3, [pc, #440]	; (8015cd0 <ce303_tarif+0x151c>)
 8015b18:	681b      	ldr	r3, [r3, #0]
 8015b1a:	f04f 31ff 	mov.w	r1, #4294967295
 8015b1e:	4618      	mov	r0, r3
 8015b20:	f7f2 fefc 	bl	800891c <osMutexWait>
				fm25v02_write(2*CE_303_TARIF1_POWER_H_REG, ((uint8_t)(temp>>24)) );
 8015b24:	68bb      	ldr	r3, [r7, #8]
 8015b26:	0e1b      	lsrs	r3, r3, #24
 8015b28:	b2db      	uxtb	r3, r3
 8015b2a:	4619      	mov	r1, r3
 8015b2c:	f242 0088 	movw	r0, #8328	; 0x2088
 8015b30:	f001 f8b6 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 8015b34:	68bb      	ldr	r3, [r7, #8]
 8015b36:	0c1b      	lsrs	r3, r3, #16
 8015b38:	b2db      	uxtb	r3, r3
 8015b3a:	4619      	mov	r1, r3
 8015b3c:	f242 0089 	movw	r0, #8329	; 0x2089
 8015b40:	f001 f8ae 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_L_REG, ((uint8_t)(temp>>8)) );
 8015b44:	68bb      	ldr	r3, [r7, #8]
 8015b46:	0a1b      	lsrs	r3, r3, #8
 8015b48:	b2db      	uxtb	r3, r3
 8015b4a:	4619      	mov	r1, r3
 8015b4c:	f242 008a 	movw	r0, #8330	; 0x208a
 8015b50:	f001 f8a6 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_L_REG+1, ((uint8_t)temp) );
 8015b54:	68bb      	ldr	r3, [r7, #8]
 8015b56:	b2db      	uxtb	r3, r3
 8015b58:	4619      	mov	r1, r3
 8015b5a:	f242 008b 	movw	r0, #8331	; 0x208b
 8015b5e:	f001 f89f 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_MIL_REG, ((uint8_t)(temp_mil>>8)) );
 8015b62:	8afb      	ldrh	r3, [r7, #22]
 8015b64:	0a1b      	lsrs	r3, r3, #8
 8015b66:	b29b      	uxth	r3, r3
 8015b68:	b2db      	uxtb	r3, r3
 8015b6a:	4619      	mov	r1, r3
 8015b6c:	f242 008c 	movw	r0, #8332	; 0x208c
 8015b70:	f001 f896 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF1_POWER_MIL_REG+1, ((uint8_t)(temp_mil)) );
 8015b74:	8afb      	ldrh	r3, [r7, #22]
 8015b76:	b2db      	uxtb	r3, r3
 8015b78:	4619      	mov	r1, r3
 8015b7a:	f242 008d 	movw	r0, #8333	; 0x208d
 8015b7e:	f001 f88f 	bl	8016ca0 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8015b82:	4b53      	ldr	r3, [pc, #332]	; (8015cd0 <ce303_tarif+0x151c>)
 8015b84:	681b      	ldr	r3, [r3, #0]
 8015b86:	4618      	mov	r0, r3
 8015b88:	f7f2 ff16 	bl	80089b8 <osMutexRelease>
				status_registers.ce303_tarif1_power_h_reg = (uint16_t)(temp>>16);
 8015b8c:	68bb      	ldr	r3, [r7, #8]
 8015b8e:	0c1b      	lsrs	r3, r3, #16
 8015b90:	b29a      	uxth	r2, r3
 8015b92:	4b50      	ldr	r3, [pc, #320]	; (8015cd4 <ce303_tarif+0x1520>)
 8015b94:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
				status_registers.ce303_tarif1_power_l_reg = (uint16_t)temp;
 8015b98:	68bb      	ldr	r3, [r7, #8]
 8015b9a:	b29a      	uxth	r2, r3
 8015b9c:	4b4d      	ldr	r3, [pc, #308]	; (8015cd4 <ce303_tarif+0x1520>)
 8015b9e:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
				status_registers.ce303_tarif1_power_mil_reg =  temp_mil;
 8015ba2:	4a4c      	ldr	r2, [pc, #304]	; (8015cd4 <ce303_tarif+0x1520>)
 8015ba4:	8afb      	ldrh	r3, [r7, #22]
 8015ba6:	f8a2 308c 	strh.w	r3, [r2, #140]	; 0x8c
				tarif_1_state = 1;
 8015baa:	2301      	movs	r3, #1
 8015bac:	753b      	strb	r3, [r7, #20]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 8015bae:	f001 b80c 	b.w	8016bca <ce303_tarif+0x2416>

			}

		}

		else if( (meter_rx_buffer[i] == 0x28) && (tarif_general_state==1) && (tarif_1_state==1) && (tarif_2_state==0) && (tarif_3_state==0) && (tarif_4_state==0) && (tarif_5_state==0) ) // 0х28 означает символ "(" в ASCII таблице
 8015bb2:	8a3b      	ldrh	r3, [r7, #16]
 8015bb4:	4a45      	ldr	r2, [pc, #276]	; (8015ccc <ce303_tarif+0x1518>)
 8015bb6:	5cd3      	ldrb	r3, [r2, r3]
 8015bb8:	2b28      	cmp	r3, #40	; 0x28
 8015bba:	f040 83f6 	bne.w	80163aa <ce303_tarif+0x1bf6>
 8015bbe:	7d7b      	ldrb	r3, [r7, #21]
 8015bc0:	2b01      	cmp	r3, #1
 8015bc2:	f040 83f2 	bne.w	80163aa <ce303_tarif+0x1bf6>
 8015bc6:	7d3b      	ldrb	r3, [r7, #20]
 8015bc8:	2b01      	cmp	r3, #1
 8015bca:	f040 83ee 	bne.w	80163aa <ce303_tarif+0x1bf6>
 8015bce:	7cfb      	ldrb	r3, [r7, #19]
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	f040 83ea 	bne.w	80163aa <ce303_tarif+0x1bf6>
 8015bd6:	7cbb      	ldrb	r3, [r7, #18]
 8015bd8:	2b00      	cmp	r3, #0
 8015bda:	f040 83e6 	bne.w	80163aa <ce303_tarif+0x1bf6>
 8015bde:	7bfb      	ldrb	r3, [r7, #15]
 8015be0:	2b00      	cmp	r3, #0
 8015be2:	f040 83e2 	bne.w	80163aa <ce303_tarif+0x1bf6>
 8015be6:	7bbb      	ldrb	r3, [r7, #14]
 8015be8:	2b00      	cmp	r3, #0
 8015bea:	f040 83de 	bne.w	80163aa <ce303_tarif+0x1bf6>
		{
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 8015bee:	8a3b      	ldrh	r3, [r7, #16]
 8015bf0:	3302      	adds	r3, #2
 8015bf2:	4a36      	ldr	r2, [pc, #216]	; (8015ccc <ce303_tarif+0x1518>)
 8015bf4:	5cd3      	ldrb	r3, [r2, r3]
 8015bf6:	2b2e      	cmp	r3, #46	; 0x2e
 8015bf8:	f040 80e2 	bne.w	8015dc0 <ce303_tarif+0x160c>
			{
				temp = (uint32_t)(meter_rx_buffer[i+1]-0x30);
 8015bfc:	8a3b      	ldrh	r3, [r7, #16]
 8015bfe:	3301      	adds	r3, #1
 8015c00:	4a32      	ldr	r2, [pc, #200]	; (8015ccc <ce303_tarif+0x1518>)
 8015c02:	5cd3      	ldrb	r3, [r2, r3]
 8015c04:	3b30      	subs	r3, #48	; 0x30
 8015c06:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+4] == 0x29 ) // если 1 разряд после запятой
 8015c08:	8a3b      	ldrh	r3, [r7, #16]
 8015c0a:	3304      	adds	r3, #4
 8015c0c:	4a2f      	ldr	r2, [pc, #188]	; (8015ccc <ce303_tarif+0x1518>)
 8015c0e:	5cd3      	ldrb	r3, [r2, r3]
 8015c10:	2b29      	cmp	r3, #41	; 0x29
 8015c12:	d110      	bne.n	8015c36 <ce303_tarif+0x1482>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+3])-0x30)*100;
 8015c14:	8a3b      	ldrh	r3, [r7, #16]
 8015c16:	3303      	adds	r3, #3
 8015c18:	4a2c      	ldr	r2, [pc, #176]	; (8015ccc <ce303_tarif+0x1518>)
 8015c1a:	5cd3      	ldrb	r3, [r2, r3]
 8015c1c:	3b30      	subs	r3, #48	; 0x30
 8015c1e:	b29b      	uxth	r3, r3
 8015c20:	461a      	mov	r2, r3
 8015c22:	0092      	lsls	r2, r2, #2
 8015c24:	4413      	add	r3, r2
 8015c26:	461a      	mov	r2, r3
 8015c28:	0091      	lsls	r1, r2, #2
 8015c2a:	461a      	mov	r2, r3
 8015c2c:	460b      	mov	r3, r1
 8015c2e:	4413      	add	r3, r2
 8015c30:	009b      	lsls	r3, r3, #2
 8015c32:	82fb      	strh	r3, [r7, #22]
 8015c34:	e076      	b.n	8015d24 <ce303_tarif+0x1570>
				}
				else if( meter_rx_buffer[i+5] == 0x29 ) // если 2 разряда после запятой
 8015c36:	8a3b      	ldrh	r3, [r7, #16]
 8015c38:	3305      	adds	r3, #5
 8015c3a:	4a24      	ldr	r2, [pc, #144]	; (8015ccc <ce303_tarif+0x1518>)
 8015c3c:	5cd3      	ldrb	r3, [r2, r3]
 8015c3e:	2b29      	cmp	r3, #41	; 0x29
 8015c40:	d117      	bne.n	8015c72 <ce303_tarif+0x14be>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30))*10;
 8015c42:	8a3b      	ldrh	r3, [r7, #16]
 8015c44:	3303      	adds	r3, #3
 8015c46:	4a21      	ldr	r2, [pc, #132]	; (8015ccc <ce303_tarif+0x1518>)
 8015c48:	5cd3      	ldrb	r3, [r2, r3]
 8015c4a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8015c4e:	4613      	mov	r3, r2
 8015c50:	009b      	lsls	r3, r3, #2
 8015c52:	4413      	add	r3, r2
 8015c54:	005b      	lsls	r3, r3, #1
 8015c56:	4619      	mov	r1, r3
 8015c58:	8a3b      	ldrh	r3, [r7, #16]
 8015c5a:	3304      	adds	r3, #4
 8015c5c:	4a1b      	ldr	r2, [pc, #108]	; (8015ccc <ce303_tarif+0x1518>)
 8015c5e:	5cd3      	ldrb	r3, [r2, r3]
 8015c60:	3b30      	subs	r3, #48	; 0x30
 8015c62:	440b      	add	r3, r1
 8015c64:	b29b      	uxth	r3, r3
 8015c66:	461a      	mov	r2, r3
 8015c68:	0092      	lsls	r2, r2, #2
 8015c6a:	4413      	add	r3, r2
 8015c6c:	005b      	lsls	r3, r3, #1
 8015c6e:	82fb      	strh	r3, [r7, #22]
 8015c70:	e058      	b.n	8015d24 <ce303_tarif+0x1570>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 3 разряда после запятой
 8015c72:	8a3b      	ldrh	r3, [r7, #16]
 8015c74:	3306      	adds	r3, #6
 8015c76:	4a15      	ldr	r2, [pc, #84]	; (8015ccc <ce303_tarif+0x1518>)
 8015c78:	5cd3      	ldrb	r3, [r2, r3]
 8015c7a:	2b29      	cmp	r3, #41	; 0x29
 8015c7c:	d12c      	bne.n	8015cd8 <ce303_tarif+0x1524>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 8015c7e:	8a3b      	ldrh	r3, [r7, #16]
 8015c80:	3303      	adds	r3, #3
 8015c82:	4a12      	ldr	r2, [pc, #72]	; (8015ccc <ce303_tarif+0x1518>)
 8015c84:	5cd3      	ldrb	r3, [r2, r3]
 8015c86:	3b30      	subs	r3, #48	; 0x30
 8015c88:	b29b      	uxth	r3, r3
 8015c8a:	461a      	mov	r2, r3
 8015c8c:	0092      	lsls	r2, r2, #2
 8015c8e:	4413      	add	r3, r2
 8015c90:	461a      	mov	r2, r3
 8015c92:	0091      	lsls	r1, r2, #2
 8015c94:	461a      	mov	r2, r3
 8015c96:	460b      	mov	r3, r1
 8015c98:	4413      	add	r3, r2
 8015c9a:	009b      	lsls	r3, r3, #2
 8015c9c:	b29a      	uxth	r2, r3
 8015c9e:	8a3b      	ldrh	r3, [r7, #16]
 8015ca0:	3304      	adds	r3, #4
 8015ca2:	490a      	ldr	r1, [pc, #40]	; (8015ccc <ce303_tarif+0x1518>)
 8015ca4:	5ccb      	ldrb	r3, [r1, r3]
 8015ca6:	3b30      	subs	r3, #48	; 0x30
 8015ca8:	b29b      	uxth	r3, r3
 8015caa:	4619      	mov	r1, r3
 8015cac:	0089      	lsls	r1, r1, #2
 8015cae:	440b      	add	r3, r1
 8015cb0:	005b      	lsls	r3, r3, #1
 8015cb2:	b29b      	uxth	r3, r3
 8015cb4:	4413      	add	r3, r2
 8015cb6:	b29a      	uxth	r2, r3
 8015cb8:	8a3b      	ldrh	r3, [r7, #16]
 8015cba:	3305      	adds	r3, #5
 8015cbc:	4903      	ldr	r1, [pc, #12]	; (8015ccc <ce303_tarif+0x1518>)
 8015cbe:	5ccb      	ldrb	r3, [r1, r3]
 8015cc0:	b29b      	uxth	r3, r3
 8015cc2:	4413      	add	r3, r2
 8015cc4:	b29b      	uxth	r3, r3
 8015cc6:	3b30      	subs	r3, #48	; 0x30
 8015cc8:	82fb      	strh	r3, [r7, #22]
 8015cca:	e02b      	b.n	8015d24 <ce303_tarif+0x1570>
 8015ccc:	2000994c 	.word	0x2000994c
 8015cd0:	20009af8 	.word	0x20009af8
 8015cd4:	2000a174 	.word	0x2000a174
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 8015cd8:	8a3b      	ldrh	r3, [r7, #16]
 8015cda:	3303      	adds	r3, #3
 8015cdc:	4ab0      	ldr	r2, [pc, #704]	; (8015fa0 <ce303_tarif+0x17ec>)
 8015cde:	5cd3      	ldrb	r3, [r2, r3]
 8015ce0:	3b30      	subs	r3, #48	; 0x30
 8015ce2:	b29b      	uxth	r3, r3
 8015ce4:	461a      	mov	r2, r3
 8015ce6:	0092      	lsls	r2, r2, #2
 8015ce8:	4413      	add	r3, r2
 8015cea:	461a      	mov	r2, r3
 8015cec:	0091      	lsls	r1, r2, #2
 8015cee:	461a      	mov	r2, r3
 8015cf0:	460b      	mov	r3, r1
 8015cf2:	4413      	add	r3, r2
 8015cf4:	009b      	lsls	r3, r3, #2
 8015cf6:	b29a      	uxth	r2, r3
 8015cf8:	8a3b      	ldrh	r3, [r7, #16]
 8015cfa:	3304      	adds	r3, #4
 8015cfc:	49a8      	ldr	r1, [pc, #672]	; (8015fa0 <ce303_tarif+0x17ec>)
 8015cfe:	5ccb      	ldrb	r3, [r1, r3]
 8015d00:	3b30      	subs	r3, #48	; 0x30
 8015d02:	b29b      	uxth	r3, r3
 8015d04:	4619      	mov	r1, r3
 8015d06:	0089      	lsls	r1, r1, #2
 8015d08:	440b      	add	r3, r1
 8015d0a:	005b      	lsls	r3, r3, #1
 8015d0c:	b29b      	uxth	r3, r3
 8015d0e:	4413      	add	r3, r2
 8015d10:	b29a      	uxth	r2, r3
 8015d12:	8a3b      	ldrh	r3, [r7, #16]
 8015d14:	3305      	adds	r3, #5
 8015d16:	49a2      	ldr	r1, [pc, #648]	; (8015fa0 <ce303_tarif+0x17ec>)
 8015d18:	5ccb      	ldrb	r3, [r1, r3]
 8015d1a:	b29b      	uxth	r3, r3
 8015d1c:	4413      	add	r3, r2
 8015d1e:	b29b      	uxth	r3, r3
 8015d20:	3b30      	subs	r3, #48	; 0x30
 8015d22:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8015d24:	4b9f      	ldr	r3, [pc, #636]	; (8015fa4 <ce303_tarif+0x17f0>)
 8015d26:	681b      	ldr	r3, [r3, #0]
 8015d28:	f04f 31ff 	mov.w	r1, #4294967295
 8015d2c:	4618      	mov	r0, r3
 8015d2e:	f7f2 fdf5 	bl	800891c <osMutexWait>
				fm25v02_write(2*CE_303_TARIF2_POWER_H_REG, ((uint8_t)(temp>>24)) );
 8015d32:	68bb      	ldr	r3, [r7, #8]
 8015d34:	0e1b      	lsrs	r3, r3, #24
 8015d36:	b2db      	uxtb	r3, r3
 8015d38:	4619      	mov	r1, r3
 8015d3a:	f242 008e 	movw	r0, #8334	; 0x208e
 8015d3e:	f000 ffaf 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 8015d42:	68bb      	ldr	r3, [r7, #8]
 8015d44:	0c1b      	lsrs	r3, r3, #16
 8015d46:	b2db      	uxtb	r3, r3
 8015d48:	4619      	mov	r1, r3
 8015d4a:	f242 008f 	movw	r0, #8335	; 0x208f
 8015d4e:	f000 ffa7 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_L_REG, ((uint8_t)(temp>>8)) );
 8015d52:	68bb      	ldr	r3, [r7, #8]
 8015d54:	0a1b      	lsrs	r3, r3, #8
 8015d56:	b2db      	uxtb	r3, r3
 8015d58:	4619      	mov	r1, r3
 8015d5a:	f242 0090 	movw	r0, #8336	; 0x2090
 8015d5e:	f000 ff9f 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_L_REG+1, ((uint8_t)temp) );
 8015d62:	68bb      	ldr	r3, [r7, #8]
 8015d64:	b2db      	uxtb	r3, r3
 8015d66:	4619      	mov	r1, r3
 8015d68:	f242 0091 	movw	r0, #8337	; 0x2091
 8015d6c:	f000 ff98 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_MIL_REG, ((uint8_t)(temp_mil>>8)) );
 8015d70:	8afb      	ldrh	r3, [r7, #22]
 8015d72:	0a1b      	lsrs	r3, r3, #8
 8015d74:	b29b      	uxth	r3, r3
 8015d76:	b2db      	uxtb	r3, r3
 8015d78:	4619      	mov	r1, r3
 8015d7a:	f242 0092 	movw	r0, #8338	; 0x2092
 8015d7e:	f000 ff8f 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_MIL_REG+1, ((uint8_t)(temp_mil)) );
 8015d82:	8afb      	ldrh	r3, [r7, #22]
 8015d84:	b2db      	uxtb	r3, r3
 8015d86:	4619      	mov	r1, r3
 8015d88:	f242 0093 	movw	r0, #8339	; 0x2093
 8015d8c:	f000 ff88 	bl	8016ca0 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8015d90:	4b84      	ldr	r3, [pc, #528]	; (8015fa4 <ce303_tarif+0x17f0>)
 8015d92:	681b      	ldr	r3, [r3, #0]
 8015d94:	4618      	mov	r0, r3
 8015d96:	f7f2 fe0f 	bl	80089b8 <osMutexRelease>
				status_registers.ce303_tarif2_power_h_reg = (uint16_t)(temp>>16);
 8015d9a:	68bb      	ldr	r3, [r7, #8]
 8015d9c:	0c1b      	lsrs	r3, r3, #16
 8015d9e:	b29a      	uxth	r2, r3
 8015da0:	4b81      	ldr	r3, [pc, #516]	; (8015fa8 <ce303_tarif+0x17f4>)
 8015da2:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
				status_registers.ce303_tarif2_power_l_reg = (uint16_t)temp;
 8015da6:	68bb      	ldr	r3, [r7, #8]
 8015da8:	b29a      	uxth	r2, r3
 8015daa:	4b7f      	ldr	r3, [pc, #508]	; (8015fa8 <ce303_tarif+0x17f4>)
 8015dac:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
				status_registers.ce303_tarif2_power_mil_reg =  temp_mil;
 8015db0:	4a7d      	ldr	r2, [pc, #500]	; (8015fa8 <ce303_tarif+0x17f4>)
 8015db2:	8afb      	ldrh	r3, [r7, #22]
 8015db4:	f8a2 3092 	strh.w	r3, [r2, #146]	; 0x92
				tarif_2_state = 1;
 8015db8:	2301      	movs	r3, #1
 8015dba:	74fb      	strb	r3, [r7, #19]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 8015dbc:	f000 bf07 	b.w	8016bce <ce303_tarif+0x241a>

			}

			else if( meter_rx_buffer[i+3] == 0x2E) // 2 цифры перед запятой
 8015dc0:	8a3b      	ldrh	r3, [r7, #16]
 8015dc2:	3303      	adds	r3, #3
 8015dc4:	4a76      	ldr	r2, [pc, #472]	; (8015fa0 <ce303_tarif+0x17ec>)
 8015dc6:	5cd3      	ldrb	r3, [r2, r3]
 8015dc8:	2b2e      	cmp	r3, #46	; 0x2e
 8015dca:	f040 80ef 	bne.w	8015fac <ce303_tarif+0x17f8>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+2])-0x30);
 8015dce:	8a3b      	ldrh	r3, [r7, #16]
 8015dd0:	3301      	adds	r3, #1
 8015dd2:	4a73      	ldr	r2, [pc, #460]	; (8015fa0 <ce303_tarif+0x17ec>)
 8015dd4:	5cd3      	ldrb	r3, [r2, r3]
 8015dd6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8015dda:	4613      	mov	r3, r2
 8015ddc:	009b      	lsls	r3, r3, #2
 8015dde:	4413      	add	r3, r2
 8015de0:	005b      	lsls	r3, r3, #1
 8015de2:	4619      	mov	r1, r3
 8015de4:	8a3b      	ldrh	r3, [r7, #16]
 8015de6:	3302      	adds	r3, #2
 8015de8:	4a6d      	ldr	r2, [pc, #436]	; (8015fa0 <ce303_tarif+0x17ec>)
 8015dea:	5cd3      	ldrb	r3, [r2, r3]
 8015dec:	3b30      	subs	r3, #48	; 0x30
 8015dee:	440b      	add	r3, r1
 8015df0:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+5] == 0x29 ) // если 1 разряд после запятой
 8015df2:	8a3b      	ldrh	r3, [r7, #16]
 8015df4:	3305      	adds	r3, #5
 8015df6:	4a6a      	ldr	r2, [pc, #424]	; (8015fa0 <ce303_tarif+0x17ec>)
 8015df8:	5cd3      	ldrb	r3, [r2, r3]
 8015dfa:	2b29      	cmp	r3, #41	; 0x29
 8015dfc:	d110      	bne.n	8015e20 <ce303_tarif+0x166c>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+4])-0x30)*100;
 8015dfe:	8a3b      	ldrh	r3, [r7, #16]
 8015e00:	3304      	adds	r3, #4
 8015e02:	4a67      	ldr	r2, [pc, #412]	; (8015fa0 <ce303_tarif+0x17ec>)
 8015e04:	5cd3      	ldrb	r3, [r2, r3]
 8015e06:	3b30      	subs	r3, #48	; 0x30
 8015e08:	b29b      	uxth	r3, r3
 8015e0a:	461a      	mov	r2, r3
 8015e0c:	0092      	lsls	r2, r2, #2
 8015e0e:	4413      	add	r3, r2
 8015e10:	461a      	mov	r2, r3
 8015e12:	0091      	lsls	r1, r2, #2
 8015e14:	461a      	mov	r2, r3
 8015e16:	460b      	mov	r3, r1
 8015e18:	4413      	add	r3, r2
 8015e1a:	009b      	lsls	r3, r3, #2
 8015e1c:	82fb      	strh	r3, [r7, #22]
 8015e1e:	e070      	b.n	8015f02 <ce303_tarif+0x174e>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 2 разряда после запятой
 8015e20:	8a3b      	ldrh	r3, [r7, #16]
 8015e22:	3306      	adds	r3, #6
 8015e24:	4a5e      	ldr	r2, [pc, #376]	; (8015fa0 <ce303_tarif+0x17ec>)
 8015e26:	5cd3      	ldrb	r3, [r2, r3]
 8015e28:	2b29      	cmp	r3, #41	; 0x29
 8015e2a:	d117      	bne.n	8015e5c <ce303_tarif+0x16a8>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30))*10;
 8015e2c:	8a3b      	ldrh	r3, [r7, #16]
 8015e2e:	3304      	adds	r3, #4
 8015e30:	4a5b      	ldr	r2, [pc, #364]	; (8015fa0 <ce303_tarif+0x17ec>)
 8015e32:	5cd3      	ldrb	r3, [r2, r3]
 8015e34:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8015e38:	4613      	mov	r3, r2
 8015e3a:	009b      	lsls	r3, r3, #2
 8015e3c:	4413      	add	r3, r2
 8015e3e:	005b      	lsls	r3, r3, #1
 8015e40:	4619      	mov	r1, r3
 8015e42:	8a3b      	ldrh	r3, [r7, #16]
 8015e44:	3305      	adds	r3, #5
 8015e46:	4a56      	ldr	r2, [pc, #344]	; (8015fa0 <ce303_tarif+0x17ec>)
 8015e48:	5cd3      	ldrb	r3, [r2, r3]
 8015e4a:	3b30      	subs	r3, #48	; 0x30
 8015e4c:	440b      	add	r3, r1
 8015e4e:	b29b      	uxth	r3, r3
 8015e50:	461a      	mov	r2, r3
 8015e52:	0092      	lsls	r2, r2, #2
 8015e54:	4413      	add	r3, r2
 8015e56:	005b      	lsls	r3, r3, #1
 8015e58:	82fb      	strh	r3, [r7, #22]
 8015e5a:	e052      	b.n	8015f02 <ce303_tarif+0x174e>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 3 разряда после запятой
 8015e5c:	8a3b      	ldrh	r3, [r7, #16]
 8015e5e:	3307      	adds	r3, #7
 8015e60:	4a4f      	ldr	r2, [pc, #316]	; (8015fa0 <ce303_tarif+0x17ec>)
 8015e62:	5cd3      	ldrb	r3, [r2, r3]
 8015e64:	2b29      	cmp	r3, #41	; 0x29
 8015e66:	d126      	bne.n	8015eb6 <ce303_tarif+0x1702>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 8015e68:	8a3b      	ldrh	r3, [r7, #16]
 8015e6a:	3304      	adds	r3, #4
 8015e6c:	4a4c      	ldr	r2, [pc, #304]	; (8015fa0 <ce303_tarif+0x17ec>)
 8015e6e:	5cd3      	ldrb	r3, [r2, r3]
 8015e70:	3b30      	subs	r3, #48	; 0x30
 8015e72:	b29b      	uxth	r3, r3
 8015e74:	461a      	mov	r2, r3
 8015e76:	0092      	lsls	r2, r2, #2
 8015e78:	4413      	add	r3, r2
 8015e7a:	461a      	mov	r2, r3
 8015e7c:	0091      	lsls	r1, r2, #2
 8015e7e:	461a      	mov	r2, r3
 8015e80:	460b      	mov	r3, r1
 8015e82:	4413      	add	r3, r2
 8015e84:	009b      	lsls	r3, r3, #2
 8015e86:	b29a      	uxth	r2, r3
 8015e88:	8a3b      	ldrh	r3, [r7, #16]
 8015e8a:	3305      	adds	r3, #5
 8015e8c:	4944      	ldr	r1, [pc, #272]	; (8015fa0 <ce303_tarif+0x17ec>)
 8015e8e:	5ccb      	ldrb	r3, [r1, r3]
 8015e90:	3b30      	subs	r3, #48	; 0x30
 8015e92:	b29b      	uxth	r3, r3
 8015e94:	4619      	mov	r1, r3
 8015e96:	0089      	lsls	r1, r1, #2
 8015e98:	440b      	add	r3, r1
 8015e9a:	005b      	lsls	r3, r3, #1
 8015e9c:	b29b      	uxth	r3, r3
 8015e9e:	4413      	add	r3, r2
 8015ea0:	b29a      	uxth	r2, r3
 8015ea2:	8a3b      	ldrh	r3, [r7, #16]
 8015ea4:	3306      	adds	r3, #6
 8015ea6:	493e      	ldr	r1, [pc, #248]	; (8015fa0 <ce303_tarif+0x17ec>)
 8015ea8:	5ccb      	ldrb	r3, [r1, r3]
 8015eaa:	b29b      	uxth	r3, r3
 8015eac:	4413      	add	r3, r2
 8015eae:	b29b      	uxth	r3, r3
 8015eb0:	3b30      	subs	r3, #48	; 0x30
 8015eb2:	82fb      	strh	r3, [r7, #22]
 8015eb4:	e025      	b.n	8015f02 <ce303_tarif+0x174e>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 8015eb6:	8a3b      	ldrh	r3, [r7, #16]
 8015eb8:	3304      	adds	r3, #4
 8015eba:	4a39      	ldr	r2, [pc, #228]	; (8015fa0 <ce303_tarif+0x17ec>)
 8015ebc:	5cd3      	ldrb	r3, [r2, r3]
 8015ebe:	3b30      	subs	r3, #48	; 0x30
 8015ec0:	b29b      	uxth	r3, r3
 8015ec2:	461a      	mov	r2, r3
 8015ec4:	0092      	lsls	r2, r2, #2
 8015ec6:	4413      	add	r3, r2
 8015ec8:	461a      	mov	r2, r3
 8015eca:	0091      	lsls	r1, r2, #2
 8015ecc:	461a      	mov	r2, r3
 8015ece:	460b      	mov	r3, r1
 8015ed0:	4413      	add	r3, r2
 8015ed2:	009b      	lsls	r3, r3, #2
 8015ed4:	b29a      	uxth	r2, r3
 8015ed6:	8a3b      	ldrh	r3, [r7, #16]
 8015ed8:	3305      	adds	r3, #5
 8015eda:	4931      	ldr	r1, [pc, #196]	; (8015fa0 <ce303_tarif+0x17ec>)
 8015edc:	5ccb      	ldrb	r3, [r1, r3]
 8015ede:	3b30      	subs	r3, #48	; 0x30
 8015ee0:	b29b      	uxth	r3, r3
 8015ee2:	4619      	mov	r1, r3
 8015ee4:	0089      	lsls	r1, r1, #2
 8015ee6:	440b      	add	r3, r1
 8015ee8:	005b      	lsls	r3, r3, #1
 8015eea:	b29b      	uxth	r3, r3
 8015eec:	4413      	add	r3, r2
 8015eee:	b29a      	uxth	r2, r3
 8015ef0:	8a3b      	ldrh	r3, [r7, #16]
 8015ef2:	3306      	adds	r3, #6
 8015ef4:	492a      	ldr	r1, [pc, #168]	; (8015fa0 <ce303_tarif+0x17ec>)
 8015ef6:	5ccb      	ldrb	r3, [r1, r3]
 8015ef8:	b29b      	uxth	r3, r3
 8015efa:	4413      	add	r3, r2
 8015efc:	b29b      	uxth	r3, r3
 8015efe:	3b30      	subs	r3, #48	; 0x30
 8015f00:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8015f02:	4b28      	ldr	r3, [pc, #160]	; (8015fa4 <ce303_tarif+0x17f0>)
 8015f04:	681b      	ldr	r3, [r3, #0]
 8015f06:	f04f 31ff 	mov.w	r1, #4294967295
 8015f0a:	4618      	mov	r0, r3
 8015f0c:	f7f2 fd06 	bl	800891c <osMutexWait>
				fm25v02_write(2*CE_303_TARIF2_POWER_H_REG, ((uint8_t)(temp>>24)) );
 8015f10:	68bb      	ldr	r3, [r7, #8]
 8015f12:	0e1b      	lsrs	r3, r3, #24
 8015f14:	b2db      	uxtb	r3, r3
 8015f16:	4619      	mov	r1, r3
 8015f18:	f242 008e 	movw	r0, #8334	; 0x208e
 8015f1c:	f000 fec0 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 8015f20:	68bb      	ldr	r3, [r7, #8]
 8015f22:	0c1b      	lsrs	r3, r3, #16
 8015f24:	b2db      	uxtb	r3, r3
 8015f26:	4619      	mov	r1, r3
 8015f28:	f242 008f 	movw	r0, #8335	; 0x208f
 8015f2c:	f000 feb8 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_L_REG, ((uint8_t)(temp>>8)) );
 8015f30:	68bb      	ldr	r3, [r7, #8]
 8015f32:	0a1b      	lsrs	r3, r3, #8
 8015f34:	b2db      	uxtb	r3, r3
 8015f36:	4619      	mov	r1, r3
 8015f38:	f242 0090 	movw	r0, #8336	; 0x2090
 8015f3c:	f000 feb0 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_L_REG+1, ((uint8_t)temp) );
 8015f40:	68bb      	ldr	r3, [r7, #8]
 8015f42:	b2db      	uxtb	r3, r3
 8015f44:	4619      	mov	r1, r3
 8015f46:	f242 0091 	movw	r0, #8337	; 0x2091
 8015f4a:	f000 fea9 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_MIL_REG, ((uint8_t)(temp_mil>>8)) );
 8015f4e:	8afb      	ldrh	r3, [r7, #22]
 8015f50:	0a1b      	lsrs	r3, r3, #8
 8015f52:	b29b      	uxth	r3, r3
 8015f54:	b2db      	uxtb	r3, r3
 8015f56:	4619      	mov	r1, r3
 8015f58:	f242 0092 	movw	r0, #8338	; 0x2092
 8015f5c:	f000 fea0 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_MIL_REG+1, ((uint8_t)(temp_mil)) );
 8015f60:	8afb      	ldrh	r3, [r7, #22]
 8015f62:	b2db      	uxtb	r3, r3
 8015f64:	4619      	mov	r1, r3
 8015f66:	f242 0093 	movw	r0, #8339	; 0x2093
 8015f6a:	f000 fe99 	bl	8016ca0 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8015f6e:	4b0d      	ldr	r3, [pc, #52]	; (8015fa4 <ce303_tarif+0x17f0>)
 8015f70:	681b      	ldr	r3, [r3, #0]
 8015f72:	4618      	mov	r0, r3
 8015f74:	f7f2 fd20 	bl	80089b8 <osMutexRelease>
				status_registers.ce303_tarif2_power_h_reg = (uint16_t)(temp>>16);
 8015f78:	68bb      	ldr	r3, [r7, #8]
 8015f7a:	0c1b      	lsrs	r3, r3, #16
 8015f7c:	b29a      	uxth	r2, r3
 8015f7e:	4b0a      	ldr	r3, [pc, #40]	; (8015fa8 <ce303_tarif+0x17f4>)
 8015f80:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
				status_registers.ce303_tarif2_power_l_reg = (uint16_t)temp;
 8015f84:	68bb      	ldr	r3, [r7, #8]
 8015f86:	b29a      	uxth	r2, r3
 8015f88:	4b07      	ldr	r3, [pc, #28]	; (8015fa8 <ce303_tarif+0x17f4>)
 8015f8a:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
				status_registers.ce303_tarif2_power_mil_reg =  temp_mil;
 8015f8e:	4a06      	ldr	r2, [pc, #24]	; (8015fa8 <ce303_tarif+0x17f4>)
 8015f90:	8afb      	ldrh	r3, [r7, #22]
 8015f92:	f8a2 3092 	strh.w	r3, [r2, #146]	; 0x92
				tarif_2_state = 1;
 8015f96:	2301      	movs	r3, #1
 8015f98:	74fb      	strb	r3, [r7, #19]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 8015f9a:	f000 be18 	b.w	8016bce <ce303_tarif+0x241a>
 8015f9e:	bf00      	nop
 8015fa0:	2000994c 	.word	0x2000994c
 8015fa4:	20009af8 	.word	0x20009af8
 8015fa8:	2000a174 	.word	0x2000a174

			}

			else if( meter_rx_buffer[i+4] == 0x2E) // 3 цифры перед запятой
 8015fac:	8a3b      	ldrh	r3, [r7, #16]
 8015fae:	3304      	adds	r3, #4
 8015fb0:	4aaa      	ldr	r2, [pc, #680]	; (801625c <ce303_tarif+0x1aa8>)
 8015fb2:	5cd3      	ldrb	r3, [r2, r3]
 8015fb4:	2b2e      	cmp	r3, #46	; 0x2e
 8015fb6:	f040 80f0 	bne.w	801619a <ce303_tarif+0x19e6>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+3])-0x30);
 8015fba:	8a3b      	ldrh	r3, [r7, #16]
 8015fbc:	3301      	adds	r3, #1
 8015fbe:	4aa7      	ldr	r2, [pc, #668]	; (801625c <ce303_tarif+0x1aa8>)
 8015fc0:	5cd3      	ldrb	r3, [r2, r3]
 8015fc2:	3b30      	subs	r3, #48	; 0x30
 8015fc4:	2264      	movs	r2, #100	; 0x64
 8015fc6:	fb02 f103 	mul.w	r1, r2, r3
 8015fca:	8a3b      	ldrh	r3, [r7, #16]
 8015fcc:	3302      	adds	r3, #2
 8015fce:	4aa3      	ldr	r2, [pc, #652]	; (801625c <ce303_tarif+0x1aa8>)
 8015fd0:	5cd3      	ldrb	r3, [r2, r3]
 8015fd2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8015fd6:	4613      	mov	r3, r2
 8015fd8:	009b      	lsls	r3, r3, #2
 8015fda:	4413      	add	r3, r2
 8015fdc:	005b      	lsls	r3, r3, #1
 8015fde:	18ca      	adds	r2, r1, r3
 8015fe0:	8a3b      	ldrh	r3, [r7, #16]
 8015fe2:	3303      	adds	r3, #3
 8015fe4:	499d      	ldr	r1, [pc, #628]	; (801625c <ce303_tarif+0x1aa8>)
 8015fe6:	5ccb      	ldrb	r3, [r1, r3]
 8015fe8:	3b30      	subs	r3, #48	; 0x30
 8015fea:	4413      	add	r3, r2
 8015fec:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+6] == 0x29 ) // если 1 разряд после запятой
 8015fee:	8a3b      	ldrh	r3, [r7, #16]
 8015ff0:	3306      	adds	r3, #6
 8015ff2:	4a9a      	ldr	r2, [pc, #616]	; (801625c <ce303_tarif+0x1aa8>)
 8015ff4:	5cd3      	ldrb	r3, [r2, r3]
 8015ff6:	2b29      	cmp	r3, #41	; 0x29
 8015ff8:	d110      	bne.n	801601c <ce303_tarif+0x1868>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+5])-0x30)*100;
 8015ffa:	8a3b      	ldrh	r3, [r7, #16]
 8015ffc:	3305      	adds	r3, #5
 8015ffe:	4a97      	ldr	r2, [pc, #604]	; (801625c <ce303_tarif+0x1aa8>)
 8016000:	5cd3      	ldrb	r3, [r2, r3]
 8016002:	3b30      	subs	r3, #48	; 0x30
 8016004:	b29b      	uxth	r3, r3
 8016006:	461a      	mov	r2, r3
 8016008:	0092      	lsls	r2, r2, #2
 801600a:	4413      	add	r3, r2
 801600c:	461a      	mov	r2, r3
 801600e:	0091      	lsls	r1, r2, #2
 8016010:	461a      	mov	r2, r3
 8016012:	460b      	mov	r3, r1
 8016014:	4413      	add	r3, r2
 8016016:	009b      	lsls	r3, r3, #2
 8016018:	82fb      	strh	r3, [r7, #22]
 801601a:	e070      	b.n	80160fe <ce303_tarif+0x194a>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 2 разряда после запятой
 801601c:	8a3b      	ldrh	r3, [r7, #16]
 801601e:	3307      	adds	r3, #7
 8016020:	4a8e      	ldr	r2, [pc, #568]	; (801625c <ce303_tarif+0x1aa8>)
 8016022:	5cd3      	ldrb	r3, [r2, r3]
 8016024:	2b29      	cmp	r3, #41	; 0x29
 8016026:	d117      	bne.n	8016058 <ce303_tarif+0x18a4>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30))*10;
 8016028:	8a3b      	ldrh	r3, [r7, #16]
 801602a:	3305      	adds	r3, #5
 801602c:	4a8b      	ldr	r2, [pc, #556]	; (801625c <ce303_tarif+0x1aa8>)
 801602e:	5cd3      	ldrb	r3, [r2, r3]
 8016030:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8016034:	4613      	mov	r3, r2
 8016036:	009b      	lsls	r3, r3, #2
 8016038:	4413      	add	r3, r2
 801603a:	005b      	lsls	r3, r3, #1
 801603c:	4619      	mov	r1, r3
 801603e:	8a3b      	ldrh	r3, [r7, #16]
 8016040:	3306      	adds	r3, #6
 8016042:	4a86      	ldr	r2, [pc, #536]	; (801625c <ce303_tarif+0x1aa8>)
 8016044:	5cd3      	ldrb	r3, [r2, r3]
 8016046:	3b30      	subs	r3, #48	; 0x30
 8016048:	440b      	add	r3, r1
 801604a:	b29b      	uxth	r3, r3
 801604c:	461a      	mov	r2, r3
 801604e:	0092      	lsls	r2, r2, #2
 8016050:	4413      	add	r3, r2
 8016052:	005b      	lsls	r3, r3, #1
 8016054:	82fb      	strh	r3, [r7, #22]
 8016056:	e052      	b.n	80160fe <ce303_tarif+0x194a>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 3 разряда после запятой
 8016058:	8a3b      	ldrh	r3, [r7, #16]
 801605a:	3308      	adds	r3, #8
 801605c:	4a7f      	ldr	r2, [pc, #508]	; (801625c <ce303_tarif+0x1aa8>)
 801605e:	5cd3      	ldrb	r3, [r2, r3]
 8016060:	2b29      	cmp	r3, #41	; 0x29
 8016062:	d126      	bne.n	80160b2 <ce303_tarif+0x18fe>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 8016064:	8a3b      	ldrh	r3, [r7, #16]
 8016066:	3305      	adds	r3, #5
 8016068:	4a7c      	ldr	r2, [pc, #496]	; (801625c <ce303_tarif+0x1aa8>)
 801606a:	5cd3      	ldrb	r3, [r2, r3]
 801606c:	3b30      	subs	r3, #48	; 0x30
 801606e:	b29b      	uxth	r3, r3
 8016070:	461a      	mov	r2, r3
 8016072:	0092      	lsls	r2, r2, #2
 8016074:	4413      	add	r3, r2
 8016076:	461a      	mov	r2, r3
 8016078:	0091      	lsls	r1, r2, #2
 801607a:	461a      	mov	r2, r3
 801607c:	460b      	mov	r3, r1
 801607e:	4413      	add	r3, r2
 8016080:	009b      	lsls	r3, r3, #2
 8016082:	b29a      	uxth	r2, r3
 8016084:	8a3b      	ldrh	r3, [r7, #16]
 8016086:	3306      	adds	r3, #6
 8016088:	4974      	ldr	r1, [pc, #464]	; (801625c <ce303_tarif+0x1aa8>)
 801608a:	5ccb      	ldrb	r3, [r1, r3]
 801608c:	3b30      	subs	r3, #48	; 0x30
 801608e:	b29b      	uxth	r3, r3
 8016090:	4619      	mov	r1, r3
 8016092:	0089      	lsls	r1, r1, #2
 8016094:	440b      	add	r3, r1
 8016096:	005b      	lsls	r3, r3, #1
 8016098:	b29b      	uxth	r3, r3
 801609a:	4413      	add	r3, r2
 801609c:	b29a      	uxth	r2, r3
 801609e:	8a3b      	ldrh	r3, [r7, #16]
 80160a0:	3307      	adds	r3, #7
 80160a2:	496e      	ldr	r1, [pc, #440]	; (801625c <ce303_tarif+0x1aa8>)
 80160a4:	5ccb      	ldrb	r3, [r1, r3]
 80160a6:	b29b      	uxth	r3, r3
 80160a8:	4413      	add	r3, r2
 80160aa:	b29b      	uxth	r3, r3
 80160ac:	3b30      	subs	r3, #48	; 0x30
 80160ae:	82fb      	strh	r3, [r7, #22]
 80160b0:	e025      	b.n	80160fe <ce303_tarif+0x194a>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 80160b2:	8a3b      	ldrh	r3, [r7, #16]
 80160b4:	3305      	adds	r3, #5
 80160b6:	4a69      	ldr	r2, [pc, #420]	; (801625c <ce303_tarif+0x1aa8>)
 80160b8:	5cd3      	ldrb	r3, [r2, r3]
 80160ba:	3b30      	subs	r3, #48	; 0x30
 80160bc:	b29b      	uxth	r3, r3
 80160be:	461a      	mov	r2, r3
 80160c0:	0092      	lsls	r2, r2, #2
 80160c2:	4413      	add	r3, r2
 80160c4:	461a      	mov	r2, r3
 80160c6:	0091      	lsls	r1, r2, #2
 80160c8:	461a      	mov	r2, r3
 80160ca:	460b      	mov	r3, r1
 80160cc:	4413      	add	r3, r2
 80160ce:	009b      	lsls	r3, r3, #2
 80160d0:	b29a      	uxth	r2, r3
 80160d2:	8a3b      	ldrh	r3, [r7, #16]
 80160d4:	3306      	adds	r3, #6
 80160d6:	4961      	ldr	r1, [pc, #388]	; (801625c <ce303_tarif+0x1aa8>)
 80160d8:	5ccb      	ldrb	r3, [r1, r3]
 80160da:	3b30      	subs	r3, #48	; 0x30
 80160dc:	b29b      	uxth	r3, r3
 80160de:	4619      	mov	r1, r3
 80160e0:	0089      	lsls	r1, r1, #2
 80160e2:	440b      	add	r3, r1
 80160e4:	005b      	lsls	r3, r3, #1
 80160e6:	b29b      	uxth	r3, r3
 80160e8:	4413      	add	r3, r2
 80160ea:	b29a      	uxth	r2, r3
 80160ec:	8a3b      	ldrh	r3, [r7, #16]
 80160ee:	3307      	adds	r3, #7
 80160f0:	495a      	ldr	r1, [pc, #360]	; (801625c <ce303_tarif+0x1aa8>)
 80160f2:	5ccb      	ldrb	r3, [r1, r3]
 80160f4:	b29b      	uxth	r3, r3
 80160f6:	4413      	add	r3, r2
 80160f8:	b29b      	uxth	r3, r3
 80160fa:	3b30      	subs	r3, #48	; 0x30
 80160fc:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 80160fe:	4b58      	ldr	r3, [pc, #352]	; (8016260 <ce303_tarif+0x1aac>)
 8016100:	681b      	ldr	r3, [r3, #0]
 8016102:	f04f 31ff 	mov.w	r1, #4294967295
 8016106:	4618      	mov	r0, r3
 8016108:	f7f2 fc08 	bl	800891c <osMutexWait>
				fm25v02_write(2*CE_303_TARIF2_POWER_H_REG, ((uint8_t)(temp>>24)) );
 801610c:	68bb      	ldr	r3, [r7, #8]
 801610e:	0e1b      	lsrs	r3, r3, #24
 8016110:	b2db      	uxtb	r3, r3
 8016112:	4619      	mov	r1, r3
 8016114:	f242 008e 	movw	r0, #8334	; 0x208e
 8016118:	f000 fdc2 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 801611c:	68bb      	ldr	r3, [r7, #8]
 801611e:	0c1b      	lsrs	r3, r3, #16
 8016120:	b2db      	uxtb	r3, r3
 8016122:	4619      	mov	r1, r3
 8016124:	f242 008f 	movw	r0, #8335	; 0x208f
 8016128:	f000 fdba 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_L_REG, ((uint8_t)(temp>>8)) );
 801612c:	68bb      	ldr	r3, [r7, #8]
 801612e:	0a1b      	lsrs	r3, r3, #8
 8016130:	b2db      	uxtb	r3, r3
 8016132:	4619      	mov	r1, r3
 8016134:	f242 0090 	movw	r0, #8336	; 0x2090
 8016138:	f000 fdb2 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_L_REG+1, ((uint8_t)temp) );
 801613c:	68bb      	ldr	r3, [r7, #8]
 801613e:	b2db      	uxtb	r3, r3
 8016140:	4619      	mov	r1, r3
 8016142:	f242 0091 	movw	r0, #8337	; 0x2091
 8016146:	f000 fdab 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_MIL_REG, ((uint8_t)(temp_mil>>8)) );
 801614a:	8afb      	ldrh	r3, [r7, #22]
 801614c:	0a1b      	lsrs	r3, r3, #8
 801614e:	b29b      	uxth	r3, r3
 8016150:	b2db      	uxtb	r3, r3
 8016152:	4619      	mov	r1, r3
 8016154:	f242 0092 	movw	r0, #8338	; 0x2092
 8016158:	f000 fda2 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_MIL_REG+1, ((uint8_t)(temp_mil)) );
 801615c:	8afb      	ldrh	r3, [r7, #22]
 801615e:	b2db      	uxtb	r3, r3
 8016160:	4619      	mov	r1, r3
 8016162:	f242 0093 	movw	r0, #8339	; 0x2093
 8016166:	f000 fd9b 	bl	8016ca0 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 801616a:	4b3d      	ldr	r3, [pc, #244]	; (8016260 <ce303_tarif+0x1aac>)
 801616c:	681b      	ldr	r3, [r3, #0]
 801616e:	4618      	mov	r0, r3
 8016170:	f7f2 fc22 	bl	80089b8 <osMutexRelease>
				status_registers.ce303_tarif2_power_h_reg = (uint16_t)(temp>>16);
 8016174:	68bb      	ldr	r3, [r7, #8]
 8016176:	0c1b      	lsrs	r3, r3, #16
 8016178:	b29a      	uxth	r2, r3
 801617a:	4b3a      	ldr	r3, [pc, #232]	; (8016264 <ce303_tarif+0x1ab0>)
 801617c:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
				status_registers.ce303_tarif2_power_l_reg = (uint16_t)temp;
 8016180:	68bb      	ldr	r3, [r7, #8]
 8016182:	b29a      	uxth	r2, r3
 8016184:	4b37      	ldr	r3, [pc, #220]	; (8016264 <ce303_tarif+0x1ab0>)
 8016186:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
				status_registers.ce303_tarif2_power_mil_reg =  temp_mil;
 801618a:	4a36      	ldr	r2, [pc, #216]	; (8016264 <ce303_tarif+0x1ab0>)
 801618c:	8afb      	ldrh	r3, [r7, #22]
 801618e:	f8a2 3092 	strh.w	r3, [r2, #146]	; 0x92
				tarif_2_state = 1;
 8016192:	2301      	movs	r3, #1
 8016194:	74fb      	strb	r3, [r7, #19]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 8016196:	f000 bd1a 	b.w	8016bce <ce303_tarif+0x241a>

			}

			else if( meter_rx_buffer[i+5] == 0x2E) // четыре цифры перед запятой
 801619a:	8a3b      	ldrh	r3, [r7, #16]
 801619c:	3305      	adds	r3, #5
 801619e:	4a2f      	ldr	r2, [pc, #188]	; (801625c <ce303_tarif+0x1aa8>)
 80161a0:	5cd3      	ldrb	r3, [r2, r3]
 80161a2:	2b2e      	cmp	r3, #46	; 0x2e
 80161a4:	f040 8513 	bne.w	8016bce <ce303_tarif+0x241a>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30);
 80161a8:	8a3b      	ldrh	r3, [r7, #16]
 80161aa:	3301      	adds	r3, #1
 80161ac:	4a2b      	ldr	r2, [pc, #172]	; (801625c <ce303_tarif+0x1aa8>)
 80161ae:	5cd3      	ldrb	r3, [r2, r3]
 80161b0:	3b30      	subs	r3, #48	; 0x30
 80161b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80161b6:	fb02 f203 	mul.w	r2, r2, r3
 80161ba:	8a3b      	ldrh	r3, [r7, #16]
 80161bc:	3302      	adds	r3, #2
 80161be:	4927      	ldr	r1, [pc, #156]	; (801625c <ce303_tarif+0x1aa8>)
 80161c0:	5ccb      	ldrb	r3, [r1, r3]
 80161c2:	3b30      	subs	r3, #48	; 0x30
 80161c4:	2164      	movs	r1, #100	; 0x64
 80161c6:	fb01 f303 	mul.w	r3, r1, r3
 80161ca:	18d1      	adds	r1, r2, r3
 80161cc:	8a3b      	ldrh	r3, [r7, #16]
 80161ce:	3303      	adds	r3, #3
 80161d0:	4a22      	ldr	r2, [pc, #136]	; (801625c <ce303_tarif+0x1aa8>)
 80161d2:	5cd3      	ldrb	r3, [r2, r3]
 80161d4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80161d8:	4613      	mov	r3, r2
 80161da:	009b      	lsls	r3, r3, #2
 80161dc:	4413      	add	r3, r2
 80161de:	005b      	lsls	r3, r3, #1
 80161e0:	18ca      	adds	r2, r1, r3
 80161e2:	8a3b      	ldrh	r3, [r7, #16]
 80161e4:	3304      	adds	r3, #4
 80161e6:	491d      	ldr	r1, [pc, #116]	; (801625c <ce303_tarif+0x1aa8>)
 80161e8:	5ccb      	ldrb	r3, [r1, r3]
 80161ea:	3b30      	subs	r3, #48	; 0x30
 80161ec:	4413      	add	r3, r2
 80161ee:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+7] == 0x29 ) // если 1 разряд после запятой
 80161f0:	8a3b      	ldrh	r3, [r7, #16]
 80161f2:	3307      	adds	r3, #7
 80161f4:	4a19      	ldr	r2, [pc, #100]	; (801625c <ce303_tarif+0x1aa8>)
 80161f6:	5cd3      	ldrb	r3, [r2, r3]
 80161f8:	2b29      	cmp	r3, #41	; 0x29
 80161fa:	d110      	bne.n	801621e <ce303_tarif+0x1a6a>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+6])-0x30)*100;
 80161fc:	8a3b      	ldrh	r3, [r7, #16]
 80161fe:	3306      	adds	r3, #6
 8016200:	4a16      	ldr	r2, [pc, #88]	; (801625c <ce303_tarif+0x1aa8>)
 8016202:	5cd3      	ldrb	r3, [r2, r3]
 8016204:	3b30      	subs	r3, #48	; 0x30
 8016206:	b29b      	uxth	r3, r3
 8016208:	461a      	mov	r2, r3
 801620a:	0092      	lsls	r2, r2, #2
 801620c:	4413      	add	r3, r2
 801620e:	461a      	mov	r2, r3
 8016210:	0091      	lsls	r1, r2, #2
 8016212:	461a      	mov	r2, r3
 8016214:	460b      	mov	r3, r1
 8016216:	4413      	add	r3, r2
 8016218:	009b      	lsls	r3, r3, #2
 801621a:	82fb      	strh	r3, [r7, #22]
 801621c:	e077      	b.n	801630e <ce303_tarif+0x1b5a>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 2 разряда после запятой
 801621e:	8a3b      	ldrh	r3, [r7, #16]
 8016220:	3308      	adds	r3, #8
 8016222:	4a0e      	ldr	r2, [pc, #56]	; (801625c <ce303_tarif+0x1aa8>)
 8016224:	5cd3      	ldrb	r3, [r2, r3]
 8016226:	2b29      	cmp	r3, #41	; 0x29
 8016228:	d11e      	bne.n	8016268 <ce303_tarif+0x1ab4>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30))*10;
 801622a:	8a3b      	ldrh	r3, [r7, #16]
 801622c:	3306      	adds	r3, #6
 801622e:	4a0b      	ldr	r2, [pc, #44]	; (801625c <ce303_tarif+0x1aa8>)
 8016230:	5cd3      	ldrb	r3, [r2, r3]
 8016232:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8016236:	4613      	mov	r3, r2
 8016238:	009b      	lsls	r3, r3, #2
 801623a:	4413      	add	r3, r2
 801623c:	005b      	lsls	r3, r3, #1
 801623e:	4619      	mov	r1, r3
 8016240:	8a3b      	ldrh	r3, [r7, #16]
 8016242:	3307      	adds	r3, #7
 8016244:	4a05      	ldr	r2, [pc, #20]	; (801625c <ce303_tarif+0x1aa8>)
 8016246:	5cd3      	ldrb	r3, [r2, r3]
 8016248:	3b30      	subs	r3, #48	; 0x30
 801624a:	440b      	add	r3, r1
 801624c:	b29b      	uxth	r3, r3
 801624e:	461a      	mov	r2, r3
 8016250:	0092      	lsls	r2, r2, #2
 8016252:	4413      	add	r3, r2
 8016254:	005b      	lsls	r3, r3, #1
 8016256:	82fb      	strh	r3, [r7, #22]
 8016258:	e059      	b.n	801630e <ce303_tarif+0x1b5a>
 801625a:	bf00      	nop
 801625c:	2000994c 	.word	0x2000994c
 8016260:	20009af8 	.word	0x20009af8
 8016264:	2000a174 	.word	0x2000a174
				}
				else if( meter_rx_buffer[i+9] == 0x29 ) // если 3 разряда после запятой
 8016268:	8a3b      	ldrh	r3, [r7, #16]
 801626a:	3309      	adds	r3, #9
 801626c:	4a95      	ldr	r2, [pc, #596]	; (80164c4 <ce303_tarif+0x1d10>)
 801626e:	5cd3      	ldrb	r3, [r2, r3]
 8016270:	2b29      	cmp	r3, #41	; 0x29
 8016272:	d126      	bne.n	80162c2 <ce303_tarif+0x1b0e>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
 8016274:	8a3b      	ldrh	r3, [r7, #16]
 8016276:	3306      	adds	r3, #6
 8016278:	4a92      	ldr	r2, [pc, #584]	; (80164c4 <ce303_tarif+0x1d10>)
 801627a:	5cd3      	ldrb	r3, [r2, r3]
 801627c:	3b30      	subs	r3, #48	; 0x30
 801627e:	b29b      	uxth	r3, r3
 8016280:	461a      	mov	r2, r3
 8016282:	0092      	lsls	r2, r2, #2
 8016284:	4413      	add	r3, r2
 8016286:	461a      	mov	r2, r3
 8016288:	0091      	lsls	r1, r2, #2
 801628a:	461a      	mov	r2, r3
 801628c:	460b      	mov	r3, r1
 801628e:	4413      	add	r3, r2
 8016290:	009b      	lsls	r3, r3, #2
 8016292:	b29a      	uxth	r2, r3
 8016294:	8a3b      	ldrh	r3, [r7, #16]
 8016296:	3307      	adds	r3, #7
 8016298:	498a      	ldr	r1, [pc, #552]	; (80164c4 <ce303_tarif+0x1d10>)
 801629a:	5ccb      	ldrb	r3, [r1, r3]
 801629c:	3b30      	subs	r3, #48	; 0x30
 801629e:	b29b      	uxth	r3, r3
 80162a0:	4619      	mov	r1, r3
 80162a2:	0089      	lsls	r1, r1, #2
 80162a4:	440b      	add	r3, r1
 80162a6:	005b      	lsls	r3, r3, #1
 80162a8:	b29b      	uxth	r3, r3
 80162aa:	4413      	add	r3, r2
 80162ac:	b29a      	uxth	r2, r3
 80162ae:	8a3b      	ldrh	r3, [r7, #16]
 80162b0:	3308      	adds	r3, #8
 80162b2:	4984      	ldr	r1, [pc, #528]	; (80164c4 <ce303_tarif+0x1d10>)
 80162b4:	5ccb      	ldrb	r3, [r1, r3]
 80162b6:	b29b      	uxth	r3, r3
 80162b8:	4413      	add	r3, r2
 80162ba:	b29b      	uxth	r3, r3
 80162bc:	3b30      	subs	r3, #48	; 0x30
 80162be:	82fb      	strh	r3, [r7, #22]
 80162c0:	e025      	b.n	801630e <ce303_tarif+0x1b5a>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
 80162c2:	8a3b      	ldrh	r3, [r7, #16]
 80162c4:	3306      	adds	r3, #6
 80162c6:	4a7f      	ldr	r2, [pc, #508]	; (80164c4 <ce303_tarif+0x1d10>)
 80162c8:	5cd3      	ldrb	r3, [r2, r3]
 80162ca:	3b30      	subs	r3, #48	; 0x30
 80162cc:	b29b      	uxth	r3, r3
 80162ce:	461a      	mov	r2, r3
 80162d0:	0092      	lsls	r2, r2, #2
 80162d2:	4413      	add	r3, r2
 80162d4:	461a      	mov	r2, r3
 80162d6:	0091      	lsls	r1, r2, #2
 80162d8:	461a      	mov	r2, r3
 80162da:	460b      	mov	r3, r1
 80162dc:	4413      	add	r3, r2
 80162de:	009b      	lsls	r3, r3, #2
 80162e0:	b29a      	uxth	r2, r3
 80162e2:	8a3b      	ldrh	r3, [r7, #16]
 80162e4:	3307      	adds	r3, #7
 80162e6:	4977      	ldr	r1, [pc, #476]	; (80164c4 <ce303_tarif+0x1d10>)
 80162e8:	5ccb      	ldrb	r3, [r1, r3]
 80162ea:	3b30      	subs	r3, #48	; 0x30
 80162ec:	b29b      	uxth	r3, r3
 80162ee:	4619      	mov	r1, r3
 80162f0:	0089      	lsls	r1, r1, #2
 80162f2:	440b      	add	r3, r1
 80162f4:	005b      	lsls	r3, r3, #1
 80162f6:	b29b      	uxth	r3, r3
 80162f8:	4413      	add	r3, r2
 80162fa:	b29a      	uxth	r2, r3
 80162fc:	8a3b      	ldrh	r3, [r7, #16]
 80162fe:	3308      	adds	r3, #8
 8016300:	4970      	ldr	r1, [pc, #448]	; (80164c4 <ce303_tarif+0x1d10>)
 8016302:	5ccb      	ldrb	r3, [r1, r3]
 8016304:	b29b      	uxth	r3, r3
 8016306:	4413      	add	r3, r2
 8016308:	b29b      	uxth	r3, r3
 801630a:	3b30      	subs	r3, #48	; 0x30
 801630c:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801630e:	4b6e      	ldr	r3, [pc, #440]	; (80164c8 <ce303_tarif+0x1d14>)
 8016310:	681b      	ldr	r3, [r3, #0]
 8016312:	f04f 31ff 	mov.w	r1, #4294967295
 8016316:	4618      	mov	r0, r3
 8016318:	f7f2 fb00 	bl	800891c <osMutexWait>
				fm25v02_write(2*CE_303_TARIF2_POWER_H_REG, ((uint8_t)(temp>>24)) );
 801631c:	68bb      	ldr	r3, [r7, #8]
 801631e:	0e1b      	lsrs	r3, r3, #24
 8016320:	b2db      	uxtb	r3, r3
 8016322:	4619      	mov	r1, r3
 8016324:	f242 008e 	movw	r0, #8334	; 0x208e
 8016328:	f000 fcba 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 801632c:	68bb      	ldr	r3, [r7, #8]
 801632e:	0c1b      	lsrs	r3, r3, #16
 8016330:	b2db      	uxtb	r3, r3
 8016332:	4619      	mov	r1, r3
 8016334:	f242 008f 	movw	r0, #8335	; 0x208f
 8016338:	f000 fcb2 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_L_REG, ((uint8_t)(temp>>8)) );
 801633c:	68bb      	ldr	r3, [r7, #8]
 801633e:	0a1b      	lsrs	r3, r3, #8
 8016340:	b2db      	uxtb	r3, r3
 8016342:	4619      	mov	r1, r3
 8016344:	f242 0090 	movw	r0, #8336	; 0x2090
 8016348:	f000 fcaa 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_L_REG+1, ((uint8_t)temp) );
 801634c:	68bb      	ldr	r3, [r7, #8]
 801634e:	b2db      	uxtb	r3, r3
 8016350:	4619      	mov	r1, r3
 8016352:	f242 0091 	movw	r0, #8337	; 0x2091
 8016356:	f000 fca3 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_MIL_REG, ((uint8_t)(temp_mil>>8)) );
 801635a:	8afb      	ldrh	r3, [r7, #22]
 801635c:	0a1b      	lsrs	r3, r3, #8
 801635e:	b29b      	uxth	r3, r3
 8016360:	b2db      	uxtb	r3, r3
 8016362:	4619      	mov	r1, r3
 8016364:	f242 0092 	movw	r0, #8338	; 0x2092
 8016368:	f000 fc9a 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF2_POWER_MIL_REG+1, ((uint8_t)(temp_mil)) );
 801636c:	8afb      	ldrh	r3, [r7, #22]
 801636e:	b2db      	uxtb	r3, r3
 8016370:	4619      	mov	r1, r3
 8016372:	f242 0093 	movw	r0, #8339	; 0x2093
 8016376:	f000 fc93 	bl	8016ca0 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 801637a:	4b53      	ldr	r3, [pc, #332]	; (80164c8 <ce303_tarif+0x1d14>)
 801637c:	681b      	ldr	r3, [r3, #0]
 801637e:	4618      	mov	r0, r3
 8016380:	f7f2 fb1a 	bl	80089b8 <osMutexRelease>
				status_registers.ce303_tarif2_power_h_reg = (uint16_t)(temp>>16);
 8016384:	68bb      	ldr	r3, [r7, #8]
 8016386:	0c1b      	lsrs	r3, r3, #16
 8016388:	b29a      	uxth	r2, r3
 801638a:	4b50      	ldr	r3, [pc, #320]	; (80164cc <ce303_tarif+0x1d18>)
 801638c:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
				status_registers.ce303_tarif2_power_l_reg = (uint16_t)temp;
 8016390:	68bb      	ldr	r3, [r7, #8]
 8016392:	b29a      	uxth	r2, r3
 8016394:	4b4d      	ldr	r3, [pc, #308]	; (80164cc <ce303_tarif+0x1d18>)
 8016396:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
				status_registers.ce303_tarif2_power_mil_reg =  temp_mil;
 801639a:	4a4c      	ldr	r2, [pc, #304]	; (80164cc <ce303_tarif+0x1d18>)
 801639c:	8afb      	ldrh	r3, [r7, #22]
 801639e:	f8a2 3092 	strh.w	r3, [r2, #146]	; 0x92
				tarif_2_state = 1;
 80163a2:	2301      	movs	r3, #1
 80163a4:	74fb      	strb	r3, [r7, #19]
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 80163a6:	f000 bc12 	b.w	8016bce <ce303_tarif+0x241a>

			}
		}

		else if( (meter_rx_buffer[i] == 0x28) && (tarif_general_state==1) && (tarif_1_state==1) && (tarif_2_state==1) && (tarif_3_state==0) && (tarif_4_state==0) && (tarif_5_state==0) ) // 0х28 означает символ "(" в ASCII таблице
 80163aa:	8a3b      	ldrh	r3, [r7, #16]
 80163ac:	4a45      	ldr	r2, [pc, #276]	; (80164c4 <ce303_tarif+0x1d10>)
 80163ae:	5cd3      	ldrb	r3, [r2, r3]
 80163b0:	2b28      	cmp	r3, #40	; 0x28
 80163b2:	f040 840d 	bne.w	8016bd0 <ce303_tarif+0x241c>
 80163b6:	7d7b      	ldrb	r3, [r7, #21]
 80163b8:	2b01      	cmp	r3, #1
 80163ba:	f040 8409 	bne.w	8016bd0 <ce303_tarif+0x241c>
 80163be:	7d3b      	ldrb	r3, [r7, #20]
 80163c0:	2b01      	cmp	r3, #1
 80163c2:	f040 8405 	bne.w	8016bd0 <ce303_tarif+0x241c>
 80163c6:	7cfb      	ldrb	r3, [r7, #19]
 80163c8:	2b01      	cmp	r3, #1
 80163ca:	f040 8401 	bne.w	8016bd0 <ce303_tarif+0x241c>
 80163ce:	7cbb      	ldrb	r3, [r7, #18]
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	f040 83fd 	bne.w	8016bd0 <ce303_tarif+0x241c>
 80163d6:	7bfb      	ldrb	r3, [r7, #15]
 80163d8:	2b00      	cmp	r3, #0
 80163da:	f040 83f9 	bne.w	8016bd0 <ce303_tarif+0x241c>
 80163de:	7bbb      	ldrb	r3, [r7, #14]
 80163e0:	2b00      	cmp	r3, #0
 80163e2:	f040 83d9 	bne.w	8016b98 <ce303_tarif+0x23e4>
		{
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 80163e6:	8a3b      	ldrh	r3, [r7, #16]
 80163e8:	3302      	adds	r3, #2
 80163ea:	4a36      	ldr	r2, [pc, #216]	; (80164c4 <ce303_tarif+0x1d10>)
 80163ec:	5cd3      	ldrb	r3, [r2, r3]
 80163ee:	2b2e      	cmp	r3, #46	; 0x2e
 80163f0:	f040 80e1 	bne.w	80165b6 <ce303_tarif+0x1e02>
			{
				temp = (uint32_t)(meter_rx_buffer[i+1]-0x30);
 80163f4:	8a3b      	ldrh	r3, [r7, #16]
 80163f6:	3301      	adds	r3, #1
 80163f8:	4a32      	ldr	r2, [pc, #200]	; (80164c4 <ce303_tarif+0x1d10>)
 80163fa:	5cd3      	ldrb	r3, [r2, r3]
 80163fc:	3b30      	subs	r3, #48	; 0x30
 80163fe:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+4] == 0x29 ) // если 1 разряд после запятой
 8016400:	8a3b      	ldrh	r3, [r7, #16]
 8016402:	3304      	adds	r3, #4
 8016404:	4a2f      	ldr	r2, [pc, #188]	; (80164c4 <ce303_tarif+0x1d10>)
 8016406:	5cd3      	ldrb	r3, [r2, r3]
 8016408:	2b29      	cmp	r3, #41	; 0x29
 801640a:	d110      	bne.n	801642e <ce303_tarif+0x1c7a>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+3])-0x30)*100;
 801640c:	8a3b      	ldrh	r3, [r7, #16]
 801640e:	3303      	adds	r3, #3
 8016410:	4a2c      	ldr	r2, [pc, #176]	; (80164c4 <ce303_tarif+0x1d10>)
 8016412:	5cd3      	ldrb	r3, [r2, r3]
 8016414:	3b30      	subs	r3, #48	; 0x30
 8016416:	b29b      	uxth	r3, r3
 8016418:	461a      	mov	r2, r3
 801641a:	0092      	lsls	r2, r2, #2
 801641c:	4413      	add	r3, r2
 801641e:	461a      	mov	r2, r3
 8016420:	0091      	lsls	r1, r2, #2
 8016422:	461a      	mov	r2, r3
 8016424:	460b      	mov	r3, r1
 8016426:	4413      	add	r3, r2
 8016428:	009b      	lsls	r3, r3, #2
 801642a:	82fb      	strh	r3, [r7, #22]
 801642c:	e076      	b.n	801651c <ce303_tarif+0x1d68>
				}
				else if( meter_rx_buffer[i+5] == 0x29 ) // если 2 разряда после запятой
 801642e:	8a3b      	ldrh	r3, [r7, #16]
 8016430:	3305      	adds	r3, #5
 8016432:	4a24      	ldr	r2, [pc, #144]	; (80164c4 <ce303_tarif+0x1d10>)
 8016434:	5cd3      	ldrb	r3, [r2, r3]
 8016436:	2b29      	cmp	r3, #41	; 0x29
 8016438:	d117      	bne.n	801646a <ce303_tarif+0x1cb6>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30))*10;
 801643a:	8a3b      	ldrh	r3, [r7, #16]
 801643c:	3303      	adds	r3, #3
 801643e:	4a21      	ldr	r2, [pc, #132]	; (80164c4 <ce303_tarif+0x1d10>)
 8016440:	5cd3      	ldrb	r3, [r2, r3]
 8016442:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8016446:	4613      	mov	r3, r2
 8016448:	009b      	lsls	r3, r3, #2
 801644a:	4413      	add	r3, r2
 801644c:	005b      	lsls	r3, r3, #1
 801644e:	4619      	mov	r1, r3
 8016450:	8a3b      	ldrh	r3, [r7, #16]
 8016452:	3304      	adds	r3, #4
 8016454:	4a1b      	ldr	r2, [pc, #108]	; (80164c4 <ce303_tarif+0x1d10>)
 8016456:	5cd3      	ldrb	r3, [r2, r3]
 8016458:	3b30      	subs	r3, #48	; 0x30
 801645a:	440b      	add	r3, r1
 801645c:	b29b      	uxth	r3, r3
 801645e:	461a      	mov	r2, r3
 8016460:	0092      	lsls	r2, r2, #2
 8016462:	4413      	add	r3, r2
 8016464:	005b      	lsls	r3, r3, #1
 8016466:	82fb      	strh	r3, [r7, #22]
 8016468:	e058      	b.n	801651c <ce303_tarif+0x1d68>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 3 разряда после запятой
 801646a:	8a3b      	ldrh	r3, [r7, #16]
 801646c:	3306      	adds	r3, #6
 801646e:	4a15      	ldr	r2, [pc, #84]	; (80164c4 <ce303_tarif+0x1d10>)
 8016470:	5cd3      	ldrb	r3, [r2, r3]
 8016472:	2b29      	cmp	r3, #41	; 0x29
 8016474:	d12c      	bne.n	80164d0 <ce303_tarif+0x1d1c>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 8016476:	8a3b      	ldrh	r3, [r7, #16]
 8016478:	3303      	adds	r3, #3
 801647a:	4a12      	ldr	r2, [pc, #72]	; (80164c4 <ce303_tarif+0x1d10>)
 801647c:	5cd3      	ldrb	r3, [r2, r3]
 801647e:	3b30      	subs	r3, #48	; 0x30
 8016480:	b29b      	uxth	r3, r3
 8016482:	461a      	mov	r2, r3
 8016484:	0092      	lsls	r2, r2, #2
 8016486:	4413      	add	r3, r2
 8016488:	461a      	mov	r2, r3
 801648a:	0091      	lsls	r1, r2, #2
 801648c:	461a      	mov	r2, r3
 801648e:	460b      	mov	r3, r1
 8016490:	4413      	add	r3, r2
 8016492:	009b      	lsls	r3, r3, #2
 8016494:	b29a      	uxth	r2, r3
 8016496:	8a3b      	ldrh	r3, [r7, #16]
 8016498:	3304      	adds	r3, #4
 801649a:	490a      	ldr	r1, [pc, #40]	; (80164c4 <ce303_tarif+0x1d10>)
 801649c:	5ccb      	ldrb	r3, [r1, r3]
 801649e:	3b30      	subs	r3, #48	; 0x30
 80164a0:	b29b      	uxth	r3, r3
 80164a2:	4619      	mov	r1, r3
 80164a4:	0089      	lsls	r1, r1, #2
 80164a6:	440b      	add	r3, r1
 80164a8:	005b      	lsls	r3, r3, #1
 80164aa:	b29b      	uxth	r3, r3
 80164ac:	4413      	add	r3, r2
 80164ae:	b29a      	uxth	r2, r3
 80164b0:	8a3b      	ldrh	r3, [r7, #16]
 80164b2:	3305      	adds	r3, #5
 80164b4:	4903      	ldr	r1, [pc, #12]	; (80164c4 <ce303_tarif+0x1d10>)
 80164b6:	5ccb      	ldrb	r3, [r1, r3]
 80164b8:	b29b      	uxth	r3, r3
 80164ba:	4413      	add	r3, r2
 80164bc:	b29b      	uxth	r3, r3
 80164be:	3b30      	subs	r3, #48	; 0x30
 80164c0:	82fb      	strh	r3, [r7, #22]
 80164c2:	e02b      	b.n	801651c <ce303_tarif+0x1d68>
 80164c4:	2000994c 	.word	0x2000994c
 80164c8:	20009af8 	.word	0x20009af8
 80164cc:	2000a174 	.word	0x2000a174
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+3])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30);
 80164d0:	8a3b      	ldrh	r3, [r7, #16]
 80164d2:	3303      	adds	r3, #3
 80164d4:	4aaf      	ldr	r2, [pc, #700]	; (8016794 <ce303_tarif+0x1fe0>)
 80164d6:	5cd3      	ldrb	r3, [r2, r3]
 80164d8:	3b30      	subs	r3, #48	; 0x30
 80164da:	b29b      	uxth	r3, r3
 80164dc:	461a      	mov	r2, r3
 80164de:	0092      	lsls	r2, r2, #2
 80164e0:	4413      	add	r3, r2
 80164e2:	461a      	mov	r2, r3
 80164e4:	0091      	lsls	r1, r2, #2
 80164e6:	461a      	mov	r2, r3
 80164e8:	460b      	mov	r3, r1
 80164ea:	4413      	add	r3, r2
 80164ec:	009b      	lsls	r3, r3, #2
 80164ee:	b29a      	uxth	r2, r3
 80164f0:	8a3b      	ldrh	r3, [r7, #16]
 80164f2:	3304      	adds	r3, #4
 80164f4:	49a7      	ldr	r1, [pc, #668]	; (8016794 <ce303_tarif+0x1fe0>)
 80164f6:	5ccb      	ldrb	r3, [r1, r3]
 80164f8:	3b30      	subs	r3, #48	; 0x30
 80164fa:	b29b      	uxth	r3, r3
 80164fc:	4619      	mov	r1, r3
 80164fe:	0089      	lsls	r1, r1, #2
 8016500:	440b      	add	r3, r1
 8016502:	005b      	lsls	r3, r3, #1
 8016504:	b29b      	uxth	r3, r3
 8016506:	4413      	add	r3, r2
 8016508:	b29a      	uxth	r2, r3
 801650a:	8a3b      	ldrh	r3, [r7, #16]
 801650c:	3305      	adds	r3, #5
 801650e:	49a1      	ldr	r1, [pc, #644]	; (8016794 <ce303_tarif+0x1fe0>)
 8016510:	5ccb      	ldrb	r3, [r1, r3]
 8016512:	b29b      	uxth	r3, r3
 8016514:	4413      	add	r3, r2
 8016516:	b29b      	uxth	r3, r3
 8016518:	3b30      	subs	r3, #48	; 0x30
 801651a:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 801651c:	4b9e      	ldr	r3, [pc, #632]	; (8016798 <ce303_tarif+0x1fe4>)
 801651e:	681b      	ldr	r3, [r3, #0]
 8016520:	f04f 31ff 	mov.w	r1, #4294967295
 8016524:	4618      	mov	r0, r3
 8016526:	f7f2 f9f9 	bl	800891c <osMutexWait>
				fm25v02_write(2*CE_303_TARIF3_POWER_H_REG, ((uint8_t)(temp>>24)) );
 801652a:	68bb      	ldr	r3, [r7, #8]
 801652c:	0e1b      	lsrs	r3, r3, #24
 801652e:	b2db      	uxtb	r3, r3
 8016530:	4619      	mov	r1, r3
 8016532:	f242 0094 	movw	r0, #8340	; 0x2094
 8016536:	f000 fbb3 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 801653a:	68bb      	ldr	r3, [r7, #8]
 801653c:	0c1b      	lsrs	r3, r3, #16
 801653e:	b2db      	uxtb	r3, r3
 8016540:	4619      	mov	r1, r3
 8016542:	f242 0095 	movw	r0, #8341	; 0x2095
 8016546:	f000 fbab 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_L_REG, ((uint8_t)(temp>>8)) );
 801654a:	68bb      	ldr	r3, [r7, #8]
 801654c:	0a1b      	lsrs	r3, r3, #8
 801654e:	b2db      	uxtb	r3, r3
 8016550:	4619      	mov	r1, r3
 8016552:	f242 0096 	movw	r0, #8342	; 0x2096
 8016556:	f000 fba3 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_L_REG+1, ((uint8_t)temp) );
 801655a:	68bb      	ldr	r3, [r7, #8]
 801655c:	b2db      	uxtb	r3, r3
 801655e:	4619      	mov	r1, r3
 8016560:	f242 0097 	movw	r0, #8343	; 0x2097
 8016564:	f000 fb9c 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_MIL_REG, ((uint8_t)(temp_mil>>8)) );
 8016568:	8afb      	ldrh	r3, [r7, #22]
 801656a:	0a1b      	lsrs	r3, r3, #8
 801656c:	b29b      	uxth	r3, r3
 801656e:	b2db      	uxtb	r3, r3
 8016570:	4619      	mov	r1, r3
 8016572:	f242 0098 	movw	r0, #8344	; 0x2098
 8016576:	f000 fb93 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_MIL_REG+1, ((uint8_t)(temp_mil)) );
 801657a:	8afb      	ldrh	r3, [r7, #22]
 801657c:	b2db      	uxtb	r3, r3
 801657e:	4619      	mov	r1, r3
 8016580:	f242 0099 	movw	r0, #8345	; 0x2099
 8016584:	f000 fb8c 	bl	8016ca0 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8016588:	4b83      	ldr	r3, [pc, #524]	; (8016798 <ce303_tarif+0x1fe4>)
 801658a:	681b      	ldr	r3, [r3, #0]
 801658c:	4618      	mov	r0, r3
 801658e:	f7f2 fa13 	bl	80089b8 <osMutexRelease>
				status_registers.ce303_tarif3_power_h_reg = (uint16_t)(temp>>16);
 8016592:	68bb      	ldr	r3, [r7, #8]
 8016594:	0c1b      	lsrs	r3, r3, #16
 8016596:	b29a      	uxth	r2, r3
 8016598:	4b80      	ldr	r3, [pc, #512]	; (801679c <ce303_tarif+0x1fe8>)
 801659a:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
				status_registers.ce303_tarif3_power_l_reg = (uint16_t)temp;
 801659e:	68bb      	ldr	r3, [r7, #8]
 80165a0:	b29a      	uxth	r2, r3
 80165a2:	4b7e      	ldr	r3, [pc, #504]	; (801679c <ce303_tarif+0x1fe8>)
 80165a4:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
				status_registers.ce303_tarif3_power_mil_reg =  temp_mil;
 80165a8:	4a7c      	ldr	r2, [pc, #496]	; (801679c <ce303_tarif+0x1fe8>)
 80165aa:	8afb      	ldrh	r3, [r7, #22]
 80165ac:	f8a2 3098 	strh.w	r3, [r2, #152]	; 0x98
				tarif_3_state = 1;
 80165b0:	2301      	movs	r3, #1
 80165b2:	74bb      	strb	r3, [r7, #18]
 80165b4:	e30c      	b.n	8016bd0 <ce303_tarif+0x241c>

			}

			else if( meter_rx_buffer[i+3] == 0x2E) // 2 цифры перед запятой
 80165b6:	8a3b      	ldrh	r3, [r7, #16]
 80165b8:	3303      	adds	r3, #3
 80165ba:	4a76      	ldr	r2, [pc, #472]	; (8016794 <ce303_tarif+0x1fe0>)
 80165bc:	5cd3      	ldrb	r3, [r2, r3]
 80165be:	2b2e      	cmp	r3, #46	; 0x2e
 80165c0:	f040 80ee 	bne.w	80167a0 <ce303_tarif+0x1fec>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+2])-0x30);
 80165c4:	8a3b      	ldrh	r3, [r7, #16]
 80165c6:	3301      	adds	r3, #1
 80165c8:	4a72      	ldr	r2, [pc, #456]	; (8016794 <ce303_tarif+0x1fe0>)
 80165ca:	5cd3      	ldrb	r3, [r2, r3]
 80165cc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80165d0:	4613      	mov	r3, r2
 80165d2:	009b      	lsls	r3, r3, #2
 80165d4:	4413      	add	r3, r2
 80165d6:	005b      	lsls	r3, r3, #1
 80165d8:	4619      	mov	r1, r3
 80165da:	8a3b      	ldrh	r3, [r7, #16]
 80165dc:	3302      	adds	r3, #2
 80165de:	4a6d      	ldr	r2, [pc, #436]	; (8016794 <ce303_tarif+0x1fe0>)
 80165e0:	5cd3      	ldrb	r3, [r2, r3]
 80165e2:	3b30      	subs	r3, #48	; 0x30
 80165e4:	440b      	add	r3, r1
 80165e6:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+5] == 0x29 ) // если 1 разряд после запятой
 80165e8:	8a3b      	ldrh	r3, [r7, #16]
 80165ea:	3305      	adds	r3, #5
 80165ec:	4a69      	ldr	r2, [pc, #420]	; (8016794 <ce303_tarif+0x1fe0>)
 80165ee:	5cd3      	ldrb	r3, [r2, r3]
 80165f0:	2b29      	cmp	r3, #41	; 0x29
 80165f2:	d110      	bne.n	8016616 <ce303_tarif+0x1e62>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+4])-0x30)*100;
 80165f4:	8a3b      	ldrh	r3, [r7, #16]
 80165f6:	3304      	adds	r3, #4
 80165f8:	4a66      	ldr	r2, [pc, #408]	; (8016794 <ce303_tarif+0x1fe0>)
 80165fa:	5cd3      	ldrb	r3, [r2, r3]
 80165fc:	3b30      	subs	r3, #48	; 0x30
 80165fe:	b29b      	uxth	r3, r3
 8016600:	461a      	mov	r2, r3
 8016602:	0092      	lsls	r2, r2, #2
 8016604:	4413      	add	r3, r2
 8016606:	461a      	mov	r2, r3
 8016608:	0091      	lsls	r1, r2, #2
 801660a:	461a      	mov	r2, r3
 801660c:	460b      	mov	r3, r1
 801660e:	4413      	add	r3, r2
 8016610:	009b      	lsls	r3, r3, #2
 8016612:	82fb      	strh	r3, [r7, #22]
 8016614:	e070      	b.n	80166f8 <ce303_tarif+0x1f44>
				}
				else if( meter_rx_buffer[i+6] == 0x29 ) // если 2 разряда после запятой
 8016616:	8a3b      	ldrh	r3, [r7, #16]
 8016618:	3306      	adds	r3, #6
 801661a:	4a5e      	ldr	r2, [pc, #376]	; (8016794 <ce303_tarif+0x1fe0>)
 801661c:	5cd3      	ldrb	r3, [r2, r3]
 801661e:	2b29      	cmp	r3, #41	; 0x29
 8016620:	d117      	bne.n	8016652 <ce303_tarif+0x1e9e>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+4])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+5])-0x30))*10;
 8016622:	8a3b      	ldrh	r3, [r7, #16]
 8016624:	3304      	adds	r3, #4
 8016626:	4a5b      	ldr	r2, [pc, #364]	; (8016794 <ce303_tarif+0x1fe0>)
 8016628:	5cd3      	ldrb	r3, [r2, r3]
 801662a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801662e:	4613      	mov	r3, r2
 8016630:	009b      	lsls	r3, r3, #2
 8016632:	4413      	add	r3, r2
 8016634:	005b      	lsls	r3, r3, #1
 8016636:	4619      	mov	r1, r3
 8016638:	8a3b      	ldrh	r3, [r7, #16]
 801663a:	3305      	adds	r3, #5
 801663c:	4a55      	ldr	r2, [pc, #340]	; (8016794 <ce303_tarif+0x1fe0>)
 801663e:	5cd3      	ldrb	r3, [r2, r3]
 8016640:	3b30      	subs	r3, #48	; 0x30
 8016642:	440b      	add	r3, r1
 8016644:	b29b      	uxth	r3, r3
 8016646:	461a      	mov	r2, r3
 8016648:	0092      	lsls	r2, r2, #2
 801664a:	4413      	add	r3, r2
 801664c:	005b      	lsls	r3, r3, #1
 801664e:	82fb      	strh	r3, [r7, #22]
 8016650:	e052      	b.n	80166f8 <ce303_tarif+0x1f44>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 3 разряда после запятой
 8016652:	8a3b      	ldrh	r3, [r7, #16]
 8016654:	3307      	adds	r3, #7
 8016656:	4a4f      	ldr	r2, [pc, #316]	; (8016794 <ce303_tarif+0x1fe0>)
 8016658:	5cd3      	ldrb	r3, [r2, r3]
 801665a:	2b29      	cmp	r3, #41	; 0x29
 801665c:	d126      	bne.n	80166ac <ce303_tarif+0x1ef8>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 801665e:	8a3b      	ldrh	r3, [r7, #16]
 8016660:	3304      	adds	r3, #4
 8016662:	4a4c      	ldr	r2, [pc, #304]	; (8016794 <ce303_tarif+0x1fe0>)
 8016664:	5cd3      	ldrb	r3, [r2, r3]
 8016666:	3b30      	subs	r3, #48	; 0x30
 8016668:	b29b      	uxth	r3, r3
 801666a:	461a      	mov	r2, r3
 801666c:	0092      	lsls	r2, r2, #2
 801666e:	4413      	add	r3, r2
 8016670:	461a      	mov	r2, r3
 8016672:	0091      	lsls	r1, r2, #2
 8016674:	461a      	mov	r2, r3
 8016676:	460b      	mov	r3, r1
 8016678:	4413      	add	r3, r2
 801667a:	009b      	lsls	r3, r3, #2
 801667c:	b29a      	uxth	r2, r3
 801667e:	8a3b      	ldrh	r3, [r7, #16]
 8016680:	3305      	adds	r3, #5
 8016682:	4944      	ldr	r1, [pc, #272]	; (8016794 <ce303_tarif+0x1fe0>)
 8016684:	5ccb      	ldrb	r3, [r1, r3]
 8016686:	3b30      	subs	r3, #48	; 0x30
 8016688:	b29b      	uxth	r3, r3
 801668a:	4619      	mov	r1, r3
 801668c:	0089      	lsls	r1, r1, #2
 801668e:	440b      	add	r3, r1
 8016690:	005b      	lsls	r3, r3, #1
 8016692:	b29b      	uxth	r3, r3
 8016694:	4413      	add	r3, r2
 8016696:	b29a      	uxth	r2, r3
 8016698:	8a3b      	ldrh	r3, [r7, #16]
 801669a:	3306      	adds	r3, #6
 801669c:	493d      	ldr	r1, [pc, #244]	; (8016794 <ce303_tarif+0x1fe0>)
 801669e:	5ccb      	ldrb	r3, [r1, r3]
 80166a0:	b29b      	uxth	r3, r3
 80166a2:	4413      	add	r3, r2
 80166a4:	b29b      	uxth	r3, r3
 80166a6:	3b30      	subs	r3, #48	; 0x30
 80166a8:	82fb      	strh	r3, [r7, #22]
 80166aa:	e025      	b.n	80166f8 <ce303_tarif+0x1f44>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+4])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30);
 80166ac:	8a3b      	ldrh	r3, [r7, #16]
 80166ae:	3304      	adds	r3, #4
 80166b0:	4a38      	ldr	r2, [pc, #224]	; (8016794 <ce303_tarif+0x1fe0>)
 80166b2:	5cd3      	ldrb	r3, [r2, r3]
 80166b4:	3b30      	subs	r3, #48	; 0x30
 80166b6:	b29b      	uxth	r3, r3
 80166b8:	461a      	mov	r2, r3
 80166ba:	0092      	lsls	r2, r2, #2
 80166bc:	4413      	add	r3, r2
 80166be:	461a      	mov	r2, r3
 80166c0:	0091      	lsls	r1, r2, #2
 80166c2:	461a      	mov	r2, r3
 80166c4:	460b      	mov	r3, r1
 80166c6:	4413      	add	r3, r2
 80166c8:	009b      	lsls	r3, r3, #2
 80166ca:	b29a      	uxth	r2, r3
 80166cc:	8a3b      	ldrh	r3, [r7, #16]
 80166ce:	3305      	adds	r3, #5
 80166d0:	4930      	ldr	r1, [pc, #192]	; (8016794 <ce303_tarif+0x1fe0>)
 80166d2:	5ccb      	ldrb	r3, [r1, r3]
 80166d4:	3b30      	subs	r3, #48	; 0x30
 80166d6:	b29b      	uxth	r3, r3
 80166d8:	4619      	mov	r1, r3
 80166da:	0089      	lsls	r1, r1, #2
 80166dc:	440b      	add	r3, r1
 80166de:	005b      	lsls	r3, r3, #1
 80166e0:	b29b      	uxth	r3, r3
 80166e2:	4413      	add	r3, r2
 80166e4:	b29a      	uxth	r2, r3
 80166e6:	8a3b      	ldrh	r3, [r7, #16]
 80166e8:	3306      	adds	r3, #6
 80166ea:	492a      	ldr	r1, [pc, #168]	; (8016794 <ce303_tarif+0x1fe0>)
 80166ec:	5ccb      	ldrb	r3, [r1, r3]
 80166ee:	b29b      	uxth	r3, r3
 80166f0:	4413      	add	r3, r2
 80166f2:	b29b      	uxth	r3, r3
 80166f4:	3b30      	subs	r3, #48	; 0x30
 80166f6:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 80166f8:	4b27      	ldr	r3, [pc, #156]	; (8016798 <ce303_tarif+0x1fe4>)
 80166fa:	681b      	ldr	r3, [r3, #0]
 80166fc:	f04f 31ff 	mov.w	r1, #4294967295
 8016700:	4618      	mov	r0, r3
 8016702:	f7f2 f90b 	bl	800891c <osMutexWait>
				fm25v02_write(2*CE_303_TARIF3_POWER_H_REG, ((uint8_t)(temp>>24)) );
 8016706:	68bb      	ldr	r3, [r7, #8]
 8016708:	0e1b      	lsrs	r3, r3, #24
 801670a:	b2db      	uxtb	r3, r3
 801670c:	4619      	mov	r1, r3
 801670e:	f242 0094 	movw	r0, #8340	; 0x2094
 8016712:	f000 fac5 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 8016716:	68bb      	ldr	r3, [r7, #8]
 8016718:	0c1b      	lsrs	r3, r3, #16
 801671a:	b2db      	uxtb	r3, r3
 801671c:	4619      	mov	r1, r3
 801671e:	f242 0095 	movw	r0, #8341	; 0x2095
 8016722:	f000 fabd 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_L_REG, ((uint8_t)(temp>>8)) );
 8016726:	68bb      	ldr	r3, [r7, #8]
 8016728:	0a1b      	lsrs	r3, r3, #8
 801672a:	b2db      	uxtb	r3, r3
 801672c:	4619      	mov	r1, r3
 801672e:	f242 0096 	movw	r0, #8342	; 0x2096
 8016732:	f000 fab5 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_L_REG+1, ((uint8_t)temp) );
 8016736:	68bb      	ldr	r3, [r7, #8]
 8016738:	b2db      	uxtb	r3, r3
 801673a:	4619      	mov	r1, r3
 801673c:	f242 0097 	movw	r0, #8343	; 0x2097
 8016740:	f000 faae 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_MIL_REG, ((uint8_t)(temp_mil>>8)) );
 8016744:	8afb      	ldrh	r3, [r7, #22]
 8016746:	0a1b      	lsrs	r3, r3, #8
 8016748:	b29b      	uxth	r3, r3
 801674a:	b2db      	uxtb	r3, r3
 801674c:	4619      	mov	r1, r3
 801674e:	f242 0098 	movw	r0, #8344	; 0x2098
 8016752:	f000 faa5 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_MIL_REG+1, ((uint8_t)(temp_mil)) );
 8016756:	8afb      	ldrh	r3, [r7, #22]
 8016758:	b2db      	uxtb	r3, r3
 801675a:	4619      	mov	r1, r3
 801675c:	f242 0099 	movw	r0, #8345	; 0x2099
 8016760:	f000 fa9e 	bl	8016ca0 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8016764:	4b0c      	ldr	r3, [pc, #48]	; (8016798 <ce303_tarif+0x1fe4>)
 8016766:	681b      	ldr	r3, [r3, #0]
 8016768:	4618      	mov	r0, r3
 801676a:	f7f2 f925 	bl	80089b8 <osMutexRelease>
				status_registers.ce303_tarif3_power_h_reg = (uint16_t)(temp>>16);
 801676e:	68bb      	ldr	r3, [r7, #8]
 8016770:	0c1b      	lsrs	r3, r3, #16
 8016772:	b29a      	uxth	r2, r3
 8016774:	4b09      	ldr	r3, [pc, #36]	; (801679c <ce303_tarif+0x1fe8>)
 8016776:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
				status_registers.ce303_tarif3_power_l_reg = (uint16_t)temp;
 801677a:	68bb      	ldr	r3, [r7, #8]
 801677c:	b29a      	uxth	r2, r3
 801677e:	4b07      	ldr	r3, [pc, #28]	; (801679c <ce303_tarif+0x1fe8>)
 8016780:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
				status_registers.ce303_tarif3_power_mil_reg =  temp_mil;
 8016784:	4a05      	ldr	r2, [pc, #20]	; (801679c <ce303_tarif+0x1fe8>)
 8016786:	8afb      	ldrh	r3, [r7, #22]
 8016788:	f8a2 3098 	strh.w	r3, [r2, #152]	; 0x98
				tarif_3_state = 1;
 801678c:	2301      	movs	r3, #1
 801678e:	74bb      	strb	r3, [r7, #18]
 8016790:	e21e      	b.n	8016bd0 <ce303_tarif+0x241c>
 8016792:	bf00      	nop
 8016794:	2000994c 	.word	0x2000994c
 8016798:	20009af8 	.word	0x20009af8
 801679c:	2000a174 	.word	0x2000a174

			}

			else if( meter_rx_buffer[i+4] == 0x2E) // 3 цифры перед запятой
 80167a0:	8a3b      	ldrh	r3, [r7, #16]
 80167a2:	3304      	adds	r3, #4
 80167a4:	4aa9      	ldr	r2, [pc, #676]	; (8016a4c <ce303_tarif+0x2298>)
 80167a6:	5cd3      	ldrb	r3, [r2, r3]
 80167a8:	2b2e      	cmp	r3, #46	; 0x2e
 80167aa:	f040 80ef 	bne.w	801698c <ce303_tarif+0x21d8>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+3])-0x30);
 80167ae:	8a3b      	ldrh	r3, [r7, #16]
 80167b0:	3301      	adds	r3, #1
 80167b2:	4aa6      	ldr	r2, [pc, #664]	; (8016a4c <ce303_tarif+0x2298>)
 80167b4:	5cd3      	ldrb	r3, [r2, r3]
 80167b6:	3b30      	subs	r3, #48	; 0x30
 80167b8:	2264      	movs	r2, #100	; 0x64
 80167ba:	fb02 f103 	mul.w	r1, r2, r3
 80167be:	8a3b      	ldrh	r3, [r7, #16]
 80167c0:	3302      	adds	r3, #2
 80167c2:	4aa2      	ldr	r2, [pc, #648]	; (8016a4c <ce303_tarif+0x2298>)
 80167c4:	5cd3      	ldrb	r3, [r2, r3]
 80167c6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80167ca:	4613      	mov	r3, r2
 80167cc:	009b      	lsls	r3, r3, #2
 80167ce:	4413      	add	r3, r2
 80167d0:	005b      	lsls	r3, r3, #1
 80167d2:	18ca      	adds	r2, r1, r3
 80167d4:	8a3b      	ldrh	r3, [r7, #16]
 80167d6:	3303      	adds	r3, #3
 80167d8:	499c      	ldr	r1, [pc, #624]	; (8016a4c <ce303_tarif+0x2298>)
 80167da:	5ccb      	ldrb	r3, [r1, r3]
 80167dc:	3b30      	subs	r3, #48	; 0x30
 80167de:	4413      	add	r3, r2
 80167e0:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+6] == 0x29 ) // если 1 разряд после запятой
 80167e2:	8a3b      	ldrh	r3, [r7, #16]
 80167e4:	3306      	adds	r3, #6
 80167e6:	4a99      	ldr	r2, [pc, #612]	; (8016a4c <ce303_tarif+0x2298>)
 80167e8:	5cd3      	ldrb	r3, [r2, r3]
 80167ea:	2b29      	cmp	r3, #41	; 0x29
 80167ec:	d110      	bne.n	8016810 <ce303_tarif+0x205c>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+5])-0x30)*100;
 80167ee:	8a3b      	ldrh	r3, [r7, #16]
 80167f0:	3305      	adds	r3, #5
 80167f2:	4a96      	ldr	r2, [pc, #600]	; (8016a4c <ce303_tarif+0x2298>)
 80167f4:	5cd3      	ldrb	r3, [r2, r3]
 80167f6:	3b30      	subs	r3, #48	; 0x30
 80167f8:	b29b      	uxth	r3, r3
 80167fa:	461a      	mov	r2, r3
 80167fc:	0092      	lsls	r2, r2, #2
 80167fe:	4413      	add	r3, r2
 8016800:	461a      	mov	r2, r3
 8016802:	0091      	lsls	r1, r2, #2
 8016804:	461a      	mov	r2, r3
 8016806:	460b      	mov	r3, r1
 8016808:	4413      	add	r3, r2
 801680a:	009b      	lsls	r3, r3, #2
 801680c:	82fb      	strh	r3, [r7, #22]
 801680e:	e070      	b.n	80168f2 <ce303_tarif+0x213e>
				}
				else if( meter_rx_buffer[i+7] == 0x29 ) // если 2 разряда после запятой
 8016810:	8a3b      	ldrh	r3, [r7, #16]
 8016812:	3307      	adds	r3, #7
 8016814:	4a8d      	ldr	r2, [pc, #564]	; (8016a4c <ce303_tarif+0x2298>)
 8016816:	5cd3      	ldrb	r3, [r2, r3]
 8016818:	2b29      	cmp	r3, #41	; 0x29
 801681a:	d117      	bne.n	801684c <ce303_tarif+0x2098>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+5])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+6])-0x30))*10;
 801681c:	8a3b      	ldrh	r3, [r7, #16]
 801681e:	3305      	adds	r3, #5
 8016820:	4a8a      	ldr	r2, [pc, #552]	; (8016a4c <ce303_tarif+0x2298>)
 8016822:	5cd3      	ldrb	r3, [r2, r3]
 8016824:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8016828:	4613      	mov	r3, r2
 801682a:	009b      	lsls	r3, r3, #2
 801682c:	4413      	add	r3, r2
 801682e:	005b      	lsls	r3, r3, #1
 8016830:	4619      	mov	r1, r3
 8016832:	8a3b      	ldrh	r3, [r7, #16]
 8016834:	3306      	adds	r3, #6
 8016836:	4a85      	ldr	r2, [pc, #532]	; (8016a4c <ce303_tarif+0x2298>)
 8016838:	5cd3      	ldrb	r3, [r2, r3]
 801683a:	3b30      	subs	r3, #48	; 0x30
 801683c:	440b      	add	r3, r1
 801683e:	b29b      	uxth	r3, r3
 8016840:	461a      	mov	r2, r3
 8016842:	0092      	lsls	r2, r2, #2
 8016844:	4413      	add	r3, r2
 8016846:	005b      	lsls	r3, r3, #1
 8016848:	82fb      	strh	r3, [r7, #22]
 801684a:	e052      	b.n	80168f2 <ce303_tarif+0x213e>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 3 разряда после запятой
 801684c:	8a3b      	ldrh	r3, [r7, #16]
 801684e:	3308      	adds	r3, #8
 8016850:	4a7e      	ldr	r2, [pc, #504]	; (8016a4c <ce303_tarif+0x2298>)
 8016852:	5cd3      	ldrb	r3, [r2, r3]
 8016854:	2b29      	cmp	r3, #41	; 0x29
 8016856:	d126      	bne.n	80168a6 <ce303_tarif+0x20f2>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 8016858:	8a3b      	ldrh	r3, [r7, #16]
 801685a:	3305      	adds	r3, #5
 801685c:	4a7b      	ldr	r2, [pc, #492]	; (8016a4c <ce303_tarif+0x2298>)
 801685e:	5cd3      	ldrb	r3, [r2, r3]
 8016860:	3b30      	subs	r3, #48	; 0x30
 8016862:	b29b      	uxth	r3, r3
 8016864:	461a      	mov	r2, r3
 8016866:	0092      	lsls	r2, r2, #2
 8016868:	4413      	add	r3, r2
 801686a:	461a      	mov	r2, r3
 801686c:	0091      	lsls	r1, r2, #2
 801686e:	461a      	mov	r2, r3
 8016870:	460b      	mov	r3, r1
 8016872:	4413      	add	r3, r2
 8016874:	009b      	lsls	r3, r3, #2
 8016876:	b29a      	uxth	r2, r3
 8016878:	8a3b      	ldrh	r3, [r7, #16]
 801687a:	3306      	adds	r3, #6
 801687c:	4973      	ldr	r1, [pc, #460]	; (8016a4c <ce303_tarif+0x2298>)
 801687e:	5ccb      	ldrb	r3, [r1, r3]
 8016880:	3b30      	subs	r3, #48	; 0x30
 8016882:	b29b      	uxth	r3, r3
 8016884:	4619      	mov	r1, r3
 8016886:	0089      	lsls	r1, r1, #2
 8016888:	440b      	add	r3, r1
 801688a:	005b      	lsls	r3, r3, #1
 801688c:	b29b      	uxth	r3, r3
 801688e:	4413      	add	r3, r2
 8016890:	b29a      	uxth	r2, r3
 8016892:	8a3b      	ldrh	r3, [r7, #16]
 8016894:	3307      	adds	r3, #7
 8016896:	496d      	ldr	r1, [pc, #436]	; (8016a4c <ce303_tarif+0x2298>)
 8016898:	5ccb      	ldrb	r3, [r1, r3]
 801689a:	b29b      	uxth	r3, r3
 801689c:	4413      	add	r3, r2
 801689e:	b29b      	uxth	r3, r3
 80168a0:	3b30      	subs	r3, #48	; 0x30
 80168a2:	82fb      	strh	r3, [r7, #22]
 80168a4:	e025      	b.n	80168f2 <ce303_tarif+0x213e>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30);
 80168a6:	8a3b      	ldrh	r3, [r7, #16]
 80168a8:	3305      	adds	r3, #5
 80168aa:	4a68      	ldr	r2, [pc, #416]	; (8016a4c <ce303_tarif+0x2298>)
 80168ac:	5cd3      	ldrb	r3, [r2, r3]
 80168ae:	3b30      	subs	r3, #48	; 0x30
 80168b0:	b29b      	uxth	r3, r3
 80168b2:	461a      	mov	r2, r3
 80168b4:	0092      	lsls	r2, r2, #2
 80168b6:	4413      	add	r3, r2
 80168b8:	461a      	mov	r2, r3
 80168ba:	0091      	lsls	r1, r2, #2
 80168bc:	461a      	mov	r2, r3
 80168be:	460b      	mov	r3, r1
 80168c0:	4413      	add	r3, r2
 80168c2:	009b      	lsls	r3, r3, #2
 80168c4:	b29a      	uxth	r2, r3
 80168c6:	8a3b      	ldrh	r3, [r7, #16]
 80168c8:	3306      	adds	r3, #6
 80168ca:	4960      	ldr	r1, [pc, #384]	; (8016a4c <ce303_tarif+0x2298>)
 80168cc:	5ccb      	ldrb	r3, [r1, r3]
 80168ce:	3b30      	subs	r3, #48	; 0x30
 80168d0:	b29b      	uxth	r3, r3
 80168d2:	4619      	mov	r1, r3
 80168d4:	0089      	lsls	r1, r1, #2
 80168d6:	440b      	add	r3, r1
 80168d8:	005b      	lsls	r3, r3, #1
 80168da:	b29b      	uxth	r3, r3
 80168dc:	4413      	add	r3, r2
 80168de:	b29a      	uxth	r2, r3
 80168e0:	8a3b      	ldrh	r3, [r7, #16]
 80168e2:	3307      	adds	r3, #7
 80168e4:	4959      	ldr	r1, [pc, #356]	; (8016a4c <ce303_tarif+0x2298>)
 80168e6:	5ccb      	ldrb	r3, [r1, r3]
 80168e8:	b29b      	uxth	r3, r3
 80168ea:	4413      	add	r3, r2
 80168ec:	b29b      	uxth	r3, r3
 80168ee:	3b30      	subs	r3, #48	; 0x30
 80168f0:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 80168f2:	4b57      	ldr	r3, [pc, #348]	; (8016a50 <ce303_tarif+0x229c>)
 80168f4:	681b      	ldr	r3, [r3, #0]
 80168f6:	f04f 31ff 	mov.w	r1, #4294967295
 80168fa:	4618      	mov	r0, r3
 80168fc:	f7f2 f80e 	bl	800891c <osMutexWait>
				fm25v02_write(2*CE_303_TARIF3_POWER_H_REG, ((uint8_t)(temp>>24)) );
 8016900:	68bb      	ldr	r3, [r7, #8]
 8016902:	0e1b      	lsrs	r3, r3, #24
 8016904:	b2db      	uxtb	r3, r3
 8016906:	4619      	mov	r1, r3
 8016908:	f242 0094 	movw	r0, #8340	; 0x2094
 801690c:	f000 f9c8 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 8016910:	68bb      	ldr	r3, [r7, #8]
 8016912:	0c1b      	lsrs	r3, r3, #16
 8016914:	b2db      	uxtb	r3, r3
 8016916:	4619      	mov	r1, r3
 8016918:	f242 0095 	movw	r0, #8341	; 0x2095
 801691c:	f000 f9c0 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_L_REG, ((uint8_t)(temp>>8)) );
 8016920:	68bb      	ldr	r3, [r7, #8]
 8016922:	0a1b      	lsrs	r3, r3, #8
 8016924:	b2db      	uxtb	r3, r3
 8016926:	4619      	mov	r1, r3
 8016928:	f242 0096 	movw	r0, #8342	; 0x2096
 801692c:	f000 f9b8 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_L_REG+1, ((uint8_t)temp) );
 8016930:	68bb      	ldr	r3, [r7, #8]
 8016932:	b2db      	uxtb	r3, r3
 8016934:	4619      	mov	r1, r3
 8016936:	f242 0097 	movw	r0, #8343	; 0x2097
 801693a:	f000 f9b1 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_MIL_REG, ((uint8_t)(temp_mil>>8)) );
 801693e:	8afb      	ldrh	r3, [r7, #22]
 8016940:	0a1b      	lsrs	r3, r3, #8
 8016942:	b29b      	uxth	r3, r3
 8016944:	b2db      	uxtb	r3, r3
 8016946:	4619      	mov	r1, r3
 8016948:	f242 0098 	movw	r0, #8344	; 0x2098
 801694c:	f000 f9a8 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_MIL_REG+1, ((uint8_t)(temp_mil)) );
 8016950:	8afb      	ldrh	r3, [r7, #22]
 8016952:	b2db      	uxtb	r3, r3
 8016954:	4619      	mov	r1, r3
 8016956:	f242 0099 	movw	r0, #8345	; 0x2099
 801695a:	f000 f9a1 	bl	8016ca0 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 801695e:	4b3c      	ldr	r3, [pc, #240]	; (8016a50 <ce303_tarif+0x229c>)
 8016960:	681b      	ldr	r3, [r3, #0]
 8016962:	4618      	mov	r0, r3
 8016964:	f7f2 f828 	bl	80089b8 <osMutexRelease>
				status_registers.ce303_tarif3_power_h_reg = (uint16_t)(temp>>16);
 8016968:	68bb      	ldr	r3, [r7, #8]
 801696a:	0c1b      	lsrs	r3, r3, #16
 801696c:	b29a      	uxth	r2, r3
 801696e:	4b39      	ldr	r3, [pc, #228]	; (8016a54 <ce303_tarif+0x22a0>)
 8016970:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
				status_registers.ce303_tarif3_power_l_reg = (uint16_t)temp;
 8016974:	68bb      	ldr	r3, [r7, #8]
 8016976:	b29a      	uxth	r2, r3
 8016978:	4b36      	ldr	r3, [pc, #216]	; (8016a54 <ce303_tarif+0x22a0>)
 801697a:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
				status_registers.ce303_tarif3_power_mil_reg =  temp_mil;
 801697e:	4a35      	ldr	r2, [pc, #212]	; (8016a54 <ce303_tarif+0x22a0>)
 8016980:	8afb      	ldrh	r3, [r7, #22]
 8016982:	f8a2 3098 	strh.w	r3, [r2, #152]	; 0x98
				tarif_3_state = 1;
 8016986:	2301      	movs	r3, #1
 8016988:	74bb      	strb	r3, [r7, #18]
 801698a:	e121      	b.n	8016bd0 <ce303_tarif+0x241c>

			}

			else if( meter_rx_buffer[i+5] == 0x2E) // четыре цифры перед запятой
 801698c:	8a3b      	ldrh	r3, [r7, #16]
 801698e:	3305      	adds	r3, #5
 8016990:	4a2e      	ldr	r2, [pc, #184]	; (8016a4c <ce303_tarif+0x2298>)
 8016992:	5cd3      	ldrb	r3, [r2, r3]
 8016994:	2b2e      	cmp	r3, #46	; 0x2e
 8016996:	f040 811b 	bne.w	8016bd0 <ce303_tarif+0x241c>
			{
				temp = ((((uint16_t)meter_rx_buffer[i+1])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+2])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+3])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+4])-0x30);
 801699a:	8a3b      	ldrh	r3, [r7, #16]
 801699c:	3301      	adds	r3, #1
 801699e:	4a2b      	ldr	r2, [pc, #172]	; (8016a4c <ce303_tarif+0x2298>)
 80169a0:	5cd3      	ldrb	r3, [r2, r3]
 80169a2:	3b30      	subs	r3, #48	; 0x30
 80169a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80169a8:	fb02 f203 	mul.w	r2, r2, r3
 80169ac:	8a3b      	ldrh	r3, [r7, #16]
 80169ae:	3302      	adds	r3, #2
 80169b0:	4926      	ldr	r1, [pc, #152]	; (8016a4c <ce303_tarif+0x2298>)
 80169b2:	5ccb      	ldrb	r3, [r1, r3]
 80169b4:	3b30      	subs	r3, #48	; 0x30
 80169b6:	2164      	movs	r1, #100	; 0x64
 80169b8:	fb01 f303 	mul.w	r3, r1, r3
 80169bc:	18d1      	adds	r1, r2, r3
 80169be:	8a3b      	ldrh	r3, [r7, #16]
 80169c0:	3303      	adds	r3, #3
 80169c2:	4a22      	ldr	r2, [pc, #136]	; (8016a4c <ce303_tarif+0x2298>)
 80169c4:	5cd3      	ldrb	r3, [r2, r3]
 80169c6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80169ca:	4613      	mov	r3, r2
 80169cc:	009b      	lsls	r3, r3, #2
 80169ce:	4413      	add	r3, r2
 80169d0:	005b      	lsls	r3, r3, #1
 80169d2:	18ca      	adds	r2, r1, r3
 80169d4:	8a3b      	ldrh	r3, [r7, #16]
 80169d6:	3304      	adds	r3, #4
 80169d8:	491c      	ldr	r1, [pc, #112]	; (8016a4c <ce303_tarif+0x2298>)
 80169da:	5ccb      	ldrb	r3, [r1, r3]
 80169dc:	3b30      	subs	r3, #48	; 0x30
 80169de:	4413      	add	r3, r2
 80169e0:	60bb      	str	r3, [r7, #8]

				if( meter_rx_buffer[i+7] == 0x29 ) // если 1 разряд после запятой
 80169e2:	8a3b      	ldrh	r3, [r7, #16]
 80169e4:	3307      	adds	r3, #7
 80169e6:	4a19      	ldr	r2, [pc, #100]	; (8016a4c <ce303_tarif+0x2298>)
 80169e8:	5cd3      	ldrb	r3, [r2, r3]
 80169ea:	2b29      	cmp	r3, #41	; 0x29
 80169ec:	d110      	bne.n	8016a10 <ce303_tarif+0x225c>
				{
					temp_mil = (((uint16_t)meter_rx_buffer[i+6])-0x30)*100;
 80169ee:	8a3b      	ldrh	r3, [r7, #16]
 80169f0:	3306      	adds	r3, #6
 80169f2:	4a16      	ldr	r2, [pc, #88]	; (8016a4c <ce303_tarif+0x2298>)
 80169f4:	5cd3      	ldrb	r3, [r2, r3]
 80169f6:	3b30      	subs	r3, #48	; 0x30
 80169f8:	b29b      	uxth	r3, r3
 80169fa:	461a      	mov	r2, r3
 80169fc:	0092      	lsls	r2, r2, #2
 80169fe:	4413      	add	r3, r2
 8016a00:	461a      	mov	r2, r3
 8016a02:	0091      	lsls	r1, r2, #2
 8016a04:	461a      	mov	r2, r3
 8016a06:	460b      	mov	r3, r1
 8016a08:	4413      	add	r3, r2
 8016a0a:	009b      	lsls	r3, r3, #2
 8016a0c:	82fb      	strh	r3, [r7, #22]
 8016a0e:	e076      	b.n	8016afe <ce303_tarif+0x234a>
				}
				else if( meter_rx_buffer[i+8] == 0x29 ) // если 2 разряда после запятой
 8016a10:	8a3b      	ldrh	r3, [r7, #16]
 8016a12:	3308      	adds	r3, #8
 8016a14:	4a0d      	ldr	r2, [pc, #52]	; (8016a4c <ce303_tarif+0x2298>)
 8016a16:	5cd3      	ldrb	r3, [r2, r3]
 8016a18:	2b29      	cmp	r3, #41	; 0x29
 8016a1a:	d11d      	bne.n	8016a58 <ce303_tarif+0x22a4>
				{
					temp_mil = (((((uint16_t)meter_rx_buffer[i+6])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+7])-0x30))*10;
 8016a1c:	8a3b      	ldrh	r3, [r7, #16]
 8016a1e:	3306      	adds	r3, #6
 8016a20:	4a0a      	ldr	r2, [pc, #40]	; (8016a4c <ce303_tarif+0x2298>)
 8016a22:	5cd3      	ldrb	r3, [r2, r3]
 8016a24:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8016a28:	4613      	mov	r3, r2
 8016a2a:	009b      	lsls	r3, r3, #2
 8016a2c:	4413      	add	r3, r2
 8016a2e:	005b      	lsls	r3, r3, #1
 8016a30:	4619      	mov	r1, r3
 8016a32:	8a3b      	ldrh	r3, [r7, #16]
 8016a34:	3307      	adds	r3, #7
 8016a36:	4a05      	ldr	r2, [pc, #20]	; (8016a4c <ce303_tarif+0x2298>)
 8016a38:	5cd3      	ldrb	r3, [r2, r3]
 8016a3a:	3b30      	subs	r3, #48	; 0x30
 8016a3c:	440b      	add	r3, r1
 8016a3e:	b29b      	uxth	r3, r3
 8016a40:	461a      	mov	r2, r3
 8016a42:	0092      	lsls	r2, r2, #2
 8016a44:	4413      	add	r3, r2
 8016a46:	005b      	lsls	r3, r3, #1
 8016a48:	82fb      	strh	r3, [r7, #22]
 8016a4a:	e058      	b.n	8016afe <ce303_tarif+0x234a>
 8016a4c:	2000994c 	.word	0x2000994c
 8016a50:	20009af8 	.word	0x20009af8
 8016a54:	2000a174 	.word	0x2000a174
				}
				else if( meter_rx_buffer[i+9] == 0x29 ) // если 3 разряда после запятой
 8016a58:	8a3b      	ldrh	r3, [r7, #16]
 8016a5a:	3309      	adds	r3, #9
 8016a5c:	4a6c      	ldr	r2, [pc, #432]	; (8016c10 <ce303_tarif+0x245c>)
 8016a5e:	5cd3      	ldrb	r3, [r2, r3]
 8016a60:	2b29      	cmp	r3, #41	; 0x29
 8016a62:	d126      	bne.n	8016ab2 <ce303_tarif+0x22fe>
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
 8016a64:	8a3b      	ldrh	r3, [r7, #16]
 8016a66:	3306      	adds	r3, #6
 8016a68:	4a69      	ldr	r2, [pc, #420]	; (8016c10 <ce303_tarif+0x245c>)
 8016a6a:	5cd3      	ldrb	r3, [r2, r3]
 8016a6c:	3b30      	subs	r3, #48	; 0x30
 8016a6e:	b29b      	uxth	r3, r3
 8016a70:	461a      	mov	r2, r3
 8016a72:	0092      	lsls	r2, r2, #2
 8016a74:	4413      	add	r3, r2
 8016a76:	461a      	mov	r2, r3
 8016a78:	0091      	lsls	r1, r2, #2
 8016a7a:	461a      	mov	r2, r3
 8016a7c:	460b      	mov	r3, r1
 8016a7e:	4413      	add	r3, r2
 8016a80:	009b      	lsls	r3, r3, #2
 8016a82:	b29a      	uxth	r2, r3
 8016a84:	8a3b      	ldrh	r3, [r7, #16]
 8016a86:	3307      	adds	r3, #7
 8016a88:	4961      	ldr	r1, [pc, #388]	; (8016c10 <ce303_tarif+0x245c>)
 8016a8a:	5ccb      	ldrb	r3, [r1, r3]
 8016a8c:	3b30      	subs	r3, #48	; 0x30
 8016a8e:	b29b      	uxth	r3, r3
 8016a90:	4619      	mov	r1, r3
 8016a92:	0089      	lsls	r1, r1, #2
 8016a94:	440b      	add	r3, r1
 8016a96:	005b      	lsls	r3, r3, #1
 8016a98:	b29b      	uxth	r3, r3
 8016a9a:	4413      	add	r3, r2
 8016a9c:	b29a      	uxth	r2, r3
 8016a9e:	8a3b      	ldrh	r3, [r7, #16]
 8016aa0:	3308      	adds	r3, #8
 8016aa2:	495b      	ldr	r1, [pc, #364]	; (8016c10 <ce303_tarif+0x245c>)
 8016aa4:	5ccb      	ldrb	r3, [r1, r3]
 8016aa6:	b29b      	uxth	r3, r3
 8016aa8:	4413      	add	r3, r2
 8016aaa:	b29b      	uxth	r3, r3
 8016aac:	3b30      	subs	r3, #48	; 0x30
 8016aae:	82fb      	strh	r3, [r7, #22]
 8016ab0:	e025      	b.n	8016afe <ce303_tarif+0x234a>
				//{
					//temp_mil = ((((uint16_t)meter_rx_buffer[i+5])-0x30)*1000) + ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
				//}
				else
				{
					temp_mil = ((((uint16_t)meter_rx_buffer[i+6])-0x30)*100) + ((((uint16_t)meter_rx_buffer[i+7])-0x30)*10) + (((uint16_t)meter_rx_buffer[i+8])-0x30);
 8016ab2:	8a3b      	ldrh	r3, [r7, #16]
 8016ab4:	3306      	adds	r3, #6
 8016ab6:	4a56      	ldr	r2, [pc, #344]	; (8016c10 <ce303_tarif+0x245c>)
 8016ab8:	5cd3      	ldrb	r3, [r2, r3]
 8016aba:	3b30      	subs	r3, #48	; 0x30
 8016abc:	b29b      	uxth	r3, r3
 8016abe:	461a      	mov	r2, r3
 8016ac0:	0092      	lsls	r2, r2, #2
 8016ac2:	4413      	add	r3, r2
 8016ac4:	461a      	mov	r2, r3
 8016ac6:	0091      	lsls	r1, r2, #2
 8016ac8:	461a      	mov	r2, r3
 8016aca:	460b      	mov	r3, r1
 8016acc:	4413      	add	r3, r2
 8016ace:	009b      	lsls	r3, r3, #2
 8016ad0:	b29a      	uxth	r2, r3
 8016ad2:	8a3b      	ldrh	r3, [r7, #16]
 8016ad4:	3307      	adds	r3, #7
 8016ad6:	494e      	ldr	r1, [pc, #312]	; (8016c10 <ce303_tarif+0x245c>)
 8016ad8:	5ccb      	ldrb	r3, [r1, r3]
 8016ada:	3b30      	subs	r3, #48	; 0x30
 8016adc:	b29b      	uxth	r3, r3
 8016ade:	4619      	mov	r1, r3
 8016ae0:	0089      	lsls	r1, r1, #2
 8016ae2:	440b      	add	r3, r1
 8016ae4:	005b      	lsls	r3, r3, #1
 8016ae6:	b29b      	uxth	r3, r3
 8016ae8:	4413      	add	r3, r2
 8016aea:	b29a      	uxth	r2, r3
 8016aec:	8a3b      	ldrh	r3, [r7, #16]
 8016aee:	3308      	adds	r3, #8
 8016af0:	4947      	ldr	r1, [pc, #284]	; (8016c10 <ce303_tarif+0x245c>)
 8016af2:	5ccb      	ldrb	r3, [r1, r3]
 8016af4:	b29b      	uxth	r3, r3
 8016af6:	4413      	add	r3, r2
 8016af8:	b29b      	uxth	r3, r3
 8016afa:	3b30      	subs	r3, #48	; 0x30
 8016afc:	82fb      	strh	r3, [r7, #22]
				}

				osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8016afe:	4b45      	ldr	r3, [pc, #276]	; (8016c14 <ce303_tarif+0x2460>)
 8016b00:	681b      	ldr	r3, [r3, #0]
 8016b02:	f04f 31ff 	mov.w	r1, #4294967295
 8016b06:	4618      	mov	r0, r3
 8016b08:	f7f1 ff08 	bl	800891c <osMutexWait>
				fm25v02_write(2*CE_303_TARIF3_POWER_H_REG, ((uint8_t)(temp>>24)) );
 8016b0c:	68bb      	ldr	r3, [r7, #8]
 8016b0e:	0e1b      	lsrs	r3, r3, #24
 8016b10:	b2db      	uxtb	r3, r3
 8016b12:	4619      	mov	r1, r3
 8016b14:	f242 0094 	movw	r0, #8340	; 0x2094
 8016b18:	f000 f8c2 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_H_REG+1, ((uint8_t)(temp>>16)) );
 8016b1c:	68bb      	ldr	r3, [r7, #8]
 8016b1e:	0c1b      	lsrs	r3, r3, #16
 8016b20:	b2db      	uxtb	r3, r3
 8016b22:	4619      	mov	r1, r3
 8016b24:	f242 0095 	movw	r0, #8341	; 0x2095
 8016b28:	f000 f8ba 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_L_REG, ((uint8_t)(temp>>8)) );
 8016b2c:	68bb      	ldr	r3, [r7, #8]
 8016b2e:	0a1b      	lsrs	r3, r3, #8
 8016b30:	b2db      	uxtb	r3, r3
 8016b32:	4619      	mov	r1, r3
 8016b34:	f242 0096 	movw	r0, #8342	; 0x2096
 8016b38:	f000 f8b2 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_L_REG+1, ((uint8_t)temp) );
 8016b3c:	68bb      	ldr	r3, [r7, #8]
 8016b3e:	b2db      	uxtb	r3, r3
 8016b40:	4619      	mov	r1, r3
 8016b42:	f242 0097 	movw	r0, #8343	; 0x2097
 8016b46:	f000 f8ab 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_MIL_REG, ((uint8_t)(temp_mil>>8)) );
 8016b4a:	8afb      	ldrh	r3, [r7, #22]
 8016b4c:	0a1b      	lsrs	r3, r3, #8
 8016b4e:	b29b      	uxth	r3, r3
 8016b50:	b2db      	uxtb	r3, r3
 8016b52:	4619      	mov	r1, r3
 8016b54:	f242 0098 	movw	r0, #8344	; 0x2098
 8016b58:	f000 f8a2 	bl	8016ca0 <fm25v02_write>
				fm25v02_write(2*CE_303_TARIF3_POWER_MIL_REG+1, ((uint8_t)(temp_mil)) );
 8016b5c:	8afb      	ldrh	r3, [r7, #22]
 8016b5e:	b2db      	uxtb	r3, r3
 8016b60:	4619      	mov	r1, r3
 8016b62:	f242 0099 	movw	r0, #8345	; 0x2099
 8016b66:	f000 f89b 	bl	8016ca0 <fm25v02_write>
				osMutexRelease(Fm25v02MutexHandle);
 8016b6a:	4b2a      	ldr	r3, [pc, #168]	; (8016c14 <ce303_tarif+0x2460>)
 8016b6c:	681b      	ldr	r3, [r3, #0]
 8016b6e:	4618      	mov	r0, r3
 8016b70:	f7f1 ff22 	bl	80089b8 <osMutexRelease>
				status_registers.ce303_tarif3_power_h_reg = (uint16_t)(temp>>16);
 8016b74:	68bb      	ldr	r3, [r7, #8]
 8016b76:	0c1b      	lsrs	r3, r3, #16
 8016b78:	b29a      	uxth	r2, r3
 8016b7a:	4b27      	ldr	r3, [pc, #156]	; (8016c18 <ce303_tarif+0x2464>)
 8016b7c:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
				status_registers.ce303_tarif3_power_l_reg = (uint16_t)temp;
 8016b80:	68bb      	ldr	r3, [r7, #8]
 8016b82:	b29a      	uxth	r2, r3
 8016b84:	4b24      	ldr	r3, [pc, #144]	; (8016c18 <ce303_tarif+0x2464>)
 8016b86:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
				status_registers.ce303_tarif3_power_mil_reg =  temp_mil;
 8016b8a:	4a23      	ldr	r2, [pc, #140]	; (8016c18 <ce303_tarif+0x2464>)
 8016b8c:	8afb      	ldrh	r3, [r7, #22]
 8016b8e:	f8a2 3098 	strh.w	r3, [r2, #152]	; 0x98
				tarif_3_state = 1;
 8016b92:	2301      	movs	r3, #1
 8016b94:	74bb      	strb	r3, [r7, #18]
 8016b96:	e01b      	b.n	8016bd0 <ce303_tarif+0x241c>

			}
		}

		else if( (meter_rx_buffer[i] == 0x28) && (tarif_general_state==1) && (tarif_1_state==1) && (tarif_2_state==1) && (tarif_3_state==1) && (tarif_4_state==0) && (tarif_5_state==0) ) // 0х28 означает символ "(" в ASCII таблице
 8016b98:	8a3b      	ldrh	r3, [r7, #16]
 8016b9a:	4a1d      	ldr	r2, [pc, #116]	; (8016c10 <ce303_tarif+0x245c>)
 8016b9c:	5cd3      	ldrb	r3, [r2, r3]
 8016b9e:	2b28      	cmp	r3, #40	; 0x28
 8016ba0:	d116      	bne.n	8016bd0 <ce303_tarif+0x241c>
 8016ba2:	7d7b      	ldrb	r3, [r7, #21]
 8016ba4:	2b01      	cmp	r3, #1
 8016ba6:	d113      	bne.n	8016bd0 <ce303_tarif+0x241c>
 8016ba8:	7d3b      	ldrb	r3, [r7, #20]
 8016baa:	2b01      	cmp	r3, #1
 8016bac:	d110      	bne.n	8016bd0 <ce303_tarif+0x241c>
 8016bae:	7cfb      	ldrb	r3, [r7, #19]
 8016bb0:	2b01      	cmp	r3, #1
 8016bb2:	d10d      	bne.n	8016bd0 <ce303_tarif+0x241c>
 8016bb4:	7cbb      	ldrb	r3, [r7, #18]
 8016bb6:	2b01      	cmp	r3, #1
 8016bb8:	d10a      	bne.n	8016bd0 <ce303_tarif+0x241c>
 8016bba:	7bfb      	ldrb	r3, [r7, #15]
 8016bbc:	2b00      	cmp	r3, #0
 8016bbe:	d107      	bne.n	8016bd0 <ce303_tarif+0x241c>
 8016bc0:	7bbb      	ldrb	r3, [r7, #14]
 8016bc2:	2b00      	cmp	r3, #0
 8016bc4:	e004      	b.n	8016bd0 <ce303_tarif+0x241c>
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 8016bc6:	bf00      	nop
 8016bc8:	e002      	b.n	8016bd0 <ce303_tarif+0x241c>
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 8016bca:	bf00      	nop
 8016bcc:	e000      	b.n	8016bd0 <ce303_tarif+0x241c>
			if( meter_rx_buffer[i+2] == 0x2E) // 0х2Е означает символ "." в ASCII таблице, 1 цифра перед запятой
 8016bce:	bf00      	nop
	for(uint16_t i=0; i<256; i++)
 8016bd0:	8a3b      	ldrh	r3, [r7, #16]
 8016bd2:	3301      	adds	r3, #1
 8016bd4:	823b      	strh	r3, [r7, #16]
 8016bd6:	8a3b      	ldrh	r3, [r7, #16]
 8016bd8:	2bff      	cmp	r3, #255	; 0xff
 8016bda:	f67d afe8 	bls.w	8014bae <ce303_tarif+0x3fa>

		}

	}

	meter_rx_number = 0;
 8016bde:	4b0f      	ldr	r3, [pc, #60]	; (8016c1c <ce303_tarif+0x2468>)
 8016be0:	2200      	movs	r2, #0
 8016be2:	701a      	strb	r2, [r3, #0]
	meter_rx_buffer_clear(); // очищаем буфер приема счетчика
 8016be4:	f7f9 feea 	bl	80109bc <meter_rx_buffer_clear>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET); // устанавливаем микросхему на передачу
 8016be8:	2201      	movs	r2, #1
 8016bea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8016bee:	480c      	ldr	r0, [pc, #48]	; (8016c20 <ce303_tarif+0x246c>)
 8016bf0:	f7ed f936 	bl	8003e60 <HAL_GPIO_WritePin>
	HAL_UART_Transmit_DMA(&huart6, &end_buf[0], 5); // передаем команду
 8016bf4:	2205      	movs	r2, #5
 8016bf6:	490b      	ldr	r1, [pc, #44]	; (8016c24 <ce303_tarif+0x2470>)
 8016bf8:	480b      	ldr	r0, [pc, #44]	; (8016c28 <ce303_tarif+0x2474>)
 8016bfa:	f7f0 fc4f 	bl	800749c <HAL_UART_Transmit_DMA>
	HAL_Delay(1000);
 8016bfe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8016c02:	f7eb fd6d 	bl	80026e0 <HAL_Delay>

}
 8016c06:	bf00      	nop
 8016c08:	3718      	adds	r7, #24
 8016c0a:	46bd      	mov	sp, r7
 8016c0c:	bd80      	pop	{r7, pc}
 8016c0e:	bf00      	nop
 8016c10:	2000994c 	.word	0x2000994c
 8016c14:	20009af8 	.word	0x20009af8
 8016c18:	2000a174 	.word	0x2000a174
 8016c1c:	20000865 	.word	0x20000865
 8016c20:	40021800 	.word	0x40021800
 8016c24:	20000034 	.word	0x20000034
 8016c28:	20009d00 	.word	0x20009d00

08016c2c <fm25v02_read>:
	}
	return temp_id;
}

void fm25v02_read (uint16_t address, uint8_t* data)
{
 8016c2c:	b580      	push	{r7, lr}
 8016c2e:	b084      	sub	sp, #16
 8016c30:	af00      	add	r7, sp, #0
 8016c32:	4603      	mov	r3, r0
 8016c34:	6039      	str	r1, [r7, #0]
 8016c36:	80fb      	strh	r3, [r7, #6]
	uint8_t data_out[3];
	data_out[0]= READ;
 8016c38:	2303      	movs	r3, #3
 8016c3a:	733b      	strb	r3, [r7, #12]
	data_out[1]= (uint8_t)((address>>8)&0x00FF);
 8016c3c:	88fb      	ldrh	r3, [r7, #6]
 8016c3e:	0a1b      	lsrs	r3, r3, #8
 8016c40:	b29b      	uxth	r3, r3
 8016c42:	b2db      	uxtb	r3, r3
 8016c44:	737b      	strb	r3, [r7, #13]
	data_out[2]= (uint8_t)(address&0x00FF);
 8016c46:	88fb      	ldrh	r3, [r7, #6]
 8016c48:	b2db      	uxtb	r3, r3
 8016c4a:	73bb      	strb	r3, [r7, #14]
	FM25V02_CS_ON();
 8016c4c:	2200      	movs	r2, #0
 8016c4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8016c52:	4811      	ldr	r0, [pc, #68]	; (8016c98 <fm25v02_read+0x6c>)
 8016c54:	f7ed f904 	bl	8003e60 <HAL_GPIO_WritePin>

	while( HAL_SPI_Transmit(&hspi2, &data_out[0], 3, 10) != HAL_OK ) {}
 8016c58:	bf00      	nop
 8016c5a:	f107 010c 	add.w	r1, r7, #12
 8016c5e:	230a      	movs	r3, #10
 8016c60:	2203      	movs	r2, #3
 8016c62:	480e      	ldr	r0, [pc, #56]	; (8016c9c <fm25v02_read+0x70>)
 8016c64:	f7ef fa2b 	bl	80060be <HAL_SPI_Transmit>
 8016c68:	4603      	mov	r3, r0
 8016c6a:	2b00      	cmp	r3, #0
 8016c6c:	d1f5      	bne.n	8016c5a <fm25v02_read+0x2e>
	while( HAL_SPI_Receive(&hspi2, data, 1, 10) != HAL_OK ) {}
 8016c6e:	bf00      	nop
 8016c70:	230a      	movs	r3, #10
 8016c72:	2201      	movs	r2, #1
 8016c74:	6839      	ldr	r1, [r7, #0]
 8016c76:	4809      	ldr	r0, [pc, #36]	; (8016c9c <fm25v02_read+0x70>)
 8016c78:	f7ef fb5d 	bl	8006336 <HAL_SPI_Receive>
 8016c7c:	4603      	mov	r3, r0
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	d1f6      	bne.n	8016c70 <fm25v02_read+0x44>
	FM25V02_CS_OFF();
 8016c82:	2201      	movs	r2, #1
 8016c84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8016c88:	4803      	ldr	r0, [pc, #12]	; (8016c98 <fm25v02_read+0x6c>)
 8016c8a:	f7ed f8e9 	bl	8003e60 <HAL_GPIO_WritePin>
}
 8016c8e:	bf00      	nop
 8016c90:	3710      	adds	r7, #16
 8016c92:	46bd      	mov	sp, r7
 8016c94:	bd80      	pop	{r7, pc}
 8016c96:	bf00      	nop
 8016c98:	40021c00 	.word	0x40021c00
 8016c9c:	2000817c 	.word	0x2000817c

08016ca0 <fm25v02_write>:

void fm25v02_write (uint16_t address, uint8_t data)
{
 8016ca0:	b580      	push	{r7, lr}
 8016ca2:	b084      	sub	sp, #16
 8016ca4:	af00      	add	r7, sp, #0
 8016ca6:	4603      	mov	r3, r0
 8016ca8:	460a      	mov	r2, r1
 8016caa:	80fb      	strh	r3, [r7, #6]
 8016cac:	4613      	mov	r3, r2
 8016cae:	717b      	strb	r3, [r7, #5]
	uint8_t data_out[4];
	data_out[0]= WREN;
 8016cb0:	2306      	movs	r3, #6
 8016cb2:	733b      	strb	r3, [r7, #12]
	FM25V02_CS_ON();
 8016cb4:	2200      	movs	r2, #0
 8016cb6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8016cba:	481d      	ldr	r0, [pc, #116]	; (8016d30 <fm25v02_write+0x90>)
 8016cbc:	f7ed f8d0 	bl	8003e60 <HAL_GPIO_WritePin>
	while( HAL_SPI_Transmit(&hspi2, &data_out[0], 1, 10) != HAL_OK ) {}
 8016cc0:	bf00      	nop
 8016cc2:	f107 010c 	add.w	r1, r7, #12
 8016cc6:	230a      	movs	r3, #10
 8016cc8:	2201      	movs	r2, #1
 8016cca:	481a      	ldr	r0, [pc, #104]	; (8016d34 <fm25v02_write+0x94>)
 8016ccc:	f7ef f9f7 	bl	80060be <HAL_SPI_Transmit>
 8016cd0:	4603      	mov	r3, r0
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	d1f5      	bne.n	8016cc2 <fm25v02_write+0x22>
	FM25V02_CS_OFF();
 8016cd6:	2201      	movs	r2, #1
 8016cd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8016cdc:	4814      	ldr	r0, [pc, #80]	; (8016d30 <fm25v02_write+0x90>)
 8016cde:	f7ed f8bf 	bl	8003e60 <HAL_GPIO_WritePin>
	data_out[0]= WRITE;
 8016ce2:	2302      	movs	r3, #2
 8016ce4:	733b      	strb	r3, [r7, #12]
	data_out[1]= (uint8_t)((address>>8)&0x00FF);
 8016ce6:	88fb      	ldrh	r3, [r7, #6]
 8016ce8:	0a1b      	lsrs	r3, r3, #8
 8016cea:	b29b      	uxth	r3, r3
 8016cec:	b2db      	uxtb	r3, r3
 8016cee:	737b      	strb	r3, [r7, #13]
	data_out[2]= (uint8_t)(address&0x00FF);
 8016cf0:	88fb      	ldrh	r3, [r7, #6]
 8016cf2:	b2db      	uxtb	r3, r3
 8016cf4:	73bb      	strb	r3, [r7, #14]
	data_out[3]= data;
 8016cf6:	797b      	ldrb	r3, [r7, #5]
 8016cf8:	73fb      	strb	r3, [r7, #15]
	FM25V02_CS_ON();
 8016cfa:	2200      	movs	r2, #0
 8016cfc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8016d00:	480b      	ldr	r0, [pc, #44]	; (8016d30 <fm25v02_write+0x90>)
 8016d02:	f7ed f8ad 	bl	8003e60 <HAL_GPIO_WritePin>
	while( HAL_SPI_Transmit(&hspi2, &data_out[0], 4, 10) != HAL_OK ) {}
 8016d06:	bf00      	nop
 8016d08:	f107 010c 	add.w	r1, r7, #12
 8016d0c:	230a      	movs	r3, #10
 8016d0e:	2204      	movs	r2, #4
 8016d10:	4808      	ldr	r0, [pc, #32]	; (8016d34 <fm25v02_write+0x94>)
 8016d12:	f7ef f9d4 	bl	80060be <HAL_SPI_Transmit>
 8016d16:	4603      	mov	r3, r0
 8016d18:	2b00      	cmp	r3, #0
 8016d1a:	d1f5      	bne.n	8016d08 <fm25v02_write+0x68>
	FM25V02_CS_OFF();
 8016d1c:	2201      	movs	r2, #1
 8016d1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8016d22:	4803      	ldr	r0, [pc, #12]	; (8016d30 <fm25v02_write+0x90>)
 8016d24:	f7ed f89c 	bl	8003e60 <HAL_GPIO_WritePin>
}
 8016d28:	bf00      	nop
 8016d2a:	3710      	adds	r7, #16
 8016d2c:	46bd      	mov	sp, r7
 8016d2e:	bd80      	pop	{r7, pc}
 8016d30:	40021c00 	.word	0x40021c00
 8016d34:	2000817c 	.word	0x2000817c

08016d38 <fm25v02_fast_write>:

uint8_t fm25v02_fast_write (uint16_t address, uint8_t* data, uint16_t Size)
{
 8016d38:	b580      	push	{r7, lr}
 8016d3a:	b084      	sub	sp, #16
 8016d3c:	af00      	add	r7, sp, #0
 8016d3e:	4603      	mov	r3, r0
 8016d40:	6039      	str	r1, [r7, #0]
 8016d42:	80fb      	strh	r3, [r7, #6]
 8016d44:	4613      	mov	r3, r2
 8016d46:	80bb      	strh	r3, [r7, #4]
	for(uint8_t i=0; i<Size; i++)
 8016d48:	2300      	movs	r3, #0
 8016d4a:	73fb      	strb	r3, [r7, #15]
 8016d4c:	e00e      	b.n	8016d6c <fm25v02_fast_write+0x34>
	{
		fm25v02_write(address+i, *(data+i));
 8016d4e:	7bfb      	ldrb	r3, [r7, #15]
 8016d50:	b29a      	uxth	r2, r3
 8016d52:	88fb      	ldrh	r3, [r7, #6]
 8016d54:	4413      	add	r3, r2
 8016d56:	b298      	uxth	r0, r3
 8016d58:	7bfb      	ldrb	r3, [r7, #15]
 8016d5a:	683a      	ldr	r2, [r7, #0]
 8016d5c:	4413      	add	r3, r2
 8016d5e:	781b      	ldrb	r3, [r3, #0]
 8016d60:	4619      	mov	r1, r3
 8016d62:	f7ff ff9d 	bl	8016ca0 <fm25v02_write>
	for(uint8_t i=0; i<Size; i++)
 8016d66:	7bfb      	ldrb	r3, [r7, #15]
 8016d68:	3301      	adds	r3, #1
 8016d6a:	73fb      	strb	r3, [r7, #15]
 8016d6c:	7bfb      	ldrb	r3, [r7, #15]
 8016d6e:	b29b      	uxth	r3, r3
 8016d70:	88ba      	ldrh	r2, [r7, #4]
 8016d72:	429a      	cmp	r2, r3
 8016d74:	d8eb      	bhi.n	8016d4e <fm25v02_fast_write+0x16>
	}
	return 0;
 8016d76:	2300      	movs	r3, #0
}
 8016d78:	4618      	mov	r0, r3
 8016d7a:	3710      	adds	r7, #16
 8016d7c:	46bd      	mov	sp, r7
 8016d7e:	bd80      	pop	{r7, pc}

08016d80 <fm25v02_fast_read>:

HAL_StatusTypeDef fm25v02_fast_read (uint16_t address, uint8_t* data, uint16_t Size)
{
 8016d80:	b580      	push	{r7, lr}
 8016d82:	b084      	sub	sp, #16
 8016d84:	af00      	add	r7, sp, #0
 8016d86:	4603      	mov	r3, r0
 8016d88:	6039      	str	r1, [r7, #0]
 8016d8a:	80fb      	strh	r3, [r7, #6]
 8016d8c:	4613      	mov	r3, r2
 8016d8e:	80bb      	strh	r3, [r7, #4]
	uint8_t data_out[4];
	data_out[0]= FSTRD;
 8016d90:	230b      	movs	r3, #11
 8016d92:	733b      	strb	r3, [r7, #12]
	data_out[1]= (uint8_t)((address>>8)&0x00FF);
 8016d94:	88fb      	ldrh	r3, [r7, #6]
 8016d96:	0a1b      	lsrs	r3, r3, #8
 8016d98:	b29b      	uxth	r3, r3
 8016d9a:	b2db      	uxtb	r3, r3
 8016d9c:	737b      	strb	r3, [r7, #13]
	data_out[2]= (uint8_t)(address&0x00FF);
 8016d9e:	88fb      	ldrh	r3, [r7, #6]
 8016da0:	b2db      	uxtb	r3, r3
 8016da2:	73bb      	strb	r3, [r7, #14]
	data_out[3]= 0xFF;
 8016da4:	23ff      	movs	r3, #255	; 0xff
 8016da6:	73fb      	strb	r3, [r7, #15]
	FM25V02_CS_ON();
 8016da8:	2200      	movs	r2, #0
 8016daa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8016dae:	4811      	ldr	r0, [pc, #68]	; (8016df4 <fm25v02_fast_read+0x74>)
 8016db0:	f7ed f856 	bl	8003e60 <HAL_GPIO_WritePin>

	while( HAL_SPI_Transmit(&hspi2, &data_out[0], 4, 10) != HAL_OK ) {}
 8016db4:	bf00      	nop
 8016db6:	f107 010c 	add.w	r1, r7, #12
 8016dba:	230a      	movs	r3, #10
 8016dbc:	2204      	movs	r2, #4
 8016dbe:	480e      	ldr	r0, [pc, #56]	; (8016df8 <fm25v02_fast_read+0x78>)
 8016dc0:	f7ef f97d 	bl	80060be <HAL_SPI_Transmit>
 8016dc4:	4603      	mov	r3, r0
 8016dc6:	2b00      	cmp	r3, #0
 8016dc8:	d1f5      	bne.n	8016db6 <fm25v02_fast_read+0x36>
	while( HAL_SPI_Receive(&hspi2, data, Size, 10) != HAL_OK ) {}
 8016dca:	bf00      	nop
 8016dcc:	88ba      	ldrh	r2, [r7, #4]
 8016dce:	230a      	movs	r3, #10
 8016dd0:	6839      	ldr	r1, [r7, #0]
 8016dd2:	4809      	ldr	r0, [pc, #36]	; (8016df8 <fm25v02_fast_read+0x78>)
 8016dd4:	f7ef faaf 	bl	8006336 <HAL_SPI_Receive>
 8016dd8:	4603      	mov	r3, r0
 8016dda:	2b00      	cmp	r3, #0
 8016ddc:	d1f6      	bne.n	8016dcc <fm25v02_fast_read+0x4c>
	FM25V02_CS_OFF();
 8016dde:	2201      	movs	r2, #1
 8016de0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8016de4:	4803      	ldr	r0, [pc, #12]	; (8016df4 <fm25v02_fast_read+0x74>)
 8016de6:	f7ed f83b 	bl	8003e60 <HAL_GPIO_WritePin>
	return HAL_OK;
 8016dea:	2300      	movs	r3, #0
}
 8016dec:	4618      	mov	r0, r3
 8016dee:	3710      	adds	r7, #16
 8016df0:	46bd      	mov	sp, r7
 8016df2:	bd80      	pop	{r7, pc}
 8016df4:	40021c00 	.word	0x40021c00
 8016df8:	2000817c 	.word	0x2000817c

08016dfc <BUZ_ON>:


//---функции включения и отключения светодиодов, зуммера и транзистора охранного светодиода-----------------

void BUZ_ON(void) // включение зуммера
{
 8016dfc:	b580      	push	{r7, lr}
 8016dfe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
 8016e00:	2201      	movs	r2, #1
 8016e02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8016e06:	4802      	ldr	r0, [pc, #8]	; (8016e10 <BUZ_ON+0x14>)
 8016e08:	f7ed f82a 	bl	8003e60 <HAL_GPIO_WritePin>
}
 8016e0c:	bf00      	nop
 8016e0e:	bd80      	pop	{r7, pc}
 8016e10:	40020c00 	.word	0x40020c00

08016e14 <BUZ_OFF>:

void BUZ_OFF(void) // выключение зуммера
{
 8016e14:	b580      	push	{r7, lr}
 8016e16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_RESET);
 8016e18:	2200      	movs	r2, #0
 8016e1a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8016e1e:	4802      	ldr	r0, [pc, #8]	; (8016e28 <BUZ_OFF+0x14>)
 8016e20:	f7ed f81e 	bl	8003e60 <HAL_GPIO_WritePin>
}
 8016e24:	bf00      	nop
 8016e26:	bd80      	pop	{r7, pc}
 8016e28:	40020c00 	.word	0x40020c00

08016e2c <LED_VD4_ON>:
{
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
}

void LED_VD4_ON(void) // включение светодиода VD4
{
 8016e2c:	b580      	push	{r7, lr}
 8016e2e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_8, GPIO_PIN_SET);
 8016e30:	2201      	movs	r2, #1
 8016e32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8016e36:	4802      	ldr	r0, [pc, #8]	; (8016e40 <LED_VD4_ON+0x14>)
 8016e38:	f7ed f812 	bl	8003e60 <HAL_GPIO_WritePin>
}
 8016e3c:	bf00      	nop
 8016e3e:	bd80      	pop	{r7, pc}
 8016e40:	40022000 	.word	0x40022000

08016e44 <LED_VD4_OFF>:

void LED_VD4_OFF(void) // выключение светодиода VD4
{
 8016e44:	b580      	push	{r7, lr}
 8016e46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_8, GPIO_PIN_RESET);
 8016e48:	2200      	movs	r2, #0
 8016e4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8016e4e:	4802      	ldr	r0, [pc, #8]	; (8016e58 <LED_VD4_OFF+0x14>)
 8016e50:	f7ed f806 	bl	8003e60 <HAL_GPIO_WritePin>
}
 8016e54:	bf00      	nop
 8016e56:	bd80      	pop	{r7, pc}
 8016e58:	40022000 	.word	0x40022000

08016e5c <LED_VD3_TOGGLE>:
{
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
}

void LED_VD3_TOGGLE(void) // переключение светодиода VD3
{
 8016e5c:	b580      	push	{r7, lr}
 8016e5e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8016e60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8016e64:	4802      	ldr	r0, [pc, #8]	; (8016e70 <LED_VD3_TOGGLE+0x14>)
 8016e66:	f7ed f814 	bl	8003e92 <HAL_GPIO_TogglePin>
}
 8016e6a:	bf00      	nop
 8016e6c:	bd80      	pop	{r7, pc}
 8016e6e:	bf00      	nop
 8016e70:	40020800 	.word	0x40020800

08016e74 <LED1_OFF>:
{
	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_6);
}

void LED1_OFF(void) // выключение светодиода LED1
{
 8016e74:	b580      	push	{r7, lr}
 8016e76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_2, GPIO_PIN_SET);
 8016e78:	2201      	movs	r2, #1
 8016e7a:	2104      	movs	r1, #4
 8016e7c:	4802      	ldr	r0, [pc, #8]	; (8016e88 <LED1_OFF+0x14>)
 8016e7e:	f7ec ffef 	bl	8003e60 <HAL_GPIO_WritePin>
}
 8016e82:	bf00      	nop
 8016e84:	bd80      	pop	{r7, pc}
 8016e86:	bf00      	nop
 8016e88:	40021c00 	.word	0x40021c00

08016e8c <LED1_ON>:

void LED1_ON(void) // включение светодиода LED1
{
 8016e8c:	b580      	push	{r7, lr}
 8016e8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_2, GPIO_PIN_RESET);
 8016e90:	2200      	movs	r2, #0
 8016e92:	2104      	movs	r1, #4
 8016e94:	4802      	ldr	r0, [pc, #8]	; (8016ea0 <LED1_ON+0x14>)
 8016e96:	f7ec ffe3 	bl	8003e60 <HAL_GPIO_WritePin>
}
 8016e9a:	bf00      	nop
 8016e9c:	bd80      	pop	{r7, pc}
 8016e9e:	bf00      	nop
 8016ea0:	40021c00 	.word	0x40021c00

08016ea4 <LED3_OFF>:
{
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_3, GPIO_PIN_RESET);
}

void LED3_OFF(void) // выключение светодиода LED3
{
 8016ea4:	b580      	push	{r7, lr}
 8016ea6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8016ea8:	2201      	movs	r2, #1
 8016eaa:	2101      	movs	r1, #1
 8016eac:	4802      	ldr	r0, [pc, #8]	; (8016eb8 <LED3_OFF+0x14>)
 8016eae:	f7ec ffd7 	bl	8003e60 <HAL_GPIO_WritePin>
}
 8016eb2:	bf00      	nop
 8016eb4:	bd80      	pop	{r7, pc}
 8016eb6:	bf00      	nop
 8016eb8:	40020000 	.word	0x40020000

08016ebc <LED3_ON>:

void LED3_ON(void) // включение светодиода LED3
{
 8016ebc:	b580      	push	{r7, lr}
 8016ebe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8016ec0:	2200      	movs	r2, #0
 8016ec2:	2101      	movs	r1, #1
 8016ec4:	4802      	ldr	r0, [pc, #8]	; (8016ed0 <LED3_ON+0x14>)
 8016ec6:	f7ec ffcb 	bl	8003e60 <HAL_GPIO_WritePin>
}
 8016eca:	bf00      	nop
 8016ecc:	bd80      	pop	{r7, pc}
 8016ece:	bf00      	nop
 8016ed0:	40020000 	.word	0x40020000

08016ed4 <LED4_OFF>:

void LED4_OFF(void) // выключение светодиода LED4
{
 8016ed4:	b580      	push	{r7, lr}
 8016ed6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_SET);
 8016ed8:	2201      	movs	r2, #1
 8016eda:	2110      	movs	r1, #16
 8016edc:	4802      	ldr	r0, [pc, #8]	; (8016ee8 <LED4_OFF+0x14>)
 8016ede:	f7ec ffbf 	bl	8003e60 <HAL_GPIO_WritePin>
}
 8016ee2:	bf00      	nop
 8016ee4:	bd80      	pop	{r7, pc}
 8016ee6:	bf00      	nop
 8016ee8:	40021400 	.word	0x40021400

08016eec <LED4_ON>:

void LED4_ON(void) // включение светодиода LED4
{
 8016eec:	b580      	push	{r7, lr}
 8016eee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_4, GPIO_PIN_RESET);
 8016ef0:	2200      	movs	r2, #0
 8016ef2:	2110      	movs	r1, #16
 8016ef4:	4802      	ldr	r0, [pc, #8]	; (8016f00 <LED4_ON+0x14>)
 8016ef6:	f7ec ffb3 	bl	8003e60 <HAL_GPIO_WritePin>
}
 8016efa:	bf00      	nop
 8016efc:	bd80      	pop	{r7, pc}
 8016efe:	bf00      	nop
 8016f00:	40021400 	.word	0x40021400

08016f04 <LED5_OFF>:

void LED5_OFF(void) // выключение светодиода LED5
{
 8016f04:	b580      	push	{r7, lr}
 8016f06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_SET);
 8016f08:	2201      	movs	r2, #1
 8016f0a:	2120      	movs	r1, #32
 8016f0c:	4802      	ldr	r0, [pc, #8]	; (8016f18 <LED5_OFF+0x14>)
 8016f0e:	f7ec ffa7 	bl	8003e60 <HAL_GPIO_WritePin>
}
 8016f12:	bf00      	nop
 8016f14:	bd80      	pop	{r7, pc}
 8016f16:	bf00      	nop
 8016f18:	40021400 	.word	0x40021400

08016f1c <LED5_ON>:

void LED5_ON(void) // включение светодиода LED5
{
 8016f1c:	b580      	push	{r7, lr}
 8016f1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET);
 8016f20:	2200      	movs	r2, #0
 8016f22:	2120      	movs	r1, #32
 8016f24:	4802      	ldr	r0, [pc, #8]	; (8016f30 <LED5_ON+0x14>)
 8016f26:	f7ec ff9b 	bl	8003e60 <HAL_GPIO_WritePin>
}
 8016f2a:	bf00      	nop
 8016f2c:	bd80      	pop	{r7, pc}
 8016f2e:	bf00      	nop
 8016f30:	40021400 	.word	0x40021400

08016f34 <LED6_OFF>:

void LED6_OFF(void) // выключение светодиода LED6
{
 8016f34:	b580      	push	{r7, lr}
 8016f36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_SET);
 8016f38:	2201      	movs	r2, #1
 8016f3a:	2108      	movs	r1, #8
 8016f3c:	4802      	ldr	r0, [pc, #8]	; (8016f48 <LED6_OFF+0x14>)
 8016f3e:	f7ec ff8f 	bl	8003e60 <HAL_GPIO_WritePin>
}
 8016f42:	bf00      	nop
 8016f44:	bd80      	pop	{r7, pc}
 8016f46:	bf00      	nop
 8016f48:	40021400 	.word	0x40021400

08016f4c <LED6_ON>:

void LED6_ON(void) // включение светодиода LED6
{
 8016f4c:	b580      	push	{r7, lr}
 8016f4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOF, GPIO_PIN_3, GPIO_PIN_RESET);
 8016f50:	2200      	movs	r2, #0
 8016f52:	2108      	movs	r1, #8
 8016f54:	4802      	ldr	r0, [pc, #8]	; (8016f60 <LED6_ON+0x14>)
 8016f56:	f7ec ff83 	bl	8003e60 <HAL_GPIO_WritePin>
}
 8016f5a:	bf00      	nop
 8016f5c:	bd80      	pop	{r7, pc}
 8016f5e:	bf00      	nop
 8016f60:	40021400 	.word	0x40021400

08016f64 <LED7_OFF>:

void LED7_OFF(void) // выключение светодиода LED7
{
 8016f64:	b580      	push	{r7, lr}
 8016f66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_10, GPIO_PIN_SET);
 8016f68:	2201      	movs	r2, #1
 8016f6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8016f6e:	4802      	ldr	r0, [pc, #8]	; (8016f78 <LED7_OFF+0x14>)
 8016f70:	f7ec ff76 	bl	8003e60 <HAL_GPIO_WritePin>
}
 8016f74:	bf00      	nop
 8016f76:	bd80      	pop	{r7, pc}
 8016f78:	40022000 	.word	0x40022000

08016f7c <LED7_ON>:

void LED7_ON(void) // вклюдченище светодиода LED7
{
 8016f7c:	b580      	push	{r7, lr}
 8016f7e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_10, GPIO_PIN_RESET);
 8016f80:	2200      	movs	r2, #0
 8016f82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8016f86:	4802      	ldr	r0, [pc, #8]	; (8016f90 <LED7_ON+0x14>)
 8016f88:	f7ec ff6a 	bl	8003e60 <HAL_GPIO_WritePin>
}
 8016f8c:	bf00      	nop
 8016f8e:	bd80      	pop	{r7, pc}
 8016f90:	40022000 	.word	0x40022000

08016f94 <LED8_OFF>:

void LED8_OFF(void) // выключение светодиода LED8
{
 8016f94:	b580      	push	{r7, lr}
 8016f96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_11, GPIO_PIN_SET);
 8016f98:	2201      	movs	r2, #1
 8016f9a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8016f9e:	4802      	ldr	r0, [pc, #8]	; (8016fa8 <LED8_OFF+0x14>)
 8016fa0:	f7ec ff5e 	bl	8003e60 <HAL_GPIO_WritePin>
}
 8016fa4:	bf00      	nop
 8016fa6:	bd80      	pop	{r7, pc}
 8016fa8:	40022000 	.word	0x40022000

08016fac <LED8_ON>:

void LED8_ON(void) // включение светодиода LED8
{
 8016fac:	b580      	push	{r7, lr}
 8016fae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOI, GPIO_PIN_11, GPIO_PIN_RESET);
 8016fb0:	2200      	movs	r2, #0
 8016fb2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8016fb6:	4802      	ldr	r0, [pc, #8]	; (8016fc0 <LED8_ON+0x14>)
 8016fb8:	f7ec ff52 	bl	8003e60 <HAL_GPIO_WritePin>
}
 8016fbc:	bf00      	nop
 8016fbe:	bd80      	pop	{r7, pc}
 8016fc0:	40022000 	.word	0x40022000

08016fc4 <PHASE_A_ON>:

//-------------------------------------------------------------------------------------------------------

//---функции включения и отключения фаз-----------------
void PHASE_A_ON(void)
{
 8016fc4:	b580      	push	{r7, lr}
 8016fc6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_5, GPIO_PIN_SET);
 8016fc8:	2201      	movs	r2, #1
 8016fca:	2120      	movs	r1, #32
 8016fcc:	4802      	ldr	r0, [pc, #8]	; (8016fd8 <PHASE_A_ON+0x14>)
 8016fce:	f7ec ff47 	bl	8003e60 <HAL_GPIO_WritePin>
}
 8016fd2:	bf00      	nop
 8016fd4:	bd80      	pop	{r7, pc}
 8016fd6:	bf00      	nop
 8016fd8:	40021c00 	.word	0x40021c00

08016fdc <PHASE_A_OFF>:

void PHASE_A_OFF(void)
{
 8016fdc:	b580      	push	{r7, lr}
 8016fde:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_5, GPIO_PIN_RESET);
 8016fe0:	2200      	movs	r2, #0
 8016fe2:	2120      	movs	r1, #32
 8016fe4:	4802      	ldr	r0, [pc, #8]	; (8016ff0 <PHASE_A_OFF+0x14>)
 8016fe6:	f7ec ff3b 	bl	8003e60 <HAL_GPIO_WritePin>
}
 8016fea:	bf00      	nop
 8016fec:	bd80      	pop	{r7, pc}
 8016fee:	bf00      	nop
 8016ff0:	40021c00 	.word	0x40021c00

08016ff4 <PHASE_B_ON>:

void PHASE_B_ON(void)
{
 8016ff4:	b580      	push	{r7, lr}
 8016ff6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_SET);
 8016ff8:	2201      	movs	r2, #1
 8016ffa:	2108      	movs	r1, #8
 8016ffc:	4802      	ldr	r0, [pc, #8]	; (8017008 <PHASE_B_ON+0x14>)
 8016ffe:	f7ec ff2f 	bl	8003e60 <HAL_GPIO_WritePin>
}
 8017002:	bf00      	nop
 8017004:	bd80      	pop	{r7, pc}
 8017006:	bf00      	nop
 8017008:	40020000 	.word	0x40020000

0801700c <PHASE_B_OFF>:

void PHASE_B_OFF(void)
{
 801700c:	b580      	push	{r7, lr}
 801700e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8017010:	2200      	movs	r2, #0
 8017012:	2108      	movs	r1, #8
 8017014:	4802      	ldr	r0, [pc, #8]	; (8017020 <PHASE_B_OFF+0x14>)
 8017016:	f7ec ff23 	bl	8003e60 <HAL_GPIO_WritePin>
}
 801701a:	bf00      	nop
 801701c:	bd80      	pop	{r7, pc}
 801701e:	bf00      	nop
 8017020:	40020000 	.word	0x40020000

08017024 <PHASE_C_ON>:

void PHASE_C_ON(void)
{
 8017024:	b580      	push	{r7, lr}
 8017026:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8017028:	2201      	movs	r2, #1
 801702a:	2120      	movs	r1, #32
 801702c:	4802      	ldr	r0, [pc, #8]	; (8017038 <PHASE_C_ON+0x14>)
 801702e:	f7ec ff17 	bl	8003e60 <HAL_GPIO_WritePin>
}
 8017032:	bf00      	nop
 8017034:	bd80      	pop	{r7, pc}
 8017036:	bf00      	nop
 8017038:	40020000 	.word	0x40020000

0801703c <PHASE_C_OFF>:

void PHASE_C_OFF(void)
{
 801703c:	b580      	push	{r7, lr}
 801703e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8017040:	2200      	movs	r2, #0
 8017042:	2120      	movs	r1, #32
 8017044:	4802      	ldr	r0, [pc, #8]	; (8017050 <PHASE_C_OFF+0x14>)
 8017046:	f7ec ff0b 	bl	8003e60 <HAL_GPIO_WritePin>
}
 801704a:	bf00      	nop
 801704c:	bd80      	pop	{r7, pc}
 801704e:	bf00      	nop
 8017050:	40020000 	.word	0x40020000

08017054 <find_str>:

//uint8_t send_ok[] = "SEND OK\r\n";
uint8_t send_ok[] = "SEND OK";

uint8_t find_str(uint8_t* buf_in, uint16_t buf_in_len, uint8_t* buf_search, uint16_t buf_search_len)
{
 8017054:	b480      	push	{r7}
 8017056:	b087      	sub	sp, #28
 8017058:	af00      	add	r7, sp, #0
 801705a:	60f8      	str	r0, [r7, #12]
 801705c:	607a      	str	r2, [r7, #4]
 801705e:	461a      	mov	r2, r3
 8017060:	460b      	mov	r3, r1
 8017062:	817b      	strh	r3, [r7, #10]
 8017064:	4613      	mov	r3, r2
 8017066:	813b      	strh	r3, [r7, #8]
	uint8_t j=0;
 8017068:	2300      	movs	r3, #0
 801706a:	75fb      	strb	r3, [r7, #23]

	for(uint8_t i=0; i<buf_in_len; i++)
 801706c:	2300      	movs	r3, #0
 801706e:	75bb      	strb	r3, [r7, #22]
 8017070:	e018      	b.n	80170a4 <find_str+0x50>
	{
		if( *( buf_in+i ) == *(buf_search+j) )
 8017072:	7dbb      	ldrb	r3, [r7, #22]
 8017074:	68fa      	ldr	r2, [r7, #12]
 8017076:	4413      	add	r3, r2
 8017078:	781a      	ldrb	r2, [r3, #0]
 801707a:	7dfb      	ldrb	r3, [r7, #23]
 801707c:	6879      	ldr	r1, [r7, #4]
 801707e:	440b      	add	r3, r1
 8017080:	781b      	ldrb	r3, [r3, #0]
 8017082:	429a      	cmp	r2, r3
 8017084:	d109      	bne.n	801709a <find_str+0x46>
		{
			j++;
 8017086:	7dfb      	ldrb	r3, [r7, #23]
 8017088:	3301      	adds	r3, #1
 801708a:	75fb      	strb	r3, [r7, #23]
			if(j>=buf_search_len)
 801708c:	7dfb      	ldrb	r3, [r7, #23]
 801708e:	b29b      	uxth	r3, r3
 8017090:	893a      	ldrh	r2, [r7, #8]
 8017092:	429a      	cmp	r2, r3
 8017094:	d803      	bhi.n	801709e <find_str+0x4a>
			{
				return 1;
 8017096:	2301      	movs	r3, #1
 8017098:	e00a      	b.n	80170b0 <find_str+0x5c>
			}
		}
		else
		{
			j=0;
 801709a:	2300      	movs	r3, #0
 801709c:	75fb      	strb	r3, [r7, #23]
	for(uint8_t i=0; i<buf_in_len; i++)
 801709e:	7dbb      	ldrb	r3, [r7, #22]
 80170a0:	3301      	adds	r3, #1
 80170a2:	75bb      	strb	r3, [r7, #22]
 80170a4:	7dbb      	ldrb	r3, [r7, #22]
 80170a6:	b29b      	uxth	r3, r3
 80170a8:	897a      	ldrh	r2, [r7, #10]
 80170aa:	429a      	cmp	r2, r3
 80170ac:	d8e1      	bhi.n	8017072 <find_str+0x1e>
		}
	}

	return 0;
 80170ae:	2300      	movs	r3, #0
}
 80170b0:	4618      	mov	r0, r3
 80170b2:	371c      	adds	r7, #28
 80170b4:	46bd      	mov	sp, r7
 80170b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170ba:	4770      	bx	lr

080170bc <m95_power_on>:

void m95_power_on(void) // функция включения питания
{
 80170bc:	b580      	push	{r7, lr}
 80170be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, GPIO_PIN_RESET);
 80170c0:	2200      	movs	r2, #0
 80170c2:	2140      	movs	r1, #64	; 0x40
 80170c4:	480a      	ldr	r0, [pc, #40]	; (80170f0 <m95_power_on+0x34>)
 80170c6:	f7ec fecb 	bl	8003e60 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80170ca:	2064      	movs	r0, #100	; 0x64
 80170cc:	f7eb fb08 	bl	80026e0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, GPIO_PIN_SET);
 80170d0:	2201      	movs	r2, #1
 80170d2:	2140      	movs	r1, #64	; 0x40
 80170d4:	4806      	ldr	r0, [pc, #24]	; (80170f0 <m95_power_on+0x34>)
 80170d6:	f7ec fec3 	bl	8003e60 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 80170da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80170de:	f7eb faff 	bl	80026e0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, GPIO_PIN_RESET);
 80170e2:	2200      	movs	r2, #0
 80170e4:	2140      	movs	r1, #64	; 0x40
 80170e6:	4802      	ldr	r0, [pc, #8]	; (80170f0 <m95_power_on+0x34>)
 80170e8:	f7ec feba 	bl	8003e60 <HAL_GPIO_WritePin>
}
 80170ec:	bf00      	nop
 80170ee:	bd80      	pop	{r7, pc}
 80170f0:	40021c00 	.word	0x40021c00

080170f4 <m95_power_off>:

void m95_power_off(void)
{
 80170f4:	b580      	push	{r7, lr}
 80170f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, GPIO_PIN_RESET);
 80170f8:	2200      	movs	r2, #0
 80170fa:	2140      	movs	r1, #64	; 0x40
 80170fc:	480a      	ldr	r0, [pc, #40]	; (8017128 <m95_power_off+0x34>)
 80170fe:	f7ec feaf 	bl	8003e60 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8017102:	2064      	movs	r0, #100	; 0x64
 8017104:	f7eb faec 	bl	80026e0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, GPIO_PIN_SET);
 8017108:	2201      	movs	r2, #1
 801710a:	2140      	movs	r1, #64	; 0x40
 801710c:	4806      	ldr	r0, [pc, #24]	; (8017128 <m95_power_off+0x34>)
 801710e:	f7ec fea7 	bl	8003e60 <HAL_GPIO_WritePin>
	HAL_Delay(700);
 8017112:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8017116:	f7eb fae3 	bl	80026e0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOH, GPIO_PIN_6, GPIO_PIN_RESET);
 801711a:	2200      	movs	r2, #0
 801711c:	2140      	movs	r1, #64	; 0x40
 801711e:	4802      	ldr	r0, [pc, #8]	; (8017128 <m95_power_off+0x34>)
 8017120:	f7ec fe9e 	bl	8003e60 <HAL_GPIO_WritePin>
}
 8017124:	bf00      	nop
 8017126:	bd80      	pop	{r7, pc}
 8017128:	40021c00 	.word	0x40021c00

0801712c <modem_rx_buffer_clear>:



void modem_rx_buffer_clear (void)
{
 801712c:	b480      	push	{r7}
 801712e:	b083      	sub	sp, #12
 8017130:	af00      	add	r7, sp, #0
	for(uint16_t i=0; i<256; i++)
 8017132:	2300      	movs	r3, #0
 8017134:	80fb      	strh	r3, [r7, #6]
 8017136:	e006      	b.n	8017146 <modem_rx_buffer_clear+0x1a>
	{
		modem_rx_buffer[i] = 0;
 8017138:	88fb      	ldrh	r3, [r7, #6]
 801713a:	4a08      	ldr	r2, [pc, #32]	; (801715c <modem_rx_buffer_clear+0x30>)
 801713c:	2100      	movs	r1, #0
 801713e:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i=0; i<256; i++)
 8017140:	88fb      	ldrh	r3, [r7, #6]
 8017142:	3301      	adds	r3, #1
 8017144:	80fb      	strh	r3, [r7, #6]
 8017146:	88fb      	ldrh	r3, [r7, #6]
 8017148:	2bff      	cmp	r3, #255	; 0xff
 801714a:	d9f5      	bls.n	8017138 <modem_rx_buffer_clear+0xc>
	}
}
 801714c:	bf00      	nop
 801714e:	bf00      	nop
 8017150:	370c      	adds	r7, #12
 8017152:	46bd      	mov	sp, r7
 8017154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017158:	4770      	bx	lr
 801715a:	bf00      	nop
 801715c:	20009c00 	.word	0x20009c00

08017160 <ATE0>:

uint8_t ATE0 (void)
{
 8017160:	b580      	push	{r7, lr}
 8017162:	b082      	sub	sp, #8
 8017164:	af00      	add	r7, sp, #0
	char str_out[5];
	sprintf(str_out, "ATE0\n");
 8017166:	463b      	mov	r3, r7
 8017168:	491f      	ldr	r1, [pc, #124]	; (80171e8 <ATE0+0x88>)
 801716a:	4618      	mov	r0, r3
 801716c:	f003 fa7e 	bl	801a66c <siprintf>

	read_rx_state = ACTIVE;
 8017170:	4b1e      	ldr	r3, [pc, #120]	; (80171ec <ATE0+0x8c>)
 8017172:	2201      	movs	r2, #1
 8017174:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 8017176:	4b1e      	ldr	r3, [pc, #120]	; (80171f0 <ATE0+0x90>)
 8017178:	2200      	movs	r2, #0
 801717a:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 801717c:	f7ff ffd6 	bl	801712c <modem_rx_buffer_clear>
	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 8017180:	2201      	movs	r2, #1
 8017182:	491c      	ldr	r1, [pc, #112]	; (80171f4 <ATE0+0x94>)
 8017184:	481c      	ldr	r0, [pc, #112]	; (80171f8 <ATE0+0x98>)
 8017186:	f7f0 fa07 	bl	8007598 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 5);
 801718a:	463b      	mov	r3, r7
 801718c:	2205      	movs	r2, #5
 801718e:	4619      	mov	r1, r3
 8017190:	4819      	ldr	r0, [pc, #100]	; (80171f8 <ATE0+0x98>)
 8017192:	f7f0 f983 	bl	800749c <HAL_UART_Transmit_DMA>
	//HAL_UART_Transmit_DMA(&huart3, at, 3);

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 8017196:	4b19      	ldr	r3, [pc, #100]	; (80171fc <ATE0+0x9c>)
 8017198:	681b      	ldr	r3, [r3, #0]
 801719a:	f04f 31ff 	mov.w	r1, #4294967295
 801719e:	4618      	mov	r0, r3
 80171a0:	f7f1 fc72 	bl	8008a88 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 300);
 80171a4:	4b16      	ldr	r3, [pc, #88]	; (8017200 <ATE0+0xa0>)
 80171a6:	681b      	ldr	r3, [r3, #0]
 80171a8:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80171ac:	4618      	mov	r0, r3
 80171ae:	f7f1 fb1d 	bl	80087ec <osTimerStart>
	while(read_rx_state == ACTIVE)
 80171b2:	e010      	b.n	80171d6 <ATE0+0x76>
	{
		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 80171b4:	4913      	ldr	r1, [pc, #76]	; (8017204 <ATE0+0xa4>)
 80171b6:	4814      	ldr	r0, [pc, #80]	; (8017208 <ATE0+0xa8>)
 80171b8:	f003 fa78 	bl	801a6ac <strstr>
 80171bc:	4603      	mov	r3, r0
 80171be:	2b00      	cmp	r3, #0
 80171c0:	d009      	beq.n	80171d6 <ATE0+0x76>
		{
			osTimerStop(AT_TimerHandle);
 80171c2:	4b0f      	ldr	r3, [pc, #60]	; (8017200 <ATE0+0xa0>)
 80171c4:	681b      	ldr	r3, [r3, #0]
 80171c6:	4618      	mov	r0, r3
 80171c8:	f7f1 fb54 	bl	8008874 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 80171cc:	4b07      	ldr	r3, [pc, #28]	; (80171ec <ATE0+0x8c>)
 80171ce:	2200      	movs	r2, #0
 80171d0:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 80171d2:	2300      	movs	r3, #0
 80171d4:	e004      	b.n	80171e0 <ATE0+0x80>
	while(read_rx_state == ACTIVE)
 80171d6:	4b05      	ldr	r3, [pc, #20]	; (80171ec <ATE0+0x8c>)
 80171d8:	781b      	ldrb	r3, [r3, #0]
 80171da:	2b01      	cmp	r3, #1
 80171dc:	d0ea      	beq.n	80171b4 <ATE0+0x54>
		}
	}
	return AT_ERROR;
 80171de:	2301      	movs	r3, #1
}
 80171e0:	4618      	mov	r0, r3
 80171e2:	3708      	adds	r7, #8
 80171e4:	46bd      	mov	sp, r7
 80171e6:	bd80      	pop	{r7, pc}
 80171e8:	0801bf48 	.word	0x0801bf48
 80171ec:	20009a50 	.word	0x20009a50
 80171f0:	20000864 	.word	0x20000864
 80171f4:	20009afc 	.word	0x20009afc
 80171f8:	2000823c 	.word	0x2000823c
 80171fc:	20009d9c 	.word	0x20009d9c
 8017200:	200096f0 	.word	0x200096f0
 8017204:	0801bf50 	.word	0x0801bf50
 8017208:	20009c00 	.word	0x20009c00

0801720c <AT>:




uint8_t AT (void)
{
 801720c:	b580      	push	{r7, lr}
 801720e:	b082      	sub	sp, #8
 8017210:	af00      	add	r7, sp, #0
	char str_out[3];
	sprintf(str_out, "AT\n");
 8017212:	1d3b      	adds	r3, r7, #4
 8017214:	491f      	ldr	r1, [pc, #124]	; (8017294 <AT+0x88>)
 8017216:	4618      	mov	r0, r3
 8017218:	f003 fa28 	bl	801a66c <siprintf>

	read_rx_state = ACTIVE;
 801721c:	4b1e      	ldr	r3, [pc, #120]	; (8017298 <AT+0x8c>)
 801721e:	2201      	movs	r2, #1
 8017220:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 8017222:	4b1e      	ldr	r3, [pc, #120]	; (801729c <AT+0x90>)
 8017224:	2200      	movs	r2, #0
 8017226:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 8017228:	f7ff ff80 	bl	801712c <modem_rx_buffer_clear>
	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 801722c:	2201      	movs	r2, #1
 801722e:	491c      	ldr	r1, [pc, #112]	; (80172a0 <AT+0x94>)
 8017230:	481c      	ldr	r0, [pc, #112]	; (80172a4 <AT+0x98>)
 8017232:	f7f0 f9b1 	bl	8007598 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 3);
 8017236:	1d3b      	adds	r3, r7, #4
 8017238:	2203      	movs	r2, #3
 801723a:	4619      	mov	r1, r3
 801723c:	4819      	ldr	r0, [pc, #100]	; (80172a4 <AT+0x98>)
 801723e:	f7f0 f92d 	bl	800749c <HAL_UART_Transmit_DMA>
	//HAL_UART_Transmit_DMA(&huart3, at, 3);

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 8017242:	4b19      	ldr	r3, [pc, #100]	; (80172a8 <AT+0x9c>)
 8017244:	681b      	ldr	r3, [r3, #0]
 8017246:	f04f 31ff 	mov.w	r1, #4294967295
 801724a:	4618      	mov	r0, r3
 801724c:	f7f1 fc1c 	bl	8008a88 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 300);
 8017250:	4b16      	ldr	r3, [pc, #88]	; (80172ac <AT+0xa0>)
 8017252:	681b      	ldr	r3, [r3, #0]
 8017254:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8017258:	4618      	mov	r0, r3
 801725a:	f7f1 fac7 	bl	80087ec <osTimerStart>
	while(read_rx_state == ACTIVE)
 801725e:	e010      	b.n	8017282 <AT+0x76>
	{
		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 8017260:	4913      	ldr	r1, [pc, #76]	; (80172b0 <AT+0xa4>)
 8017262:	4814      	ldr	r0, [pc, #80]	; (80172b4 <AT+0xa8>)
 8017264:	f003 fa22 	bl	801a6ac <strstr>
 8017268:	4603      	mov	r3, r0
 801726a:	2b00      	cmp	r3, #0
 801726c:	d009      	beq.n	8017282 <AT+0x76>
		{
			osTimerStop(AT_TimerHandle);
 801726e:	4b0f      	ldr	r3, [pc, #60]	; (80172ac <AT+0xa0>)
 8017270:	681b      	ldr	r3, [r3, #0]
 8017272:	4618      	mov	r0, r3
 8017274:	f7f1 fafe 	bl	8008874 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 8017278:	4b07      	ldr	r3, [pc, #28]	; (8017298 <AT+0x8c>)
 801727a:	2200      	movs	r2, #0
 801727c:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 801727e:	2300      	movs	r3, #0
 8017280:	e004      	b.n	801728c <AT+0x80>
	while(read_rx_state == ACTIVE)
 8017282:	4b05      	ldr	r3, [pc, #20]	; (8017298 <AT+0x8c>)
 8017284:	781b      	ldrb	r3, [r3, #0]
 8017286:	2b01      	cmp	r3, #1
 8017288:	d0ea      	beq.n	8017260 <AT+0x54>
		}
	}
	return AT_ERROR;
 801728a:	2301      	movs	r3, #1
}
 801728c:	4618      	mov	r0, r3
 801728e:	3708      	adds	r7, #8
 8017290:	46bd      	mov	sp, r7
 8017292:	bd80      	pop	{r7, pc}
 8017294:	0801bf58 	.word	0x0801bf58
 8017298:	20009a50 	.word	0x20009a50
 801729c:	20000864 	.word	0x20000864
 80172a0:	20009afc 	.word	0x20009afc
 80172a4:	2000823c 	.word	0x2000823c
 80172a8:	20009d9c 	.word	0x20009d9c
 80172ac:	200096f0 	.word	0x200096f0
 80172b0:	0801bf50 	.word	0x0801bf50
 80172b4:	20009c00 	.word	0x20009c00

080172b8 <AT_CSQ>:

uint8_t AT_CSQ (uint8_t* signal_level)
{
 80172b8:	b580      	push	{r7, lr}
 80172ba:	b084      	sub	sp, #16
 80172bc:	af00      	add	r7, sp, #0
 80172be:	6078      	str	r0, [r7, #4]
	char str_out[7];
	sprintf(str_out, "AT+CSQ\n");
 80172c0:	f107 0308 	add.w	r3, r7, #8
 80172c4:	4931      	ldr	r1, [pc, #196]	; (801738c <AT_CSQ+0xd4>)
 80172c6:	4618      	mov	r0, r3
 80172c8:	f003 f9d0 	bl	801a66c <siprintf>

	read_rx_state = ACTIVE;
 80172cc:	4b30      	ldr	r3, [pc, #192]	; (8017390 <AT_CSQ+0xd8>)
 80172ce:	2201      	movs	r2, #1
 80172d0:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 80172d2:	4b30      	ldr	r3, [pc, #192]	; (8017394 <AT_CSQ+0xdc>)
 80172d4:	2200      	movs	r2, #0
 80172d6:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 80172d8:	f7ff ff28 	bl	801712c <modem_rx_buffer_clear>
	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 80172dc:	2201      	movs	r2, #1
 80172de:	492e      	ldr	r1, [pc, #184]	; (8017398 <AT_CSQ+0xe0>)
 80172e0:	482e      	ldr	r0, [pc, #184]	; (801739c <AT_CSQ+0xe4>)
 80172e2:	f7f0 f959 	bl	8007598 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 7);
 80172e6:	f107 0308 	add.w	r3, r7, #8
 80172ea:	2207      	movs	r2, #7
 80172ec:	4619      	mov	r1, r3
 80172ee:	482b      	ldr	r0, [pc, #172]	; (801739c <AT_CSQ+0xe4>)
 80172f0:	f7f0 f8d4 	bl	800749c <HAL_UART_Transmit_DMA>
	//HAL_UART_Transmit_DMA(&huart3, at_csq, 7);

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 80172f4:	4b2a      	ldr	r3, [pc, #168]	; (80173a0 <AT_CSQ+0xe8>)
 80172f6:	681b      	ldr	r3, [r3, #0]
 80172f8:	f04f 31ff 	mov.w	r1, #4294967295
 80172fc:	4618      	mov	r0, r3
 80172fe:	f7f1 fbc3 	bl	8008a88 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 300);
 8017302:	4b28      	ldr	r3, [pc, #160]	; (80173a4 <AT_CSQ+0xec>)
 8017304:	681b      	ldr	r3, [r3, #0]
 8017306:	f44f 7196 	mov.w	r1, #300	; 0x12c
 801730a:	4618      	mov	r0, r3
 801730c:	f7f1 fa6e 	bl	80087ec <osTimerStart>
	while(read_rx_state == ACTIVE)
 8017310:	e033      	b.n	801737a <AT_CSQ+0xc2>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "+CSQ:") != NULL )
 8017312:	4925      	ldr	r1, [pc, #148]	; (80173a8 <AT_CSQ+0xf0>)
 8017314:	4825      	ldr	r0, [pc, #148]	; (80173ac <AT_CSQ+0xf4>)
 8017316:	f003 f9c9 	bl	801a6ac <strstr>
 801731a:	4603      	mov	r3, r0
 801731c:	2b00      	cmp	r3, #0
 801731e:	d01b      	beq.n	8017358 <AT_CSQ+0xa0>
		{
			if(modem_rx_buffer[9]==',') // в случае, если ATE0 (эхо выключено)
 8017320:	4b22      	ldr	r3, [pc, #136]	; (80173ac <AT_CSQ+0xf4>)
 8017322:	7a5b      	ldrb	r3, [r3, #9]
 8017324:	2b2c      	cmp	r3, #44	; 0x2c
 8017326:	d106      	bne.n	8017336 <AT_CSQ+0x7e>
			{
				*signal_level = modem_rx_buffer[8]-0x30;
 8017328:	4b20      	ldr	r3, [pc, #128]	; (80173ac <AT_CSQ+0xf4>)
 801732a:	7a1b      	ldrb	r3, [r3, #8]
 801732c:	3b30      	subs	r3, #48	; 0x30
 801732e:	b2da      	uxtb	r2, r3
 8017330:	687b      	ldr	r3, [r7, #4]
 8017332:	701a      	strb	r2, [r3, #0]
 8017334:	e010      	b.n	8017358 <AT_CSQ+0xa0>
			}
			else
			{
				*signal_level = (modem_rx_buffer[8]-0x30)*10 + (modem_rx_buffer[9]-0x30);
 8017336:	4b1d      	ldr	r3, [pc, #116]	; (80173ac <AT_CSQ+0xf4>)
 8017338:	7a1b      	ldrb	r3, [r3, #8]
 801733a:	3b30      	subs	r3, #48	; 0x30
 801733c:	b2db      	uxtb	r3, r3
 801733e:	461a      	mov	r2, r3
 8017340:	0092      	lsls	r2, r2, #2
 8017342:	4413      	add	r3, r2
 8017344:	005b      	lsls	r3, r3, #1
 8017346:	b2da      	uxtb	r2, r3
 8017348:	4b18      	ldr	r3, [pc, #96]	; (80173ac <AT_CSQ+0xf4>)
 801734a:	7a5b      	ldrb	r3, [r3, #9]
 801734c:	4413      	add	r3, r2
 801734e:	b2db      	uxtb	r3, r3
 8017350:	3b30      	subs	r3, #48	; 0x30
 8017352:	b2da      	uxtb	r2, r3
 8017354:	687b      	ldr	r3, [r7, #4]
 8017356:	701a      	strb	r2, [r3, #0]
			{
				*signal_level = (modem_rx_buffer[14]-0x30)*10 + (modem_rx_buffer[15]-0x30);
			}
			*/
		}
		if(strstr(modem_rx_buffer, "OK") != NULL )
 8017358:	4915      	ldr	r1, [pc, #84]	; (80173b0 <AT_CSQ+0xf8>)
 801735a:	4814      	ldr	r0, [pc, #80]	; (80173ac <AT_CSQ+0xf4>)
 801735c:	f003 f9a6 	bl	801a6ac <strstr>
 8017360:	4603      	mov	r3, r0
 8017362:	2b00      	cmp	r3, #0
 8017364:	d009      	beq.n	801737a <AT_CSQ+0xc2>
		{
			osTimerStop(AT_TimerHandle);
 8017366:	4b0f      	ldr	r3, [pc, #60]	; (80173a4 <AT_CSQ+0xec>)
 8017368:	681b      	ldr	r3, [r3, #0]
 801736a:	4618      	mov	r0, r3
 801736c:	f7f1 fa82 	bl	8008874 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 8017370:	4b07      	ldr	r3, [pc, #28]	; (8017390 <AT_CSQ+0xd8>)
 8017372:	2200      	movs	r2, #0
 8017374:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 8017376:	2300      	movs	r3, #0
 8017378:	e004      	b.n	8017384 <AT_CSQ+0xcc>
	while(read_rx_state == ACTIVE)
 801737a:	4b05      	ldr	r3, [pc, #20]	; (8017390 <AT_CSQ+0xd8>)
 801737c:	781b      	ldrb	r3, [r3, #0]
 801737e:	2b01      	cmp	r3, #1
 8017380:	d0c7      	beq.n	8017312 <AT_CSQ+0x5a>
		}
	}
	return AT_ERROR;
 8017382:	2301      	movs	r3, #1
}
 8017384:	4618      	mov	r0, r3
 8017386:	3710      	adds	r7, #16
 8017388:	46bd      	mov	sp, r7
 801738a:	bd80      	pop	{r7, pc}
 801738c:	0801bf5c 	.word	0x0801bf5c
 8017390:	20009a50 	.word	0x20009a50
 8017394:	20000864 	.word	0x20000864
 8017398:	20009afc 	.word	0x20009afc
 801739c:	2000823c 	.word	0x2000823c
 80173a0:	20009d9c 	.word	0x20009d9c
 80173a4:	200096f0 	.word	0x200096f0
 80173a8:	0801bf64 	.word	0x0801bf64
 80173ac:	20009c00 	.word	0x20009c00
 80173b0:	0801bf6c 	.word	0x0801bf6c

080173b4 <AT_QCCID>:

uint8_t AT_QCCID ( uint8_t* id, uint64_t* temp_id) // Команда для для чтения CCID сим карты. id - указатель к массиву в которую будет сохраняться CCID симкарты (должен быть 8 байт), temp_id - указатель к временному массиву для расчета (должен быть 20 байт)
{
 80173b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80173b8:	b0ae      	sub	sp, #184	; 0xb8
 80173ba:	af00      	add	r7, sp, #0
 80173bc:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 80173c0:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
	//uint64_t id1[20];
	char str_out[9];
	sprintf(str_out, "AT+QCCID\n");
 80173c4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80173c8:	491d      	ldr	r1, [pc, #116]	; (8017440 <AT_QCCID+0x8c>)
 80173ca:	4618      	mov	r0, r3
 80173cc:	f003 f94e 	bl	801a66c <siprintf>
	read_rx_state = ACTIVE;
 80173d0:	4a1c      	ldr	r2, [pc, #112]	; (8017444 <AT_QCCID+0x90>)
 80173d2:	2301      	movs	r3, #1
 80173d4:	7013      	strb	r3, [r2, #0]
	modem_rx_number = 0;
 80173d6:	4a1c      	ldr	r2, [pc, #112]	; (8017448 <AT_QCCID+0x94>)
 80173d8:	2300      	movs	r3, #0
 80173da:	7013      	strb	r3, [r2, #0]
	modem_rx_buffer_clear();
 80173dc:	f7ff fea6 	bl	801712c <modem_rx_buffer_clear>
	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 80173e0:	2201      	movs	r2, #1
 80173e2:	491a      	ldr	r1, [pc, #104]	; (801744c <AT_QCCID+0x98>)
 80173e4:	481a      	ldr	r0, [pc, #104]	; (8017450 <AT_QCCID+0x9c>)
 80173e6:	f7f0 f8d7 	bl	8007598 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 9);
 80173ea:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80173ee:	2209      	movs	r2, #9
 80173f0:	4619      	mov	r1, r3
 80173f2:	4817      	ldr	r0, [pc, #92]	; (8017450 <AT_QCCID+0x9c>)
 80173f4:	f7f0 f852 	bl	800749c <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 80173f8:	4b16      	ldr	r3, [pc, #88]	; (8017454 <AT_QCCID+0xa0>)
 80173fa:	681b      	ldr	r3, [r3, #0]
 80173fc:	f04f 31ff 	mov.w	r1, #4294967295
 8017400:	4618      	mov	r0, r3
 8017402:	f7f1 fb41 	bl	8008a88 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 300);
 8017406:	4b14      	ldr	r3, [pc, #80]	; (8017458 <AT_QCCID+0xa4>)
 8017408:	681b      	ldr	r3, [r3, #0]
 801740a:	f44f 7196 	mov.w	r1, #300	; 0x12c
 801740e:	4618      	mov	r0, r3
 8017410:	f7f1 f9ec 	bl	80087ec <osTimerStart>
	while(read_rx_state == ACTIVE)
 8017414:	e34b      	b.n	8017aae <AT_QCCID+0x6fa>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 8017416:	4911      	ldr	r1, [pc, #68]	; (801745c <AT_QCCID+0xa8>)
 8017418:	4811      	ldr	r0, [pc, #68]	; (8017460 <AT_QCCID+0xac>)
 801741a:	f003 f947 	bl	801a6ac <strstr>
 801741e:	4603      	mov	r3, r0
 8017420:	2b00      	cmp	r3, #0
 8017422:	f000 8344 	beq.w	8017aae <AT_QCCID+0x6fa>
		{
			osTimerStop(AT_TimerHandle);
 8017426:	4b0c      	ldr	r3, [pc, #48]	; (8017458 <AT_QCCID+0xa4>)
 8017428:	681b      	ldr	r3, [r3, #0]
 801742a:	4618      	mov	r0, r3
 801742c:	f7f1 fa22 	bl	8008874 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 8017430:	4a04      	ldr	r2, [pc, #16]	; (8017444 <AT_QCCID+0x90>)
 8017432:	2300      	movs	r3, #0
 8017434:	7013      	strb	r3, [r2, #0]

			// В случае, когда ATE0, эхо выключено
			for(uint8_t i=0; i<19; i++)
 8017436:	2300      	movs	r3, #0
 8017438:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 801743c:	e029      	b.n	8017492 <AT_QCCID+0xde>
 801743e:	bf00      	nop
 8017440:	0801bf70 	.word	0x0801bf70
 8017444:	20009a50 	.word	0x20009a50
 8017448:	20000864 	.word	0x20000864
 801744c:	20009afc 	.word	0x20009afc
 8017450:	2000823c 	.word	0x2000823c
 8017454:	20009d9c 	.word	0x20009d9c
 8017458:	200096f0 	.word	0x200096f0
 801745c:	0801bf50 	.word	0x0801bf50
 8017460:	20009c00 	.word	0x20009c00
			{
				*(temp_id+i) = (uint8_t)modem_rx_buffer[2+i] - 48;
 8017464:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8017468:	1c9a      	adds	r2, r3, #2
 801746a:	4bde      	ldr	r3, [pc, #888]	; (80177e4 <AT_QCCID+0x430>)
 801746c:	5c9b      	ldrb	r3, [r3, r2]
 801746e:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8017472:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8017476:	00da      	lsls	r2, r3, #3
 8017478:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801747c:	1899      	adds	r1, r3, r2
 801747e:	4602      	mov	r2, r0
 8017480:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8017484:	e9c1 2300 	strd	r2, r3, [r1]
			for(uint8_t i=0; i<19; i++)
 8017488:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 801748c:	3301      	adds	r3, #1
 801748e:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 8017492:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8017496:	2b12      	cmp	r3, #18
 8017498:	d9e4      	bls.n	8017464 <AT_QCCID+0xb0>
				*(temp_id+i) = (uint8_t)modem_rx_buffer[10+i] - 48;
				//temp_id[i] = (uint8_t)modem_rx_buffer[10+i] - 48;
			}
			*/

			*(temp_id+19) = *temp_id*1000000000000000000 + *(temp_id+1)*100000000000000000 + *(temp_id+2)*10000000000000000 + *(temp_id+3)*1000000000000000 + *(temp_id+4)*100000000000000 + *(temp_id+5)*10000000000000 + *(temp_id+6)*1000000000000 + *(temp_id+7)*100000000000 + *(temp_id+8)*10000000000 + *(temp_id+9)*1000000000 + *(temp_id+10)*100000000 + *(temp_id+11)*10000000 + *(temp_id+12)*1000000 + *(temp_id+13)*100000 + *(temp_id+14)*10000 + *(temp_id+15)*1000 + *(temp_id+16)*100 + *(temp_id+17)*10 + *(temp_id+18);
 801749a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801749e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174a2:	49d1      	ldr	r1, [pc, #836]	; (80177e8 <AT_QCCID+0x434>)
 80174a4:	fb01 f003 	mul.w	r0, r1, r3
 80174a8:	49d0      	ldr	r1, [pc, #832]	; (80177ec <AT_QCCID+0x438>)
 80174aa:	fb01 f102 	mul.w	r1, r1, r2
 80174ae:	4408      	add	r0, r1
 80174b0:	49cd      	ldr	r1, [pc, #820]	; (80177e8 <AT_QCCID+0x434>)
 80174b2:	fba2 4501 	umull	r4, r5, r2, r1
 80174b6:	1943      	adds	r3, r0, r5
 80174b8:	461d      	mov	r5, r3
 80174ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80174be:	3308      	adds	r3, #8
 80174c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174c4:	49ca      	ldr	r1, [pc, #808]	; (80177f0 <AT_QCCID+0x43c>)
 80174c6:	fb01 f003 	mul.w	r0, r1, r3
 80174ca:	49ca      	ldr	r1, [pc, #808]	; (80177f4 <AT_QCCID+0x440>)
 80174cc:	fb01 f102 	mul.w	r1, r1, r2
 80174d0:	4408      	add	r0, r1
 80174d2:	49c7      	ldr	r1, [pc, #796]	; (80177f0 <AT_QCCID+0x43c>)
 80174d4:	fba2 2301 	umull	r2, r3, r2, r1
 80174d8:	18c1      	adds	r1, r0, r3
 80174da:	460b      	mov	r3, r1
 80174dc:	eb14 0a02 	adds.w	sl, r4, r2
 80174e0:	eb45 0b03 	adc.w	fp, r5, r3
 80174e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80174e8:	3318      	adds	r3, #24
 80174ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174ee:	49c2      	ldr	r1, [pc, #776]	; (80177f8 <AT_QCCID+0x444>)
 80174f0:	fb01 f003 	mul.w	r0, r1, r3
 80174f4:	49c1      	ldr	r1, [pc, #772]	; (80177fc <AT_QCCID+0x448>)
 80174f6:	fb01 f102 	mul.w	r1, r1, r2
 80174fa:	4408      	add	r0, r1
 80174fc:	49be      	ldr	r1, [pc, #760]	; (80177f8 <AT_QCCID+0x444>)
 80174fe:	fba2 4501 	umull	r4, r5, r2, r1
 8017502:	1943      	adds	r3, r0, r5
 8017504:	461d      	mov	r5, r3
 8017506:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801750a:	3310      	adds	r3, #16
 801750c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017510:	49bb      	ldr	r1, [pc, #748]	; (8017800 <AT_QCCID+0x44c>)
 8017512:	fb01 f003 	mul.w	r0, r1, r3
 8017516:	49bb      	ldr	r1, [pc, #748]	; (8017804 <AT_QCCID+0x450>)
 8017518:	fb01 f102 	mul.w	r1, r1, r2
 801751c:	4408      	add	r0, r1
 801751e:	49b8      	ldr	r1, [pc, #736]	; (8017800 <AT_QCCID+0x44c>)
 8017520:	fba2 2301 	umull	r2, r3, r2, r1
 8017524:	18c1      	adds	r1, r0, r3
 8017526:	460b      	mov	r3, r1
 8017528:	eb14 0802 	adds.w	r8, r4, r2
 801752c:	eb45 0903 	adc.w	r9, r5, r3
 8017530:	eb1a 0308 	adds.w	r3, sl, r8
 8017534:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8017538:	eb4b 0309 	adc.w	r3, fp, r9
 801753c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8017540:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8017544:	3328      	adds	r3, #40	; 0x28
 8017546:	e9d3 2300 	ldrd	r2, r3, [r3]
 801754a:	49af      	ldr	r1, [pc, #700]	; (8017808 <AT_QCCID+0x454>)
 801754c:	fb01 f003 	mul.w	r0, r1, r3
 8017550:	f640 1118 	movw	r1, #2328	; 0x918
 8017554:	fb01 f102 	mul.w	r1, r1, r2
 8017558:	4408      	add	r0, r1
 801755a:	49ab      	ldr	r1, [pc, #684]	; (8017808 <AT_QCCID+0x454>)
 801755c:	fba2 4501 	umull	r4, r5, r2, r1
 8017560:	1943      	adds	r3, r0, r5
 8017562:	461d      	mov	r5, r3
 8017564:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8017568:	3320      	adds	r3, #32
 801756a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801756e:	49a7      	ldr	r1, [pc, #668]	; (801780c <AT_QCCID+0x458>)
 8017570:	fb01 f003 	mul.w	r0, r1, r3
 8017574:	f645 21f3 	movw	r1, #23283	; 0x5af3
 8017578:	fb01 f102 	mul.w	r1, r1, r2
 801757c:	4408      	add	r0, r1
 801757e:	49a3      	ldr	r1, [pc, #652]	; (801780c <AT_QCCID+0x458>)
 8017580:	fba2 2301 	umull	r2, r3, r2, r1
 8017584:	18c1      	adds	r1, r0, r3
 8017586:	460b      	mov	r3, r1
 8017588:	18a1      	adds	r1, r4, r2
 801758a:	f8c7 1090 	str.w	r1, [r7, #144]	; 0x90
 801758e:	eb45 0303 	adc.w	r3, r5, r3
 8017592:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8017596:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 801759a:	4623      	mov	r3, r4
 801759c:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 80175a0:	4602      	mov	r2, r0
 80175a2:	189b      	adds	r3, r3, r2
 80175a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80175a8:	460b      	mov	r3, r1
 80175aa:	462a      	mov	r2, r5
 80175ac:	eb42 0303 	adc.w	r3, r2, r3
 80175b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80175b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80175b8:	3338      	adds	r3, #56	; 0x38
 80175ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175be:	4994      	ldr	r1, [pc, #592]	; (8017810 <AT_QCCID+0x45c>)
 80175c0:	fb01 f003 	mul.w	r0, r1, r3
 80175c4:	2117      	movs	r1, #23
 80175c6:	fb01 f102 	mul.w	r1, r1, r2
 80175ca:	4408      	add	r0, r1
 80175cc:	4990      	ldr	r1, [pc, #576]	; (8017810 <AT_QCCID+0x45c>)
 80175ce:	fba2 4501 	umull	r4, r5, r2, r1
 80175d2:	1943      	adds	r3, r0, r5
 80175d4:	461d      	mov	r5, r3
 80175d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80175da:	3330      	adds	r3, #48	; 0x30
 80175dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175e0:	498c      	ldr	r1, [pc, #560]	; (8017814 <AT_QCCID+0x460>)
 80175e2:	fb01 f003 	mul.w	r0, r1, r3
 80175e6:	21e8      	movs	r1, #232	; 0xe8
 80175e8:	fb01 f102 	mul.w	r1, r1, r2
 80175ec:	4408      	add	r0, r1
 80175ee:	4989      	ldr	r1, [pc, #548]	; (8017814 <AT_QCCID+0x460>)
 80175f0:	fba2 2301 	umull	r2, r3, r2, r1
 80175f4:	18c1      	adds	r1, r0, r3
 80175f6:	460b      	mov	r3, r1
 80175f8:	18a1      	adds	r1, r4, r2
 80175fa:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80175fe:	eb45 0303 	adc.w	r3, r5, r3
 8017602:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8017606:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
 801760a:	4623      	mov	r3, r4
 801760c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8017610:	4602      	mov	r2, r0
 8017612:	189b      	adds	r3, r3, r2
 8017614:	67bb      	str	r3, [r7, #120]	; 0x78
 8017616:	460b      	mov	r3, r1
 8017618:	462a      	mov	r2, r5
 801761a:	eb42 0303 	adc.w	r3, r2, r3
 801761e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8017620:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8017624:	3348      	adds	r3, #72	; 0x48
 8017626:	e9d3 2300 	ldrd	r2, r3, [r3]
 801762a:	497b      	ldr	r1, [pc, #492]	; (8017818 <AT_QCCID+0x464>)
 801762c:	fb01 f003 	mul.w	r0, r1, r3
 8017630:	2100      	movs	r1, #0
 8017632:	fb01 f102 	mul.w	r1, r1, r2
 8017636:	4408      	add	r0, r1
 8017638:	4977      	ldr	r1, [pc, #476]	; (8017818 <AT_QCCID+0x464>)
 801763a:	fba2 4501 	umull	r4, r5, r2, r1
 801763e:	1943      	adds	r3, r0, r5
 8017640:	461d      	mov	r5, r3
 8017642:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8017646:	3340      	adds	r3, #64	; 0x40
 8017648:	e9d3 2300 	ldrd	r2, r3, [r3]
 801764c:	4973      	ldr	r1, [pc, #460]	; (801781c <AT_QCCID+0x468>)
 801764e:	fb01 f003 	mul.w	r0, r1, r3
 8017652:	2102      	movs	r1, #2
 8017654:	fb01 f102 	mul.w	r1, r1, r2
 8017658:	4408      	add	r0, r1
 801765a:	4970      	ldr	r1, [pc, #448]	; (801781c <AT_QCCID+0x468>)
 801765c:	fba2 2301 	umull	r2, r3, r2, r1
 8017660:	18c1      	adds	r1, r0, r3
 8017662:	460b      	mov	r3, r1
 8017664:	18a1      	adds	r1, r4, r2
 8017666:	6739      	str	r1, [r7, #112]	; 0x70
 8017668:	eb45 0303 	adc.w	r3, r5, r3
 801766c:	677b      	str	r3, [r7, #116]	; 0x74
 801766e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8017672:	4623      	mov	r3, r4
 8017674:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8017678:	4602      	mov	r2, r0
 801767a:	189b      	adds	r3, r3, r2
 801767c:	66bb      	str	r3, [r7, #104]	; 0x68
 801767e:	460b      	mov	r3, r1
 8017680:	462a      	mov	r2, r5
 8017682:	eb42 0303 	adc.w	r3, r2, r3
 8017686:	66fb      	str	r3, [r7, #108]	; 0x6c
 8017688:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801768c:	3358      	adds	r3, #88	; 0x58
 801768e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017692:	4963      	ldr	r1, [pc, #396]	; (8017820 <AT_QCCID+0x46c>)
 8017694:	fb01 f003 	mul.w	r0, r1, r3
 8017698:	2100      	movs	r1, #0
 801769a:	fb01 f102 	mul.w	r1, r1, r2
 801769e:	4408      	add	r0, r1
 80176a0:	495f      	ldr	r1, [pc, #380]	; (8017820 <AT_QCCID+0x46c>)
 80176a2:	fba2 4501 	umull	r4, r5, r2, r1
 80176a6:	1943      	adds	r3, r0, r5
 80176a8:	461d      	mov	r5, r3
 80176aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80176ae:	3350      	adds	r3, #80	; 0x50
 80176b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80176b4:	495b      	ldr	r1, [pc, #364]	; (8017824 <AT_QCCID+0x470>)
 80176b6:	fb01 f003 	mul.w	r0, r1, r3
 80176ba:	2100      	movs	r1, #0
 80176bc:	fb01 f102 	mul.w	r1, r1, r2
 80176c0:	4408      	add	r0, r1
 80176c2:	4958      	ldr	r1, [pc, #352]	; (8017824 <AT_QCCID+0x470>)
 80176c4:	fba2 2301 	umull	r2, r3, r2, r1
 80176c8:	18c1      	adds	r1, r0, r3
 80176ca:	460b      	mov	r3, r1
 80176cc:	18a1      	adds	r1, r4, r2
 80176ce:	6639      	str	r1, [r7, #96]	; 0x60
 80176d0:	eb45 0303 	adc.w	r3, r5, r3
 80176d4:	667b      	str	r3, [r7, #100]	; 0x64
 80176d6:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 80176da:	4623      	mov	r3, r4
 80176dc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80176e0:	4602      	mov	r2, r0
 80176e2:	189b      	adds	r3, r3, r2
 80176e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80176e6:	460b      	mov	r3, r1
 80176e8:	462a      	mov	r2, r5
 80176ea:	eb42 0303 	adc.w	r3, r2, r3
 80176ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80176f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80176f4:	3368      	adds	r3, #104	; 0x68
 80176f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80176fa:	494b      	ldr	r1, [pc, #300]	; (8017828 <AT_QCCID+0x474>)
 80176fc:	fb01 f003 	mul.w	r0, r1, r3
 8017700:	2100      	movs	r1, #0
 8017702:	fb01 f102 	mul.w	r1, r1, r2
 8017706:	4408      	add	r0, r1
 8017708:	4947      	ldr	r1, [pc, #284]	; (8017828 <AT_QCCID+0x474>)
 801770a:	fba2 8901 	umull	r8, r9, r2, r1
 801770e:	eb00 0309 	add.w	r3, r0, r9
 8017712:	4699      	mov	r9, r3
 8017714:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8017718:	3360      	adds	r3, #96	; 0x60
 801771a:	e9d3 4500 	ldrd	r4, r5, [r3]
 801771e:	4622      	mov	r2, r4
 8017720:	462b      	mov	r3, r5
 8017722:	f04f 0000 	mov.w	r0, #0
 8017726:	f04f 0100 	mov.w	r1, #0
 801772a:	0159      	lsls	r1, r3, #5
 801772c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8017730:	0150      	lsls	r0, r2, #5
 8017732:	4602      	mov	r2, r0
 8017734:	460b      	mov	r3, r1
 8017736:	1b12      	subs	r2, r2, r4
 8017738:	eb63 0305 	sbc.w	r3, r3, r5
 801773c:	f04f 0000 	mov.w	r0, #0
 8017740:	f04f 0100 	mov.w	r1, #0
 8017744:	0259      	lsls	r1, r3, #9
 8017746:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 801774a:	0250      	lsls	r0, r2, #9
 801774c:	4602      	mov	r2, r0
 801774e:	460b      	mov	r3, r1
 8017750:	1912      	adds	r2, r2, r4
 8017752:	eb45 0303 	adc.w	r3, r5, r3
 8017756:	f04f 0000 	mov.w	r0, #0
 801775a:	f04f 0100 	mov.w	r1, #0
 801775e:	0199      	lsls	r1, r3, #6
 8017760:	ea41 6192 	orr.w	r1, r1, r2, lsr #26
 8017764:	0190      	lsls	r0, r2, #6
 8017766:	1a80      	subs	r0, r0, r2
 8017768:	eb61 0103 	sbc.w	r1, r1, r3
 801776c:	1903      	adds	r3, r0, r4
 801776e:	653b      	str	r3, [r7, #80]	; 0x50
 8017770:	eb41 0305 	adc.w	r3, r1, r5
 8017774:	657b      	str	r3, [r7, #84]	; 0x54
 8017776:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 801777a:	460b      	mov	r3, r1
 801777c:	eb18 0303 	adds.w	r3, r8, r3
 8017780:	64bb      	str	r3, [r7, #72]	; 0x48
 8017782:	4613      	mov	r3, r2
 8017784:	eb49 0303 	adc.w	r3, r9, r3
 8017788:	64fb      	str	r3, [r7, #76]	; 0x4c
 801778a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 801778e:	4623      	mov	r3, r4
 8017790:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8017794:	4602      	mov	r2, r0
 8017796:	189b      	adds	r3, r3, r2
 8017798:	643b      	str	r3, [r7, #64]	; 0x40
 801779a:	460b      	mov	r3, r1
 801779c:	462a      	mov	r2, r5
 801779e:	eb42 0303 	adc.w	r3, r2, r3
 80177a2:	647b      	str	r3, [r7, #68]	; 0x44
 80177a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80177a8:	3378      	adds	r3, #120	; 0x78
 80177aa:	e9d3 4500 	ldrd	r4, r5, [r3]
 80177ae:	4622      	mov	r2, r4
 80177b0:	462b      	mov	r3, r5
 80177b2:	f04f 0000 	mov.w	r0, #0
 80177b6:	f04f 0100 	mov.w	r1, #0
 80177ba:	0159      	lsls	r1, r3, #5
 80177bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80177c0:	0150      	lsls	r0, r2, #5
 80177c2:	4602      	mov	r2, r0
 80177c4:	460b      	mov	r3, r1
 80177c6:	1b12      	subs	r2, r2, r4
 80177c8:	eb63 0305 	sbc.w	r3, r3, r5
 80177cc:	f04f 0000 	mov.w	r0, #0
 80177d0:	f04f 0100 	mov.w	r1, #0
 80177d4:	0099      	lsls	r1, r3, #2
 80177d6:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80177da:	0090      	lsls	r0, r2, #2
 80177dc:	4602      	mov	r2, r0
 80177de:	460b      	mov	r3, r1
 80177e0:	1912      	adds	r2, r2, r4
 80177e2:	e023      	b.n	801782c <AT_QCCID+0x478>
 80177e4:	20009c00 	.word	0x20009c00
 80177e8:	a7640000 	.word	0xa7640000
 80177ec:	0de0b6b3 	.word	0x0de0b6b3
 80177f0:	5d8a0000 	.word	0x5d8a0000
 80177f4:	01634578 	.word	0x01634578
 80177f8:	a4c68000 	.word	0xa4c68000
 80177fc:	00038d7e 	.word	0x00038d7e
 8017800:	6fc10000 	.word	0x6fc10000
 8017804:	002386f2 	.word	0x002386f2
 8017808:	4e72a000 	.word	0x4e72a000
 801780c:	107a4000 	.word	0x107a4000
 8017810:	4876e800 	.word	0x4876e800
 8017814:	d4a51000 	.word	0xd4a51000
 8017818:	3b9aca00 	.word	0x3b9aca00
 801781c:	540be400 	.word	0x540be400
 8017820:	00989680 	.word	0x00989680
 8017824:	05f5e100 	.word	0x05f5e100
 8017828:	000186a0 	.word	0x000186a0
 801782c:	eb45 0303 	adc.w	r3, r5, r3
 8017830:	f04f 0000 	mov.w	r0, #0
 8017834:	f04f 0100 	mov.w	r1, #0
 8017838:	00d9      	lsls	r1, r3, #3
 801783a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801783e:	00d0      	lsls	r0, r2, #3
 8017840:	4602      	mov	r2, r0
 8017842:	460b      	mov	r3, r1
 8017844:	4690      	mov	r8, r2
 8017846:	4699      	mov	r9, r3
 8017848:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801784c:	3370      	adds	r3, #112	; 0x70
 801784e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8017852:	4622      	mov	r2, r4
 8017854:	462b      	mov	r3, r5
 8017856:	f04f 0000 	mov.w	r0, #0
 801785a:	f04f 0100 	mov.w	r1, #0
 801785e:	0099      	lsls	r1, r3, #2
 8017860:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8017864:	0090      	lsls	r0, r2, #2
 8017866:	4602      	mov	r2, r0
 8017868:	460b      	mov	r3, r1
 801786a:	1912      	adds	r2, r2, r4
 801786c:	eb45 0303 	adc.w	r3, r5, r3
 8017870:	f04f 0000 	mov.w	r0, #0
 8017874:	f04f 0100 	mov.w	r1, #0
 8017878:	00d9      	lsls	r1, r3, #3
 801787a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 801787e:	00d0      	lsls	r0, r2, #3
 8017880:	4602      	mov	r2, r0
 8017882:	460b      	mov	r3, r1
 8017884:	1b12      	subs	r2, r2, r4
 8017886:	eb63 0305 	sbc.w	r3, r3, r5
 801788a:	f04f 0000 	mov.w	r0, #0
 801788e:	f04f 0100 	mov.w	r1, #0
 8017892:	0119      	lsls	r1, r3, #4
 8017894:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 8017898:	0110      	lsls	r0, r2, #4
 801789a:	4602      	mov	r2, r0
 801789c:	460b      	mov	r3, r1
 801789e:	1912      	adds	r2, r2, r4
 80178a0:	eb45 0303 	adc.w	r3, r5, r3
 80178a4:	f04f 0000 	mov.w	r0, #0
 80178a8:	f04f 0100 	mov.w	r1, #0
 80178ac:	0119      	lsls	r1, r3, #4
 80178ae:	ea41 7112 	orr.w	r1, r1, r2, lsr #28
 80178b2:	0110      	lsls	r0, r2, #4
 80178b4:	4602      	mov	r2, r0
 80178b6:	460b      	mov	r3, r1
 80178b8:	eb18 0102 	adds.w	r1, r8, r2
 80178bc:	63b9      	str	r1, [r7, #56]	; 0x38
 80178be:	eb49 0303 	adc.w	r3, r9, r3
 80178c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80178c4:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80178c8:	4623      	mov	r3, r4
 80178ca:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80178ce:	4602      	mov	r2, r0
 80178d0:	189b      	adds	r3, r3, r2
 80178d2:	633b      	str	r3, [r7, #48]	; 0x30
 80178d4:	460b      	mov	r3, r1
 80178d6:	462a      	mov	r2, r5
 80178d8:	eb42 0303 	adc.w	r3, r2, r3
 80178dc:	637b      	str	r3, [r7, #52]	; 0x34
 80178de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80178e2:	3388      	adds	r3, #136	; 0x88
 80178e4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80178e8:	4622      	mov	r2, r4
 80178ea:	462b      	mov	r3, r5
 80178ec:	f04f 0000 	mov.w	r0, #0
 80178f0:	f04f 0100 	mov.w	r1, #0
 80178f4:	0099      	lsls	r1, r3, #2
 80178f6:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80178fa:	0090      	lsls	r0, r2, #2
 80178fc:	4602      	mov	r2, r0
 80178fe:	460b      	mov	r3, r1
 8017900:	1912      	adds	r2, r2, r4
 8017902:	eb45 0303 	adc.w	r3, r5, r3
 8017906:	1891      	adds	r1, r2, r2
 8017908:	60b9      	str	r1, [r7, #8]
 801790a:	415b      	adcs	r3, r3
 801790c:	60fb      	str	r3, [r7, #12]
 801790e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8017912:	4690      	mov	r8, r2
 8017914:	4699      	mov	r9, r3
 8017916:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801791a:	3380      	adds	r3, #128	; 0x80
 801791c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8017920:	4622      	mov	r2, r4
 8017922:	462b      	mov	r3, r5
 8017924:	1891      	adds	r1, r2, r2
 8017926:	6039      	str	r1, [r7, #0]
 8017928:	415b      	adcs	r3, r3
 801792a:	607b      	str	r3, [r7, #4]
 801792c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017930:	1912      	adds	r2, r2, r4
 8017932:	eb45 0303 	adc.w	r3, r5, r3
 8017936:	f04f 0000 	mov.w	r0, #0
 801793a:	f04f 0100 	mov.w	r1, #0
 801793e:	0159      	lsls	r1, r3, #5
 8017940:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8017944:	0150      	lsls	r0, r2, #5
 8017946:	1812      	adds	r2, r2, r0
 8017948:	eb41 0303 	adc.w	r3, r1, r3
 801794c:	1911      	adds	r1, r2, r4
 801794e:	62b9      	str	r1, [r7, #40]	; 0x28
 8017950:	416b      	adcs	r3, r5
 8017952:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017954:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8017958:	460b      	mov	r3, r1
 801795a:	eb18 0303 	adds.w	r3, r8, r3
 801795e:	623b      	str	r3, [r7, #32]
 8017960:	4613      	mov	r3, r2
 8017962:	eb49 0303 	adc.w	r3, r9, r3
 8017966:	627b      	str	r3, [r7, #36]	; 0x24
 8017968:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 801796c:	4623      	mov	r3, r4
 801796e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8017972:	4602      	mov	r2, r0
 8017974:	189b      	adds	r3, r3, r2
 8017976:	61bb      	str	r3, [r7, #24]
 8017978:	460b      	mov	r3, r1
 801797a:	462a      	mov	r2, r5
 801797c:	eb42 0303 	adc.w	r3, r2, r3
 8017980:	61fb      	str	r3, [r7, #28]
 8017982:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8017986:	3390      	adds	r3, #144	; 0x90
 8017988:	e9d3 2300 	ldrd	r2, r3, [r3]
 801798c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8017990:	3198      	adds	r1, #152	; 0x98
 8017992:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8017996:	4620      	mov	r0, r4
 8017998:	1880      	adds	r0, r0, r2
 801799a:	6138      	str	r0, [r7, #16]
 801799c:	4628      	mov	r0, r5
 801799e:	eb43 0000 	adc.w	r0, r3, r0
 80179a2:	6178      	str	r0, [r7, #20]
 80179a4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80179a8:	e9c1 3400 	strd	r3, r4, [r1]
			//temp_id[19] = temp_id[0]*1000000000000000000 + temp_id[1]*100000000000000000 + temp_id[2]*10000000000000000 + temp_id[3]*1000000000000000 + temp_id[4]*100000000000000 + temp_id[5]*10000000000000 + temp_id[6]*1000000000000 + temp_id[7]*100000000000 + temp_id[8]*10000000000 + temp_id[9]*1000000000 + temp_id[10]*100000000 + temp_id[11]*10000000 + temp_id[12]*1000000 + temp_id[13]*100000 + temp_id[14]*10000 + temp_id[15]*1000 + temp_id[16]*100 + temp_id[17]*10 + temp_id[18];

			*id = (uint8_t)(*(temp_id+19)>>56);
 80179ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80179b0:	3398      	adds	r3, #152	; 0x98
 80179b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80179b6:	f04f 0200 	mov.w	r2, #0
 80179ba:	f04f 0300 	mov.w	r3, #0
 80179be:	0e0a      	lsrs	r2, r1, #24
 80179c0:	2300      	movs	r3, #0
 80179c2:	b2d2      	uxtb	r2, r2
 80179c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80179c8:	701a      	strb	r2, [r3, #0]
			*(id+1) = (uint8_t)(*(temp_id+19)>>48);
 80179ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80179ce:	3398      	adds	r3, #152	; 0x98
 80179d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80179d4:	f04f 0200 	mov.w	r2, #0
 80179d8:	f04f 0300 	mov.w	r3, #0
 80179dc:	0c0a      	lsrs	r2, r1, #16
 80179de:	2300      	movs	r3, #0
 80179e0:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80179e4:	3101      	adds	r1, #1
 80179e6:	b2d3      	uxtb	r3, r2
 80179e8:	700b      	strb	r3, [r1, #0]
			*(id+2) = (uint8_t)(*(temp_id+19)>>40);
 80179ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80179ee:	3398      	adds	r3, #152	; 0x98
 80179f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80179f4:	f04f 0200 	mov.w	r2, #0
 80179f8:	f04f 0300 	mov.w	r3, #0
 80179fc:	0a0a      	lsrs	r2, r1, #8
 80179fe:	2300      	movs	r3, #0
 8017a00:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8017a04:	3102      	adds	r1, #2
 8017a06:	b2d3      	uxtb	r3, r2
 8017a08:	700b      	strb	r3, [r1, #0]
			*(id+3) = (uint8_t)(*(temp_id+19)>>32);
 8017a0a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8017a0e:	3398      	adds	r3, #152	; 0x98
 8017a10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017a14:	f04f 0200 	mov.w	r2, #0
 8017a18:	f04f 0300 	mov.w	r3, #0
 8017a1c:	000a      	movs	r2, r1
 8017a1e:	2300      	movs	r3, #0
 8017a20:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8017a24:	3103      	adds	r1, #3
 8017a26:	b2d3      	uxtb	r3, r2
 8017a28:	700b      	strb	r3, [r1, #0]
			*(id+4) = (uint8_t)(*(temp_id+19)>>24);
 8017a2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8017a2e:	3398      	adds	r3, #152	; 0x98
 8017a30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017a34:	f04f 0200 	mov.w	r2, #0
 8017a38:	f04f 0300 	mov.w	r3, #0
 8017a3c:	0e02      	lsrs	r2, r0, #24
 8017a3e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8017a42:	0e0b      	lsrs	r3, r1, #24
 8017a44:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8017a48:	3104      	adds	r1, #4
 8017a4a:	b2d3      	uxtb	r3, r2
 8017a4c:	700b      	strb	r3, [r1, #0]
			*(id+5) = (uint8_t)(*(temp_id+19)>>16);
 8017a4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8017a52:	3398      	adds	r3, #152	; 0x98
 8017a54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017a58:	f04f 0200 	mov.w	r2, #0
 8017a5c:	f04f 0300 	mov.w	r3, #0
 8017a60:	0c02      	lsrs	r2, r0, #16
 8017a62:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8017a66:	0c0b      	lsrs	r3, r1, #16
 8017a68:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8017a6c:	3105      	adds	r1, #5
 8017a6e:	b2d3      	uxtb	r3, r2
 8017a70:	700b      	strb	r3, [r1, #0]
			*(id+6) = (uint8_t)(*(temp_id+19)>>8);
 8017a72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8017a76:	3398      	adds	r3, #152	; 0x98
 8017a78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017a7c:	f04f 0200 	mov.w	r2, #0
 8017a80:	f04f 0300 	mov.w	r3, #0
 8017a84:	0a02      	lsrs	r2, r0, #8
 8017a86:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8017a8a:	0a0b      	lsrs	r3, r1, #8
 8017a8c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8017a90:	3106      	adds	r1, #6
 8017a92:	b2d3      	uxtb	r3, r2
 8017a94:	700b      	strb	r3, [r1, #0]
			*(id+7) = (uint8_t)*(temp_id+19);
 8017a96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8017a9a:	3398      	adds	r3, #152	; 0x98
 8017a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017aa0:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8017aa4:	3107      	adds	r1, #7
 8017aa6:	b2d3      	uxtb	r3, r2
 8017aa8:	700b      	strb	r3, [r1, #0]

			return AT_OK;
 8017aaa:	2300      	movs	r3, #0
 8017aac:	e005      	b.n	8017aba <AT_QCCID+0x706>
	while(read_rx_state == ACTIVE)
 8017aae:	4b05      	ldr	r3, [pc, #20]	; (8017ac4 <AT_QCCID+0x710>)
 8017ab0:	781b      	ldrb	r3, [r3, #0]
 8017ab2:	2b01      	cmp	r3, #1
 8017ab4:	f43f acaf 	beq.w	8017416 <AT_QCCID+0x62>
		}

	}
	return AT_ERROR;
 8017ab8:	2301      	movs	r3, #1
}
 8017aba:	4618      	mov	r0, r3
 8017abc:	37b8      	adds	r7, #184	; 0xb8
 8017abe:	46bd      	mov	sp, r7
 8017ac0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8017ac4:	20009a50 	.word	0x20009a50

08017ac8 <AT_COPS>:

uint8_t AT_COPS (void)
{
 8017ac8:	b580      	push	{r7, lr}
 8017aca:	b084      	sub	sp, #16
 8017acc:	af00      	add	r7, sp, #0
	char str_out[9];
	sprintf(str_out, "AT+COPS?\n");
 8017ace:	1d3b      	adds	r3, r7, #4
 8017ad0:	4921      	ldr	r1, [pc, #132]	; (8017b58 <AT_COPS+0x90>)
 8017ad2:	4618      	mov	r0, r3
 8017ad4:	f002 fdca 	bl	801a66c <siprintf>

	read_rx_state = ACTIVE;
 8017ad8:	4b20      	ldr	r3, [pc, #128]	; (8017b5c <AT_COPS+0x94>)
 8017ada:	2201      	movs	r2, #1
 8017adc:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 8017ade:	4b20      	ldr	r3, [pc, #128]	; (8017b60 <AT_COPS+0x98>)
 8017ae0:	2200      	movs	r2, #0
 8017ae2:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 8017ae4:	f7ff fb22 	bl	801712c <modem_rx_buffer_clear>
	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 8017ae8:	2201      	movs	r2, #1
 8017aea:	491e      	ldr	r1, [pc, #120]	; (8017b64 <AT_COPS+0x9c>)
 8017aec:	481e      	ldr	r0, [pc, #120]	; (8017b68 <AT_COPS+0xa0>)
 8017aee:	f7ef fd53 	bl	8007598 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 9);
 8017af2:	1d3b      	adds	r3, r7, #4
 8017af4:	2209      	movs	r2, #9
 8017af6:	4619      	mov	r1, r3
 8017af8:	481b      	ldr	r0, [pc, #108]	; (8017b68 <AT_COPS+0xa0>)
 8017afa:	f7ef fccf 	bl	800749c <HAL_UART_Transmit_DMA>
	//HAL_UART_Transmit_DMA(&huart3, at_cops, 9);

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 8017afe:	4b1b      	ldr	r3, [pc, #108]	; (8017b6c <AT_COPS+0xa4>)
 8017b00:	681b      	ldr	r3, [r3, #0]
 8017b02:	f04f 31ff 	mov.w	r1, #4294967295
 8017b06:	4618      	mov	r0, r3
 8017b08:	f7f0 ffbe 	bl	8008a88 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 5000);
 8017b0c:	4b18      	ldr	r3, [pc, #96]	; (8017b70 <AT_COPS+0xa8>)
 8017b0e:	681b      	ldr	r3, [r3, #0]
 8017b10:	f241 3188 	movw	r1, #5000	; 0x1388
 8017b14:	4618      	mov	r0, r3
 8017b16:	f7f0 fe69 	bl	80087ec <osTimerStart>
	while(read_rx_state == ACTIVE)
 8017b1a:	e014      	b.n	8017b46 <AT_COPS+0x7e>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "MTS") != NULL )
 8017b1c:	4915      	ldr	r1, [pc, #84]	; (8017b74 <AT_COPS+0xac>)
 8017b1e:	4816      	ldr	r0, [pc, #88]	; (8017b78 <AT_COPS+0xb0>)
 8017b20:	f002 fdc4 	bl	801a6ac <strstr>
		{
			// Здесь должно быть то, что необходимо сделать, если пришло значение "МТС"
		}

		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 8017b24:	4915      	ldr	r1, [pc, #84]	; (8017b7c <AT_COPS+0xb4>)
 8017b26:	4814      	ldr	r0, [pc, #80]	; (8017b78 <AT_COPS+0xb0>)
 8017b28:	f002 fdc0 	bl	801a6ac <strstr>
 8017b2c:	4603      	mov	r3, r0
 8017b2e:	2b00      	cmp	r3, #0
 8017b30:	d009      	beq.n	8017b46 <AT_COPS+0x7e>
		{
			osTimerStop(AT_TimerHandle);
 8017b32:	4b0f      	ldr	r3, [pc, #60]	; (8017b70 <AT_COPS+0xa8>)
 8017b34:	681b      	ldr	r3, [r3, #0]
 8017b36:	4618      	mov	r0, r3
 8017b38:	f7f0 fe9c 	bl	8008874 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 8017b3c:	4b07      	ldr	r3, [pc, #28]	; (8017b5c <AT_COPS+0x94>)
 8017b3e:	2200      	movs	r2, #0
 8017b40:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 8017b42:	2300      	movs	r3, #0
 8017b44:	e004      	b.n	8017b50 <AT_COPS+0x88>
	while(read_rx_state == ACTIVE)
 8017b46:	4b05      	ldr	r3, [pc, #20]	; (8017b5c <AT_COPS+0x94>)
 8017b48:	781b      	ldrb	r3, [r3, #0]
 8017b4a:	2b01      	cmp	r3, #1
 8017b4c:	d0e6      	beq.n	8017b1c <AT_COPS+0x54>
		}


	}
	return AT_ERROR;
 8017b4e:	2301      	movs	r3, #1
}
 8017b50:	4618      	mov	r0, r3
 8017b52:	3710      	adds	r7, #16
 8017b54:	46bd      	mov	sp, r7
 8017b56:	bd80      	pop	{r7, pc}
 8017b58:	0801bf7c 	.word	0x0801bf7c
 8017b5c:	20009a50 	.word	0x20009a50
 8017b60:	20000864 	.word	0x20000864
 8017b64:	20009afc 	.word	0x20009afc
 8017b68:	2000823c 	.word	0x2000823c
 8017b6c:	20009d9c 	.word	0x20009d9c
 8017b70:	200096f0 	.word	0x200096f0
 8017b74:	0801bf88 	.word	0x0801bf88
 8017b78:	20009c00 	.word	0x20009c00
 8017b7c:	0801bf50 	.word	0x0801bf50

08017b80 <AT_QIOPEN>:

uint8_t AT_QIOPEN (char* type , uint8_t ip1, uint8_t ip2, uint8_t ip3, uint8_t ip4, uint16_t port)
{
 8017b80:	b580      	push	{r7, lr}
 8017b82:	b098      	sub	sp, #96	; 0x60
 8017b84:	af04      	add	r7, sp, #16
 8017b86:	6078      	str	r0, [r7, #4]
 8017b88:	4608      	mov	r0, r1
 8017b8a:	4611      	mov	r1, r2
 8017b8c:	461a      	mov	r2, r3
 8017b8e:	4603      	mov	r3, r0
 8017b90:	70fb      	strb	r3, [r7, #3]
 8017b92:	460b      	mov	r3, r1
 8017b94:	70bb      	strb	r3, [r7, #2]
 8017b96:	4613      	mov	r3, r2
 8017b98:	707b      	strb	r3, [r7, #1]
	char str5[3];
	char str6[5];
	char str7[40];
	uint8_t n;

	sprintf(str1, "%s", type);
 8017b9a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8017b9e:	687a      	ldr	r2, [r7, #4]
 8017ba0:	4951      	ldr	r1, [pc, #324]	; (8017ce8 <AT_QIOPEN+0x168>)
 8017ba2:	4618      	mov	r0, r3
 8017ba4:	f002 fd62 	bl	801a66c <siprintf>
	sprintf(str2, "%u", ip1);
 8017ba8:	78fa      	ldrb	r2, [r7, #3]
 8017baa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8017bae:	494f      	ldr	r1, [pc, #316]	; (8017cec <AT_QIOPEN+0x16c>)
 8017bb0:	4618      	mov	r0, r3
 8017bb2:	f002 fd5b 	bl	801a66c <siprintf>
	sprintf(str3, "%u", ip2);
 8017bb6:	78ba      	ldrb	r2, [r7, #2]
 8017bb8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8017bbc:	494b      	ldr	r1, [pc, #300]	; (8017cec <AT_QIOPEN+0x16c>)
 8017bbe:	4618      	mov	r0, r3
 8017bc0:	f002 fd54 	bl	801a66c <siprintf>
	sprintf(str4, "%u", ip3);
 8017bc4:	787a      	ldrb	r2, [r7, #1]
 8017bc6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017bca:	4948      	ldr	r1, [pc, #288]	; (8017cec <AT_QIOPEN+0x16c>)
 8017bcc:	4618      	mov	r0, r3
 8017bce:	f002 fd4d 	bl	801a66c <siprintf>
	sprintf(str5, "%u", ip4);
 8017bd2:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 8017bd6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8017bda:	4944      	ldr	r1, [pc, #272]	; (8017cec <AT_QIOPEN+0x16c>)
 8017bdc:	4618      	mov	r0, r3
 8017bde:	f002 fd45 	bl	801a66c <siprintf>
	sprintf(str6, "%u", port);
 8017be2:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8017be6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8017bea:	4940      	ldr	r1, [pc, #256]	; (8017cec <AT_QIOPEN+0x16c>)
 8017bec:	4618      	mov	r0, r3
 8017bee:	f002 fd3d 	bl	801a66c <siprintf>

	n = sprintf(str7, "AT+QIOPEN=\"%s\",\"%s.%s.%s.%s\",%s\n", str1, str2, str3, str4, str5, str6);
 8017bf2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8017bf6:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8017bfa:	f107 000c 	add.w	r0, r7, #12
 8017bfe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8017c02:	9303      	str	r3, [sp, #12]
 8017c04:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8017c08:	9302      	str	r3, [sp, #8]
 8017c0a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8017c0e:	9301      	str	r3, [sp, #4]
 8017c10:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8017c14:	9300      	str	r3, [sp, #0]
 8017c16:	460b      	mov	r3, r1
 8017c18:	4935      	ldr	r1, [pc, #212]	; (8017cf0 <AT_QIOPEN+0x170>)
 8017c1a:	f002 fd27 	bl	801a66c <siprintf>
 8017c1e:	4603      	mov	r3, r0
 8017c20:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

 	read_rx_state = ACTIVE;
 8017c24:	4b33      	ldr	r3, [pc, #204]	; (8017cf4 <AT_QIOPEN+0x174>)
 8017c26:	2201      	movs	r2, #1
 8017c28:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 8017c2a:	4b33      	ldr	r3, [pc, #204]	; (8017cf8 <AT_QIOPEN+0x178>)
 8017c2c:	2200      	movs	r2, #0
 8017c2e:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 8017c30:	f7ff fa7c 	bl	801712c <modem_rx_buffer_clear>

	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 8017c34:	2201      	movs	r2, #1
 8017c36:	4931      	ldr	r1, [pc, #196]	; (8017cfc <AT_QIOPEN+0x17c>)
 8017c38:	4831      	ldr	r0, [pc, #196]	; (8017d00 <AT_QIOPEN+0x180>)
 8017c3a:	f7ef fcad 	bl	8007598 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str7, n);
 8017c3e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8017c42:	b29a      	uxth	r2, r3
 8017c44:	f107 030c 	add.w	r3, r7, #12
 8017c48:	4619      	mov	r1, r3
 8017c4a:	482d      	ldr	r0, [pc, #180]	; (8017d00 <AT_QIOPEN+0x180>)
 8017c4c:	f7ef fc26 	bl	800749c <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 8017c50:	4b2c      	ldr	r3, [pc, #176]	; (8017d04 <AT_QIOPEN+0x184>)
 8017c52:	681b      	ldr	r3, [r3, #0]
 8017c54:	f04f 31ff 	mov.w	r1, #4294967295
 8017c58:	4618      	mov	r0, r3
 8017c5a:	f7f0 ff15 	bl	8008a88 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 3000);
 8017c5e:	4b2a      	ldr	r3, [pc, #168]	; (8017d08 <AT_QIOPEN+0x188>)
 8017c60:	681b      	ldr	r3, [r3, #0]
 8017c62:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8017c66:	4618      	mov	r0, r3
 8017c68:	f7f0 fdc0 	bl	80087ec <osTimerStart>
	while(read_rx_state == ACTIVE)
 8017c6c:	e032      	b.n	8017cd4 <AT_QIOPEN+0x154>
	{
		//osThreadSuspend(M95TaskHandle);
		if( (strstr(modem_rx_buffer, "CONNECT OK\r\n") != NULL) )
 8017c6e:	4927      	ldr	r1, [pc, #156]	; (8017d0c <AT_QIOPEN+0x18c>)
 8017c70:	4827      	ldr	r0, [pc, #156]	; (8017d10 <AT_QIOPEN+0x190>)
 8017c72:	f002 fd1b 	bl	801a6ac <strstr>
 8017c76:	4603      	mov	r3, r0
 8017c78:	2b00      	cmp	r3, #0
 8017c7a:	d009      	beq.n	8017c90 <AT_QIOPEN+0x110>
		{
			osTimerStop(AT_TimerHandle);
 8017c7c:	4b22      	ldr	r3, [pc, #136]	; (8017d08 <AT_QIOPEN+0x188>)
 8017c7e:	681b      	ldr	r3, [r3, #0]
 8017c80:	4618      	mov	r0, r3
 8017c82:	f7f0 fdf7 	bl	8008874 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 8017c86:	4b1b      	ldr	r3, [pc, #108]	; (8017cf4 <AT_QIOPEN+0x174>)
 8017c88:	2200      	movs	r2, #0
 8017c8a:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 8017c8c:	2300      	movs	r3, #0
 8017c8e:	e026      	b.n	8017cde <AT_QIOPEN+0x15e>
		}
		else if( (strstr(modem_rx_buffer, "ALREADY CONNECT\r\n") != NULL) )
 8017c90:	4920      	ldr	r1, [pc, #128]	; (8017d14 <AT_QIOPEN+0x194>)
 8017c92:	481f      	ldr	r0, [pc, #124]	; (8017d10 <AT_QIOPEN+0x190>)
 8017c94:	f002 fd0a 	bl	801a6ac <strstr>
 8017c98:	4603      	mov	r3, r0
 8017c9a:	2b00      	cmp	r3, #0
 8017c9c:	d009      	beq.n	8017cb2 <AT_QIOPEN+0x132>
		{
			osTimerStop(AT_TimerHandle);
 8017c9e:	4b1a      	ldr	r3, [pc, #104]	; (8017d08 <AT_QIOPEN+0x188>)
 8017ca0:	681b      	ldr	r3, [r3, #0]
 8017ca2:	4618      	mov	r0, r3
 8017ca4:	f7f0 fde6 	bl	8008874 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 8017ca8:	4b12      	ldr	r3, [pc, #72]	; (8017cf4 <AT_QIOPEN+0x174>)
 8017caa:	2200      	movs	r2, #0
 8017cac:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 8017cae:	2300      	movs	r3, #0
 8017cb0:	e015      	b.n	8017cde <AT_QIOPEN+0x15e>
		}
		else if( (strstr(modem_rx_buffer, "CONNECT FAIL\r\n") != NULL) )
 8017cb2:	4919      	ldr	r1, [pc, #100]	; (8017d18 <AT_QIOPEN+0x198>)
 8017cb4:	4816      	ldr	r0, [pc, #88]	; (8017d10 <AT_QIOPEN+0x190>)
 8017cb6:	f002 fcf9 	bl	801a6ac <strstr>
 8017cba:	4603      	mov	r3, r0
 8017cbc:	2b00      	cmp	r3, #0
 8017cbe:	d009      	beq.n	8017cd4 <AT_QIOPEN+0x154>
		{
			osTimerStop(AT_TimerHandle);
 8017cc0:	4b11      	ldr	r3, [pc, #68]	; (8017d08 <AT_QIOPEN+0x188>)
 8017cc2:	681b      	ldr	r3, [r3, #0]
 8017cc4:	4618      	mov	r0, r3
 8017cc6:	f7f0 fdd5 	bl	8008874 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 8017cca:	4b0a      	ldr	r3, [pc, #40]	; (8017cf4 <AT_QIOPEN+0x174>)
 8017ccc:	2200      	movs	r2, #0
 8017cce:	701a      	strb	r2, [r3, #0]
			return AT_ERROR;
 8017cd0:	2301      	movs	r3, #1
 8017cd2:	e004      	b.n	8017cde <AT_QIOPEN+0x15e>
	while(read_rx_state == ACTIVE)
 8017cd4:	4b07      	ldr	r3, [pc, #28]	; (8017cf4 <AT_QIOPEN+0x174>)
 8017cd6:	781b      	ldrb	r3, [r3, #0]
 8017cd8:	2b01      	cmp	r3, #1
 8017cda:	d0c8      	beq.n	8017c6e <AT_QIOPEN+0xee>
		}

	}
	return AT_ERROR;
 8017cdc:	2301      	movs	r3, #1

}
 8017cde:	4618      	mov	r0, r3
 8017ce0:	3750      	adds	r7, #80	; 0x50
 8017ce2:	46bd      	mov	sp, r7
 8017ce4:	bd80      	pop	{r7, pc}
 8017ce6:	bf00      	nop
 8017ce8:	0801bf8c 	.word	0x0801bf8c
 8017cec:	0801bf90 	.word	0x0801bf90
 8017cf0:	0801bf94 	.word	0x0801bf94
 8017cf4:	20009a50 	.word	0x20009a50
 8017cf8:	20000864 	.word	0x20000864
 8017cfc:	20009afc 	.word	0x20009afc
 8017d00:	2000823c 	.word	0x2000823c
 8017d04:	20009d9c 	.word	0x20009d9c
 8017d08:	200096f0 	.word	0x200096f0
 8017d0c:	0801bfb8 	.word	0x0801bfb8
 8017d10:	20009c00 	.word	0x20009c00
 8017d14:	0801bfc8 	.word	0x0801bfc8
 8017d18:	0801bfdc 	.word	0x0801bfdc

08017d1c <AT_QISEND>:
	}
	return AT_ERROR;
}

uint8_t AT_QISEND (uint8_t* buf, uint16_t length) // maximum length = 1460
{
 8017d1c:	b580      	push	{r7, lr}
 8017d1e:	b086      	sub	sp, #24
 8017d20:	af00      	add	r7, sp, #0
 8017d22:	6078      	str	r0, [r7, #4]
 8017d24:	460b      	mov	r3, r1
 8017d26:	807b      	strh	r3, [r7, #2]
	uint8_t n1;
	char str_out[15];

	n1 = sprintf(str_out, "AT+QISEND=%u\n", length);
 8017d28:	887a      	ldrh	r2, [r7, #2]
 8017d2a:	f107 0308 	add.w	r3, r7, #8
 8017d2e:	493b      	ldr	r1, [pc, #236]	; (8017e1c <AT_QISEND+0x100>)
 8017d30:	4618      	mov	r0, r3
 8017d32:	f002 fc9b 	bl	801a66c <siprintf>
 8017d36:	4603      	mov	r3, r0
 8017d38:	75fb      	strb	r3, [r7, #23]

 	read_rx_state = ACTIVE;
 8017d3a:	4b39      	ldr	r3, [pc, #228]	; (8017e20 <AT_QISEND+0x104>)
 8017d3c:	2201      	movs	r2, #1
 8017d3e:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 8017d40:	4b38      	ldr	r3, [pc, #224]	; (8017e24 <AT_QISEND+0x108>)
 8017d42:	2200      	movs	r2, #0
 8017d44:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 8017d46:	f7ff f9f1 	bl	801712c <modem_rx_buffer_clear>

	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 8017d4a:	2201      	movs	r2, #1
 8017d4c:	4936      	ldr	r1, [pc, #216]	; (8017e28 <AT_QISEND+0x10c>)
 8017d4e:	4837      	ldr	r0, [pc, #220]	; (8017e2c <AT_QISEND+0x110>)
 8017d50:	f7ef fc22 	bl	8007598 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, n1);
 8017d54:	7dfb      	ldrb	r3, [r7, #23]
 8017d56:	b29a      	uxth	r2, r3
 8017d58:	f107 0308 	add.w	r3, r7, #8
 8017d5c:	4619      	mov	r1, r3
 8017d5e:	4833      	ldr	r0, [pc, #204]	; (8017e2c <AT_QISEND+0x110>)
 8017d60:	f7ef fb9c 	bl	800749c <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 8017d64:	4b32      	ldr	r3, [pc, #200]	; (8017e30 <AT_QISEND+0x114>)
 8017d66:	681b      	ldr	r3, [r3, #0]
 8017d68:	f04f 31ff 	mov.w	r1, #4294967295
 8017d6c:	4618      	mov	r0, r3
 8017d6e:	f7f0 fe8b 	bl	8008a88 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 300);
 8017d72:	4b30      	ldr	r3, [pc, #192]	; (8017e34 <AT_QISEND+0x118>)
 8017d74:	681b      	ldr	r3, [r3, #0]
 8017d76:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8017d7a:	4618      	mov	r0, r3
 8017d7c:	f7f0 fd36 	bl	80087ec <osTimerStart>
	while(read_rx_state == ACTIVE)
 8017d80:	e043      	b.n	8017e0a <AT_QISEND+0xee>
	{
		//osThreadSuspend(osThreadGetId());
		//osSemaphoreWait(ReceiveStateHandle, osWaitForever);
		if( strstr(modem_rx_buffer, "> ") != NULL )
 8017d82:	492d      	ldr	r1, [pc, #180]	; (8017e38 <AT_QISEND+0x11c>)
 8017d84:	482d      	ldr	r0, [pc, #180]	; (8017e3c <AT_QISEND+0x120>)
 8017d86:	f002 fc91 	bl	801a6ac <strstr>
 8017d8a:	4603      	mov	r3, r0
 8017d8c:	2b00      	cmp	r3, #0
 8017d8e:	d03c      	beq.n	8017e0a <AT_QISEND+0xee>
		{
			osTimerStop(AT_TimerHandle);
 8017d90:	4b28      	ldr	r3, [pc, #160]	; (8017e34 <AT_QISEND+0x118>)
 8017d92:	681b      	ldr	r3, [r3, #0]
 8017d94:	4618      	mov	r0, r3
 8017d96:	f7f0 fd6d 	bl	8008874 <osTimerStop>
			modem_rx_number = 0;
 8017d9a:	4b22      	ldr	r3, [pc, #136]	; (8017e24 <AT_QISEND+0x108>)
 8017d9c:	2200      	movs	r2, #0
 8017d9e:	701a      	strb	r2, [r3, #0]
			modem_rx_buffer_clear();
 8017da0:	f7ff f9c4 	bl	801712c <modem_rx_buffer_clear>

			HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 8017da4:	2201      	movs	r2, #1
 8017da6:	4920      	ldr	r1, [pc, #128]	; (8017e28 <AT_QISEND+0x10c>)
 8017da8:	4820      	ldr	r0, [pc, #128]	; (8017e2c <AT_QISEND+0x110>)
 8017daa:	f7ef fbf5 	bl	8007598 <HAL_UART_Receive_DMA>
			HAL_UART_Transmit_DMA(&huart3, buf, length);
 8017dae:	887b      	ldrh	r3, [r7, #2]
 8017db0:	461a      	mov	r2, r3
 8017db2:	6879      	ldr	r1, [r7, #4]
 8017db4:	481d      	ldr	r0, [pc, #116]	; (8017e2c <AT_QISEND+0x110>)
 8017db6:	f7ef fb71 	bl	800749c <HAL_UART_Transmit_DMA>

			osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 8017dba:	4b1d      	ldr	r3, [pc, #116]	; (8017e30 <AT_QISEND+0x114>)
 8017dbc:	681b      	ldr	r3, [r3, #0]
 8017dbe:	f04f 31ff 	mov.w	r1, #4294967295
 8017dc2:	4618      	mov	r0, r3
 8017dc4:	f7f0 fe60 	bl	8008a88 <osSemaphoreWait>

			osTimerStart(AT_TimerHandle, 3000); // маленькое время!!!!!
 8017dc8:	4b1a      	ldr	r3, [pc, #104]	; (8017e34 <AT_QISEND+0x118>)
 8017dca:	681b      	ldr	r3, [r3, #0]
 8017dcc:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8017dd0:	4618      	mov	r0, r3
 8017dd2:	f7f0 fd0b 	bl	80087ec <osTimerStart>
			while(read_rx_state == ACTIVE)
 8017dd6:	e012      	b.n	8017dfe <AT_QISEND+0xe2>
			{
				//osThreadSuspend(osThreadGetId());
				//osSemaphoreWait(ReceiveStateHandle, osWaitForever);

				if( find_str(modem_rx_buffer, 255, send_ok, 7) == 1 )
 8017dd8:	2307      	movs	r3, #7
 8017dda:	4a19      	ldr	r2, [pc, #100]	; (8017e40 <AT_QISEND+0x124>)
 8017ddc:	21ff      	movs	r1, #255	; 0xff
 8017dde:	4817      	ldr	r0, [pc, #92]	; (8017e3c <AT_QISEND+0x120>)
 8017de0:	f7ff f938 	bl	8017054 <find_str>
 8017de4:	4603      	mov	r3, r0
 8017de6:	2b01      	cmp	r3, #1
 8017de8:	d109      	bne.n	8017dfe <AT_QISEND+0xe2>
				{
					osTimerStop(AT_TimerHandle);
 8017dea:	4b12      	ldr	r3, [pc, #72]	; (8017e34 <AT_QISEND+0x118>)
 8017dec:	681b      	ldr	r3, [r3, #0]
 8017dee:	4618      	mov	r0, r3
 8017df0:	f7f0 fd40 	bl	8008874 <osTimerStop>
					read_rx_state = NOT_ACTIVE;
 8017df4:	4b0a      	ldr	r3, [pc, #40]	; (8017e20 <AT_QISEND+0x104>)
 8017df6:	2200      	movs	r2, #0
 8017df8:	701a      	strb	r2, [r3, #0]
					return AT_OK;
 8017dfa:	2300      	movs	r3, #0
 8017dfc:	e00a      	b.n	8017e14 <AT_QISEND+0xf8>
			while(read_rx_state == ACTIVE)
 8017dfe:	4b08      	ldr	r3, [pc, #32]	; (8017e20 <AT_QISEND+0x104>)
 8017e00:	781b      	ldrb	r3, [r3, #0]
 8017e02:	2b01      	cmp	r3, #1
 8017e04:	d0e8      	beq.n	8017dd8 <AT_QISEND+0xbc>
					read_rx_state = NOT_ACTIVE;
					return AT_ERROR;
				}
				*/
			}
			return AT_ERROR;
 8017e06:	2301      	movs	r3, #1
 8017e08:	e004      	b.n	8017e14 <AT_QISEND+0xf8>
	while(read_rx_state == ACTIVE)
 8017e0a:	4b05      	ldr	r3, [pc, #20]	; (8017e20 <AT_QISEND+0x104>)
 8017e0c:	781b      	ldrb	r3, [r3, #0]
 8017e0e:	2b01      	cmp	r3, #1
 8017e10:	d0b7      	beq.n	8017d82 <AT_QISEND+0x66>
			read_rx_state = NOT_ACTIVE;
			return AT_ERROR;
		}*/

	}
	return AT_ERROR;
 8017e12:	2301      	movs	r3, #1

}
 8017e14:	4618      	mov	r0, r3
 8017e16:	3718      	adds	r7, #24
 8017e18:	46bd      	mov	sp, r7
 8017e1a:	bd80      	pop	{r7, pc}
 8017e1c:	0801c004 	.word	0x0801c004
 8017e20:	20009a50 	.word	0x20009a50
 8017e24:	20000864 	.word	0x20000864
 8017e28:	20009afc 	.word	0x20009afc
 8017e2c:	2000823c 	.word	0x2000823c
 8017e30:	20009d9c 	.word	0x20009d9c
 8017e34:	200096f0 	.word	0x200096f0
 8017e38:	0801c014 	.word	0x0801c014
 8017e3c:	20009c00 	.word	0x20009c00
 8017e40:	2000006c 	.word	0x2000006c

08017e44 <AT_QIMUX>:
	}
	return AT_ERROR;
}

uint8_t AT_QIMUX (uint8_t mode) // Команда для включения или отключения возможности нескольких сессий TCP/IP, 1 - включено, 0 - выключено
{
 8017e44:	b580      	push	{r7, lr}
 8017e46:	b086      	sub	sp, #24
 8017e48:	af00      	add	r7, sp, #0
 8017e4a:	4603      	mov	r3, r0
 8017e4c:	71fb      	strb	r3, [r7, #7]
	char str_out[11];
	sprintf(str_out, "AT+QIMUX=%u\n", mode);
 8017e4e:	79fa      	ldrb	r2, [r7, #7]
 8017e50:	f107 030c 	add.w	r3, r7, #12
 8017e54:	4928      	ldr	r1, [pc, #160]	; (8017ef8 <AT_QIMUX+0xb4>)
 8017e56:	4618      	mov	r0, r3
 8017e58:	f002 fc08 	bl	801a66c <siprintf>
	read_rx_state = ACTIVE;
 8017e5c:	4b27      	ldr	r3, [pc, #156]	; (8017efc <AT_QIMUX+0xb8>)
 8017e5e:	2201      	movs	r2, #1
 8017e60:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 8017e62:	4b27      	ldr	r3, [pc, #156]	; (8017f00 <AT_QIMUX+0xbc>)
 8017e64:	2200      	movs	r2, #0
 8017e66:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 8017e68:	f7ff f960 	bl	801712c <modem_rx_buffer_clear>

	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 8017e6c:	2201      	movs	r2, #1
 8017e6e:	4925      	ldr	r1, [pc, #148]	; (8017f04 <AT_QIMUX+0xc0>)
 8017e70:	4825      	ldr	r0, [pc, #148]	; (8017f08 <AT_QIMUX+0xc4>)
 8017e72:	f7ef fb91 	bl	8007598 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 11);
 8017e76:	f107 030c 	add.w	r3, r7, #12
 8017e7a:	220b      	movs	r2, #11
 8017e7c:	4619      	mov	r1, r3
 8017e7e:	4822      	ldr	r0, [pc, #136]	; (8017f08 <AT_QIMUX+0xc4>)
 8017e80:	f7ef fb0c 	bl	800749c <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 8017e84:	4b21      	ldr	r3, [pc, #132]	; (8017f0c <AT_QIMUX+0xc8>)
 8017e86:	681b      	ldr	r3, [r3, #0]
 8017e88:	f04f 31ff 	mov.w	r1, #4294967295
 8017e8c:	4618      	mov	r0, r3
 8017e8e:	f7f0 fdfb 	bl	8008a88 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 300);
 8017e92:	4b1f      	ldr	r3, [pc, #124]	; (8017f10 <AT_QIMUX+0xcc>)
 8017e94:	681b      	ldr	r3, [r3, #0]
 8017e96:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8017e9a:	4618      	mov	r0, r3
 8017e9c:	f7f0 fca6 	bl	80087ec <osTimerStart>
	while(read_rx_state == ACTIVE)
 8017ea0:	e021      	b.n	8017ee6 <AT_QIMUX+0xa2>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 8017ea2:	491c      	ldr	r1, [pc, #112]	; (8017f14 <AT_QIMUX+0xd0>)
 8017ea4:	481c      	ldr	r0, [pc, #112]	; (8017f18 <AT_QIMUX+0xd4>)
 8017ea6:	f002 fc01 	bl	801a6ac <strstr>
 8017eaa:	4603      	mov	r3, r0
 8017eac:	2b00      	cmp	r3, #0
 8017eae:	d009      	beq.n	8017ec4 <AT_QIMUX+0x80>
		{
			osTimerStop(AT_TimerHandle);
 8017eb0:	4b17      	ldr	r3, [pc, #92]	; (8017f10 <AT_QIMUX+0xcc>)
 8017eb2:	681b      	ldr	r3, [r3, #0]
 8017eb4:	4618      	mov	r0, r3
 8017eb6:	f7f0 fcdd 	bl	8008874 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 8017eba:	4b10      	ldr	r3, [pc, #64]	; (8017efc <AT_QIMUX+0xb8>)
 8017ebc:	2200      	movs	r2, #0
 8017ebe:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 8017ec0:	2300      	movs	r3, #0
 8017ec2:	e015      	b.n	8017ef0 <AT_QIMUX+0xac>
		}
		if(strstr(modem_rx_buffer, "ERROR\r\n") != NULL )
 8017ec4:	4915      	ldr	r1, [pc, #84]	; (8017f1c <AT_QIMUX+0xd8>)
 8017ec6:	4814      	ldr	r0, [pc, #80]	; (8017f18 <AT_QIMUX+0xd4>)
 8017ec8:	f002 fbf0 	bl	801a6ac <strstr>
 8017ecc:	4603      	mov	r3, r0
 8017ece:	2b00      	cmp	r3, #0
 8017ed0:	d009      	beq.n	8017ee6 <AT_QIMUX+0xa2>
		{
			osTimerStop(AT_TimerHandle);
 8017ed2:	4b0f      	ldr	r3, [pc, #60]	; (8017f10 <AT_QIMUX+0xcc>)
 8017ed4:	681b      	ldr	r3, [r3, #0]
 8017ed6:	4618      	mov	r0, r3
 8017ed8:	f7f0 fccc 	bl	8008874 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 8017edc:	4b07      	ldr	r3, [pc, #28]	; (8017efc <AT_QIMUX+0xb8>)
 8017ede:	2200      	movs	r2, #0
 8017ee0:	701a      	strb	r2, [r3, #0]
			return AT_ERROR;
 8017ee2:	2301      	movs	r3, #1
 8017ee4:	e004      	b.n	8017ef0 <AT_QIMUX+0xac>
	while(read_rx_state == ACTIVE)
 8017ee6:	4b05      	ldr	r3, [pc, #20]	; (8017efc <AT_QIMUX+0xb8>)
 8017ee8:	781b      	ldrb	r3, [r3, #0]
 8017eea:	2b01      	cmp	r3, #1
 8017eec:	d0d9      	beq.n	8017ea2 <AT_QIMUX+0x5e>
		}

	}
	return AT_ERROR;
 8017eee:	2301      	movs	r3, #1
}
 8017ef0:	4618      	mov	r0, r3
 8017ef2:	3718      	adds	r7, #24
 8017ef4:	46bd      	mov	sp, r7
 8017ef6:	bd80      	pop	{r7, pc}
 8017ef8:	0801c030 	.word	0x0801c030
 8017efc:	20009a50 	.word	0x20009a50
 8017f00:	20000864 	.word	0x20000864
 8017f04:	20009afc 	.word	0x20009afc
 8017f08:	2000823c 	.word	0x2000823c
 8017f0c:	20009d9c 	.word	0x20009d9c
 8017f10:	200096f0 	.word	0x200096f0
 8017f14:	0801bf50 	.word	0x0801bf50
 8017f18:	20009c00 	.word	0x20009c00
 8017f1c:	0801c028 	.word	0x0801c028

08017f20 <AT_QIREGAPP>:
	}
	return AT_ERROR;
}

uint8_t AT_QIREGAPP  (char* apn, char* user, char* password)
{
 8017f20:	b580      	push	{r7, lr}
 8017f22:	b0a0      	sub	sp, #128	; 0x80
 8017f24:	af02      	add	r7, sp, #8
 8017f26:	60f8      	str	r0, [r7, #12]
 8017f28:	60b9      	str	r1, [r7, #8]
 8017f2a:	607a      	str	r2, [r7, #4]
	uint8_t n;
	char str_out[100];
	sprintf(str_out, "AT+QIREGAPP=\"%s\",\"%s\",\"%s\"\n", apn, user, password);
 8017f2c:	f107 0010 	add.w	r0, r7, #16
 8017f30:	687b      	ldr	r3, [r7, #4]
 8017f32:	9300      	str	r3, [sp, #0]
 8017f34:	68bb      	ldr	r3, [r7, #8]
 8017f36:	68fa      	ldr	r2, [r7, #12]
 8017f38:	492d      	ldr	r1, [pc, #180]	; (8017ff0 <AT_QIREGAPP+0xd0>)
 8017f3a:	f002 fb97 	bl	801a66c <siprintf>
	n = strlen(str_out);
 8017f3e:	f107 0310 	add.w	r3, r7, #16
 8017f42:	4618      	mov	r0, r3
 8017f44:	f7e8 f944 	bl	80001d0 <strlen>
 8017f48:	4603      	mov	r3, r0
 8017f4a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77

	read_rx_state = ACTIVE;
 8017f4e:	4b29      	ldr	r3, [pc, #164]	; (8017ff4 <AT_QIREGAPP+0xd4>)
 8017f50:	2201      	movs	r2, #1
 8017f52:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 8017f54:	4b28      	ldr	r3, [pc, #160]	; (8017ff8 <AT_QIREGAPP+0xd8>)
 8017f56:	2200      	movs	r2, #0
 8017f58:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 8017f5a:	f7ff f8e7 	bl	801712c <modem_rx_buffer_clear>

	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 8017f5e:	2201      	movs	r2, #1
 8017f60:	4926      	ldr	r1, [pc, #152]	; (8017ffc <AT_QIREGAPP+0xdc>)
 8017f62:	4827      	ldr	r0, [pc, #156]	; (8018000 <AT_QIREGAPP+0xe0>)
 8017f64:	f7ef fb18 	bl	8007598 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, n);
 8017f68:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8017f6c:	b29a      	uxth	r2, r3
 8017f6e:	f107 0310 	add.w	r3, r7, #16
 8017f72:	4619      	mov	r1, r3
 8017f74:	4822      	ldr	r0, [pc, #136]	; (8018000 <AT_QIREGAPP+0xe0>)
 8017f76:	f7ef fa91 	bl	800749c <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 8017f7a:	4b22      	ldr	r3, [pc, #136]	; (8018004 <AT_QIREGAPP+0xe4>)
 8017f7c:	681b      	ldr	r3, [r3, #0]
 8017f7e:	f04f 31ff 	mov.w	r1, #4294967295
 8017f82:	4618      	mov	r0, r3
 8017f84:	f7f0 fd80 	bl	8008a88 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 300);
 8017f88:	4b1f      	ldr	r3, [pc, #124]	; (8018008 <AT_QIREGAPP+0xe8>)
 8017f8a:	681b      	ldr	r3, [r3, #0]
 8017f8c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8017f90:	4618      	mov	r0, r3
 8017f92:	f7f0 fc2b 	bl	80087ec <osTimerStart>
	while(read_rx_state == ACTIVE)
 8017f96:	e021      	b.n	8017fdc <AT_QIREGAPP+0xbc>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 8017f98:	491c      	ldr	r1, [pc, #112]	; (801800c <AT_QIREGAPP+0xec>)
 8017f9a:	481d      	ldr	r0, [pc, #116]	; (8018010 <AT_QIREGAPP+0xf0>)
 8017f9c:	f002 fb86 	bl	801a6ac <strstr>
 8017fa0:	4603      	mov	r3, r0
 8017fa2:	2b00      	cmp	r3, #0
 8017fa4:	d009      	beq.n	8017fba <AT_QIREGAPP+0x9a>
		{
			osTimerStop(AT_TimerHandle);
 8017fa6:	4b18      	ldr	r3, [pc, #96]	; (8018008 <AT_QIREGAPP+0xe8>)
 8017fa8:	681b      	ldr	r3, [r3, #0]
 8017faa:	4618      	mov	r0, r3
 8017fac:	f7f0 fc62 	bl	8008874 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 8017fb0:	4b10      	ldr	r3, [pc, #64]	; (8017ff4 <AT_QIREGAPP+0xd4>)
 8017fb2:	2200      	movs	r2, #0
 8017fb4:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 8017fb6:	2300      	movs	r3, #0
 8017fb8:	e015      	b.n	8017fe6 <AT_QIREGAPP+0xc6>
		}
		if(strstr(modem_rx_buffer, "ERROR\r\n") != NULL )
 8017fba:	4916      	ldr	r1, [pc, #88]	; (8018014 <AT_QIREGAPP+0xf4>)
 8017fbc:	4814      	ldr	r0, [pc, #80]	; (8018010 <AT_QIREGAPP+0xf0>)
 8017fbe:	f002 fb75 	bl	801a6ac <strstr>
 8017fc2:	4603      	mov	r3, r0
 8017fc4:	2b00      	cmp	r3, #0
 8017fc6:	d009      	beq.n	8017fdc <AT_QIREGAPP+0xbc>
		{
			osTimerStop(AT_TimerHandle);
 8017fc8:	4b0f      	ldr	r3, [pc, #60]	; (8018008 <AT_QIREGAPP+0xe8>)
 8017fca:	681b      	ldr	r3, [r3, #0]
 8017fcc:	4618      	mov	r0, r3
 8017fce:	f7f0 fc51 	bl	8008874 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 8017fd2:	4b08      	ldr	r3, [pc, #32]	; (8017ff4 <AT_QIREGAPP+0xd4>)
 8017fd4:	2200      	movs	r2, #0
 8017fd6:	701a      	strb	r2, [r3, #0]
			return AT_ERROR;
 8017fd8:	2301      	movs	r3, #1
 8017fda:	e004      	b.n	8017fe6 <AT_QIREGAPP+0xc6>
	while(read_rx_state == ACTIVE)
 8017fdc:	4b05      	ldr	r3, [pc, #20]	; (8017ff4 <AT_QIREGAPP+0xd4>)
 8017fde:	781b      	ldrb	r3, [r3, #0]
 8017fe0:	2b01      	cmp	r3, #1
 8017fe2:	d0d9      	beq.n	8017f98 <AT_QIREGAPP+0x78>
		}

	}
	return AT_ERROR;
 8017fe4:	2301      	movs	r3, #1

}
 8017fe6:	4618      	mov	r0, r3
 8017fe8:	3778      	adds	r7, #120	; 0x78
 8017fea:	46bd      	mov	sp, r7
 8017fec:	bd80      	pop	{r7, pc}
 8017fee:	bf00      	nop
 8017ff0:	0801c050 	.word	0x0801c050
 8017ff4:	20009a50 	.word	0x20009a50
 8017ff8:	20000864 	.word	0x20000864
 8017ffc:	20009afc 	.word	0x20009afc
 8018000:	2000823c 	.word	0x2000823c
 8018004:	20009d9c 	.word	0x20009d9c
 8018008:	200096f0 	.word	0x200096f0
 801800c:	0801bf50 	.word	0x0801bf50
 8018010:	20009c00 	.word	0x20009c00
 8018014:	0801c028 	.word	0x0801c028

08018018 <AT_QIACT>:

uint8_t AT_QIACT (void)
{
 8018018:	b580      	push	{r7, lr}
 801801a:	b084      	sub	sp, #16
 801801c:	af00      	add	r7, sp, #0
	uint8_t str_out[9];
	sprintf(str_out, "AT+QIACT\n");
 801801e:	1d3b      	adds	r3, r7, #4
 8018020:	4927      	ldr	r1, [pc, #156]	; (80180c0 <AT_QIACT+0xa8>)
 8018022:	4618      	mov	r0, r3
 8018024:	f002 fb22 	bl	801a66c <siprintf>
	read_rx_state = ACTIVE;
 8018028:	4b26      	ldr	r3, [pc, #152]	; (80180c4 <AT_QIACT+0xac>)
 801802a:	2201      	movs	r2, #1
 801802c:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 801802e:	4b26      	ldr	r3, [pc, #152]	; (80180c8 <AT_QIACT+0xb0>)
 8018030:	2200      	movs	r2, #0
 8018032:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 8018034:	f7ff f87a 	bl	801712c <modem_rx_buffer_clear>

	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 8018038:	2201      	movs	r2, #1
 801803a:	4924      	ldr	r1, [pc, #144]	; (80180cc <AT_QIACT+0xb4>)
 801803c:	4824      	ldr	r0, [pc, #144]	; (80180d0 <AT_QIACT+0xb8>)
 801803e:	f7ef faab 	bl	8007598 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 9);
 8018042:	1d3b      	adds	r3, r7, #4
 8018044:	2209      	movs	r2, #9
 8018046:	4619      	mov	r1, r3
 8018048:	4821      	ldr	r0, [pc, #132]	; (80180d0 <AT_QIACT+0xb8>)
 801804a:	f7ef fa27 	bl	800749c <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 801804e:	4b21      	ldr	r3, [pc, #132]	; (80180d4 <AT_QIACT+0xbc>)
 8018050:	681b      	ldr	r3, [r3, #0]
 8018052:	f04f 31ff 	mov.w	r1, #4294967295
 8018056:	4618      	mov	r0, r3
 8018058:	f7f0 fd16 	bl	8008a88 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 150000);
 801805c:	4b1e      	ldr	r3, [pc, #120]	; (80180d8 <AT_QIACT+0xc0>)
 801805e:	681b      	ldr	r3, [r3, #0]
 8018060:	491e      	ldr	r1, [pc, #120]	; (80180dc <AT_QIACT+0xc4>)
 8018062:	4618      	mov	r0, r3
 8018064:	f7f0 fbc2 	bl	80087ec <osTimerStart>
	while(read_rx_state == ACTIVE)
 8018068:	e021      	b.n	80180ae <AT_QIACT+0x96>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 801806a:	491d      	ldr	r1, [pc, #116]	; (80180e0 <AT_QIACT+0xc8>)
 801806c:	481d      	ldr	r0, [pc, #116]	; (80180e4 <AT_QIACT+0xcc>)
 801806e:	f002 fb1d 	bl	801a6ac <strstr>
 8018072:	4603      	mov	r3, r0
 8018074:	2b00      	cmp	r3, #0
 8018076:	d009      	beq.n	801808c <AT_QIACT+0x74>
		{
			osTimerStop(AT_TimerHandle);
 8018078:	4b17      	ldr	r3, [pc, #92]	; (80180d8 <AT_QIACT+0xc0>)
 801807a:	681b      	ldr	r3, [r3, #0]
 801807c:	4618      	mov	r0, r3
 801807e:	f7f0 fbf9 	bl	8008874 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 8018082:	4b10      	ldr	r3, [pc, #64]	; (80180c4 <AT_QIACT+0xac>)
 8018084:	2200      	movs	r2, #0
 8018086:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 8018088:	2300      	movs	r3, #0
 801808a:	e015      	b.n	80180b8 <AT_QIACT+0xa0>
		}
		if(strstr(modem_rx_buffer, "ERROR\r\n") != NULL )
 801808c:	4916      	ldr	r1, [pc, #88]	; (80180e8 <AT_QIACT+0xd0>)
 801808e:	4815      	ldr	r0, [pc, #84]	; (80180e4 <AT_QIACT+0xcc>)
 8018090:	f002 fb0c 	bl	801a6ac <strstr>
 8018094:	4603      	mov	r3, r0
 8018096:	2b00      	cmp	r3, #0
 8018098:	d009      	beq.n	80180ae <AT_QIACT+0x96>
		{
			osTimerStop(AT_TimerHandle);
 801809a:	4b0f      	ldr	r3, [pc, #60]	; (80180d8 <AT_QIACT+0xc0>)
 801809c:	681b      	ldr	r3, [r3, #0]
 801809e:	4618      	mov	r0, r3
 80180a0:	f7f0 fbe8 	bl	8008874 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 80180a4:	4b07      	ldr	r3, [pc, #28]	; (80180c4 <AT_QIACT+0xac>)
 80180a6:	2200      	movs	r2, #0
 80180a8:	701a      	strb	r2, [r3, #0]
			return AT_ERROR;
 80180aa:	2301      	movs	r3, #1
 80180ac:	e004      	b.n	80180b8 <AT_QIACT+0xa0>
	while(read_rx_state == ACTIVE)
 80180ae:	4b05      	ldr	r3, [pc, #20]	; (80180c4 <AT_QIACT+0xac>)
 80180b0:	781b      	ldrb	r3, [r3, #0]
 80180b2:	2b01      	cmp	r3, #1
 80180b4:	d0d9      	beq.n	801806a <AT_QIACT+0x52>
		}

	}
	return AT_ERROR;
 80180b6:	2301      	movs	r3, #1
}
 80180b8:	4618      	mov	r0, r3
 80180ba:	3710      	adds	r7, #16
 80180bc:	46bd      	mov	sp, r7
 80180be:	bd80      	pop	{r7, pc}
 80180c0:	0801c06c 	.word	0x0801c06c
 80180c4:	20009a50 	.word	0x20009a50
 80180c8:	20000864 	.word	0x20000864
 80180cc:	20009afc 	.word	0x20009afc
 80180d0:	2000823c 	.word	0x2000823c
 80180d4:	20009d9c 	.word	0x20009d9c
 80180d8:	200096f0 	.word	0x200096f0
 80180dc:	000249f0 	.word	0x000249f0
 80180e0:	0801bf50 	.word	0x0801bf50
 80180e4:	20009c00 	.word	0x20009c00
 80180e8:	0801c028 	.word	0x0801c028

080180ec <AT_QIDEACT>:

uint8_t AT_QIDEACT (void)
{
 80180ec:	b580      	push	{r7, lr}
 80180ee:	b084      	sub	sp, #16
 80180f0:	af00      	add	r7, sp, #0
	uint8_t str_out[11];
	sprintf(str_out, "AT+QIDEACT\n");
 80180f2:	1d3b      	adds	r3, r7, #4
 80180f4:	4928      	ldr	r1, [pc, #160]	; (8018198 <AT_QIDEACT+0xac>)
 80180f6:	4618      	mov	r0, r3
 80180f8:	f002 fab8 	bl	801a66c <siprintf>
	read_rx_state = ACTIVE;
 80180fc:	4b27      	ldr	r3, [pc, #156]	; (801819c <AT_QIDEACT+0xb0>)
 80180fe:	2201      	movs	r2, #1
 8018100:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 8018102:	4b27      	ldr	r3, [pc, #156]	; (80181a0 <AT_QIDEACT+0xb4>)
 8018104:	2200      	movs	r2, #0
 8018106:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 8018108:	f7ff f810 	bl	801712c <modem_rx_buffer_clear>

	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 801810c:	2201      	movs	r2, #1
 801810e:	4925      	ldr	r1, [pc, #148]	; (80181a4 <AT_QIDEACT+0xb8>)
 8018110:	4825      	ldr	r0, [pc, #148]	; (80181a8 <AT_QIDEACT+0xbc>)
 8018112:	f7ef fa41 	bl	8007598 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 11);
 8018116:	1d3b      	adds	r3, r7, #4
 8018118:	220b      	movs	r2, #11
 801811a:	4619      	mov	r1, r3
 801811c:	4822      	ldr	r0, [pc, #136]	; (80181a8 <AT_QIDEACT+0xbc>)
 801811e:	f7ef f9bd 	bl	800749c <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 8018122:	4b22      	ldr	r3, [pc, #136]	; (80181ac <AT_QIDEACT+0xc0>)
 8018124:	681b      	ldr	r3, [r3, #0]
 8018126:	f04f 31ff 	mov.w	r1, #4294967295
 801812a:	4618      	mov	r0, r3
 801812c:	f7f0 fcac 	bl	8008a88 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 40000);
 8018130:	4b1f      	ldr	r3, [pc, #124]	; (80181b0 <AT_QIDEACT+0xc4>)
 8018132:	681b      	ldr	r3, [r3, #0]
 8018134:	f649 4140 	movw	r1, #40000	; 0x9c40
 8018138:	4618      	mov	r0, r3
 801813a:	f7f0 fb57 	bl	80087ec <osTimerStart>
	while(read_rx_state == ACTIVE)
 801813e:	e021      	b.n	8018184 <AT_QIDEACT+0x98>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "OK\r\n") != NULL )
 8018140:	491c      	ldr	r1, [pc, #112]	; (80181b4 <AT_QIDEACT+0xc8>)
 8018142:	481d      	ldr	r0, [pc, #116]	; (80181b8 <AT_QIDEACT+0xcc>)
 8018144:	f002 fab2 	bl	801a6ac <strstr>
 8018148:	4603      	mov	r3, r0
 801814a:	2b00      	cmp	r3, #0
 801814c:	d009      	beq.n	8018162 <AT_QIDEACT+0x76>
		{
			osTimerStop(AT_TimerHandle);
 801814e:	4b18      	ldr	r3, [pc, #96]	; (80181b0 <AT_QIDEACT+0xc4>)
 8018150:	681b      	ldr	r3, [r3, #0]
 8018152:	4618      	mov	r0, r3
 8018154:	f7f0 fb8e 	bl	8008874 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 8018158:	4b10      	ldr	r3, [pc, #64]	; (801819c <AT_QIDEACT+0xb0>)
 801815a:	2200      	movs	r2, #0
 801815c:	701a      	strb	r2, [r3, #0]
			return AT_OK;
 801815e:	2300      	movs	r3, #0
 8018160:	e015      	b.n	801818e <AT_QIDEACT+0xa2>
		}
		if(strstr(modem_rx_buffer, "ERROR\r\n") != NULL )
 8018162:	4916      	ldr	r1, [pc, #88]	; (80181bc <AT_QIDEACT+0xd0>)
 8018164:	4814      	ldr	r0, [pc, #80]	; (80181b8 <AT_QIDEACT+0xcc>)
 8018166:	f002 faa1 	bl	801a6ac <strstr>
 801816a:	4603      	mov	r3, r0
 801816c:	2b00      	cmp	r3, #0
 801816e:	d009      	beq.n	8018184 <AT_QIDEACT+0x98>
		{
			osTimerStop(AT_TimerHandle);
 8018170:	4b0f      	ldr	r3, [pc, #60]	; (80181b0 <AT_QIDEACT+0xc4>)
 8018172:	681b      	ldr	r3, [r3, #0]
 8018174:	4618      	mov	r0, r3
 8018176:	f7f0 fb7d 	bl	8008874 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 801817a:	4b08      	ldr	r3, [pc, #32]	; (801819c <AT_QIDEACT+0xb0>)
 801817c:	2200      	movs	r2, #0
 801817e:	701a      	strb	r2, [r3, #0]
			return AT_ERROR;
 8018180:	2301      	movs	r3, #1
 8018182:	e004      	b.n	801818e <AT_QIDEACT+0xa2>
	while(read_rx_state == ACTIVE)
 8018184:	4b05      	ldr	r3, [pc, #20]	; (801819c <AT_QIDEACT+0xb0>)
 8018186:	781b      	ldrb	r3, [r3, #0]
 8018188:	2b01      	cmp	r3, #1
 801818a:	d0d9      	beq.n	8018140 <AT_QIDEACT+0x54>
		}

	}
	return AT_ERROR;
 801818c:	2301      	movs	r3, #1
}
 801818e:	4618      	mov	r0, r3
 8018190:	3710      	adds	r7, #16
 8018192:	46bd      	mov	sp, r7
 8018194:	bd80      	pop	{r7, pc}
 8018196:	bf00      	nop
 8018198:	0801c078 	.word	0x0801c078
 801819c:	20009a50 	.word	0x20009a50
 80181a0:	20000864 	.word	0x20000864
 80181a4:	20009afc 	.word	0x20009afc
 80181a8:	2000823c 	.word	0x2000823c
 80181ac:	20009d9c 	.word	0x20009d9c
 80181b0:	200096f0 	.word	0x200096f0
 80181b4:	0801bf50 	.word	0x0801bf50
 80181b8:	20009c00 	.word	0x20009c00
 80181bc:	0801c028 	.word	0x0801c028

080181c0 <AT_QISTATE>:

uint8_t AT_QISTATE (void)
{
 80181c0:	b580      	push	{r7, lr}
 80181c2:	b084      	sub	sp, #16
 80181c4:	af00      	add	r7, sp, #0
	uint8_t str_out[11];
	sprintf(str_out, "AT+QISTATE\n");
 80181c6:	1d3b      	adds	r3, r7, #4
 80181c8:	497d      	ldr	r1, [pc, #500]	; (80183c0 <AT_QISTATE+0x200>)
 80181ca:	4618      	mov	r0, r3
 80181cc:	f002 fa4e 	bl	801a66c <siprintf>
	read_rx_state = ACTIVE;
 80181d0:	4b7c      	ldr	r3, [pc, #496]	; (80183c4 <AT_QISTATE+0x204>)
 80181d2:	2201      	movs	r2, #1
 80181d4:	701a      	strb	r2, [r3, #0]
	modem_rx_number = 0;
 80181d6:	4b7c      	ldr	r3, [pc, #496]	; (80183c8 <AT_QISTATE+0x208>)
 80181d8:	2200      	movs	r2, #0
 80181da:	701a      	strb	r2, [r3, #0]
	modem_rx_buffer_clear();
 80181dc:	f7fe ffa6 	bl	801712c <modem_rx_buffer_clear>

	HAL_UART_Receive_DMA(&huart3, &modem_rx_data[0], 1);
 80181e0:	2201      	movs	r2, #1
 80181e2:	497a      	ldr	r1, [pc, #488]	; (80183cc <AT_QISTATE+0x20c>)
 80181e4:	487a      	ldr	r0, [pc, #488]	; (80183d0 <AT_QISTATE+0x210>)
 80181e6:	f7ef f9d7 	bl	8007598 <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(&huart3, str_out, 11);
 80181ea:	1d3b      	adds	r3, r7, #4
 80181ec:	220b      	movs	r2, #11
 80181ee:	4619      	mov	r1, r3
 80181f0:	4877      	ldr	r0, [pc, #476]	; (80183d0 <AT_QISTATE+0x210>)
 80181f2:	f7ef f953 	bl	800749c <HAL_UART_Transmit_DMA>

	osSemaphoreWait(TransmissionStateHandle, osWaitForever);
 80181f6:	4b77      	ldr	r3, [pc, #476]	; (80183d4 <AT_QISTATE+0x214>)
 80181f8:	681b      	ldr	r3, [r3, #0]
 80181fa:	f04f 31ff 	mov.w	r1, #4294967295
 80181fe:	4618      	mov	r0, r3
 8018200:	f7f0 fc42 	bl	8008a88 <osSemaphoreWait>

	osTimerStart(AT_TimerHandle, 10000);
 8018204:	4b74      	ldr	r3, [pc, #464]	; (80183d8 <AT_QISTATE+0x218>)
 8018206:	681b      	ldr	r3, [r3, #0]
 8018208:	f242 7110 	movw	r1, #10000	; 0x2710
 801820c:	4618      	mov	r0, r3
 801820e:	f7f0 faed 	bl	80087ec <osTimerStart>
	while(read_rx_state == ACTIVE)
 8018212:	e0cb      	b.n	80183ac <AT_QISTATE+0x1ec>
	{
		//osThreadSuspend(M95TaskHandle);
		if(strstr(modem_rx_buffer, "IP INITIAL\r\n") != NULL )
 8018214:	4971      	ldr	r1, [pc, #452]	; (80183dc <AT_QISTATE+0x21c>)
 8018216:	4872      	ldr	r0, [pc, #456]	; (80183e0 <AT_QISTATE+0x220>)
 8018218:	f002 fa48 	bl	801a6ac <strstr>
 801821c:	4603      	mov	r3, r0
 801821e:	2b00      	cmp	r3, #0
 8018220:	d009      	beq.n	8018236 <AT_QISTATE+0x76>
		{
			osTimerStop(AT_TimerHandle);
 8018222:	4b6d      	ldr	r3, [pc, #436]	; (80183d8 <AT_QISTATE+0x218>)
 8018224:	681b      	ldr	r3, [r3, #0]
 8018226:	4618      	mov	r0, r3
 8018228:	f7f0 fb24 	bl	8008874 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 801822c:	4b65      	ldr	r3, [pc, #404]	; (80183c4 <AT_QISTATE+0x204>)
 801822e:	2200      	movs	r2, #0
 8018230:	701a      	strb	r2, [r3, #0]
			return IP_INITIAL;
 8018232:	2302      	movs	r3, #2
 8018234:	e0c0      	b.n	80183b8 <AT_QISTATE+0x1f8>
		}
		if(strstr(modem_rx_buffer, "IP START\r\n") != NULL )
 8018236:	496b      	ldr	r1, [pc, #428]	; (80183e4 <AT_QISTATE+0x224>)
 8018238:	4869      	ldr	r0, [pc, #420]	; (80183e0 <AT_QISTATE+0x220>)
 801823a:	f002 fa37 	bl	801a6ac <strstr>
 801823e:	4603      	mov	r3, r0
 8018240:	2b00      	cmp	r3, #0
 8018242:	d009      	beq.n	8018258 <AT_QISTATE+0x98>
		{
			osTimerStop(AT_TimerHandle);
 8018244:	4b64      	ldr	r3, [pc, #400]	; (80183d8 <AT_QISTATE+0x218>)
 8018246:	681b      	ldr	r3, [r3, #0]
 8018248:	4618      	mov	r0, r3
 801824a:	f7f0 fb13 	bl	8008874 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 801824e:	4b5d      	ldr	r3, [pc, #372]	; (80183c4 <AT_QISTATE+0x204>)
 8018250:	2200      	movs	r2, #0
 8018252:	701a      	strb	r2, [r3, #0]
			return IP_START;
 8018254:	2303      	movs	r3, #3
 8018256:	e0af      	b.n	80183b8 <AT_QISTATE+0x1f8>
		}
		if(strstr(modem_rx_buffer, "IP CONFIG\r\n") != NULL )
 8018258:	4963      	ldr	r1, [pc, #396]	; (80183e8 <AT_QISTATE+0x228>)
 801825a:	4861      	ldr	r0, [pc, #388]	; (80183e0 <AT_QISTATE+0x220>)
 801825c:	f002 fa26 	bl	801a6ac <strstr>
 8018260:	4603      	mov	r3, r0
 8018262:	2b00      	cmp	r3, #0
 8018264:	d009      	beq.n	801827a <AT_QISTATE+0xba>
		{
			osTimerStop(AT_TimerHandle);
 8018266:	4b5c      	ldr	r3, [pc, #368]	; (80183d8 <AT_QISTATE+0x218>)
 8018268:	681b      	ldr	r3, [r3, #0]
 801826a:	4618      	mov	r0, r3
 801826c:	f7f0 fb02 	bl	8008874 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 8018270:	4b54      	ldr	r3, [pc, #336]	; (80183c4 <AT_QISTATE+0x204>)
 8018272:	2200      	movs	r2, #0
 8018274:	701a      	strb	r2, [r3, #0]
			return IP_CONFIG;
 8018276:	2304      	movs	r3, #4
 8018278:	e09e      	b.n	80183b8 <AT_QISTATE+0x1f8>
		}
		if(strstr(modem_rx_buffer, "IP IND\r\n") != NULL )
 801827a:	495c      	ldr	r1, [pc, #368]	; (80183ec <AT_QISTATE+0x22c>)
 801827c:	4858      	ldr	r0, [pc, #352]	; (80183e0 <AT_QISTATE+0x220>)
 801827e:	f002 fa15 	bl	801a6ac <strstr>
 8018282:	4603      	mov	r3, r0
 8018284:	2b00      	cmp	r3, #0
 8018286:	d009      	beq.n	801829c <AT_QISTATE+0xdc>
		{
			osTimerStop(AT_TimerHandle);
 8018288:	4b53      	ldr	r3, [pc, #332]	; (80183d8 <AT_QISTATE+0x218>)
 801828a:	681b      	ldr	r3, [r3, #0]
 801828c:	4618      	mov	r0, r3
 801828e:	f7f0 faf1 	bl	8008874 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 8018292:	4b4c      	ldr	r3, [pc, #304]	; (80183c4 <AT_QISTATE+0x204>)
 8018294:	2200      	movs	r2, #0
 8018296:	701a      	strb	r2, [r3, #0]
			return IP_IND;
 8018298:	2305      	movs	r3, #5
 801829a:	e08d      	b.n	80183b8 <AT_QISTATE+0x1f8>
		}
		if(strstr(modem_rx_buffer, "IP GPRSACT\r\n") != NULL )
 801829c:	4954      	ldr	r1, [pc, #336]	; (80183f0 <AT_QISTATE+0x230>)
 801829e:	4850      	ldr	r0, [pc, #320]	; (80183e0 <AT_QISTATE+0x220>)
 80182a0:	f002 fa04 	bl	801a6ac <strstr>
 80182a4:	4603      	mov	r3, r0
 80182a6:	2b00      	cmp	r3, #0
 80182a8:	d009      	beq.n	80182be <AT_QISTATE+0xfe>
		{
			osTimerStop(AT_TimerHandle);
 80182aa:	4b4b      	ldr	r3, [pc, #300]	; (80183d8 <AT_QISTATE+0x218>)
 80182ac:	681b      	ldr	r3, [r3, #0]
 80182ae:	4618      	mov	r0, r3
 80182b0:	f7f0 fae0 	bl	8008874 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 80182b4:	4b43      	ldr	r3, [pc, #268]	; (80183c4 <AT_QISTATE+0x204>)
 80182b6:	2200      	movs	r2, #0
 80182b8:	701a      	strb	r2, [r3, #0]
			return IP_GPRSACT;
 80182ba:	2306      	movs	r3, #6
 80182bc:	e07c      	b.n	80183b8 <AT_QISTATE+0x1f8>
		}
		if(strstr(modem_rx_buffer, "IP STATUS\r\n") != NULL )
 80182be:	494d      	ldr	r1, [pc, #308]	; (80183f4 <AT_QISTATE+0x234>)
 80182c0:	4847      	ldr	r0, [pc, #284]	; (80183e0 <AT_QISTATE+0x220>)
 80182c2:	f002 f9f3 	bl	801a6ac <strstr>
 80182c6:	4603      	mov	r3, r0
 80182c8:	2b00      	cmp	r3, #0
 80182ca:	d009      	beq.n	80182e0 <AT_QISTATE+0x120>
		{
			osTimerStop(AT_TimerHandle);
 80182cc:	4b42      	ldr	r3, [pc, #264]	; (80183d8 <AT_QISTATE+0x218>)
 80182ce:	681b      	ldr	r3, [r3, #0]
 80182d0:	4618      	mov	r0, r3
 80182d2:	f7f0 facf 	bl	8008874 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 80182d6:	4b3b      	ldr	r3, [pc, #236]	; (80183c4 <AT_QISTATE+0x204>)
 80182d8:	2200      	movs	r2, #0
 80182da:	701a      	strb	r2, [r3, #0]
			return IP_STATUS;
 80182dc:	2307      	movs	r3, #7
 80182de:	e06b      	b.n	80183b8 <AT_QISTATE+0x1f8>
		}
		if(strstr(modem_rx_buffer, "TCP CONNECTING\r\n") != NULL )
 80182e0:	4945      	ldr	r1, [pc, #276]	; (80183f8 <AT_QISTATE+0x238>)
 80182e2:	483f      	ldr	r0, [pc, #252]	; (80183e0 <AT_QISTATE+0x220>)
 80182e4:	f002 f9e2 	bl	801a6ac <strstr>
 80182e8:	4603      	mov	r3, r0
 80182ea:	2b00      	cmp	r3, #0
 80182ec:	d009      	beq.n	8018302 <AT_QISTATE+0x142>
		{
			osTimerStop(AT_TimerHandle);
 80182ee:	4b3a      	ldr	r3, [pc, #232]	; (80183d8 <AT_QISTATE+0x218>)
 80182f0:	681b      	ldr	r3, [r3, #0]
 80182f2:	4618      	mov	r0, r3
 80182f4:	f7f0 fabe 	bl	8008874 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 80182f8:	4b32      	ldr	r3, [pc, #200]	; (80183c4 <AT_QISTATE+0x204>)
 80182fa:	2200      	movs	r2, #0
 80182fc:	701a      	strb	r2, [r3, #0]
			return TCP_CONNECTING;
 80182fe:	2308      	movs	r3, #8
 8018300:	e05a      	b.n	80183b8 <AT_QISTATE+0x1f8>
		}
		if(strstr(modem_rx_buffer, "UDP CONNECTING\r\n") != NULL )
 8018302:	493e      	ldr	r1, [pc, #248]	; (80183fc <AT_QISTATE+0x23c>)
 8018304:	4836      	ldr	r0, [pc, #216]	; (80183e0 <AT_QISTATE+0x220>)
 8018306:	f002 f9d1 	bl	801a6ac <strstr>
 801830a:	4603      	mov	r3, r0
 801830c:	2b00      	cmp	r3, #0
 801830e:	d009      	beq.n	8018324 <AT_QISTATE+0x164>
		{
			osTimerStop(AT_TimerHandle);
 8018310:	4b31      	ldr	r3, [pc, #196]	; (80183d8 <AT_QISTATE+0x218>)
 8018312:	681b      	ldr	r3, [r3, #0]
 8018314:	4618      	mov	r0, r3
 8018316:	f7f0 faad 	bl	8008874 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 801831a:	4b2a      	ldr	r3, [pc, #168]	; (80183c4 <AT_QISTATE+0x204>)
 801831c:	2200      	movs	r2, #0
 801831e:	701a      	strb	r2, [r3, #0]
			return UDP_CONNECTING;
 8018320:	2309      	movs	r3, #9
 8018322:	e049      	b.n	80183b8 <AT_QISTATE+0x1f8>
		}
		if(strstr(modem_rx_buffer, "IP CLOSE\r\n") != NULL )
 8018324:	4936      	ldr	r1, [pc, #216]	; (8018400 <AT_QISTATE+0x240>)
 8018326:	482e      	ldr	r0, [pc, #184]	; (80183e0 <AT_QISTATE+0x220>)
 8018328:	f002 f9c0 	bl	801a6ac <strstr>
 801832c:	4603      	mov	r3, r0
 801832e:	2b00      	cmp	r3, #0
 8018330:	d009      	beq.n	8018346 <AT_QISTATE+0x186>
		{
			osTimerStop(AT_TimerHandle);
 8018332:	4b29      	ldr	r3, [pc, #164]	; (80183d8 <AT_QISTATE+0x218>)
 8018334:	681b      	ldr	r3, [r3, #0]
 8018336:	4618      	mov	r0, r3
 8018338:	f7f0 fa9c 	bl	8008874 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 801833c:	4b21      	ldr	r3, [pc, #132]	; (80183c4 <AT_QISTATE+0x204>)
 801833e:	2200      	movs	r2, #0
 8018340:	701a      	strb	r2, [r3, #0]
			return IP_CLOSE;
 8018342:	230a      	movs	r3, #10
 8018344:	e038      	b.n	80183b8 <AT_QISTATE+0x1f8>
		}
		if(strstr(modem_rx_buffer, "CONNECT OK\r\n") != NULL )
 8018346:	492f      	ldr	r1, [pc, #188]	; (8018404 <AT_QISTATE+0x244>)
 8018348:	4825      	ldr	r0, [pc, #148]	; (80183e0 <AT_QISTATE+0x220>)
 801834a:	f002 f9af 	bl	801a6ac <strstr>
 801834e:	4603      	mov	r3, r0
 8018350:	2b00      	cmp	r3, #0
 8018352:	d009      	beq.n	8018368 <AT_QISTATE+0x1a8>
		{
			osTimerStop(AT_TimerHandle);
 8018354:	4b20      	ldr	r3, [pc, #128]	; (80183d8 <AT_QISTATE+0x218>)
 8018356:	681b      	ldr	r3, [r3, #0]
 8018358:	4618      	mov	r0, r3
 801835a:	f7f0 fa8b 	bl	8008874 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 801835e:	4b19      	ldr	r3, [pc, #100]	; (80183c4 <AT_QISTATE+0x204>)
 8018360:	2200      	movs	r2, #0
 8018362:	701a      	strb	r2, [r3, #0]
			return CONNECT_OK;
 8018364:	230b      	movs	r3, #11
 8018366:	e027      	b.n	80183b8 <AT_QISTATE+0x1f8>
		}
		if(strstr(modem_rx_buffer, "PDP DEACT\r\n") != NULL )
 8018368:	4927      	ldr	r1, [pc, #156]	; (8018408 <AT_QISTATE+0x248>)
 801836a:	481d      	ldr	r0, [pc, #116]	; (80183e0 <AT_QISTATE+0x220>)
 801836c:	f002 f99e 	bl	801a6ac <strstr>
 8018370:	4603      	mov	r3, r0
 8018372:	2b00      	cmp	r3, #0
 8018374:	d009      	beq.n	801838a <AT_QISTATE+0x1ca>
		{
			osTimerStop(AT_TimerHandle);
 8018376:	4b18      	ldr	r3, [pc, #96]	; (80183d8 <AT_QISTATE+0x218>)
 8018378:	681b      	ldr	r3, [r3, #0]
 801837a:	4618      	mov	r0, r3
 801837c:	f7f0 fa7a 	bl	8008874 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 8018380:	4b10      	ldr	r3, [pc, #64]	; (80183c4 <AT_QISTATE+0x204>)
 8018382:	2200      	movs	r2, #0
 8018384:	701a      	strb	r2, [r3, #0]
			return PDP_DEACT;
 8018386:	230c      	movs	r3, #12
 8018388:	e016      	b.n	80183b8 <AT_QISTATE+0x1f8>
		}
		if(strstr(modem_rx_buffer, "ERROR\r\n") != NULL )
 801838a:	4920      	ldr	r1, [pc, #128]	; (801840c <AT_QISTATE+0x24c>)
 801838c:	4814      	ldr	r0, [pc, #80]	; (80183e0 <AT_QISTATE+0x220>)
 801838e:	f002 f98d 	bl	801a6ac <strstr>
 8018392:	4603      	mov	r3, r0
 8018394:	2b00      	cmp	r3, #0
 8018396:	d009      	beq.n	80183ac <AT_QISTATE+0x1ec>
		{
			osTimerStop(AT_TimerHandle);
 8018398:	4b0f      	ldr	r3, [pc, #60]	; (80183d8 <AT_QISTATE+0x218>)
 801839a:	681b      	ldr	r3, [r3, #0]
 801839c:	4618      	mov	r0, r3
 801839e:	f7f0 fa69 	bl	8008874 <osTimerStop>
			read_rx_state = NOT_ACTIVE;
 80183a2:	4b08      	ldr	r3, [pc, #32]	; (80183c4 <AT_QISTATE+0x204>)
 80183a4:	2200      	movs	r2, #0
 80183a6:	701a      	strb	r2, [r3, #0]
			return AT_ERROR;
 80183a8:	2301      	movs	r3, #1
 80183aa:	e005      	b.n	80183b8 <AT_QISTATE+0x1f8>
	while(read_rx_state == ACTIVE)
 80183ac:	4b05      	ldr	r3, [pc, #20]	; (80183c4 <AT_QISTATE+0x204>)
 80183ae:	781b      	ldrb	r3, [r3, #0]
 80183b0:	2b01      	cmp	r3, #1
 80183b2:	f43f af2f 	beq.w	8018214 <AT_QISTATE+0x54>
		}

	}
	return AT_ERROR;
 80183b6:	2301      	movs	r3, #1
}
 80183b8:	4618      	mov	r0, r3
 80183ba:	3710      	adds	r7, #16
 80183bc:	46bd      	mov	sp, r7
 80183be:	bd80      	pop	{r7, pc}
 80183c0:	0801c084 	.word	0x0801c084
 80183c4:	20009a50 	.word	0x20009a50
 80183c8:	20000864 	.word	0x20000864
 80183cc:	20009afc 	.word	0x20009afc
 80183d0:	2000823c 	.word	0x2000823c
 80183d4:	20009d9c 	.word	0x20009d9c
 80183d8:	200096f0 	.word	0x200096f0
 80183dc:	0801c090 	.word	0x0801c090
 80183e0:	20009c00 	.word	0x20009c00
 80183e4:	0801c0a0 	.word	0x0801c0a0
 80183e8:	0801c0ac 	.word	0x0801c0ac
 80183ec:	0801c0b8 	.word	0x0801c0b8
 80183f0:	0801c0c4 	.word	0x0801c0c4
 80183f4:	0801c0d4 	.word	0x0801c0d4
 80183f8:	0801c0e0 	.word	0x0801c0e0
 80183fc:	0801c0f4 	.word	0x0801c0f4
 8018400:	0801c108 	.word	0x0801c108
 8018404:	0801bfb8 	.word	0x0801bfb8
 8018408:	0801c114 	.word	0x0801c114
 801840c:	0801c028 	.word	0x0801c028

08018410 <read_status_registers>:
status_register_struct status_registers;
control_register_struct control_registers;

//----функция чтения из памяти регистров статуса--------------------------
void read_status_registers(void)
{
 8018410:	b580      	push	{r7, lr}
 8018412:	b082      	sub	sp, #8
 8018414:	af00      	add	r7, sp, #0
	uint8_t status_reg_temp_h;
	uint8_t status_reg_temp_l;

	osMutexWait(Fm25v02MutexHandle, osWaitForever);
 8018416:	4bbc      	ldr	r3, [pc, #752]	; (8018708 <read_status_registers+0x2f8>)
 8018418:	681b      	ldr	r3, [r3, #0]
 801841a:	f04f 31ff 	mov.w	r1, #4294967295
 801841e:	4618      	mov	r0, r3
 8018420:	f7f0 fa7c 	bl	800891c <osMutexWait>

	fm25v02_read(2*VERSION_REG, &status_reg_temp_h);
 8018424:	1dfb      	adds	r3, r7, #7
 8018426:	4619      	mov	r1, r3
 8018428:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 801842c:	f7fe fbfe 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*VERSION_REG+1, &status_reg_temp_l);
 8018430:	1dbb      	adds	r3, r7, #6
 8018432:	4619      	mov	r1, r3
 8018434:	f242 0001 	movw	r0, #8193	; 0x2001
 8018438:	f7fe fbf8 	bl	8016c2c <fm25v02_read>
	status_registers.version_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 801843c:	79fb      	ldrb	r3, [r7, #7]
 801843e:	021b      	lsls	r3, r3, #8
 8018440:	b21a      	sxth	r2, r3
 8018442:	79bb      	ldrb	r3, [r7, #6]
 8018444:	b21b      	sxth	r3, r3
 8018446:	4313      	orrs	r3, r2
 8018448:	b21b      	sxth	r3, r3
 801844a:	b29a      	uxth	r2, r3
 801844c:	4baf      	ldr	r3, [pc, #700]	; (801870c <read_status_registers+0x2fc>)
 801844e:	801a      	strh	r2, [r3, #0]

	fm25v02_read(2*SECURITY_STATUS_REG, &status_reg_temp_h);
 8018450:	1dfb      	adds	r3, r7, #7
 8018452:	4619      	mov	r1, r3
 8018454:	f242 0002 	movw	r0, #8194	; 0x2002
 8018458:	f7fe fbe8 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*SECURITY_STATUS_REG+1, &status_reg_temp_l);
 801845c:	1dbb      	adds	r3, r7, #6
 801845e:	4619      	mov	r1, r3
 8018460:	f242 0003 	movw	r0, #8195	; 0x2003
 8018464:	f7fe fbe2 	bl	8016c2c <fm25v02_read>
	status_registers.security_status_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018468:	79fb      	ldrb	r3, [r7, #7]
 801846a:	021b      	lsls	r3, r3, #8
 801846c:	b21a      	sxth	r2, r3
 801846e:	79bb      	ldrb	r3, [r7, #6]
 8018470:	b21b      	sxth	r3, r3
 8018472:	4313      	orrs	r3, r2
 8018474:	b21b      	sxth	r3, r3
 8018476:	b29a      	uxth	r2, r3
 8018478:	4ba4      	ldr	r3, [pc, #656]	; (801870c <read_status_registers+0x2fc>)
 801847a:	805a      	strh	r2, [r3, #2]

	fm25v02_read(2*STATUS_LOOP_REG, &status_reg_temp_h);
 801847c:	1dfb      	adds	r3, r7, #7
 801847e:	4619      	mov	r1, r3
 8018480:	f242 0004 	movw	r0, #8196	; 0x2004
 8018484:	f7fe fbd2 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*STATUS_LOOP_REG+1, &status_reg_temp_l);
 8018488:	1dbb      	adds	r3, r7, #6
 801848a:	4619      	mov	r1, r3
 801848c:	f242 0005 	movw	r0, #8197	; 0x2005
 8018490:	f7fe fbcc 	bl	8016c2c <fm25v02_read>
	status_registers.status_loop_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018494:	79fb      	ldrb	r3, [r7, #7]
 8018496:	021b      	lsls	r3, r3, #8
 8018498:	b21a      	sxth	r2, r3
 801849a:	79bb      	ldrb	r3, [r7, #6]
 801849c:	b21b      	sxth	r3, r3
 801849e:	4313      	orrs	r3, r2
 80184a0:	b21b      	sxth	r3, r3
 80184a2:	b29a      	uxth	r2, r3
 80184a4:	4b99      	ldr	r3, [pc, #612]	; (801870c <read_status_registers+0x2fc>)
 80184a6:	809a      	strh	r2, [r3, #4]

	fm25v02_read(2*ERROR_LOOP_REG, &status_reg_temp_h);
 80184a8:	1dfb      	adds	r3, r7, #7
 80184aa:	4619      	mov	r1, r3
 80184ac:	f242 0006 	movw	r0, #8198	; 0x2006
 80184b0:	f7fe fbbc 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*ERROR_LOOP_REG+1, &status_reg_temp_l);
 80184b4:	1dbb      	adds	r3, r7, #6
 80184b6:	4619      	mov	r1, r3
 80184b8:	f242 0007 	movw	r0, #8199	; 0x2007
 80184bc:	f7fe fbb6 	bl	8016c2c <fm25v02_read>
	status_registers.error_loop_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80184c0:	79fb      	ldrb	r3, [r7, #7]
 80184c2:	021b      	lsls	r3, r3, #8
 80184c4:	b21a      	sxth	r2, r3
 80184c6:	79bb      	ldrb	r3, [r7, #6]
 80184c8:	b21b      	sxth	r3, r3
 80184ca:	4313      	orrs	r3, r2
 80184cc:	b21b      	sxth	r3, r3
 80184ce:	b29a      	uxth	r2, r3
 80184d0:	4b8e      	ldr	r3, [pc, #568]	; (801870c <read_status_registers+0x2fc>)
 80184d2:	80da      	strh	r2, [r3, #6]

	fm25v02_read(2*ALARM_LOOP_REG, &status_reg_temp_h);
 80184d4:	1dfb      	adds	r3, r7, #7
 80184d6:	4619      	mov	r1, r3
 80184d8:	f242 0008 	movw	r0, #8200	; 0x2008
 80184dc:	f7fe fba6 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*ALARM_LOOP_REG+1, &status_reg_temp_l);
 80184e0:	1dbb      	adds	r3, r7, #6
 80184e2:	4619      	mov	r1, r3
 80184e4:	f242 0009 	movw	r0, #8201	; 0x2009
 80184e8:	f7fe fba0 	bl	8016c2c <fm25v02_read>
	status_registers.alarm_loop_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80184ec:	79fb      	ldrb	r3, [r7, #7]
 80184ee:	021b      	lsls	r3, r3, #8
 80184f0:	b21a      	sxth	r2, r3
 80184f2:	79bb      	ldrb	r3, [r7, #6]
 80184f4:	b21b      	sxth	r3, r3
 80184f6:	4313      	orrs	r3, r2
 80184f8:	b21b      	sxth	r3, r3
 80184fa:	b29a      	uxth	r2, r3
 80184fc:	4b83      	ldr	r3, [pc, #524]	; (801870c <read_status_registers+0x2fc>)
 80184fe:	811a      	strh	r2, [r3, #8]

	fm25v02_read(2*TIME_CURRENT_YEAR_REG, &status_reg_temp_h);
 8018500:	1dfb      	adds	r3, r7, #7
 8018502:	4619      	mov	r1, r3
 8018504:	f242 000a 	movw	r0, #8202	; 0x200a
 8018508:	f7fe fb90 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*TIME_CURRENT_YEAR_REG+1, &status_reg_temp_l);
 801850c:	1dbb      	adds	r3, r7, #6
 801850e:	4619      	mov	r1, r3
 8018510:	f242 000b 	movw	r0, #8203	; 0x200b
 8018514:	f7fe fb8a 	bl	8016c2c <fm25v02_read>
	status_registers.time_current_year_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018518:	79fb      	ldrb	r3, [r7, #7]
 801851a:	021b      	lsls	r3, r3, #8
 801851c:	b21a      	sxth	r2, r3
 801851e:	79bb      	ldrb	r3, [r7, #6]
 8018520:	b21b      	sxth	r3, r3
 8018522:	4313      	orrs	r3, r2
 8018524:	b21b      	sxth	r3, r3
 8018526:	b29a      	uxth	r2, r3
 8018528:	4b78      	ldr	r3, [pc, #480]	; (801870c <read_status_registers+0x2fc>)
 801852a:	815a      	strh	r2, [r3, #10]

	fm25v02_read(2*TIME_CURRENT_MONTH_REG, &status_reg_temp_h);
 801852c:	1dfb      	adds	r3, r7, #7
 801852e:	4619      	mov	r1, r3
 8018530:	f242 000c 	movw	r0, #8204	; 0x200c
 8018534:	f7fe fb7a 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*TIME_CURRENT_MONTH_REG+1, &status_reg_temp_l);
 8018538:	1dbb      	adds	r3, r7, #6
 801853a:	4619      	mov	r1, r3
 801853c:	f242 000d 	movw	r0, #8205	; 0x200d
 8018540:	f7fe fb74 	bl	8016c2c <fm25v02_read>
	status_registers.time_current_month_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018544:	79fb      	ldrb	r3, [r7, #7]
 8018546:	021b      	lsls	r3, r3, #8
 8018548:	b21a      	sxth	r2, r3
 801854a:	79bb      	ldrb	r3, [r7, #6]
 801854c:	b21b      	sxth	r3, r3
 801854e:	4313      	orrs	r3, r2
 8018550:	b21b      	sxth	r3, r3
 8018552:	b29a      	uxth	r2, r3
 8018554:	4b6d      	ldr	r3, [pc, #436]	; (801870c <read_status_registers+0x2fc>)
 8018556:	819a      	strh	r2, [r3, #12]

	fm25v02_read(2*TIME_CURRENT_DAY_REG, &status_reg_temp_h);
 8018558:	1dfb      	adds	r3, r7, #7
 801855a:	4619      	mov	r1, r3
 801855c:	f242 000e 	movw	r0, #8206	; 0x200e
 8018560:	f7fe fb64 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*TIME_CURRENT_DAY_REG+1, &status_reg_temp_l);
 8018564:	1dbb      	adds	r3, r7, #6
 8018566:	4619      	mov	r1, r3
 8018568:	f242 000f 	movw	r0, #8207	; 0x200f
 801856c:	f7fe fb5e 	bl	8016c2c <fm25v02_read>
	status_registers.time_current_day_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018570:	79fb      	ldrb	r3, [r7, #7]
 8018572:	021b      	lsls	r3, r3, #8
 8018574:	b21a      	sxth	r2, r3
 8018576:	79bb      	ldrb	r3, [r7, #6]
 8018578:	b21b      	sxth	r3, r3
 801857a:	4313      	orrs	r3, r2
 801857c:	b21b      	sxth	r3, r3
 801857e:	b29a      	uxth	r2, r3
 8018580:	4b62      	ldr	r3, [pc, #392]	; (801870c <read_status_registers+0x2fc>)
 8018582:	81da      	strh	r2, [r3, #14]

	fm25v02_read(2*TIME_CURRENT_HOUR_REG, &status_reg_temp_h);
 8018584:	1dfb      	adds	r3, r7, #7
 8018586:	4619      	mov	r1, r3
 8018588:	f242 0010 	movw	r0, #8208	; 0x2010
 801858c:	f7fe fb4e 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*TIME_CURRENT_HOUR_REG+1, &status_reg_temp_l);
 8018590:	1dbb      	adds	r3, r7, #6
 8018592:	4619      	mov	r1, r3
 8018594:	f242 0011 	movw	r0, #8209	; 0x2011
 8018598:	f7fe fb48 	bl	8016c2c <fm25v02_read>
	status_registers.time_current_hour_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 801859c:	79fb      	ldrb	r3, [r7, #7]
 801859e:	021b      	lsls	r3, r3, #8
 80185a0:	b21a      	sxth	r2, r3
 80185a2:	79bb      	ldrb	r3, [r7, #6]
 80185a4:	b21b      	sxth	r3, r3
 80185a6:	4313      	orrs	r3, r2
 80185a8:	b21b      	sxth	r3, r3
 80185aa:	b29a      	uxth	r2, r3
 80185ac:	4b57      	ldr	r3, [pc, #348]	; (801870c <read_status_registers+0x2fc>)
 80185ae:	821a      	strh	r2, [r3, #16]

	fm25v02_read(2*TIME_CURRENT_MINUTE_REG, &status_reg_temp_h);
 80185b0:	1dfb      	adds	r3, r7, #7
 80185b2:	4619      	mov	r1, r3
 80185b4:	f242 0012 	movw	r0, #8210	; 0x2012
 80185b8:	f7fe fb38 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*TIME_CURRENT_MINUTE_REG+1, &status_reg_temp_l);
 80185bc:	1dbb      	adds	r3, r7, #6
 80185be:	4619      	mov	r1, r3
 80185c0:	f242 0013 	movw	r0, #8211	; 0x2013
 80185c4:	f7fe fb32 	bl	8016c2c <fm25v02_read>
	status_registers.time_current_minute_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80185c8:	79fb      	ldrb	r3, [r7, #7]
 80185ca:	021b      	lsls	r3, r3, #8
 80185cc:	b21a      	sxth	r2, r3
 80185ce:	79bb      	ldrb	r3, [r7, #6]
 80185d0:	b21b      	sxth	r3, r3
 80185d2:	4313      	orrs	r3, r2
 80185d4:	b21b      	sxth	r3, r3
 80185d6:	b29a      	uxth	r2, r3
 80185d8:	4b4c      	ldr	r3, [pc, #304]	; (801870c <read_status_registers+0x2fc>)
 80185da:	825a      	strh	r2, [r3, #18]

	fm25v02_read(2*TIME_CURRENT_SECOND_REG, &status_reg_temp_h);
 80185dc:	1dfb      	adds	r3, r7, #7
 80185de:	4619      	mov	r1, r3
 80185e0:	f242 0014 	movw	r0, #8212	; 0x2014
 80185e4:	f7fe fb22 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*TIME_CURRENT_SECOND_REG+1, &status_reg_temp_l);
 80185e8:	1dbb      	adds	r3, r7, #6
 80185ea:	4619      	mov	r1, r3
 80185ec:	f242 0015 	movw	r0, #8213	; 0x2015
 80185f0:	f7fe fb1c 	bl	8016c2c <fm25v02_read>
	status_registers.time_current_second_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80185f4:	79fb      	ldrb	r3, [r7, #7]
 80185f6:	021b      	lsls	r3, r3, #8
 80185f8:	b21a      	sxth	r2, r3
 80185fa:	79bb      	ldrb	r3, [r7, #6]
 80185fc:	b21b      	sxth	r3, r3
 80185fe:	4313      	orrs	r3, r2
 8018600:	b21b      	sxth	r3, r3
 8018602:	b29a      	uxth	r2, r3
 8018604:	4b41      	ldr	r3, [pc, #260]	; (801870c <read_status_registers+0x2fc>)
 8018606:	829a      	strh	r2, [r3, #20]

	fm25v02_read(2*TIME_CURRENT_WEEKDAY_REG, &status_reg_temp_h);
 8018608:	1dfb      	adds	r3, r7, #7
 801860a:	4619      	mov	r1, r3
 801860c:	f242 0016 	movw	r0, #8214	; 0x2016
 8018610:	f7fe fb0c 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*TIME_CURRENT_WEEKDAY_REG+1, &status_reg_temp_l);
 8018614:	1dbb      	adds	r3, r7, #6
 8018616:	4619      	mov	r1, r3
 8018618:	f242 0017 	movw	r0, #8215	; 0x2017
 801861c:	f7fe fb06 	bl	8016c2c <fm25v02_read>
	status_registers.time_current_weekday_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018620:	79fb      	ldrb	r3, [r7, #7]
 8018622:	021b      	lsls	r3, r3, #8
 8018624:	b21a      	sxth	r2, r3
 8018626:	79bb      	ldrb	r3, [r7, #6]
 8018628:	b21b      	sxth	r3, r3
 801862a:	4313      	orrs	r3, r2
 801862c:	b21b      	sxth	r3, r3
 801862e:	b29a      	uxth	r2, r3
 8018630:	4b36      	ldr	r3, [pc, #216]	; (801870c <read_status_registers+0x2fc>)
 8018632:	82da      	strh	r2, [r3, #22]

	fm25v02_read(2*ADDRESS_PROCESSED_EVENT_H_REG, &status_reg_temp_h);
 8018634:	1dfb      	adds	r3, r7, #7
 8018636:	4619      	mov	r1, r3
 8018638:	f242 0018 	movw	r0, #8216	; 0x2018
 801863c:	f7fe faf6 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*ADDRESS_PROCESSED_EVENT_H_REG+1, &status_reg_temp_l);
 8018640:	1dbb      	adds	r3, r7, #6
 8018642:	4619      	mov	r1, r3
 8018644:	f242 0019 	movw	r0, #8217	; 0x2019
 8018648:	f7fe faf0 	bl	8016c2c <fm25v02_read>
	status_registers.address_processed_event_h_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 801864c:	79fb      	ldrb	r3, [r7, #7]
 801864e:	021b      	lsls	r3, r3, #8
 8018650:	b21a      	sxth	r2, r3
 8018652:	79bb      	ldrb	r3, [r7, #6]
 8018654:	b21b      	sxth	r3, r3
 8018656:	4313      	orrs	r3, r2
 8018658:	b21b      	sxth	r3, r3
 801865a:	b29a      	uxth	r2, r3
 801865c:	4b2b      	ldr	r3, [pc, #172]	; (801870c <read_status_registers+0x2fc>)
 801865e:	831a      	strh	r2, [r3, #24]

	fm25v02_read(2*ADDRESS_PROCESSED_EVENT_L_REG, &status_reg_temp_h);
 8018660:	1dfb      	adds	r3, r7, #7
 8018662:	4619      	mov	r1, r3
 8018664:	f242 001a 	movw	r0, #8218	; 0x201a
 8018668:	f7fe fae0 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*ADDRESS_PROCESSED_EVENT_L_REG+1, &status_reg_temp_l);
 801866c:	1dbb      	adds	r3, r7, #6
 801866e:	4619      	mov	r1, r3
 8018670:	f242 001b 	movw	r0, #8219	; 0x201b
 8018674:	f7fe fada 	bl	8016c2c <fm25v02_read>
	status_registers.address_processed_event_l_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018678:	79fb      	ldrb	r3, [r7, #7]
 801867a:	021b      	lsls	r3, r3, #8
 801867c:	b21a      	sxth	r2, r3
 801867e:	79bb      	ldrb	r3, [r7, #6]
 8018680:	b21b      	sxth	r3, r3
 8018682:	4313      	orrs	r3, r2
 8018684:	b21b      	sxth	r3, r3
 8018686:	b29a      	uxth	r2, r3
 8018688:	4b20      	ldr	r3, [pc, #128]	; (801870c <read_status_registers+0x2fc>)
 801868a:	835a      	strh	r2, [r3, #26]

	fm25v02_read(2*ADDRESS_LAST_EVENT_H_REG, &status_reg_temp_h);
 801868c:	1dfb      	adds	r3, r7, #7
 801868e:	4619      	mov	r1, r3
 8018690:	f242 001c 	movw	r0, #8220	; 0x201c
 8018694:	f7fe faca 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*ADDRESS_LAST_EVENT_H_REG+1, &status_reg_temp_l);
 8018698:	1dbb      	adds	r3, r7, #6
 801869a:	4619      	mov	r1, r3
 801869c:	f242 001d 	movw	r0, #8221	; 0x201d
 80186a0:	f7fe fac4 	bl	8016c2c <fm25v02_read>
	status_registers.address_last_event_h_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80186a4:	79fb      	ldrb	r3, [r7, #7]
 80186a6:	021b      	lsls	r3, r3, #8
 80186a8:	b21a      	sxth	r2, r3
 80186aa:	79bb      	ldrb	r3, [r7, #6]
 80186ac:	b21b      	sxth	r3, r3
 80186ae:	4313      	orrs	r3, r2
 80186b0:	b21b      	sxth	r3, r3
 80186b2:	b29a      	uxth	r2, r3
 80186b4:	4b15      	ldr	r3, [pc, #84]	; (801870c <read_status_registers+0x2fc>)
 80186b6:	839a      	strh	r2, [r3, #28]

	fm25v02_read(2*ADDRESS_LAST_EVENT_L_REG, &status_reg_temp_h);
 80186b8:	1dfb      	adds	r3, r7, #7
 80186ba:	4619      	mov	r1, r3
 80186bc:	f242 001e 	movw	r0, #8222	; 0x201e
 80186c0:	f7fe fab4 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*ADDRESS_LAST_EVENT_L_REG+1, &status_reg_temp_l);
 80186c4:	1dbb      	adds	r3, r7, #6
 80186c6:	4619      	mov	r1, r3
 80186c8:	f242 001f 	movw	r0, #8223	; 0x201f
 80186cc:	f7fe faae 	bl	8016c2c <fm25v02_read>
	status_registers.address_last_event_l_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80186d0:	79fb      	ldrb	r3, [r7, #7]
 80186d2:	021b      	lsls	r3, r3, #8
 80186d4:	b21a      	sxth	r2, r3
 80186d6:	79bb      	ldrb	r3, [r7, #6]
 80186d8:	b21b      	sxth	r3, r3
 80186da:	4313      	orrs	r3, r2
 80186dc:	b21b      	sxth	r3, r3
 80186de:	b29a      	uxth	r2, r3
 80186e0:	4b0a      	ldr	r3, [pc, #40]	; (801870c <read_status_registers+0x2fc>)
 80186e2:	83da      	strh	r2, [r3, #30]

	fm25v02_read(2*SYSTEM_STATUS_REG, &status_reg_temp_h);
 80186e4:	1dfb      	adds	r3, r7, #7
 80186e6:	4619      	mov	r1, r3
 80186e8:	f242 0020 	movw	r0, #8224	; 0x2020
 80186ec:	f7fe fa9e 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*SYSTEM_STATUS_REG+1, &status_reg_temp_l);
 80186f0:	1dbb      	adds	r3, r7, #6
 80186f2:	4619      	mov	r1, r3
 80186f4:	f242 0021 	movw	r0, #8225	; 0x2021
 80186f8:	f7fe fa98 	bl	8016c2c <fm25v02_read>
	status_registers.system_status_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80186fc:	79fb      	ldrb	r3, [r7, #7]
 80186fe:	021b      	lsls	r3, r3, #8
 8018700:	b21a      	sxth	r2, r3
 8018702:	79bb      	ldrb	r3, [r7, #6]
 8018704:	e004      	b.n	8018710 <read_status_registers+0x300>
 8018706:	bf00      	nop
 8018708:	20009af8 	.word	0x20009af8
 801870c:	2000a174 	.word	0x2000a174
 8018710:	b21b      	sxth	r3, r3
 8018712:	4313      	orrs	r3, r2
 8018714:	b21b      	sxth	r3, r3
 8018716:	b29a      	uxth	r2, r3
 8018718:	4bbc      	ldr	r3, [pc, #752]	; (8018a0c <read_status_registers+0x5fc>)
 801871a:	841a      	strh	r2, [r3, #32]

	fm25v02_read(2*POWER_ON_REG, &status_reg_temp_h);
 801871c:	1dfb      	adds	r3, r7, #7
 801871e:	4619      	mov	r1, r3
 8018720:	f242 0022 	movw	r0, #8226	; 0x2022
 8018724:	f7fe fa82 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*POWER_ON_REG+1, &status_reg_temp_l);
 8018728:	1dbb      	adds	r3, r7, #6
 801872a:	4619      	mov	r1, r3
 801872c:	f242 0023 	movw	r0, #8227	; 0x2023
 8018730:	f7fe fa7c 	bl	8016c2c <fm25v02_read>
	status_registers.power_on_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018734:	79fb      	ldrb	r3, [r7, #7]
 8018736:	021b      	lsls	r3, r3, #8
 8018738:	b21a      	sxth	r2, r3
 801873a:	79bb      	ldrb	r3, [r7, #6]
 801873c:	b21b      	sxth	r3, r3
 801873e:	4313      	orrs	r3, r2
 8018740:	b21b      	sxth	r3, r3
 8018742:	b29a      	uxth	r2, r3
 8018744:	4bb1      	ldr	r3, [pc, #708]	; (8018a0c <read_status_registers+0x5fc>)
 8018746:	845a      	strh	r2, [r3, #34]	; 0x22

	fm25v02_read(2*ERROR_RTC_REG, &status_reg_temp_h);
 8018748:	1dfb      	adds	r3, r7, #7
 801874a:	4619      	mov	r1, r3
 801874c:	f242 0024 	movw	r0, #8228	; 0x2024
 8018750:	f7fe fa6c 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*ERROR_RTC_REG+1, &status_reg_temp_l);
 8018754:	1dbb      	adds	r3, r7, #6
 8018756:	4619      	mov	r1, r3
 8018758:	f242 0025 	movw	r0, #8229	; 0x2025
 801875c:	f7fe fa66 	bl	8016c2c <fm25v02_read>
	status_registers.error_rtc_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018760:	79fb      	ldrb	r3, [r7, #7]
 8018762:	021b      	lsls	r3, r3, #8
 8018764:	b21a      	sxth	r2, r3
 8018766:	79bb      	ldrb	r3, [r7, #6]
 8018768:	b21b      	sxth	r3, r3
 801876a:	4313      	orrs	r3, r2
 801876c:	b21b      	sxth	r3, r3
 801876e:	b29a      	uxth	r2, r3
 8018770:	4ba6      	ldr	r3, [pc, #664]	; (8018a0c <read_status_registers+0x5fc>)
 8018772:	849a      	strh	r2, [r3, #36]	; 0x24

	fm25v02_read(2*POWER_ON_LIGHTING_REG, &status_reg_temp_h);
 8018774:	1dfb      	adds	r3, r7, #7
 8018776:	4619      	mov	r1, r3
 8018778:	f242 0026 	movw	r0, #8230	; 0x2026
 801877c:	f7fe fa56 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*POWER_ON_LIGHTING_REG+1, &status_reg_temp_l);
 8018780:	1dbb      	adds	r3, r7, #6
 8018782:	4619      	mov	r1, r3
 8018784:	f242 0027 	movw	r0, #8231	; 0x2027
 8018788:	f7fe fa50 	bl	8016c2c <fm25v02_read>
	status_registers.power_on_lighting_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 801878c:	79fb      	ldrb	r3, [r7, #7]
 801878e:	021b      	lsls	r3, r3, #8
 8018790:	b21a      	sxth	r2, r3
 8018792:	79bb      	ldrb	r3, [r7, #6]
 8018794:	b21b      	sxth	r3, r3
 8018796:	4313      	orrs	r3, r2
 8018798:	b21b      	sxth	r3, r3
 801879a:	b29a      	uxth	r2, r3
 801879c:	4b9b      	ldr	r3, [pc, #620]	; (8018a0c <read_status_registers+0x5fc>)
 801879e:	84da      	strh	r2, [r3, #38]	; 0x26

	fm25v02_read(2*IBUTTON_COMPLETE_0_REG, &status_reg_temp_h);
 80187a0:	1dfb      	adds	r3, r7, #7
 80187a2:	4619      	mov	r1, r3
 80187a4:	f242 002a 	movw	r0, #8234	; 0x202a
 80187a8:	f7fe fa40 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*IBUTTON_COMPLETE_0_REG+1, &status_reg_temp_l);
 80187ac:	1dbb      	adds	r3, r7, #6
 80187ae:	4619      	mov	r1, r3
 80187b0:	f242 002b 	movw	r0, #8235	; 0x202b
 80187b4:	f7fe fa3a 	bl	8016c2c <fm25v02_read>
	status_registers.ibutton_complite_0_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80187b8:	79fb      	ldrb	r3, [r7, #7]
 80187ba:	021b      	lsls	r3, r3, #8
 80187bc:	b21a      	sxth	r2, r3
 80187be:	79bb      	ldrb	r3, [r7, #6]
 80187c0:	b21b      	sxth	r3, r3
 80187c2:	4313      	orrs	r3, r2
 80187c4:	b21b      	sxth	r3, r3
 80187c6:	b29a      	uxth	r2, r3
 80187c8:	4b90      	ldr	r3, [pc, #576]	; (8018a0c <read_status_registers+0x5fc>)
 80187ca:	855a      	strh	r2, [r3, #42]	; 0x2a

	fm25v02_read(2*IBUTTON_COMPLETE_1_REG, &status_reg_temp_h);
 80187cc:	1dfb      	adds	r3, r7, #7
 80187ce:	4619      	mov	r1, r3
 80187d0:	f242 002c 	movw	r0, #8236	; 0x202c
 80187d4:	f7fe fa2a 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*IBUTTON_COMPLETE_1_REG+1, &status_reg_temp_l);
 80187d8:	1dbb      	adds	r3, r7, #6
 80187da:	4619      	mov	r1, r3
 80187dc:	f242 002d 	movw	r0, #8237	; 0x202d
 80187e0:	f7fe fa24 	bl	8016c2c <fm25v02_read>
	status_registers.ibutton_complite_1_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80187e4:	79fb      	ldrb	r3, [r7, #7]
 80187e6:	021b      	lsls	r3, r3, #8
 80187e8:	b21a      	sxth	r2, r3
 80187ea:	79bb      	ldrb	r3, [r7, #6]
 80187ec:	b21b      	sxth	r3, r3
 80187ee:	4313      	orrs	r3, r2
 80187f0:	b21b      	sxth	r3, r3
 80187f2:	b29a      	uxth	r2, r3
 80187f4:	4b85      	ldr	r3, [pc, #532]	; (8018a0c <read_status_registers+0x5fc>)
 80187f6:	859a      	strh	r2, [r3, #44]	; 0x2c

	fm25v02_read(2*IBUTTON_COMPLETE_2_REG, &status_reg_temp_h);
 80187f8:	1dfb      	adds	r3, r7, #7
 80187fa:	4619      	mov	r1, r3
 80187fc:	f242 002e 	movw	r0, #8238	; 0x202e
 8018800:	f7fe fa14 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*IBUTTON_COMPLETE_2_REG+1, &status_reg_temp_l);
 8018804:	1dbb      	adds	r3, r7, #6
 8018806:	4619      	mov	r1, r3
 8018808:	f242 002f 	movw	r0, #8239	; 0x202f
 801880c:	f7fe fa0e 	bl	8016c2c <fm25v02_read>
	status_registers.ibutton_complite_2_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018810:	79fb      	ldrb	r3, [r7, #7]
 8018812:	021b      	lsls	r3, r3, #8
 8018814:	b21a      	sxth	r2, r3
 8018816:	79bb      	ldrb	r3, [r7, #6]
 8018818:	b21b      	sxth	r3, r3
 801881a:	4313      	orrs	r3, r2
 801881c:	b21b      	sxth	r3, r3
 801881e:	b29a      	uxth	r2, r3
 8018820:	4b7a      	ldr	r3, [pc, #488]	; (8018a0c <read_status_registers+0x5fc>)
 8018822:	85da      	strh	r2, [r3, #46]	; 0x2e

	fm25v02_read(2*IBUTTON_COMPLETE_3_REG, &status_reg_temp_h);
 8018824:	1dfb      	adds	r3, r7, #7
 8018826:	4619      	mov	r1, r3
 8018828:	f242 0030 	movw	r0, #8240	; 0x2030
 801882c:	f7fe f9fe 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*IBUTTON_COMPLETE_3_REG+1, &status_reg_temp_l);
 8018830:	1dbb      	adds	r3, r7, #6
 8018832:	4619      	mov	r1, r3
 8018834:	f242 0031 	movw	r0, #8241	; 0x2031
 8018838:	f7fe f9f8 	bl	8016c2c <fm25v02_read>
	status_registers.ibutton_complite_3_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 801883c:	79fb      	ldrb	r3, [r7, #7]
 801883e:	021b      	lsls	r3, r3, #8
 8018840:	b21a      	sxth	r2, r3
 8018842:	79bb      	ldrb	r3, [r7, #6]
 8018844:	b21b      	sxth	r3, r3
 8018846:	4313      	orrs	r3, r2
 8018848:	b21b      	sxth	r3, r3
 801884a:	b29a      	uxth	r2, r3
 801884c:	4b6f      	ldr	r3, [pc, #444]	; (8018a0c <read_status_registers+0x5fc>)
 801884e:	861a      	strh	r2, [r3, #48]	; 0x30

	fm25v02_read(2*IBUTTON_COMPLETE_4_REG, &status_reg_temp_h);
 8018850:	1dfb      	adds	r3, r7, #7
 8018852:	4619      	mov	r1, r3
 8018854:	f242 0032 	movw	r0, #8242	; 0x2032
 8018858:	f7fe f9e8 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*IBUTTON_COMPLETE_4_REG+1, &status_reg_temp_l);
 801885c:	1dbb      	adds	r3, r7, #6
 801885e:	4619      	mov	r1, r3
 8018860:	f242 0033 	movw	r0, #8243	; 0x2033
 8018864:	f7fe f9e2 	bl	8016c2c <fm25v02_read>
	status_registers.ibutton_complite_4_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018868:	79fb      	ldrb	r3, [r7, #7]
 801886a:	021b      	lsls	r3, r3, #8
 801886c:	b21a      	sxth	r2, r3
 801886e:	79bb      	ldrb	r3, [r7, #6]
 8018870:	b21b      	sxth	r3, r3
 8018872:	4313      	orrs	r3, r2
 8018874:	b21b      	sxth	r3, r3
 8018876:	b29a      	uxth	r2, r3
 8018878:	4b64      	ldr	r3, [pc, #400]	; (8018a0c <read_status_registers+0x5fc>)
 801887a:	865a      	strh	r2, [r3, #50]	; 0x32

	fm25v02_read(2*IBUTTON_COMPLETE_5_REG, &status_reg_temp_h);
 801887c:	1dfb      	adds	r3, r7, #7
 801887e:	4619      	mov	r1, r3
 8018880:	f242 0034 	movw	r0, #8244	; 0x2034
 8018884:	f7fe f9d2 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*IBUTTON_COMPLETE_5_REG+1, &status_reg_temp_l);
 8018888:	1dbb      	adds	r3, r7, #6
 801888a:	4619      	mov	r1, r3
 801888c:	f242 0035 	movw	r0, #8245	; 0x2035
 8018890:	f7fe f9cc 	bl	8016c2c <fm25v02_read>
	status_registers.ibutton_complite_5_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018894:	79fb      	ldrb	r3, [r7, #7]
 8018896:	021b      	lsls	r3, r3, #8
 8018898:	b21a      	sxth	r2, r3
 801889a:	79bb      	ldrb	r3, [r7, #6]
 801889c:	b21b      	sxth	r3, r3
 801889e:	4313      	orrs	r3, r2
 80188a0:	b21b      	sxth	r3, r3
 80188a2:	b29a      	uxth	r2, r3
 80188a4:	4b59      	ldr	r3, [pc, #356]	; (8018a0c <read_status_registers+0x5fc>)
 80188a6:	869a      	strh	r2, [r3, #52]	; 0x34

	fm25v02_read(2*IBUTTON_COMPLETE_6_REG, &status_reg_temp_h);
 80188a8:	1dfb      	adds	r3, r7, #7
 80188aa:	4619      	mov	r1, r3
 80188ac:	f242 0036 	movw	r0, #8246	; 0x2036
 80188b0:	f7fe f9bc 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*IBUTTON_COMPLETE_6_REG+1, &status_reg_temp_l);
 80188b4:	1dbb      	adds	r3, r7, #6
 80188b6:	4619      	mov	r1, r3
 80188b8:	f242 0037 	movw	r0, #8247	; 0x2037
 80188bc:	f7fe f9b6 	bl	8016c2c <fm25v02_read>
	status_registers.ibutton_complite_6_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80188c0:	79fb      	ldrb	r3, [r7, #7]
 80188c2:	021b      	lsls	r3, r3, #8
 80188c4:	b21a      	sxth	r2, r3
 80188c6:	79bb      	ldrb	r3, [r7, #6]
 80188c8:	b21b      	sxth	r3, r3
 80188ca:	4313      	orrs	r3, r2
 80188cc:	b21b      	sxth	r3, r3
 80188ce:	b29a      	uxth	r2, r3
 80188d0:	4b4e      	ldr	r3, [pc, #312]	; (8018a0c <read_status_registers+0x5fc>)
 80188d2:	86da      	strh	r2, [r3, #54]	; 0x36

	fm25v02_read(2*IBUTTON_COMPLETE_7_REG, &status_reg_temp_h);
 80188d4:	1dfb      	adds	r3, r7, #7
 80188d6:	4619      	mov	r1, r3
 80188d8:	f242 0038 	movw	r0, #8248	; 0x2038
 80188dc:	f7fe f9a6 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*IBUTTON_COMPLETE_7_REG+1, &status_reg_temp_l);
 80188e0:	1dbb      	adds	r3, r7, #6
 80188e2:	4619      	mov	r1, r3
 80188e4:	f242 0039 	movw	r0, #8249	; 0x2039
 80188e8:	f7fe f9a0 	bl	8016c2c <fm25v02_read>
	status_registers.ibutton_complite_7_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80188ec:	79fb      	ldrb	r3, [r7, #7]
 80188ee:	021b      	lsls	r3, r3, #8
 80188f0:	b21a      	sxth	r2, r3
 80188f2:	79bb      	ldrb	r3, [r7, #6]
 80188f4:	b21b      	sxth	r3, r3
 80188f6:	4313      	orrs	r3, r2
 80188f8:	b21b      	sxth	r3, r3
 80188fa:	b29a      	uxth	r2, r3
 80188fc:	4b43      	ldr	r3, [pc, #268]	; (8018a0c <read_status_registers+0x5fc>)
 80188fe:	871a      	strh	r2, [r3, #56]	; 0x38

	fm25v02_read(2*CE_303_ERROR_REG, &status_reg_temp_h);
 8018900:	1dfb      	adds	r3, r7, #7
 8018902:	4619      	mov	r1, r3
 8018904:	f242 003c 	movw	r0, #8252	; 0x203c
 8018908:	f7fe f990 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*CE_303_ERROR_REG+1, &status_reg_temp_l);
 801890c:	1dbb      	adds	r3, r7, #6
 801890e:	4619      	mov	r1, r3
 8018910:	f242 003d 	movw	r0, #8253	; 0x203d
 8018914:	f7fe f98a 	bl	8016c2c <fm25v02_read>
	status_registers.ce303_error_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018918:	79fb      	ldrb	r3, [r7, #7]
 801891a:	021b      	lsls	r3, r3, #8
 801891c:	b21a      	sxth	r2, r3
 801891e:	79bb      	ldrb	r3, [r7, #6]
 8018920:	b21b      	sxth	r3, r3
 8018922:	4313      	orrs	r3, r2
 8018924:	b21b      	sxth	r3, r3
 8018926:	b29a      	uxth	r2, r3
 8018928:	4b38      	ldr	r3, [pc, #224]	; (8018a0c <read_status_registers+0x5fc>)
 801892a:	879a      	strh	r2, [r3, #60]	; 0x3c

	fm25v02_read(2*CE_303_CURRENT_A_REG, &status_reg_temp_h);
 801892c:	1dfb      	adds	r3, r7, #7
 801892e:	4619      	mov	r1, r3
 8018930:	f242 003e 	movw	r0, #8254	; 0x203e
 8018934:	f7fe f97a 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*CE_303_CURRENT_A_REG+1, &status_reg_temp_l);
 8018938:	1dbb      	adds	r3, r7, #6
 801893a:	4619      	mov	r1, r3
 801893c:	f242 003f 	movw	r0, #8255	; 0x203f
 8018940:	f7fe f974 	bl	8016c2c <fm25v02_read>
	status_registers.ce303_current_a_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018944:	79fb      	ldrb	r3, [r7, #7]
 8018946:	021b      	lsls	r3, r3, #8
 8018948:	b21a      	sxth	r2, r3
 801894a:	79bb      	ldrb	r3, [r7, #6]
 801894c:	b21b      	sxth	r3, r3
 801894e:	4313      	orrs	r3, r2
 8018950:	b21b      	sxth	r3, r3
 8018952:	b29a      	uxth	r2, r3
 8018954:	4b2d      	ldr	r3, [pc, #180]	; (8018a0c <read_status_registers+0x5fc>)
 8018956:	87da      	strh	r2, [r3, #62]	; 0x3e

	fm25v02_read(2*CE_303_CURRENT_B_REG, &status_reg_temp_h);
 8018958:	1dfb      	adds	r3, r7, #7
 801895a:	4619      	mov	r1, r3
 801895c:	f44f 5001 	mov.w	r0, #8256	; 0x2040
 8018960:	f7fe f964 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*CE_303_CURRENT_B_REG+1, &status_reg_temp_l);
 8018964:	1dbb      	adds	r3, r7, #6
 8018966:	4619      	mov	r1, r3
 8018968:	f242 0041 	movw	r0, #8257	; 0x2041
 801896c:	f7fe f95e 	bl	8016c2c <fm25v02_read>
	status_registers.ce303_current_b_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018970:	79fb      	ldrb	r3, [r7, #7]
 8018972:	021b      	lsls	r3, r3, #8
 8018974:	b21a      	sxth	r2, r3
 8018976:	79bb      	ldrb	r3, [r7, #6]
 8018978:	b21b      	sxth	r3, r3
 801897a:	4313      	orrs	r3, r2
 801897c:	b21b      	sxth	r3, r3
 801897e:	b29a      	uxth	r2, r3
 8018980:	4b22      	ldr	r3, [pc, #136]	; (8018a0c <read_status_registers+0x5fc>)
 8018982:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

	fm25v02_read(2*CE_303_CURRENT_C_REG, &status_reg_temp_h);
 8018986:	1dfb      	adds	r3, r7, #7
 8018988:	4619      	mov	r1, r3
 801898a:	f242 0042 	movw	r0, #8258	; 0x2042
 801898e:	f7fe f94d 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*CE_303_CURRENT_C_REG+1, &status_reg_temp_l);
 8018992:	1dbb      	adds	r3, r7, #6
 8018994:	4619      	mov	r1, r3
 8018996:	f242 0043 	movw	r0, #8259	; 0x2043
 801899a:	f7fe f947 	bl	8016c2c <fm25v02_read>
	status_registers.ce303_current_c_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 801899e:	79fb      	ldrb	r3, [r7, #7]
 80189a0:	021b      	lsls	r3, r3, #8
 80189a2:	b21a      	sxth	r2, r3
 80189a4:	79bb      	ldrb	r3, [r7, #6]
 80189a6:	b21b      	sxth	r3, r3
 80189a8:	4313      	orrs	r3, r2
 80189aa:	b21b      	sxth	r3, r3
 80189ac:	b29a      	uxth	r2, r3
 80189ae:	4b17      	ldr	r3, [pc, #92]	; (8018a0c <read_status_registers+0x5fc>)
 80189b0:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	fm25v02_read(2*CE_303_CURRENT_MIL_A_REG, &status_reg_temp_h);
 80189b4:	1dfb      	adds	r3, r7, #7
 80189b6:	4619      	mov	r1, r3
 80189b8:	f242 0044 	movw	r0, #8260	; 0x2044
 80189bc:	f7fe f936 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*CE_303_CURRENT_MIL_A_REG+1, &status_reg_temp_l);
 80189c0:	1dbb      	adds	r3, r7, #6
 80189c2:	4619      	mov	r1, r3
 80189c4:	f242 0045 	movw	r0, #8261	; 0x2045
 80189c8:	f7fe f930 	bl	8016c2c <fm25v02_read>
	status_registers.ce303_current_mil_a_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80189cc:	79fb      	ldrb	r3, [r7, #7]
 80189ce:	021b      	lsls	r3, r3, #8
 80189d0:	b21a      	sxth	r2, r3
 80189d2:	79bb      	ldrb	r3, [r7, #6]
 80189d4:	b21b      	sxth	r3, r3
 80189d6:	4313      	orrs	r3, r2
 80189d8:	b21b      	sxth	r3, r3
 80189da:	b29a      	uxth	r2, r3
 80189dc:	4b0b      	ldr	r3, [pc, #44]	; (8018a0c <read_status_registers+0x5fc>)
 80189de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	fm25v02_read(2*CE_303_CURRENT_MIL_B_REG, &status_reg_temp_h);
 80189e2:	1dfb      	adds	r3, r7, #7
 80189e4:	4619      	mov	r1, r3
 80189e6:	f242 0046 	movw	r0, #8262	; 0x2046
 80189ea:	f7fe f91f 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*CE_303_CURRENT_MIL_B_REG+1, &status_reg_temp_l);
 80189ee:	1dbb      	adds	r3, r7, #6
 80189f0:	4619      	mov	r1, r3
 80189f2:	f242 0047 	movw	r0, #8263	; 0x2047
 80189f6:	f7fe f919 	bl	8016c2c <fm25v02_read>
	status_registers.ce303_current_mil_b_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80189fa:	79fb      	ldrb	r3, [r7, #7]
 80189fc:	021b      	lsls	r3, r3, #8
 80189fe:	b21a      	sxth	r2, r3
 8018a00:	79bb      	ldrb	r3, [r7, #6]
 8018a02:	b21b      	sxth	r3, r3
 8018a04:	4313      	orrs	r3, r2
 8018a06:	b21b      	sxth	r3, r3
 8018a08:	e002      	b.n	8018a10 <read_status_registers+0x600>
 8018a0a:	bf00      	nop
 8018a0c:	2000a174 	.word	0x2000a174
 8018a10:	b29a      	uxth	r2, r3
 8018a12:	4bc3      	ldr	r3, [pc, #780]	; (8018d20 <read_status_registers+0x910>)
 8018a14:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

	fm25v02_read(2*CE_303_CURRENT_MIL_C_REG, &status_reg_temp_h);
 8018a18:	1dfb      	adds	r3, r7, #7
 8018a1a:	4619      	mov	r1, r3
 8018a1c:	f242 0048 	movw	r0, #8264	; 0x2048
 8018a20:	f7fe f904 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*CE_303_CURRENT_MIL_C_REG+1, &status_reg_temp_l);
 8018a24:	1dbb      	adds	r3, r7, #6
 8018a26:	4619      	mov	r1, r3
 8018a28:	f242 0049 	movw	r0, #8265	; 0x2049
 8018a2c:	f7fe f8fe 	bl	8016c2c <fm25v02_read>
	status_registers.ce303_current_mil_c_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018a30:	79fb      	ldrb	r3, [r7, #7]
 8018a32:	021b      	lsls	r3, r3, #8
 8018a34:	b21a      	sxth	r2, r3
 8018a36:	79bb      	ldrb	r3, [r7, #6]
 8018a38:	b21b      	sxth	r3, r3
 8018a3a:	4313      	orrs	r3, r2
 8018a3c:	b21b      	sxth	r3, r3
 8018a3e:	b29a      	uxth	r2, r3
 8018a40:	4bb7      	ldr	r3, [pc, #732]	; (8018d20 <read_status_registers+0x910>)
 8018a42:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

	fm25v02_read(2*CE_303_VOLT_A_REG, &status_reg_temp_h);
 8018a46:	1dfb      	adds	r3, r7, #7
 8018a48:	4619      	mov	r1, r3
 8018a4a:	f242 004a 	movw	r0, #8266	; 0x204a
 8018a4e:	f7fe f8ed 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*CE_303_VOLT_A_REG+1, &status_reg_temp_l);
 8018a52:	1dbb      	adds	r3, r7, #6
 8018a54:	4619      	mov	r1, r3
 8018a56:	f242 004b 	movw	r0, #8267	; 0x204b
 8018a5a:	f7fe f8e7 	bl	8016c2c <fm25v02_read>
	status_registers.ce303_volt_a_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018a5e:	79fb      	ldrb	r3, [r7, #7]
 8018a60:	021b      	lsls	r3, r3, #8
 8018a62:	b21a      	sxth	r2, r3
 8018a64:	79bb      	ldrb	r3, [r7, #6]
 8018a66:	b21b      	sxth	r3, r3
 8018a68:	4313      	orrs	r3, r2
 8018a6a:	b21b      	sxth	r3, r3
 8018a6c:	b29a      	uxth	r2, r3
 8018a6e:	4bac      	ldr	r3, [pc, #688]	; (8018d20 <read_status_registers+0x910>)
 8018a70:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

	fm25v02_read(2*CE_303_VOLT_B_REG, &status_reg_temp_h);
 8018a74:	1dfb      	adds	r3, r7, #7
 8018a76:	4619      	mov	r1, r3
 8018a78:	f242 004c 	movw	r0, #8268	; 0x204c
 8018a7c:	f7fe f8d6 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*CE_303_VOLT_B_REG+1, &status_reg_temp_l);
 8018a80:	1dbb      	adds	r3, r7, #6
 8018a82:	4619      	mov	r1, r3
 8018a84:	f242 004d 	movw	r0, #8269	; 0x204d
 8018a88:	f7fe f8d0 	bl	8016c2c <fm25v02_read>
	status_registers.ce303_volt_b_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018a8c:	79fb      	ldrb	r3, [r7, #7]
 8018a8e:	021b      	lsls	r3, r3, #8
 8018a90:	b21a      	sxth	r2, r3
 8018a92:	79bb      	ldrb	r3, [r7, #6]
 8018a94:	b21b      	sxth	r3, r3
 8018a96:	4313      	orrs	r3, r2
 8018a98:	b21b      	sxth	r3, r3
 8018a9a:	b29a      	uxth	r2, r3
 8018a9c:	4ba0      	ldr	r3, [pc, #640]	; (8018d20 <read_status_registers+0x910>)
 8018a9e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

	fm25v02_read(2*CE_303_VOLT_C_REG, &status_reg_temp_h);
 8018aa2:	1dfb      	adds	r3, r7, #7
 8018aa4:	4619      	mov	r1, r3
 8018aa6:	f242 004e 	movw	r0, #8270	; 0x204e
 8018aaa:	f7fe f8bf 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*CE_303_VOLT_C_REG+1, &status_reg_temp_l);
 8018aae:	1dbb      	adds	r3, r7, #6
 8018ab0:	4619      	mov	r1, r3
 8018ab2:	f242 004f 	movw	r0, #8271	; 0x204f
 8018ab6:	f7fe f8b9 	bl	8016c2c <fm25v02_read>
	status_registers.ce303_volt_c_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018aba:	79fb      	ldrb	r3, [r7, #7]
 8018abc:	021b      	lsls	r3, r3, #8
 8018abe:	b21a      	sxth	r2, r3
 8018ac0:	79bb      	ldrb	r3, [r7, #6]
 8018ac2:	b21b      	sxth	r3, r3
 8018ac4:	4313      	orrs	r3, r2
 8018ac6:	b21b      	sxth	r3, r3
 8018ac8:	b29a      	uxth	r2, r3
 8018aca:	4b95      	ldr	r3, [pc, #596]	; (8018d20 <read_status_registers+0x910>)
 8018acc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	fm25v02_read(2*CE_303_VOLT_MIL_A_REG, &status_reg_temp_h);
 8018ad0:	1dfb      	adds	r3, r7, #7
 8018ad2:	4619      	mov	r1, r3
 8018ad4:	f242 0050 	movw	r0, #8272	; 0x2050
 8018ad8:	f7fe f8a8 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*CE_303_VOLT_MIL_A_REG+1, &status_reg_temp_l);
 8018adc:	1dbb      	adds	r3, r7, #6
 8018ade:	4619      	mov	r1, r3
 8018ae0:	f242 0051 	movw	r0, #8273	; 0x2051
 8018ae4:	f7fe f8a2 	bl	8016c2c <fm25v02_read>
	status_registers.ce303_volt_mil_a_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018ae8:	79fb      	ldrb	r3, [r7, #7]
 8018aea:	021b      	lsls	r3, r3, #8
 8018aec:	b21a      	sxth	r2, r3
 8018aee:	79bb      	ldrb	r3, [r7, #6]
 8018af0:	b21b      	sxth	r3, r3
 8018af2:	4313      	orrs	r3, r2
 8018af4:	b21b      	sxth	r3, r3
 8018af6:	b29a      	uxth	r2, r3
 8018af8:	4b89      	ldr	r3, [pc, #548]	; (8018d20 <read_status_registers+0x910>)
 8018afa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

	fm25v02_read(2*CE_303_VOLT_MIL_B_REG, &status_reg_temp_h);
 8018afe:	1dfb      	adds	r3, r7, #7
 8018b00:	4619      	mov	r1, r3
 8018b02:	f242 0052 	movw	r0, #8274	; 0x2052
 8018b06:	f7fe f891 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*CE_303_VOLT_MIL_B_REG+1, &status_reg_temp_l);
 8018b0a:	1dbb      	adds	r3, r7, #6
 8018b0c:	4619      	mov	r1, r3
 8018b0e:	f242 0053 	movw	r0, #8275	; 0x2053
 8018b12:	f7fe f88b 	bl	8016c2c <fm25v02_read>
	status_registers.ce303_volt_mil_b_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018b16:	79fb      	ldrb	r3, [r7, #7]
 8018b18:	021b      	lsls	r3, r3, #8
 8018b1a:	b21a      	sxth	r2, r3
 8018b1c:	79bb      	ldrb	r3, [r7, #6]
 8018b1e:	b21b      	sxth	r3, r3
 8018b20:	4313      	orrs	r3, r2
 8018b22:	b21b      	sxth	r3, r3
 8018b24:	b29a      	uxth	r2, r3
 8018b26:	4b7e      	ldr	r3, [pc, #504]	; (8018d20 <read_status_registers+0x910>)
 8018b28:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

	fm25v02_read(2*CE_303_VOLT_MIL_C_REG, &status_reg_temp_h);
 8018b2c:	1dfb      	adds	r3, r7, #7
 8018b2e:	4619      	mov	r1, r3
 8018b30:	f242 0054 	movw	r0, #8276	; 0x2054
 8018b34:	f7fe f87a 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*CE_303_VOLT_MIL_C_REG+1, &status_reg_temp_l);
 8018b38:	1dbb      	adds	r3, r7, #6
 8018b3a:	4619      	mov	r1, r3
 8018b3c:	f242 0055 	movw	r0, #8277	; 0x2055
 8018b40:	f7fe f874 	bl	8016c2c <fm25v02_read>
	status_registers.ce303_volt_mil_c_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018b44:	79fb      	ldrb	r3, [r7, #7]
 8018b46:	021b      	lsls	r3, r3, #8
 8018b48:	b21a      	sxth	r2, r3
 8018b4a:	79bb      	ldrb	r3, [r7, #6]
 8018b4c:	b21b      	sxth	r3, r3
 8018b4e:	4313      	orrs	r3, r2
 8018b50:	b21b      	sxth	r3, r3
 8018b52:	b29a      	uxth	r2, r3
 8018b54:	4b72      	ldr	r3, [pc, #456]	; (8018d20 <read_status_registers+0x910>)
 8018b56:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

	fm25v02_read(2*CE_303_POWER_A_REG, &status_reg_temp_h);
 8018b5a:	1dfb      	adds	r3, r7, #7
 8018b5c:	4619      	mov	r1, r3
 8018b5e:	f242 0056 	movw	r0, #8278	; 0x2056
 8018b62:	f7fe f863 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*CE_303_POWER_A_REG+1, &status_reg_temp_l);
 8018b66:	1dbb      	adds	r3, r7, #6
 8018b68:	4619      	mov	r1, r3
 8018b6a:	f242 0057 	movw	r0, #8279	; 0x2057
 8018b6e:	f7fe f85d 	bl	8016c2c <fm25v02_read>
	status_registers.ce303_power_a_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018b72:	79fb      	ldrb	r3, [r7, #7]
 8018b74:	021b      	lsls	r3, r3, #8
 8018b76:	b21a      	sxth	r2, r3
 8018b78:	79bb      	ldrb	r3, [r7, #6]
 8018b7a:	b21b      	sxth	r3, r3
 8018b7c:	4313      	orrs	r3, r2
 8018b7e:	b21b      	sxth	r3, r3
 8018b80:	b29a      	uxth	r2, r3
 8018b82:	4b67      	ldr	r3, [pc, #412]	; (8018d20 <read_status_registers+0x910>)
 8018b84:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

	fm25v02_read(2*CE_303_POWER_B_REG, &status_reg_temp_h);
 8018b88:	1dfb      	adds	r3, r7, #7
 8018b8a:	4619      	mov	r1, r3
 8018b8c:	f242 0058 	movw	r0, #8280	; 0x2058
 8018b90:	f7fe f84c 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*CE_303_POWER_B_REG+1, &status_reg_temp_l);
 8018b94:	1dbb      	adds	r3, r7, #6
 8018b96:	4619      	mov	r1, r3
 8018b98:	f242 0059 	movw	r0, #8281	; 0x2059
 8018b9c:	f7fe f846 	bl	8016c2c <fm25v02_read>
	status_registers.ce303_power_b_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018ba0:	79fb      	ldrb	r3, [r7, #7]
 8018ba2:	021b      	lsls	r3, r3, #8
 8018ba4:	b21a      	sxth	r2, r3
 8018ba6:	79bb      	ldrb	r3, [r7, #6]
 8018ba8:	b21b      	sxth	r3, r3
 8018baa:	4313      	orrs	r3, r2
 8018bac:	b21b      	sxth	r3, r3
 8018bae:	b29a      	uxth	r2, r3
 8018bb0:	4b5b      	ldr	r3, [pc, #364]	; (8018d20 <read_status_registers+0x910>)
 8018bb2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

	fm25v02_read(2*CE_303_POWER_C_REG, &status_reg_temp_h);
 8018bb6:	1dfb      	adds	r3, r7, #7
 8018bb8:	4619      	mov	r1, r3
 8018bba:	f242 005a 	movw	r0, #8282	; 0x205a
 8018bbe:	f7fe f835 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*CE_303_POWER_C_REG+1, &status_reg_temp_l);
 8018bc2:	1dbb      	adds	r3, r7, #6
 8018bc4:	4619      	mov	r1, r3
 8018bc6:	f242 005b 	movw	r0, #8283	; 0x205b
 8018bca:	f7fe f82f 	bl	8016c2c <fm25v02_read>
	status_registers.ce303_power_c_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018bce:	79fb      	ldrb	r3, [r7, #7]
 8018bd0:	021b      	lsls	r3, r3, #8
 8018bd2:	b21a      	sxth	r2, r3
 8018bd4:	79bb      	ldrb	r3, [r7, #6]
 8018bd6:	b21b      	sxth	r3, r3
 8018bd8:	4313      	orrs	r3, r2
 8018bda:	b21b      	sxth	r3, r3
 8018bdc:	b29a      	uxth	r2, r3
 8018bde:	4b50      	ldr	r3, [pc, #320]	; (8018d20 <read_status_registers+0x910>)
 8018be0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

	fm25v02_read(2*CE_303_POWER_MIL_A_REG, &status_reg_temp_h);
 8018be4:	1dfb      	adds	r3, r7, #7
 8018be6:	4619      	mov	r1, r3
 8018be8:	f242 005c 	movw	r0, #8284	; 0x205c
 8018bec:	f7fe f81e 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*CE_303_POWER_MIL_A_REG+1, &status_reg_temp_l);
 8018bf0:	1dbb      	adds	r3, r7, #6
 8018bf2:	4619      	mov	r1, r3
 8018bf4:	f242 005d 	movw	r0, #8285	; 0x205d
 8018bf8:	f7fe f818 	bl	8016c2c <fm25v02_read>
	status_registers.ce303_power_mil_a_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018bfc:	79fb      	ldrb	r3, [r7, #7]
 8018bfe:	021b      	lsls	r3, r3, #8
 8018c00:	b21a      	sxth	r2, r3
 8018c02:	79bb      	ldrb	r3, [r7, #6]
 8018c04:	b21b      	sxth	r3, r3
 8018c06:	4313      	orrs	r3, r2
 8018c08:	b21b      	sxth	r3, r3
 8018c0a:	b29a      	uxth	r2, r3
 8018c0c:	4b44      	ldr	r3, [pc, #272]	; (8018d20 <read_status_registers+0x910>)
 8018c0e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

	fm25v02_read(2*CE_303_POWER_MIL_B_REG, &status_reg_temp_h);
 8018c12:	1dfb      	adds	r3, r7, #7
 8018c14:	4619      	mov	r1, r3
 8018c16:	f242 005e 	movw	r0, #8286	; 0x205e
 8018c1a:	f7fe f807 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*CE_303_POWER_MIL_B_REG+1, &status_reg_temp_l);
 8018c1e:	1dbb      	adds	r3, r7, #6
 8018c20:	4619      	mov	r1, r3
 8018c22:	f242 005f 	movw	r0, #8287	; 0x205f
 8018c26:	f7fe f801 	bl	8016c2c <fm25v02_read>
	status_registers.ce303_power_mil_b_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018c2a:	79fb      	ldrb	r3, [r7, #7]
 8018c2c:	021b      	lsls	r3, r3, #8
 8018c2e:	b21a      	sxth	r2, r3
 8018c30:	79bb      	ldrb	r3, [r7, #6]
 8018c32:	b21b      	sxth	r3, r3
 8018c34:	4313      	orrs	r3, r2
 8018c36:	b21b      	sxth	r3, r3
 8018c38:	b29a      	uxth	r2, r3
 8018c3a:	4b39      	ldr	r3, [pc, #228]	; (8018d20 <read_status_registers+0x910>)
 8018c3c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

	fm25v02_read(2*CE_303_POWER_MIL_C_REG, &status_reg_temp_h);
 8018c40:	1dfb      	adds	r3, r7, #7
 8018c42:	4619      	mov	r1, r3
 8018c44:	f242 0060 	movw	r0, #8288	; 0x2060
 8018c48:	f7fd fff0 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*CE_303_POWER_MIL_C_REG+1, &status_reg_temp_l);
 8018c4c:	1dbb      	adds	r3, r7, #6
 8018c4e:	4619      	mov	r1, r3
 8018c50:	f242 0061 	movw	r0, #8289	; 0x2061
 8018c54:	f7fd ffea 	bl	8016c2c <fm25v02_read>
	status_registers.ce303_power_mil_c_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018c58:	79fb      	ldrb	r3, [r7, #7]
 8018c5a:	021b      	lsls	r3, r3, #8
 8018c5c:	b21a      	sxth	r2, r3
 8018c5e:	79bb      	ldrb	r3, [r7, #6]
 8018c60:	b21b      	sxth	r3, r3
 8018c62:	4313      	orrs	r3, r2
 8018c64:	b21b      	sxth	r3, r3
 8018c66:	b29a      	uxth	r2, r3
 8018c68:	4b2d      	ldr	r3, [pc, #180]	; (8018d20 <read_status_registers+0x910>)
 8018c6a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

	fm25v02_read(2*LIGHTING_STATUS_REG, &status_reg_temp_h);
 8018c6e:	1dfb      	adds	r3, r7, #7
 8018c70:	4619      	mov	r1, r3
 8018c72:	f242 0062 	movw	r0, #8290	; 0x2062
 8018c76:	f7fd ffd9 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*LIGHTING_STATUS_REG+1, &status_reg_temp_l);
 8018c7a:	1dbb      	adds	r3, r7, #6
 8018c7c:	4619      	mov	r1, r3
 8018c7e:	f242 0063 	movw	r0, #8291	; 0x2063
 8018c82:	f7fd ffd3 	bl	8016c2c <fm25v02_read>
	status_registers.lighting_status_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018c86:	79fb      	ldrb	r3, [r7, #7]
 8018c88:	021b      	lsls	r3, r3, #8
 8018c8a:	b21a      	sxth	r2, r3
 8018c8c:	79bb      	ldrb	r3, [r7, #6]
 8018c8e:	b21b      	sxth	r3, r3
 8018c90:	4313      	orrs	r3, r2
 8018c92:	b21b      	sxth	r3, r3
 8018c94:	b29a      	uxth	r2, r3
 8018c96:	4b22      	ldr	r3, [pc, #136]	; (8018d20 <read_status_registers+0x910>)
 8018c98:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

	fm25v02_read(2*LIGHTING_ALARM_REG, &status_reg_temp_h);
 8018c9c:	1dfb      	adds	r3, r7, #7
 8018c9e:	4619      	mov	r1, r3
 8018ca0:	f242 0064 	movw	r0, #8292	; 0x2064
 8018ca4:	f7fd ffc2 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*LIGHTING_ALARM_REG+1, &status_reg_temp_l);
 8018ca8:	1dbb      	adds	r3, r7, #6
 8018caa:	4619      	mov	r1, r3
 8018cac:	f242 0065 	movw	r0, #8293	; 0x2065
 8018cb0:	f7fd ffbc 	bl	8016c2c <fm25v02_read>
	status_registers.lighting_alarm_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018cb4:	79fb      	ldrb	r3, [r7, #7]
 8018cb6:	021b      	lsls	r3, r3, #8
 8018cb8:	b21a      	sxth	r2, r3
 8018cba:	79bb      	ldrb	r3, [r7, #6]
 8018cbc:	b21b      	sxth	r3, r3
 8018cbe:	4313      	orrs	r3, r2
 8018cc0:	b21b      	sxth	r3, r3
 8018cc2:	b29a      	uxth	r2, r3
 8018cc4:	4b16      	ldr	r3, [pc, #88]	; (8018d20 <read_status_registers+0x910>)
 8018cc6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

	fm25v02_read(2*MONTH_LIGHTING_OFF_REG, &status_reg_temp_h);
 8018cca:	1dfb      	adds	r3, r7, #7
 8018ccc:	4619      	mov	r1, r3
 8018cce:	f242 0066 	movw	r0, #8294	; 0x2066
 8018cd2:	f7fd ffab 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*MONTH_LIGHTING_OFF_REG+1, &status_reg_temp_l);
 8018cd6:	1dbb      	adds	r3, r7, #6
 8018cd8:	4619      	mov	r1, r3
 8018cda:	f242 0067 	movw	r0, #8295	; 0x2067
 8018cde:	f7fd ffa5 	bl	8016c2c <fm25v02_read>
	status_registers.month_lighting_off_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018ce2:	79fb      	ldrb	r3, [r7, #7]
 8018ce4:	021b      	lsls	r3, r3, #8
 8018ce6:	b21a      	sxth	r2, r3
 8018ce8:	79bb      	ldrb	r3, [r7, #6]
 8018cea:	b21b      	sxth	r3, r3
 8018cec:	4313      	orrs	r3, r2
 8018cee:	b21b      	sxth	r3, r3
 8018cf0:	b29a      	uxth	r2, r3
 8018cf2:	4b0b      	ldr	r3, [pc, #44]	; (8018d20 <read_status_registers+0x910>)
 8018cf4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

	fm25v02_read(2*DAY_LIGHTING_OFF_REG, &status_reg_temp_h);
 8018cf8:	1dfb      	adds	r3, r7, #7
 8018cfa:	4619      	mov	r1, r3
 8018cfc:	f242 0068 	movw	r0, #8296	; 0x2068
 8018d00:	f7fd ff94 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*DAY_LIGHTING_OFF_REG+1, &status_reg_temp_l);
 8018d04:	1dbb      	adds	r3, r7, #6
 8018d06:	4619      	mov	r1, r3
 8018d08:	f242 0069 	movw	r0, #8297	; 0x2069
 8018d0c:	f7fd ff8e 	bl	8016c2c <fm25v02_read>
	status_registers.day_lighting_off_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018d10:	79fb      	ldrb	r3, [r7, #7]
 8018d12:	021b      	lsls	r3, r3, #8
 8018d14:	b21a      	sxth	r2, r3
 8018d16:	79bb      	ldrb	r3, [r7, #6]
 8018d18:	b21b      	sxth	r3, r3
 8018d1a:	4313      	orrs	r3, r2
 8018d1c:	b21b      	sxth	r3, r3
 8018d1e:	e001      	b.n	8018d24 <read_status_registers+0x914>
 8018d20:	2000a174 	.word	0x2000a174
 8018d24:	b29a      	uxth	r2, r3
 8018d26:	4bc3      	ldr	r3, [pc, #780]	; (8019034 <read_status_registers+0xc24>)
 8018d28:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

	fm25v02_read(2*HOUR_LIGHTING_OFF_REG, &status_reg_temp_h);
 8018d2c:	1dfb      	adds	r3, r7, #7
 8018d2e:	4619      	mov	r1, r3
 8018d30:	f242 006a 	movw	r0, #8298	; 0x206a
 8018d34:	f7fd ff7a 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*HOUR_LIGHTING_OFF_REG+1, &status_reg_temp_l);
 8018d38:	1dbb      	adds	r3, r7, #6
 8018d3a:	4619      	mov	r1, r3
 8018d3c:	f242 006b 	movw	r0, #8299	; 0x206b
 8018d40:	f7fd ff74 	bl	8016c2c <fm25v02_read>
	status_registers.hour_lighting_off_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018d44:	79fb      	ldrb	r3, [r7, #7]
 8018d46:	021b      	lsls	r3, r3, #8
 8018d48:	b21a      	sxth	r2, r3
 8018d4a:	79bb      	ldrb	r3, [r7, #6]
 8018d4c:	b21b      	sxth	r3, r3
 8018d4e:	4313      	orrs	r3, r2
 8018d50:	b21b      	sxth	r3, r3
 8018d52:	b29a      	uxth	r2, r3
 8018d54:	4bb7      	ldr	r3, [pc, #732]	; (8019034 <read_status_registers+0xc24>)
 8018d56:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

	fm25v02_read(2*MINUTE_LIGHTING_OFF_REG, &status_reg_temp_h);
 8018d5a:	1dfb      	adds	r3, r7, #7
 8018d5c:	4619      	mov	r1, r3
 8018d5e:	f242 006c 	movw	r0, #8300	; 0x206c
 8018d62:	f7fd ff63 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*MINUTE_LIGHTING_OFF_REG+1, &status_reg_temp_l);
 8018d66:	1dbb      	adds	r3, r7, #6
 8018d68:	4619      	mov	r1, r3
 8018d6a:	f242 006d 	movw	r0, #8301	; 0x206d
 8018d6e:	f7fd ff5d 	bl	8016c2c <fm25v02_read>
	status_registers.minute_lighting_off_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018d72:	79fb      	ldrb	r3, [r7, #7]
 8018d74:	021b      	lsls	r3, r3, #8
 8018d76:	b21a      	sxth	r2, r3
 8018d78:	79bb      	ldrb	r3, [r7, #6]
 8018d7a:	b21b      	sxth	r3, r3
 8018d7c:	4313      	orrs	r3, r2
 8018d7e:	b21b      	sxth	r3, r3
 8018d80:	b29a      	uxth	r2, r3
 8018d82:	4bac      	ldr	r3, [pc, #688]	; (8019034 <read_status_registers+0xc24>)
 8018d84:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c

	fm25v02_read(2*MONTH_LIGHTING_ON_REG, &status_reg_temp_h);
 8018d88:	1dfb      	adds	r3, r7, #7
 8018d8a:	4619      	mov	r1, r3
 8018d8c:	f242 006e 	movw	r0, #8302	; 0x206e
 8018d90:	f7fd ff4c 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*MONTH_LIGHTING_ON_REG+1, &status_reg_temp_l);
 8018d94:	1dbb      	adds	r3, r7, #6
 8018d96:	4619      	mov	r1, r3
 8018d98:	f242 006f 	movw	r0, #8303	; 0x206f
 8018d9c:	f7fd ff46 	bl	8016c2c <fm25v02_read>
	status_registers.month_lighting_on_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018da0:	79fb      	ldrb	r3, [r7, #7]
 8018da2:	021b      	lsls	r3, r3, #8
 8018da4:	b21a      	sxth	r2, r3
 8018da6:	79bb      	ldrb	r3, [r7, #6]
 8018da8:	b21b      	sxth	r3, r3
 8018daa:	4313      	orrs	r3, r2
 8018dac:	b21b      	sxth	r3, r3
 8018dae:	b29a      	uxth	r2, r3
 8018db0:	4ba0      	ldr	r3, [pc, #640]	; (8019034 <read_status_registers+0xc24>)
 8018db2:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

	fm25v02_read(2*DAY_LIGHTING_ON_REG, &status_reg_temp_h);
 8018db6:	1dfb      	adds	r3, r7, #7
 8018db8:	4619      	mov	r1, r3
 8018dba:	f242 0070 	movw	r0, #8304	; 0x2070
 8018dbe:	f7fd ff35 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*DAY_LIGHTING_ON_REG+1, &status_reg_temp_l);
 8018dc2:	1dbb      	adds	r3, r7, #6
 8018dc4:	4619      	mov	r1, r3
 8018dc6:	f242 0071 	movw	r0, #8305	; 0x2071
 8018dca:	f7fd ff2f 	bl	8016c2c <fm25v02_read>
	status_registers.day_lighting_on_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018dce:	79fb      	ldrb	r3, [r7, #7]
 8018dd0:	021b      	lsls	r3, r3, #8
 8018dd2:	b21a      	sxth	r2, r3
 8018dd4:	79bb      	ldrb	r3, [r7, #6]
 8018dd6:	b21b      	sxth	r3, r3
 8018dd8:	4313      	orrs	r3, r2
 8018dda:	b21b      	sxth	r3, r3
 8018ddc:	b29a      	uxth	r2, r3
 8018dde:	4b95      	ldr	r3, [pc, #596]	; (8019034 <read_status_registers+0xc24>)
 8018de0:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70

	fm25v02_read(2*HOUR_LIGHTING_ON_REG, &status_reg_temp_h);
 8018de4:	1dfb      	adds	r3, r7, #7
 8018de6:	4619      	mov	r1, r3
 8018de8:	f242 0072 	movw	r0, #8306	; 0x2072
 8018dec:	f7fd ff1e 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*HOUR_LIGHTING_ON_REG+1, &status_reg_temp_l);
 8018df0:	1dbb      	adds	r3, r7, #6
 8018df2:	4619      	mov	r1, r3
 8018df4:	f242 0073 	movw	r0, #8307	; 0x2073
 8018df8:	f7fd ff18 	bl	8016c2c <fm25v02_read>
	status_registers.hour_lighting_on_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018dfc:	79fb      	ldrb	r3, [r7, #7]
 8018dfe:	021b      	lsls	r3, r3, #8
 8018e00:	b21a      	sxth	r2, r3
 8018e02:	79bb      	ldrb	r3, [r7, #6]
 8018e04:	b21b      	sxth	r3, r3
 8018e06:	4313      	orrs	r3, r2
 8018e08:	b21b      	sxth	r3, r3
 8018e0a:	b29a      	uxth	r2, r3
 8018e0c:	4b89      	ldr	r3, [pc, #548]	; (8019034 <read_status_registers+0xc24>)
 8018e0e:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72

	fm25v02_read(2*MINUTE_LIGHTING_ON_REG, &status_reg_temp_h);
 8018e12:	1dfb      	adds	r3, r7, #7
 8018e14:	4619      	mov	r1, r3
 8018e16:	f242 0074 	movw	r0, #8308	; 0x2074
 8018e1a:	f7fd ff07 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*MINUTE_LIGHTING_ON_REG+1, &status_reg_temp_l);
 8018e1e:	1dbb      	adds	r3, r7, #6
 8018e20:	4619      	mov	r1, r3
 8018e22:	f242 0075 	movw	r0, #8309	; 0x2075
 8018e26:	f7fd ff01 	bl	8016c2c <fm25v02_read>
	status_registers.minute_lighting_on_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018e2a:	79fb      	ldrb	r3, [r7, #7]
 8018e2c:	021b      	lsls	r3, r3, #8
 8018e2e:	b21a      	sxth	r2, r3
 8018e30:	79bb      	ldrb	r3, [r7, #6]
 8018e32:	b21b      	sxth	r3, r3
 8018e34:	4313      	orrs	r3, r2
 8018e36:	b21b      	sxth	r3, r3
 8018e38:	b29a      	uxth	r2, r3
 8018e3a:	4b7e      	ldr	r3, [pc, #504]	; (8019034 <read_status_registers+0xc24>)
 8018e3c:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74

	fm25v02_read(2*CURRENT_PHASE_A_REG, &status_reg_temp_h);
 8018e40:	1dfb      	adds	r3, r7, #7
 8018e42:	4619      	mov	r1, r3
 8018e44:	f242 0076 	movw	r0, #8310	; 0x2076
 8018e48:	f7fd fef0 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*CURRENT_PHASE_A_REG+1, &status_reg_temp_l);
 8018e4c:	1dbb      	adds	r3, r7, #6
 8018e4e:	4619      	mov	r1, r3
 8018e50:	f242 0077 	movw	r0, #8311	; 0x2077
 8018e54:	f7fd feea 	bl	8016c2c <fm25v02_read>
	status_registers.current_phase_a_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018e58:	79fb      	ldrb	r3, [r7, #7]
 8018e5a:	021b      	lsls	r3, r3, #8
 8018e5c:	b21a      	sxth	r2, r3
 8018e5e:	79bb      	ldrb	r3, [r7, #6]
 8018e60:	b21b      	sxth	r3, r3
 8018e62:	4313      	orrs	r3, r2
 8018e64:	b21b      	sxth	r3, r3
 8018e66:	b29a      	uxth	r2, r3
 8018e68:	4b72      	ldr	r3, [pc, #456]	; (8019034 <read_status_registers+0xc24>)
 8018e6a:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76

	fm25v02_read(2*CURRENT_PHASE_B_REG, &status_reg_temp_h);
 8018e6e:	1dfb      	adds	r3, r7, #7
 8018e70:	4619      	mov	r1, r3
 8018e72:	f242 0078 	movw	r0, #8312	; 0x2078
 8018e76:	f7fd fed9 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*CURRENT_PHASE_B_REG+1, &status_reg_temp_l);
 8018e7a:	1dbb      	adds	r3, r7, #6
 8018e7c:	4619      	mov	r1, r3
 8018e7e:	f242 0079 	movw	r0, #8313	; 0x2079
 8018e82:	f7fd fed3 	bl	8016c2c <fm25v02_read>
	status_registers.current_phase_b_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018e86:	79fb      	ldrb	r3, [r7, #7]
 8018e88:	021b      	lsls	r3, r3, #8
 8018e8a:	b21a      	sxth	r2, r3
 8018e8c:	79bb      	ldrb	r3, [r7, #6]
 8018e8e:	b21b      	sxth	r3, r3
 8018e90:	4313      	orrs	r3, r2
 8018e92:	b21b      	sxth	r3, r3
 8018e94:	b29a      	uxth	r2, r3
 8018e96:	4b67      	ldr	r3, [pc, #412]	; (8019034 <read_status_registers+0xc24>)
 8018e98:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78

	fm25v02_read(2*CURRENT_PHASE_C_REG, &status_reg_temp_h);
 8018e9c:	1dfb      	adds	r3, r7, #7
 8018e9e:	4619      	mov	r1, r3
 8018ea0:	f242 007a 	movw	r0, #8314	; 0x207a
 8018ea4:	f7fd fec2 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*CURRENT_PHASE_C_REG+1, &status_reg_temp_l);
 8018ea8:	1dbb      	adds	r3, r7, #6
 8018eaa:	4619      	mov	r1, r3
 8018eac:	f242 007b 	movw	r0, #8315	; 0x207b
 8018eb0:	f7fd febc 	bl	8016c2c <fm25v02_read>
	status_registers.current_phase_c_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018eb4:	79fb      	ldrb	r3, [r7, #7]
 8018eb6:	021b      	lsls	r3, r3, #8
 8018eb8:	b21a      	sxth	r2, r3
 8018eba:	79bb      	ldrb	r3, [r7, #6]
 8018ebc:	b21b      	sxth	r3, r3
 8018ebe:	4313      	orrs	r3, r2
 8018ec0:	b21b      	sxth	r3, r3
 8018ec2:	b29a      	uxth	r2, r3
 8018ec4:	4b5b      	ldr	r3, [pc, #364]	; (8019034 <read_status_registers+0xc24>)
 8018ec6:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

	fm25v02_read(2*CURRENT_VOLTAGE_A_REG, &status_reg_temp_h);
 8018eca:	1dfb      	adds	r3, r7, #7
 8018ecc:	4619      	mov	r1, r3
 8018ece:	f242 007c 	movw	r0, #8316	; 0x207c
 8018ed2:	f7fd feab 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*CURRENT_VOLTAGE_A_REG+1, &status_reg_temp_l);
 8018ed6:	1dbb      	adds	r3, r7, #6
 8018ed8:	4619      	mov	r1, r3
 8018eda:	f242 007d 	movw	r0, #8317	; 0x207d
 8018ede:	f7fd fea5 	bl	8016c2c <fm25v02_read>
	status_registers.current_voltage_a_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018ee2:	79fb      	ldrb	r3, [r7, #7]
 8018ee4:	021b      	lsls	r3, r3, #8
 8018ee6:	b21a      	sxth	r2, r3
 8018ee8:	79bb      	ldrb	r3, [r7, #6]
 8018eea:	b21b      	sxth	r3, r3
 8018eec:	4313      	orrs	r3, r2
 8018eee:	b21b      	sxth	r3, r3
 8018ef0:	b29a      	uxth	r2, r3
 8018ef2:	4b50      	ldr	r3, [pc, #320]	; (8019034 <read_status_registers+0xc24>)
 8018ef4:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c

	fm25v02_read(2*CURRENT_VOLTAGE_B_REG, &status_reg_temp_h);
 8018ef8:	1dfb      	adds	r3, r7, #7
 8018efa:	4619      	mov	r1, r3
 8018efc:	f242 007e 	movw	r0, #8318	; 0x207e
 8018f00:	f7fd fe94 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*CURRENT_VOLTAGE_B_REG+1, &status_reg_temp_l);
 8018f04:	1dbb      	adds	r3, r7, #6
 8018f06:	4619      	mov	r1, r3
 8018f08:	f242 007f 	movw	r0, #8319	; 0x207f
 8018f0c:	f7fd fe8e 	bl	8016c2c <fm25v02_read>
	status_registers.current_voltage_b_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018f10:	79fb      	ldrb	r3, [r7, #7]
 8018f12:	021b      	lsls	r3, r3, #8
 8018f14:	b21a      	sxth	r2, r3
 8018f16:	79bb      	ldrb	r3, [r7, #6]
 8018f18:	b21b      	sxth	r3, r3
 8018f1a:	4313      	orrs	r3, r2
 8018f1c:	b21b      	sxth	r3, r3
 8018f1e:	b29a      	uxth	r2, r3
 8018f20:	4b44      	ldr	r3, [pc, #272]	; (8019034 <read_status_registers+0xc24>)
 8018f22:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

	fm25v02_read(2*CURRENT_VOLTAGE_C_REG, &status_reg_temp_h);
 8018f26:	1dfb      	adds	r3, r7, #7
 8018f28:	4619      	mov	r1, r3
 8018f2a:	f44f 5002 	mov.w	r0, #8320	; 0x2080
 8018f2e:	f7fd fe7d 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*CURRENT_VOLTAGE_C_REG+1, &status_reg_temp_l);
 8018f32:	1dbb      	adds	r3, r7, #6
 8018f34:	4619      	mov	r1, r3
 8018f36:	f242 0081 	movw	r0, #8321	; 0x2081
 8018f3a:	f7fd fe77 	bl	8016c2c <fm25v02_read>
	status_registers.current_voltage_c_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018f3e:	79fb      	ldrb	r3, [r7, #7]
 8018f40:	021b      	lsls	r3, r3, #8
 8018f42:	b21a      	sxth	r2, r3
 8018f44:	79bb      	ldrb	r3, [r7, #6]
 8018f46:	b21b      	sxth	r3, r3
 8018f48:	4313      	orrs	r3, r2
 8018f4a:	b21b      	sxth	r3, r3
 8018f4c:	b29a      	uxth	r2, r3
 8018f4e:	4b39      	ldr	r3, [pc, #228]	; (8019034 <read_status_registers+0xc24>)
 8018f50:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

	fm25v02_read(2*CE_303_TOTAL_POWER_H_REG, &status_reg_temp_h);
 8018f54:	1dfb      	adds	r3, r7, #7
 8018f56:	4619      	mov	r1, r3
 8018f58:	f242 0082 	movw	r0, #8322	; 0x2082
 8018f5c:	f7fd fe66 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*CE_303_TOTAL_POWER_H_REG+1, &status_reg_temp_l);
 8018f60:	1dbb      	adds	r3, r7, #6
 8018f62:	4619      	mov	r1, r3
 8018f64:	f242 0083 	movw	r0, #8323	; 0x2083
 8018f68:	f7fd fe60 	bl	8016c2c <fm25v02_read>
	status_registers.ce303_total_power_h_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018f6c:	79fb      	ldrb	r3, [r7, #7]
 8018f6e:	021b      	lsls	r3, r3, #8
 8018f70:	b21a      	sxth	r2, r3
 8018f72:	79bb      	ldrb	r3, [r7, #6]
 8018f74:	b21b      	sxth	r3, r3
 8018f76:	4313      	orrs	r3, r2
 8018f78:	b21b      	sxth	r3, r3
 8018f7a:	b29a      	uxth	r2, r3
 8018f7c:	4b2d      	ldr	r3, [pc, #180]	; (8019034 <read_status_registers+0xc24>)
 8018f7e:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82

	fm25v02_read(2*CE_303_TOTAL_POWER_L_REG, &status_reg_temp_h);
 8018f82:	1dfb      	adds	r3, r7, #7
 8018f84:	4619      	mov	r1, r3
 8018f86:	f242 0084 	movw	r0, #8324	; 0x2084
 8018f8a:	f7fd fe4f 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*CE_303_TOTAL_POWER_L_REG+1, &status_reg_temp_l);
 8018f8e:	1dbb      	adds	r3, r7, #6
 8018f90:	4619      	mov	r1, r3
 8018f92:	f242 0085 	movw	r0, #8325	; 0x2085
 8018f96:	f7fd fe49 	bl	8016c2c <fm25v02_read>
	status_registers.ce303_total_power_l_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018f9a:	79fb      	ldrb	r3, [r7, #7]
 8018f9c:	021b      	lsls	r3, r3, #8
 8018f9e:	b21a      	sxth	r2, r3
 8018fa0:	79bb      	ldrb	r3, [r7, #6]
 8018fa2:	b21b      	sxth	r3, r3
 8018fa4:	4313      	orrs	r3, r2
 8018fa6:	b21b      	sxth	r3, r3
 8018fa8:	b29a      	uxth	r2, r3
 8018faa:	4b22      	ldr	r3, [pc, #136]	; (8019034 <read_status_registers+0xc24>)
 8018fac:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84

	fm25v02_read(2*CE_303_TOTAL_POWER_M_REG, &status_reg_temp_h);
 8018fb0:	1dfb      	adds	r3, r7, #7
 8018fb2:	4619      	mov	r1, r3
 8018fb4:	f242 0086 	movw	r0, #8326	; 0x2086
 8018fb8:	f7fd fe38 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*CE_303_TOTAL_POWER_M_REG+1, &status_reg_temp_l);
 8018fbc:	1dbb      	adds	r3, r7, #6
 8018fbe:	4619      	mov	r1, r3
 8018fc0:	f242 0087 	movw	r0, #8327	; 0x2087
 8018fc4:	f7fd fe32 	bl	8016c2c <fm25v02_read>
	status_registers.ce303_total_power_m_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018fc8:	79fb      	ldrb	r3, [r7, #7]
 8018fca:	021b      	lsls	r3, r3, #8
 8018fcc:	b21a      	sxth	r2, r3
 8018fce:	79bb      	ldrb	r3, [r7, #6]
 8018fd0:	b21b      	sxth	r3, r3
 8018fd2:	4313      	orrs	r3, r2
 8018fd4:	b21b      	sxth	r3, r3
 8018fd6:	b29a      	uxth	r2, r3
 8018fd8:	4b16      	ldr	r3, [pc, #88]	; (8019034 <read_status_registers+0xc24>)
 8018fda:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86

	fm25v02_read(2*CE_303_TARIF1_POWER_H_REG, &status_reg_temp_h);
 8018fde:	1dfb      	adds	r3, r7, #7
 8018fe0:	4619      	mov	r1, r3
 8018fe2:	f242 0088 	movw	r0, #8328	; 0x2088
 8018fe6:	f7fd fe21 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF1_POWER_H_REG+1, &status_reg_temp_l);
 8018fea:	1dbb      	adds	r3, r7, #6
 8018fec:	4619      	mov	r1, r3
 8018fee:	f242 0089 	movw	r0, #8329	; 0x2089
 8018ff2:	f7fd fe1b 	bl	8016c2c <fm25v02_read>
	status_registers.ce303_tarif1_power_h_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8018ff6:	79fb      	ldrb	r3, [r7, #7]
 8018ff8:	021b      	lsls	r3, r3, #8
 8018ffa:	b21a      	sxth	r2, r3
 8018ffc:	79bb      	ldrb	r3, [r7, #6]
 8018ffe:	b21b      	sxth	r3, r3
 8019000:	4313      	orrs	r3, r2
 8019002:	b21b      	sxth	r3, r3
 8019004:	b29a      	uxth	r2, r3
 8019006:	4b0b      	ldr	r3, [pc, #44]	; (8019034 <read_status_registers+0xc24>)
 8019008:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88

	fm25v02_read(2*CE_303_TARIF1_POWER_L_REG, &status_reg_temp_h);
 801900c:	1dfb      	adds	r3, r7, #7
 801900e:	4619      	mov	r1, r3
 8019010:	f242 008a 	movw	r0, #8330	; 0x208a
 8019014:	f7fd fe0a 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF1_POWER_L_REG+1, &status_reg_temp_l);
 8019018:	1dbb      	adds	r3, r7, #6
 801901a:	4619      	mov	r1, r3
 801901c:	f242 008b 	movw	r0, #8331	; 0x208b
 8019020:	f7fd fe04 	bl	8016c2c <fm25v02_read>
	status_registers.ce303_tarif1_power_l_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8019024:	79fb      	ldrb	r3, [r7, #7]
 8019026:	021b      	lsls	r3, r3, #8
 8019028:	b21a      	sxth	r2, r3
 801902a:	79bb      	ldrb	r3, [r7, #6]
 801902c:	b21b      	sxth	r3, r3
 801902e:	4313      	orrs	r3, r2
 8019030:	b21b      	sxth	r3, r3
 8019032:	e001      	b.n	8019038 <read_status_registers+0xc28>
 8019034:	2000a174 	.word	0x2000a174
 8019038:	b29a      	uxth	r2, r3
 801903a:	4bc3      	ldr	r3, [pc, #780]	; (8019348 <read_status_registers+0xf38>)
 801903c:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a

	fm25v02_read(2*CE_303_TARIF1_POWER_MIL_REG, &status_reg_temp_h);
 8019040:	1dfb      	adds	r3, r7, #7
 8019042:	4619      	mov	r1, r3
 8019044:	f242 008c 	movw	r0, #8332	; 0x208c
 8019048:	f7fd fdf0 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF1_POWER_MIL_REG+1, &status_reg_temp_l);
 801904c:	1dbb      	adds	r3, r7, #6
 801904e:	4619      	mov	r1, r3
 8019050:	f242 008d 	movw	r0, #8333	; 0x208d
 8019054:	f7fd fdea 	bl	8016c2c <fm25v02_read>
	status_registers.ce303_tarif1_power_mil_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8019058:	79fb      	ldrb	r3, [r7, #7]
 801905a:	021b      	lsls	r3, r3, #8
 801905c:	b21a      	sxth	r2, r3
 801905e:	79bb      	ldrb	r3, [r7, #6]
 8019060:	b21b      	sxth	r3, r3
 8019062:	4313      	orrs	r3, r2
 8019064:	b21b      	sxth	r3, r3
 8019066:	b29a      	uxth	r2, r3
 8019068:	4bb7      	ldr	r3, [pc, #732]	; (8019348 <read_status_registers+0xf38>)
 801906a:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c

	fm25v02_read(2*CE_303_TARIF2_POWER_H_REG, &status_reg_temp_h);
 801906e:	1dfb      	adds	r3, r7, #7
 8019070:	4619      	mov	r1, r3
 8019072:	f242 008e 	movw	r0, #8334	; 0x208e
 8019076:	f7fd fdd9 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF2_POWER_H_REG+1, &status_reg_temp_l);
 801907a:	1dbb      	adds	r3, r7, #6
 801907c:	4619      	mov	r1, r3
 801907e:	f242 008f 	movw	r0, #8335	; 0x208f
 8019082:	f7fd fdd3 	bl	8016c2c <fm25v02_read>
	status_registers.ce303_tarif2_power_h_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8019086:	79fb      	ldrb	r3, [r7, #7]
 8019088:	021b      	lsls	r3, r3, #8
 801908a:	b21a      	sxth	r2, r3
 801908c:	79bb      	ldrb	r3, [r7, #6]
 801908e:	b21b      	sxth	r3, r3
 8019090:	4313      	orrs	r3, r2
 8019092:	b21b      	sxth	r3, r3
 8019094:	b29a      	uxth	r2, r3
 8019096:	4bac      	ldr	r3, [pc, #688]	; (8019348 <read_status_registers+0xf38>)
 8019098:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e

	fm25v02_read(2*CE_303_TARIF2_POWER_L_REG, &status_reg_temp_h);
 801909c:	1dfb      	adds	r3, r7, #7
 801909e:	4619      	mov	r1, r3
 80190a0:	f242 0090 	movw	r0, #8336	; 0x2090
 80190a4:	f7fd fdc2 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF2_POWER_L_REG+1, &status_reg_temp_l);
 80190a8:	1dbb      	adds	r3, r7, #6
 80190aa:	4619      	mov	r1, r3
 80190ac:	f242 0091 	movw	r0, #8337	; 0x2091
 80190b0:	f7fd fdbc 	bl	8016c2c <fm25v02_read>
	status_registers.ce303_tarif2_power_l_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80190b4:	79fb      	ldrb	r3, [r7, #7]
 80190b6:	021b      	lsls	r3, r3, #8
 80190b8:	b21a      	sxth	r2, r3
 80190ba:	79bb      	ldrb	r3, [r7, #6]
 80190bc:	b21b      	sxth	r3, r3
 80190be:	4313      	orrs	r3, r2
 80190c0:	b21b      	sxth	r3, r3
 80190c2:	b29a      	uxth	r2, r3
 80190c4:	4ba0      	ldr	r3, [pc, #640]	; (8019348 <read_status_registers+0xf38>)
 80190c6:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90

	fm25v02_read(2*CE_303_TARIF2_POWER_MIL_REG, &status_reg_temp_h);
 80190ca:	1dfb      	adds	r3, r7, #7
 80190cc:	4619      	mov	r1, r3
 80190ce:	f242 0092 	movw	r0, #8338	; 0x2092
 80190d2:	f7fd fdab 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF2_POWER_MIL_REG+1, &status_reg_temp_l);
 80190d6:	1dbb      	adds	r3, r7, #6
 80190d8:	4619      	mov	r1, r3
 80190da:	f242 0093 	movw	r0, #8339	; 0x2093
 80190de:	f7fd fda5 	bl	8016c2c <fm25v02_read>
	status_registers.ce303_tarif2_power_mil_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80190e2:	79fb      	ldrb	r3, [r7, #7]
 80190e4:	021b      	lsls	r3, r3, #8
 80190e6:	b21a      	sxth	r2, r3
 80190e8:	79bb      	ldrb	r3, [r7, #6]
 80190ea:	b21b      	sxth	r3, r3
 80190ec:	4313      	orrs	r3, r2
 80190ee:	b21b      	sxth	r3, r3
 80190f0:	b29a      	uxth	r2, r3
 80190f2:	4b95      	ldr	r3, [pc, #596]	; (8019348 <read_status_registers+0xf38>)
 80190f4:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92

	fm25v02_read(2*CE_303_TARIF3_POWER_H_REG, &status_reg_temp_h);
 80190f8:	1dfb      	adds	r3, r7, #7
 80190fa:	4619      	mov	r1, r3
 80190fc:	f242 0094 	movw	r0, #8340	; 0x2094
 8019100:	f7fd fd94 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF3_POWER_H_REG+1, &status_reg_temp_l);
 8019104:	1dbb      	adds	r3, r7, #6
 8019106:	4619      	mov	r1, r3
 8019108:	f242 0095 	movw	r0, #8341	; 0x2095
 801910c:	f7fd fd8e 	bl	8016c2c <fm25v02_read>
	status_registers.ce303_tarif3_power_h_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8019110:	79fb      	ldrb	r3, [r7, #7]
 8019112:	021b      	lsls	r3, r3, #8
 8019114:	b21a      	sxth	r2, r3
 8019116:	79bb      	ldrb	r3, [r7, #6]
 8019118:	b21b      	sxth	r3, r3
 801911a:	4313      	orrs	r3, r2
 801911c:	b21b      	sxth	r3, r3
 801911e:	b29a      	uxth	r2, r3
 8019120:	4b89      	ldr	r3, [pc, #548]	; (8019348 <read_status_registers+0xf38>)
 8019122:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94

	fm25v02_read(2*CE_303_TARIF3_POWER_L_REG, &status_reg_temp_h);
 8019126:	1dfb      	adds	r3, r7, #7
 8019128:	4619      	mov	r1, r3
 801912a:	f242 0096 	movw	r0, #8342	; 0x2096
 801912e:	f7fd fd7d 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF3_POWER_L_REG+1, &status_reg_temp_l);
 8019132:	1dbb      	adds	r3, r7, #6
 8019134:	4619      	mov	r1, r3
 8019136:	f242 0097 	movw	r0, #8343	; 0x2097
 801913a:	f7fd fd77 	bl	8016c2c <fm25v02_read>
	status_registers.ce303_tarif3_power_l_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 801913e:	79fb      	ldrb	r3, [r7, #7]
 8019140:	021b      	lsls	r3, r3, #8
 8019142:	b21a      	sxth	r2, r3
 8019144:	79bb      	ldrb	r3, [r7, #6]
 8019146:	b21b      	sxth	r3, r3
 8019148:	4313      	orrs	r3, r2
 801914a:	b21b      	sxth	r3, r3
 801914c:	b29a      	uxth	r2, r3
 801914e:	4b7e      	ldr	r3, [pc, #504]	; (8019348 <read_status_registers+0xf38>)
 8019150:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96

	fm25v02_read(2*CE_303_TARIF3_POWER_MIL_REG, &status_reg_temp_h);
 8019154:	1dfb      	adds	r3, r7, #7
 8019156:	4619      	mov	r1, r3
 8019158:	f242 0098 	movw	r0, #8344	; 0x2098
 801915c:	f7fd fd66 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF3_POWER_MIL_REG+1, &status_reg_temp_l);
 8019160:	1dbb      	adds	r3, r7, #6
 8019162:	4619      	mov	r1, r3
 8019164:	f242 0099 	movw	r0, #8345	; 0x2099
 8019168:	f7fd fd60 	bl	8016c2c <fm25v02_read>
	status_registers.ce303_tarif3_power_mil_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 801916c:	79fb      	ldrb	r3, [r7, #7]
 801916e:	021b      	lsls	r3, r3, #8
 8019170:	b21a      	sxth	r2, r3
 8019172:	79bb      	ldrb	r3, [r7, #6]
 8019174:	b21b      	sxth	r3, r3
 8019176:	4313      	orrs	r3, r2
 8019178:	b21b      	sxth	r3, r3
 801917a:	b29a      	uxth	r2, r3
 801917c:	4b72      	ldr	r3, [pc, #456]	; (8019348 <read_status_registers+0xf38>)
 801917e:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98

	fm25v02_read(2*CE_303_TARIF4_POWER_H_REG, &status_reg_temp_h);
 8019182:	1dfb      	adds	r3, r7, #7
 8019184:	4619      	mov	r1, r3
 8019186:	f242 009a 	movw	r0, #8346	; 0x209a
 801918a:	f7fd fd4f 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF4_POWER_H_REG+1, &status_reg_temp_l);
 801918e:	1dbb      	adds	r3, r7, #6
 8019190:	4619      	mov	r1, r3
 8019192:	f242 009b 	movw	r0, #8347	; 0x209b
 8019196:	f7fd fd49 	bl	8016c2c <fm25v02_read>
	status_registers.ce303_tarif4_power_h_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 801919a:	79fb      	ldrb	r3, [r7, #7]
 801919c:	021b      	lsls	r3, r3, #8
 801919e:	b21a      	sxth	r2, r3
 80191a0:	79bb      	ldrb	r3, [r7, #6]
 80191a2:	b21b      	sxth	r3, r3
 80191a4:	4313      	orrs	r3, r2
 80191a6:	b21b      	sxth	r3, r3
 80191a8:	b29a      	uxth	r2, r3
 80191aa:	4b67      	ldr	r3, [pc, #412]	; (8019348 <read_status_registers+0xf38>)
 80191ac:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a

	fm25v02_read(2*CE_303_TARIF4_POWER_L_REG, &status_reg_temp_h);
 80191b0:	1dfb      	adds	r3, r7, #7
 80191b2:	4619      	mov	r1, r3
 80191b4:	f242 009c 	movw	r0, #8348	; 0x209c
 80191b8:	f7fd fd38 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF4_POWER_L_REG+1, &status_reg_temp_l);
 80191bc:	1dbb      	adds	r3, r7, #6
 80191be:	4619      	mov	r1, r3
 80191c0:	f242 009d 	movw	r0, #8349	; 0x209d
 80191c4:	f7fd fd32 	bl	8016c2c <fm25v02_read>
	status_registers.ce303_tarif4_power_l_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80191c8:	79fb      	ldrb	r3, [r7, #7]
 80191ca:	021b      	lsls	r3, r3, #8
 80191cc:	b21a      	sxth	r2, r3
 80191ce:	79bb      	ldrb	r3, [r7, #6]
 80191d0:	b21b      	sxth	r3, r3
 80191d2:	4313      	orrs	r3, r2
 80191d4:	b21b      	sxth	r3, r3
 80191d6:	b29a      	uxth	r2, r3
 80191d8:	4b5b      	ldr	r3, [pc, #364]	; (8019348 <read_status_registers+0xf38>)
 80191da:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c

	fm25v02_read(2*CE_303_TARIF4_POWER_MIL_REG, &status_reg_temp_h);
 80191de:	1dfb      	adds	r3, r7, #7
 80191e0:	4619      	mov	r1, r3
 80191e2:	f242 009e 	movw	r0, #8350	; 0x209e
 80191e6:	f7fd fd21 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF4_POWER_MIL_REG+1, &status_reg_temp_l);
 80191ea:	1dbb      	adds	r3, r7, #6
 80191ec:	4619      	mov	r1, r3
 80191ee:	f242 009f 	movw	r0, #8351	; 0x209f
 80191f2:	f7fd fd1b 	bl	8016c2c <fm25v02_read>
	status_registers.ce303_tarif4_power_mil_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80191f6:	79fb      	ldrb	r3, [r7, #7]
 80191f8:	021b      	lsls	r3, r3, #8
 80191fa:	b21a      	sxth	r2, r3
 80191fc:	79bb      	ldrb	r3, [r7, #6]
 80191fe:	b21b      	sxth	r3, r3
 8019200:	4313      	orrs	r3, r2
 8019202:	b21b      	sxth	r3, r3
 8019204:	b29a      	uxth	r2, r3
 8019206:	4b50      	ldr	r3, [pc, #320]	; (8019348 <read_status_registers+0xf38>)
 8019208:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e

	fm25v02_read(2*CE_303_TARIF5_POWER_H_REG, &status_reg_temp_h);
 801920c:	1dfb      	adds	r3, r7, #7
 801920e:	4619      	mov	r1, r3
 8019210:	f242 00a0 	movw	r0, #8352	; 0x20a0
 8019214:	f7fd fd0a 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF5_POWER_H_REG+1, &status_reg_temp_l);
 8019218:	1dbb      	adds	r3, r7, #6
 801921a:	4619      	mov	r1, r3
 801921c:	f242 00a1 	movw	r0, #8353	; 0x20a1
 8019220:	f7fd fd04 	bl	8016c2c <fm25v02_read>
	status_registers.ce303_tarif5_power_h_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8019224:	79fb      	ldrb	r3, [r7, #7]
 8019226:	021b      	lsls	r3, r3, #8
 8019228:	b21a      	sxth	r2, r3
 801922a:	79bb      	ldrb	r3, [r7, #6]
 801922c:	b21b      	sxth	r3, r3
 801922e:	4313      	orrs	r3, r2
 8019230:	b21b      	sxth	r3, r3
 8019232:	b29a      	uxth	r2, r3
 8019234:	4b44      	ldr	r3, [pc, #272]	; (8019348 <read_status_registers+0xf38>)
 8019236:	f8a3 20a0 	strh.w	r2, [r3, #160]	; 0xa0

	fm25v02_read(2*CE_303_TARIF5_POWER_L_REG, &status_reg_temp_h);
 801923a:	1dfb      	adds	r3, r7, #7
 801923c:	4619      	mov	r1, r3
 801923e:	f242 00a2 	movw	r0, #8354	; 0x20a2
 8019242:	f7fd fcf3 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF5_POWER_L_REG+1, &status_reg_temp_l);
 8019246:	1dbb      	adds	r3, r7, #6
 8019248:	4619      	mov	r1, r3
 801924a:	f242 00a3 	movw	r0, #8355	; 0x20a3
 801924e:	f7fd fced 	bl	8016c2c <fm25v02_read>
	status_registers.ce303_tarif5_power_l_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8019252:	79fb      	ldrb	r3, [r7, #7]
 8019254:	021b      	lsls	r3, r3, #8
 8019256:	b21a      	sxth	r2, r3
 8019258:	79bb      	ldrb	r3, [r7, #6]
 801925a:	b21b      	sxth	r3, r3
 801925c:	4313      	orrs	r3, r2
 801925e:	b21b      	sxth	r3, r3
 8019260:	b29a      	uxth	r2, r3
 8019262:	4b39      	ldr	r3, [pc, #228]	; (8019348 <read_status_registers+0xf38>)
 8019264:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2

	fm25v02_read(2*CE_303_TARIF5_POWER_MIL_REG, &status_reg_temp_h);
 8019268:	1dfb      	adds	r3, r7, #7
 801926a:	4619      	mov	r1, r3
 801926c:	f242 00a4 	movw	r0, #8356	; 0x20a4
 8019270:	f7fd fcdc 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*CE_303_TARIF5_POWER_MIL_REG+1, &status_reg_temp_l);
 8019274:	1dbb      	adds	r3, r7, #6
 8019276:	4619      	mov	r1, r3
 8019278:	f242 00a5 	movw	r0, #8357	; 0x20a5
 801927c:	f7fd fcd6 	bl	8016c2c <fm25v02_read>
	status_registers.ce303_tarif5_power_mil_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8019280:	79fb      	ldrb	r3, [r7, #7]
 8019282:	021b      	lsls	r3, r3, #8
 8019284:	b21a      	sxth	r2, r3
 8019286:	79bb      	ldrb	r3, [r7, #6]
 8019288:	b21b      	sxth	r3, r3
 801928a:	4313      	orrs	r3, r2
 801928c:	b21b      	sxth	r3, r3
 801928e:	b29a      	uxth	r2, r3
 8019290:	4b2d      	ldr	r3, [pc, #180]	; (8019348 <read_status_registers+0xf38>)
 8019292:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4

	fm25v02_read(2*SIGNAL_LEVEL_REG, &status_reg_temp_h);
 8019296:	1dfb      	adds	r3, r7, #7
 8019298:	4619      	mov	r1, r3
 801929a:	f242 00a6 	movw	r0, #8358	; 0x20a6
 801929e:	f7fd fcc5 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*SIGNAL_LEVEL_REG+1, &status_reg_temp_l);
 80192a2:	1dbb      	adds	r3, r7, #6
 80192a4:	4619      	mov	r1, r3
 80192a6:	f242 00a7 	movw	r0, #8359	; 0x20a7
 80192aa:	f7fd fcbf 	bl	8016c2c <fm25v02_read>
	status_registers.signal_level_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80192ae:	79fb      	ldrb	r3, [r7, #7]
 80192b0:	021b      	lsls	r3, r3, #8
 80192b2:	b21a      	sxth	r2, r3
 80192b4:	79bb      	ldrb	r3, [r7, #6]
 80192b6:	b21b      	sxth	r3, r3
 80192b8:	4313      	orrs	r3, r2
 80192ba:	b21b      	sxth	r3, r3
 80192bc:	b29a      	uxth	r2, r3
 80192be:	4b22      	ldr	r3, [pc, #136]	; (8019348 <read_status_registers+0xf38>)
 80192c0:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6

	fm25v02_read(2*ADVANCED_LOOP_REG, &status_reg_temp_h);
 80192c4:	1dfb      	adds	r3, r7, #7
 80192c6:	4619      	mov	r1, r3
 80192c8:	f242 00aa 	movw	r0, #8362	; 0x20aa
 80192cc:	f7fd fcae 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*ADVANCED_LOOP_REG+1, &status_reg_temp_l);
 80192d0:	1dbb      	adds	r3, r7, #6
 80192d2:	4619      	mov	r1, r3
 80192d4:	f242 00ab 	movw	r0, #8363	; 0x20ab
 80192d8:	f7fd fca8 	bl	8016c2c <fm25v02_read>
	status_registers.advanced_loop_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80192dc:	79fb      	ldrb	r3, [r7, #7]
 80192de:	021b      	lsls	r3, r3, #8
 80192e0:	b21a      	sxth	r2, r3
 80192e2:	79bb      	ldrb	r3, [r7, #6]
 80192e4:	b21b      	sxth	r3, r3
 80192e6:	4313      	orrs	r3, r2
 80192e8:	b21b      	sxth	r3, r3
 80192ea:	b29a      	uxth	r2, r3
 80192ec:	4b16      	ldr	r3, [pc, #88]	; (8019348 <read_status_registers+0xf38>)
 80192ee:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

	fm25v02_read(2*ADDITIONAL_INPUT_REG1, &status_reg_temp_h);
 80192f2:	1dfb      	adds	r3, r7, #7
 80192f4:	4619      	mov	r1, r3
 80192f6:	f242 00ac 	movw	r0, #8364	; 0x20ac
 80192fa:	f7fd fc97 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*ADDITIONAL_INPUT_REG1+1, &status_reg_temp_l);
 80192fe:	1dbb      	adds	r3, r7, #6
 8019300:	4619      	mov	r1, r3
 8019302:	f242 00ad 	movw	r0, #8365	; 0x20ad
 8019306:	f7fd fc91 	bl	8016c2c <fm25v02_read>
	status_registers.additional_input_reg1 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 801930a:	79fb      	ldrb	r3, [r7, #7]
 801930c:	021b      	lsls	r3, r3, #8
 801930e:	b21a      	sxth	r2, r3
 8019310:	79bb      	ldrb	r3, [r7, #6]
 8019312:	b21b      	sxth	r3, r3
 8019314:	4313      	orrs	r3, r2
 8019316:	b21b      	sxth	r3, r3
 8019318:	b29a      	uxth	r2, r3
 801931a:	4b0b      	ldr	r3, [pc, #44]	; (8019348 <read_status_registers+0xf38>)
 801931c:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa

	fm25v02_read(2*ADDITIONAL_INPUT_REG2, &status_reg_temp_h);
 8019320:	1dfb      	adds	r3, r7, #7
 8019322:	4619      	mov	r1, r3
 8019324:	f242 00ae 	movw	r0, #8366	; 0x20ae
 8019328:	f7fd fc80 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*ADDITIONAL_INPUT_REG2+1, &status_reg_temp_l);
 801932c:	1dbb      	adds	r3, r7, #6
 801932e:	4619      	mov	r1, r3
 8019330:	f242 00af 	movw	r0, #8367	; 0x20af
 8019334:	f7fd fc7a 	bl	8016c2c <fm25v02_read>
	status_registers.additional_input_reg2 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8019338:	79fb      	ldrb	r3, [r7, #7]
 801933a:	021b      	lsls	r3, r3, #8
 801933c:	b21a      	sxth	r2, r3
 801933e:	79bb      	ldrb	r3, [r7, #6]
 8019340:	b21b      	sxth	r3, r3
 8019342:	4313      	orrs	r3, r2
 8019344:	b21b      	sxth	r3, r3
 8019346:	e001      	b.n	801934c <read_status_registers+0xf3c>
 8019348:	2000a174 	.word	0x2000a174
 801934c:	b29a      	uxth	r2, r3
 801934e:	4b62      	ldr	r3, [pc, #392]	; (80194d8 <read_status_registers+0x10c8>)
 8019350:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac

	fm25v02_read(2*ICCID_NUMBER_REG1, &status_reg_temp_h);
 8019354:	1dfb      	adds	r3, r7, #7
 8019356:	4619      	mov	r1, r3
 8019358:	f242 00b0 	movw	r0, #8368	; 0x20b0
 801935c:	f7fd fc66 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*ICCID_NUMBER_REG1+1, &status_reg_temp_l);
 8019360:	1dbb      	adds	r3, r7, #6
 8019362:	4619      	mov	r1, r3
 8019364:	f242 00b1 	movw	r0, #8369	; 0x20b1
 8019368:	f7fd fc60 	bl	8016c2c <fm25v02_read>
	status_registers.iccid_number_reg1 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 801936c:	79fb      	ldrb	r3, [r7, #7]
 801936e:	021b      	lsls	r3, r3, #8
 8019370:	b21a      	sxth	r2, r3
 8019372:	79bb      	ldrb	r3, [r7, #6]
 8019374:	b21b      	sxth	r3, r3
 8019376:	4313      	orrs	r3, r2
 8019378:	b21b      	sxth	r3, r3
 801937a:	b29a      	uxth	r2, r3
 801937c:	4b56      	ldr	r3, [pc, #344]	; (80194d8 <read_status_registers+0x10c8>)
 801937e:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae

	fm25v02_read(2*ICCID_NUMBER_REG2, &status_reg_temp_h);
 8019382:	1dfb      	adds	r3, r7, #7
 8019384:	4619      	mov	r1, r3
 8019386:	f242 00b2 	movw	r0, #8370	; 0x20b2
 801938a:	f7fd fc4f 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*ICCID_NUMBER_REG2+1, &status_reg_temp_l);
 801938e:	1dbb      	adds	r3, r7, #6
 8019390:	4619      	mov	r1, r3
 8019392:	f242 00b3 	movw	r0, #8371	; 0x20b3
 8019396:	f7fd fc49 	bl	8016c2c <fm25v02_read>
	status_registers.iccid_number_reg2 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 801939a:	79fb      	ldrb	r3, [r7, #7]
 801939c:	021b      	lsls	r3, r3, #8
 801939e:	b21a      	sxth	r2, r3
 80193a0:	79bb      	ldrb	r3, [r7, #6]
 80193a2:	b21b      	sxth	r3, r3
 80193a4:	4313      	orrs	r3, r2
 80193a6:	b21b      	sxth	r3, r3
 80193a8:	b29a      	uxth	r2, r3
 80193aa:	4b4b      	ldr	r3, [pc, #300]	; (80194d8 <read_status_registers+0x10c8>)
 80193ac:	f8a3 20b0 	strh.w	r2, [r3, #176]	; 0xb0

	fm25v02_read(2*ICCID_NUMBER_REG3, &status_reg_temp_h);
 80193b0:	1dfb      	adds	r3, r7, #7
 80193b2:	4619      	mov	r1, r3
 80193b4:	f242 00b4 	movw	r0, #8372	; 0x20b4
 80193b8:	f7fd fc38 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*ICCID_NUMBER_REG3+1, &status_reg_temp_l);
 80193bc:	1dbb      	adds	r3, r7, #6
 80193be:	4619      	mov	r1, r3
 80193c0:	f242 00b5 	movw	r0, #8373	; 0x20b5
 80193c4:	f7fd fc32 	bl	8016c2c <fm25v02_read>
	status_registers.iccid_number_reg3 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80193c8:	79fb      	ldrb	r3, [r7, #7]
 80193ca:	021b      	lsls	r3, r3, #8
 80193cc:	b21a      	sxth	r2, r3
 80193ce:	79bb      	ldrb	r3, [r7, #6]
 80193d0:	b21b      	sxth	r3, r3
 80193d2:	4313      	orrs	r3, r2
 80193d4:	b21b      	sxth	r3, r3
 80193d6:	b29a      	uxth	r2, r3
 80193d8:	4b3f      	ldr	r3, [pc, #252]	; (80194d8 <read_status_registers+0x10c8>)
 80193da:	f8a3 20b2 	strh.w	r2, [r3, #178]	; 0xb2

	fm25v02_read(2*ICCID_NUMBER_REG4, &status_reg_temp_h);
 80193de:	1dfb      	adds	r3, r7, #7
 80193e0:	4619      	mov	r1, r3
 80193e2:	f242 00b6 	movw	r0, #8374	; 0x20b6
 80193e6:	f7fd fc21 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*ICCID_NUMBER_REG4+1, &status_reg_temp_l);
 80193ea:	1dbb      	adds	r3, r7, #6
 80193ec:	4619      	mov	r1, r3
 80193ee:	f242 00b7 	movw	r0, #8375	; 0x20b7
 80193f2:	f7fd fc1b 	bl	8016c2c <fm25v02_read>
	status_registers.iccid_number_reg4 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80193f6:	79fb      	ldrb	r3, [r7, #7]
 80193f8:	021b      	lsls	r3, r3, #8
 80193fa:	b21a      	sxth	r2, r3
 80193fc:	79bb      	ldrb	r3, [r7, #6]
 80193fe:	b21b      	sxth	r3, r3
 8019400:	4313      	orrs	r3, r2
 8019402:	b21b      	sxth	r3, r3
 8019404:	b29a      	uxth	r2, r3
 8019406:	4b34      	ldr	r3, [pc, #208]	; (80194d8 <read_status_registers+0x10c8>)
 8019408:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4

	fm25v02_read(2*ICCID_NUMBER_REG5, &status_reg_temp_h);
 801940c:	1dfb      	adds	r3, r7, #7
 801940e:	4619      	mov	r1, r3
 8019410:	f242 00b8 	movw	r0, #8376	; 0x20b8
 8019414:	f7fd fc0a 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*ICCID_NUMBER_REG5+1, &status_reg_temp_l);
 8019418:	1dbb      	adds	r3, r7, #6
 801941a:	4619      	mov	r1, r3
 801941c:	f242 00b9 	movw	r0, #8377	; 0x20b9
 8019420:	f7fd fc04 	bl	8016c2c <fm25v02_read>
	status_registers.iccid_number_reg5 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8019424:	79fb      	ldrb	r3, [r7, #7]
 8019426:	021b      	lsls	r3, r3, #8
 8019428:	b21a      	sxth	r2, r3
 801942a:	79bb      	ldrb	r3, [r7, #6]
 801942c:	b21b      	sxth	r3, r3
 801942e:	4313      	orrs	r3, r2
 8019430:	b21b      	sxth	r3, r3
 8019432:	b29a      	uxth	r2, r3
 8019434:	4b28      	ldr	r3, [pc, #160]	; (80194d8 <read_status_registers+0x10c8>)
 8019436:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6

	fm25v02_read(2*ICCID_NUMBER_REG6, &status_reg_temp_h);
 801943a:	1dfb      	adds	r3, r7, #7
 801943c:	4619      	mov	r1, r3
 801943e:	f242 00ba 	movw	r0, #8378	; 0x20ba
 8019442:	f7fd fbf3 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*ICCID_NUMBER_REG6+1, &status_reg_temp_l);
 8019446:	1dbb      	adds	r3, r7, #6
 8019448:	4619      	mov	r1, r3
 801944a:	f242 00bb 	movw	r0, #8379	; 0x20bb
 801944e:	f7fd fbed 	bl	8016c2c <fm25v02_read>
	status_registers.iccid_number_reg6 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8019452:	79fb      	ldrb	r3, [r7, #7]
 8019454:	021b      	lsls	r3, r3, #8
 8019456:	b21a      	sxth	r2, r3
 8019458:	79bb      	ldrb	r3, [r7, #6]
 801945a:	b21b      	sxth	r3, r3
 801945c:	4313      	orrs	r3, r2
 801945e:	b21b      	sxth	r3, r3
 8019460:	b29a      	uxth	r2, r3
 8019462:	4b1d      	ldr	r3, [pc, #116]	; (80194d8 <read_status_registers+0x10c8>)
 8019464:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8

	fm25v02_read(2*ICCID_NUMBER_REG7, &status_reg_temp_h);
 8019468:	1dfb      	adds	r3, r7, #7
 801946a:	4619      	mov	r1, r3
 801946c:	f242 00bc 	movw	r0, #8380	; 0x20bc
 8019470:	f7fd fbdc 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*ICCID_NUMBER_REG7+1, &status_reg_temp_l);
 8019474:	1dbb      	adds	r3, r7, #6
 8019476:	4619      	mov	r1, r3
 8019478:	f242 00bd 	movw	r0, #8381	; 0x20bd
 801947c:	f7fd fbd6 	bl	8016c2c <fm25v02_read>
	status_registers.iccid_number_reg7 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8019480:	79fb      	ldrb	r3, [r7, #7]
 8019482:	021b      	lsls	r3, r3, #8
 8019484:	b21a      	sxth	r2, r3
 8019486:	79bb      	ldrb	r3, [r7, #6]
 8019488:	b21b      	sxth	r3, r3
 801948a:	4313      	orrs	r3, r2
 801948c:	b21b      	sxth	r3, r3
 801948e:	b29a      	uxth	r2, r3
 8019490:	4b11      	ldr	r3, [pc, #68]	; (80194d8 <read_status_registers+0x10c8>)
 8019492:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba

	fm25v02_read(2*ICCID_NUMBER_REG8, &status_reg_temp_h);
 8019496:	1dfb      	adds	r3, r7, #7
 8019498:	4619      	mov	r1, r3
 801949a:	f242 00be 	movw	r0, #8382	; 0x20be
 801949e:	f7fd fbc5 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*ICCID_NUMBER_REG8+1, &status_reg_temp_l);
 80194a2:	1dbb      	adds	r3, r7, #6
 80194a4:	4619      	mov	r1, r3
 80194a6:	f242 00bf 	movw	r0, #8383	; 0x20bf
 80194aa:	f7fd fbbf 	bl	8016c2c <fm25v02_read>
	status_registers.iccid_number_reg8 = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80194ae:	79fb      	ldrb	r3, [r7, #7]
 80194b0:	021b      	lsls	r3, r3, #8
 80194b2:	b21a      	sxth	r2, r3
 80194b4:	79bb      	ldrb	r3, [r7, #6]
 80194b6:	b21b      	sxth	r3, r3
 80194b8:	4313      	orrs	r3, r2
 80194ba:	b21b      	sxth	r3, r3
 80194bc:	b29a      	uxth	r2, r3
 80194be:	4b06      	ldr	r3, [pc, #24]	; (80194d8 <read_status_registers+0x10c8>)
 80194c0:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc

	osMutexRelease(Fm25v02MutexHandle);
 80194c4:	4b05      	ldr	r3, [pc, #20]	; (80194dc <read_status_registers+0x10cc>)
 80194c6:	681b      	ldr	r3, [r3, #0]
 80194c8:	4618      	mov	r0, r3
 80194ca:	f7ef fa75 	bl	80089b8 <osMutexRelease>
}
 80194ce:	bf00      	nop
 80194d0:	3708      	adds	r7, #8
 80194d2:	46bd      	mov	sp, r7
 80194d4:	bd80      	pop	{r7, pc}
 80194d6:	bf00      	nop
 80194d8:	2000a174 	.word	0x2000a174
 80194dc:	20009af8 	.word	0x20009af8

080194e0 <read_control_registers>:
//----------------------------------------------------------------

//----Функция чтения из памяти управляющих регистров--------------
void read_control_registers(void)
{
 80194e0:	b580      	push	{r7, lr}
 80194e2:	b082      	sub	sp, #8
 80194e4:	af00      	add	r7, sp, #0
	uint8_t status_reg_temp_h;
	uint8_t status_reg_temp_l;

	osMutexWait(Fm25v02MutexHandle, osWaitForever);
 80194e6:	4bbc      	ldr	r3, [pc, #752]	; (80197d8 <read_control_registers+0x2f8>)
 80194e8:	681b      	ldr	r3, [r3, #0]
 80194ea:	f04f 31ff 	mov.w	r1, #4294967295
 80194ee:	4618      	mov	r0, r3
 80194f0:	f7ef fa14 	bl	800891c <osMutexWait>

	fm25v02_read(2*SECURITY_CONTROL_REG, &status_reg_temp_h);
 80194f4:	1dfb      	adds	r3, r7, #7
 80194f6:	4619      	mov	r1, r3
 80194f8:	f242 1020 	movw	r0, #8480	; 0x2120
 80194fc:	f7fd fb96 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*SECURITY_CONTROL_REG+1, &status_reg_temp_l);
 8019500:	1dbb      	adds	r3, r7, #6
 8019502:	4619      	mov	r1, r3
 8019504:	f242 1021 	movw	r0, #8481	; 0x2121
 8019508:	f7fd fb90 	bl	8016c2c <fm25v02_read>
	control_registers.security_control_reg = ((((uint16_t)status_reg_temp_h)&0x00FF)<<8)|(((uint16_t)status_reg_temp_l)&0x00FF);
 801950c:	79fb      	ldrb	r3, [r7, #7]
 801950e:	021b      	lsls	r3, r3, #8
 8019510:	b21a      	sxth	r2, r3
 8019512:	79bb      	ldrb	r3, [r7, #6]
 8019514:	b21b      	sxth	r3, r3
 8019516:	4313      	orrs	r3, r2
 8019518:	b21b      	sxth	r3, r3
 801951a:	b29a      	uxth	r2, r3
 801951c:	4baf      	ldr	r3, [pc, #700]	; (80197dc <read_control_registers+0x2fc>)
 801951e:	801a      	strh	r2, [r3, #0]

	fm25v02_read(2*CONTROL_LOOP_REG, &status_reg_temp_h);
 8019520:	1dfb      	adds	r3, r7, #7
 8019522:	4619      	mov	r1, r3
 8019524:	f242 1022 	movw	r0, #8482	; 0x2122
 8019528:	f7fd fb80 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*CONTROL_LOOP_REG+1, &status_reg_temp_l);
 801952c:	1dbb      	adds	r3, r7, #6
 801952e:	4619      	mov	r1, r3
 8019530:	f242 1023 	movw	r0, #8483	; 0x2123
 8019534:	f7fd fb7a 	bl	8016c2c <fm25v02_read>
	control_registers.control_loop_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8019538:	79fb      	ldrb	r3, [r7, #7]
 801953a:	021b      	lsls	r3, r3, #8
 801953c:	b21a      	sxth	r2, r3
 801953e:	79bb      	ldrb	r3, [r7, #6]
 8019540:	b21b      	sxth	r3, r3
 8019542:	4313      	orrs	r3, r2
 8019544:	b21b      	sxth	r3, r3
 8019546:	b29a      	uxth	r2, r3
 8019548:	4ba4      	ldr	r3, [pc, #656]	; (80197dc <read_control_registers+0x2fc>)
 801954a:	805a      	strh	r2, [r3, #2]

	fm25v02_read(2*FILTER_TIME_LOOP_REG, &status_reg_temp_h);
 801954c:	1dfb      	adds	r3, r7, #7
 801954e:	4619      	mov	r1, r3
 8019550:	f242 1024 	movw	r0, #8484	; 0x2124
 8019554:	f7fd fb6a 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*FILTER_TIME_LOOP_REG+1, &status_reg_temp_l);
 8019558:	1dbb      	adds	r3, r7, #6
 801955a:	4619      	mov	r1, r3
 801955c:	f242 1025 	movw	r0, #8485	; 0x2125
 8019560:	f7fd fb64 	bl	8016c2c <fm25v02_read>
	control_registers.filter_time_loop_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8019564:	79fb      	ldrb	r3, [r7, #7]
 8019566:	021b      	lsls	r3, r3, #8
 8019568:	b21a      	sxth	r2, r3
 801956a:	79bb      	ldrb	r3, [r7, #6]
 801956c:	b21b      	sxth	r3, r3
 801956e:	4313      	orrs	r3, r2
 8019570:	b21b      	sxth	r3, r3
 8019572:	b29a      	uxth	r2, r3
 8019574:	4b99      	ldr	r3, [pc, #612]	; (80197dc <read_control_registers+0x2fc>)
 8019576:	809a      	strh	r2, [r3, #4]

	fm25v02_read(2*QUANTITY_FALSE_LOOP_REG, &status_reg_temp_h);
 8019578:	1dfb      	adds	r3, r7, #7
 801957a:	4619      	mov	r1, r3
 801957c:	f242 1026 	movw	r0, #8486	; 0x2126
 8019580:	f7fd fb54 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*QUANTITY_FALSE_LOOP_REG+1, &status_reg_temp_l);
 8019584:	1dbb      	adds	r3, r7, #6
 8019586:	4619      	mov	r1, r3
 8019588:	f242 1027 	movw	r0, #8487	; 0x2127
 801958c:	f7fd fb4e 	bl	8016c2c <fm25v02_read>
	control_registers.quantity_false_loop_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8019590:	79fb      	ldrb	r3, [r7, #7]
 8019592:	021b      	lsls	r3, r3, #8
 8019594:	b21a      	sxth	r2, r3
 8019596:	79bb      	ldrb	r3, [r7, #6]
 8019598:	b21b      	sxth	r3, r3
 801959a:	4313      	orrs	r3, r2
 801959c:	b21b      	sxth	r3, r3
 801959e:	b29a      	uxth	r2, r3
 80195a0:	4b8e      	ldr	r3, [pc, #568]	; (80197dc <read_control_registers+0x2fc>)
 80195a2:	80da      	strh	r2, [r3, #6]

	fm25v02_read(2*TIME_FALSE_LOOP_REG, &status_reg_temp_h);
 80195a4:	1dfb      	adds	r3, r7, #7
 80195a6:	4619      	mov	r1, r3
 80195a8:	f242 1028 	movw	r0, #8488	; 0x2128
 80195ac:	f7fd fb3e 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*TIME_FALSE_LOOP_REG+1, &status_reg_temp_l);
 80195b0:	1dbb      	adds	r3, r7, #6
 80195b2:	4619      	mov	r1, r3
 80195b4:	f242 1029 	movw	r0, #8489	; 0x2129
 80195b8:	f7fd fb38 	bl	8016c2c <fm25v02_read>
	control_registers.time_false_loop_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80195bc:	79fb      	ldrb	r3, [r7, #7]
 80195be:	021b      	lsls	r3, r3, #8
 80195c0:	b21a      	sxth	r2, r3
 80195c2:	79bb      	ldrb	r3, [r7, #6]
 80195c4:	b21b      	sxth	r3, r3
 80195c6:	4313      	orrs	r3, r2
 80195c8:	b21b      	sxth	r3, r3
 80195ca:	b29a      	uxth	r2, r3
 80195cc:	4b83      	ldr	r3, [pc, #524]	; (80197dc <read_control_registers+0x2fc>)
 80195ce:	811a      	strh	r2, [r3, #8]

	fm25v02_read(2*ALARM_LOOP_CLEAR_REG, &status_reg_temp_h);
 80195d0:	1dfb      	adds	r3, r7, #7
 80195d2:	4619      	mov	r1, r3
 80195d4:	f242 102a 	movw	r0, #8490	; 0x212a
 80195d8:	f7fd fb28 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*ALARM_LOOP_CLEAR_REG+1, &status_reg_temp_l);
 80195dc:	1dbb      	adds	r3, r7, #6
 80195de:	4619      	mov	r1, r3
 80195e0:	f242 102b 	movw	r0, #8491	; 0x212b
 80195e4:	f7fd fb22 	bl	8016c2c <fm25v02_read>
	control_registers.alarm_loop_clear_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80195e8:	79fb      	ldrb	r3, [r7, #7]
 80195ea:	021b      	lsls	r3, r3, #8
 80195ec:	b21a      	sxth	r2, r3
 80195ee:	79bb      	ldrb	r3, [r7, #6]
 80195f0:	b21b      	sxth	r3, r3
 80195f2:	4313      	orrs	r3, r2
 80195f4:	b21b      	sxth	r3, r3
 80195f6:	b29a      	uxth	r2, r3
 80195f8:	4b78      	ldr	r3, [pc, #480]	; (80197dc <read_control_registers+0x2fc>)
 80195fa:	815a      	strh	r2, [r3, #10]

	fm25v02_read(2*FALSE_LOOP_CLEAR_REG, &status_reg_temp_h);
 80195fc:	1dfb      	adds	r3, r7, #7
 80195fe:	4619      	mov	r1, r3
 8019600:	f242 102c 	movw	r0, #8492	; 0x212c
 8019604:	f7fd fb12 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*FALSE_LOOP_CLEAR_REG+1, &status_reg_temp_l);
 8019608:	1dbb      	adds	r3, r7, #6
 801960a:	4619      	mov	r1, r3
 801960c:	f242 102d 	movw	r0, #8493	; 0x212d
 8019610:	f7fd fb0c 	bl	8016c2c <fm25v02_read>
	control_registers.false_loop_clear_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8019614:	79fb      	ldrb	r3, [r7, #7]
 8019616:	021b      	lsls	r3, r3, #8
 8019618:	b21a      	sxth	r2, r3
 801961a:	79bb      	ldrb	r3, [r7, #6]
 801961c:	b21b      	sxth	r3, r3
 801961e:	4313      	orrs	r3, r2
 8019620:	b21b      	sxth	r3, r3
 8019622:	b29a      	uxth	r2, r3
 8019624:	4b6d      	ldr	r3, [pc, #436]	; (80197dc <read_control_registers+0x2fc>)
 8019626:	819a      	strh	r2, [r3, #12]

	fm25v02_read(2*SECURITY_TIME_MAX_REG, &status_reg_temp_h);
 8019628:	1dfb      	adds	r3, r7, #7
 801962a:	4619      	mov	r1, r3
 801962c:	f242 102e 	movw	r0, #8494	; 0x212e
 8019630:	f7fd fafc 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*SECURITY_TIME_MAX_REG+1, &status_reg_temp_l);
 8019634:	1dbb      	adds	r3, r7, #6
 8019636:	4619      	mov	r1, r3
 8019638:	f242 102f 	movw	r0, #8495	; 0x212f
 801963c:	f7fd faf6 	bl	8016c2c <fm25v02_read>
	control_registers.security_time_max_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8019640:	79fb      	ldrb	r3, [r7, #7]
 8019642:	021b      	lsls	r3, r3, #8
 8019644:	b21a      	sxth	r2, r3
 8019646:	79bb      	ldrb	r3, [r7, #6]
 8019648:	b21b      	sxth	r3, r3
 801964a:	4313      	orrs	r3, r2
 801964c:	b21b      	sxth	r3, r3
 801964e:	b29a      	uxth	r2, r3
 8019650:	4b62      	ldr	r3, [pc, #392]	; (80197dc <read_control_registers+0x2fc>)
 8019652:	81da      	strh	r2, [r3, #14]

	fm25v02_read(2*TIME_UPDATE_REG, &status_reg_temp_h);
 8019654:	1dfb      	adds	r3, r7, #7
 8019656:	4619      	mov	r1, r3
 8019658:	f242 1030 	movw	r0, #8496	; 0x2130
 801965c:	f7fd fae6 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*TIME_UPDATE_REG+1, &status_reg_temp_l);
 8019660:	1dbb      	adds	r3, r7, #6
 8019662:	4619      	mov	r1, r3
 8019664:	f242 1031 	movw	r0, #8497	; 0x2131
 8019668:	f7fd fae0 	bl	8016c2c <fm25v02_read>
	control_registers.time_update_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 801966c:	79fb      	ldrb	r3, [r7, #7]
 801966e:	021b      	lsls	r3, r3, #8
 8019670:	b21a      	sxth	r2, r3
 8019672:	79bb      	ldrb	r3, [r7, #6]
 8019674:	b21b      	sxth	r3, r3
 8019676:	4313      	orrs	r3, r2
 8019678:	b21b      	sxth	r3, r3
 801967a:	b29a      	uxth	r2, r3
 801967c:	4b57      	ldr	r3, [pc, #348]	; (80197dc <read_control_registers+0x2fc>)
 801967e:	821a      	strh	r2, [r3, #16]

	fm25v02_read(2*TIME_YEAR_REG, &status_reg_temp_h);
 8019680:	1dfb      	adds	r3, r7, #7
 8019682:	4619      	mov	r1, r3
 8019684:	f242 1032 	movw	r0, #8498	; 0x2132
 8019688:	f7fd fad0 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*TIME_YEAR_REG+1, &status_reg_temp_l);
 801968c:	1dbb      	adds	r3, r7, #6
 801968e:	4619      	mov	r1, r3
 8019690:	f242 1033 	movw	r0, #8499	; 0x2133
 8019694:	f7fd faca 	bl	8016c2c <fm25v02_read>
	control_registers.time_year_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8019698:	79fb      	ldrb	r3, [r7, #7]
 801969a:	021b      	lsls	r3, r3, #8
 801969c:	b21a      	sxth	r2, r3
 801969e:	79bb      	ldrb	r3, [r7, #6]
 80196a0:	b21b      	sxth	r3, r3
 80196a2:	4313      	orrs	r3, r2
 80196a4:	b21b      	sxth	r3, r3
 80196a6:	b29a      	uxth	r2, r3
 80196a8:	4b4c      	ldr	r3, [pc, #304]	; (80197dc <read_control_registers+0x2fc>)
 80196aa:	825a      	strh	r2, [r3, #18]

	fm25v02_read(2*TIME_MONTH_REG, &status_reg_temp_h);
 80196ac:	1dfb      	adds	r3, r7, #7
 80196ae:	4619      	mov	r1, r3
 80196b0:	f242 1034 	movw	r0, #8500	; 0x2134
 80196b4:	f7fd faba 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*TIME_MONTH_REG+1, &status_reg_temp_l);
 80196b8:	1dbb      	adds	r3, r7, #6
 80196ba:	4619      	mov	r1, r3
 80196bc:	f242 1035 	movw	r0, #8501	; 0x2135
 80196c0:	f7fd fab4 	bl	8016c2c <fm25v02_read>
	control_registers.time_month_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80196c4:	79fb      	ldrb	r3, [r7, #7]
 80196c6:	021b      	lsls	r3, r3, #8
 80196c8:	b21a      	sxth	r2, r3
 80196ca:	79bb      	ldrb	r3, [r7, #6]
 80196cc:	b21b      	sxth	r3, r3
 80196ce:	4313      	orrs	r3, r2
 80196d0:	b21b      	sxth	r3, r3
 80196d2:	b29a      	uxth	r2, r3
 80196d4:	4b41      	ldr	r3, [pc, #260]	; (80197dc <read_control_registers+0x2fc>)
 80196d6:	829a      	strh	r2, [r3, #20]

	fm25v02_read(2*TIME_DAY_REG, &status_reg_temp_h);
 80196d8:	1dfb      	adds	r3, r7, #7
 80196da:	4619      	mov	r1, r3
 80196dc:	f242 1036 	movw	r0, #8502	; 0x2136
 80196e0:	f7fd faa4 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*TIME_DAY_REG+1, &status_reg_temp_l);
 80196e4:	1dbb      	adds	r3, r7, #6
 80196e6:	4619      	mov	r1, r3
 80196e8:	f242 1037 	movw	r0, #8503	; 0x2137
 80196ec:	f7fd fa9e 	bl	8016c2c <fm25v02_read>
	control_registers.time_day_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80196f0:	79fb      	ldrb	r3, [r7, #7]
 80196f2:	021b      	lsls	r3, r3, #8
 80196f4:	b21a      	sxth	r2, r3
 80196f6:	79bb      	ldrb	r3, [r7, #6]
 80196f8:	b21b      	sxth	r3, r3
 80196fa:	4313      	orrs	r3, r2
 80196fc:	b21b      	sxth	r3, r3
 80196fe:	b29a      	uxth	r2, r3
 8019700:	4b36      	ldr	r3, [pc, #216]	; (80197dc <read_control_registers+0x2fc>)
 8019702:	82da      	strh	r2, [r3, #22]

	fm25v02_read(2*TIME_HOUR_REG, &status_reg_temp_h);
 8019704:	1dfb      	adds	r3, r7, #7
 8019706:	4619      	mov	r1, r3
 8019708:	f242 1038 	movw	r0, #8504	; 0x2138
 801970c:	f7fd fa8e 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*TIME_HOUR_REG+1, &status_reg_temp_l);
 8019710:	1dbb      	adds	r3, r7, #6
 8019712:	4619      	mov	r1, r3
 8019714:	f242 1039 	movw	r0, #8505	; 0x2139
 8019718:	f7fd fa88 	bl	8016c2c <fm25v02_read>
	control_registers.time_hour_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 801971c:	79fb      	ldrb	r3, [r7, #7]
 801971e:	021b      	lsls	r3, r3, #8
 8019720:	b21a      	sxth	r2, r3
 8019722:	79bb      	ldrb	r3, [r7, #6]
 8019724:	b21b      	sxth	r3, r3
 8019726:	4313      	orrs	r3, r2
 8019728:	b21b      	sxth	r3, r3
 801972a:	b29a      	uxth	r2, r3
 801972c:	4b2b      	ldr	r3, [pc, #172]	; (80197dc <read_control_registers+0x2fc>)
 801972e:	831a      	strh	r2, [r3, #24]

	fm25v02_read(2*TIME_MINUTE_REG, &status_reg_temp_h);
 8019730:	1dfb      	adds	r3, r7, #7
 8019732:	4619      	mov	r1, r3
 8019734:	f242 103a 	movw	r0, #8506	; 0x213a
 8019738:	f7fd fa78 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*TIME_MINUTE_REG+1, &status_reg_temp_l);
 801973c:	1dbb      	adds	r3, r7, #6
 801973e:	4619      	mov	r1, r3
 8019740:	f242 103b 	movw	r0, #8507	; 0x213b
 8019744:	f7fd fa72 	bl	8016c2c <fm25v02_read>
	control_registers.time_minute_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8019748:	79fb      	ldrb	r3, [r7, #7]
 801974a:	021b      	lsls	r3, r3, #8
 801974c:	b21a      	sxth	r2, r3
 801974e:	79bb      	ldrb	r3, [r7, #6]
 8019750:	b21b      	sxth	r3, r3
 8019752:	4313      	orrs	r3, r2
 8019754:	b21b      	sxth	r3, r3
 8019756:	b29a      	uxth	r2, r3
 8019758:	4b20      	ldr	r3, [pc, #128]	; (80197dc <read_control_registers+0x2fc>)
 801975a:	835a      	strh	r2, [r3, #26]

	fm25v02_read(2*TIME_SECONDS_REG, &status_reg_temp_h);
 801975c:	1dfb      	adds	r3, r7, #7
 801975e:	4619      	mov	r1, r3
 8019760:	f242 103c 	movw	r0, #8508	; 0x213c
 8019764:	f7fd fa62 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*TIME_SECONDS_REG+1, &status_reg_temp_l);
 8019768:	1dbb      	adds	r3, r7, #6
 801976a:	4619      	mov	r1, r3
 801976c:	f242 103d 	movw	r0, #8509	; 0x213d
 8019770:	f7fd fa5c 	bl	8016c2c <fm25v02_read>
	control_registers.time_seconds_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8019774:	79fb      	ldrb	r3, [r7, #7]
 8019776:	021b      	lsls	r3, r3, #8
 8019778:	b21a      	sxth	r2, r3
 801977a:	79bb      	ldrb	r3, [r7, #6]
 801977c:	b21b      	sxth	r3, r3
 801977e:	4313      	orrs	r3, r2
 8019780:	b21b      	sxth	r3, r3
 8019782:	b29a      	uxth	r2, r3
 8019784:	4b15      	ldr	r3, [pc, #84]	; (80197dc <read_control_registers+0x2fc>)
 8019786:	839a      	strh	r2, [r3, #28]

	fm25v02_read(2*TIME_WEEKDAY_REG, &status_reg_temp_h);
 8019788:	1dfb      	adds	r3, r7, #7
 801978a:	4619      	mov	r1, r3
 801978c:	f242 103e 	movw	r0, #8510	; 0x213e
 8019790:	f7fd fa4c 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*TIME_WEEKDAY_REG+1, &status_reg_temp_l);
 8019794:	1dbb      	adds	r3, r7, #6
 8019796:	4619      	mov	r1, r3
 8019798:	f242 103f 	movw	r0, #8511	; 0x213f
 801979c:	f7fd fa46 	bl	8016c2c <fm25v02_read>
	control_registers.time_weekday_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80197a0:	79fb      	ldrb	r3, [r7, #7]
 80197a2:	021b      	lsls	r3, r3, #8
 80197a4:	b21a      	sxth	r2, r3
 80197a6:	79bb      	ldrb	r3, [r7, #6]
 80197a8:	b21b      	sxth	r3, r3
 80197aa:	4313      	orrs	r3, r2
 80197ac:	b21b      	sxth	r3, r3
 80197ae:	b29a      	uxth	r2, r3
 80197b0:	4b0a      	ldr	r3, [pc, #40]	; (80197dc <read_control_registers+0x2fc>)
 80197b2:	83da      	strh	r2, [r3, #30]

	fm25v02_read(2*MODBUS_IDLE_TIME_MAX_REG, &status_reg_temp_h);
 80197b4:	1dfb      	adds	r3, r7, #7
 80197b6:	4619      	mov	r1, r3
 80197b8:	f44f 5005 	mov.w	r0, #8512	; 0x2140
 80197bc:	f7fd fa36 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*MODBUS_IDLE_TIME_MAX_REG+1, &status_reg_temp_l);
 80197c0:	1dbb      	adds	r3, r7, #6
 80197c2:	4619      	mov	r1, r3
 80197c4:	f242 1041 	movw	r0, #8513	; 0x2141
 80197c8:	f7fd fa30 	bl	8016c2c <fm25v02_read>
	control_registers.modbus_idle_time_max_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80197cc:	79fb      	ldrb	r3, [r7, #7]
 80197ce:	021b      	lsls	r3, r3, #8
 80197d0:	b21a      	sxth	r2, r3
 80197d2:	79bb      	ldrb	r3, [r7, #6]
 80197d4:	e004      	b.n	80197e0 <read_control_registers+0x300>
 80197d6:	bf00      	nop
 80197d8:	20009af8 	.word	0x20009af8
 80197dc:	2000a234 	.word	0x2000a234
 80197e0:	b21b      	sxth	r3, r3
 80197e2:	4313      	orrs	r3, r2
 80197e4:	b21b      	sxth	r3, r3
 80197e6:	b29a      	uxth	r2, r3
 80197e8:	4bbb      	ldr	r3, [pc, #748]	; (8019ad8 <read_control_registers+0x5f8>)
 80197ea:	841a      	strh	r2, [r3, #32]

	fm25v02_read(2*TIME_CONNECTION_TEST_REG, &status_reg_temp_h);
 80197ec:	1dfb      	adds	r3, r7, #7
 80197ee:	4619      	mov	r1, r3
 80197f0:	f242 1042 	movw	r0, #8514	; 0x2142
 80197f4:	f7fd fa1a 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*TIME_CONNECTION_TEST_REG+1, &status_reg_temp_l);
 80197f8:	1dbb      	adds	r3, r7, #6
 80197fa:	4619      	mov	r1, r3
 80197fc:	f242 1043 	movw	r0, #8515	; 0x2143
 8019800:	f7fd fa14 	bl	8016c2c <fm25v02_read>
	control_registers.time_connection_test_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8019804:	79fb      	ldrb	r3, [r7, #7]
 8019806:	021b      	lsls	r3, r3, #8
 8019808:	b21a      	sxth	r2, r3
 801980a:	79bb      	ldrb	r3, [r7, #6]
 801980c:	b21b      	sxth	r3, r3
 801980e:	4313      	orrs	r3, r2
 8019810:	b21b      	sxth	r3, r3
 8019812:	b29a      	uxth	r2, r3
 8019814:	4bb0      	ldr	r3, [pc, #704]	; (8019ad8 <read_control_registers+0x5f8>)
 8019816:	845a      	strh	r2, [r3, #34]	; 0x22

	fm25v02_read(2*EVENT_READ_REG, &status_reg_temp_h);
 8019818:	1dfb      	adds	r3, r7, #7
 801981a:	4619      	mov	r1, r3
 801981c:	f242 1044 	movw	r0, #8516	; 0x2144
 8019820:	f7fd fa04 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*EVENT_READ_REG+1, &status_reg_temp_l);
 8019824:	1dbb      	adds	r3, r7, #6
 8019826:	4619      	mov	r1, r3
 8019828:	f242 1045 	movw	r0, #8517	; 0x2145
 801982c:	f7fd f9fe 	bl	8016c2c <fm25v02_read>
	control_registers.event_read_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8019830:	79fb      	ldrb	r3, [r7, #7]
 8019832:	021b      	lsls	r3, r3, #8
 8019834:	b21a      	sxth	r2, r3
 8019836:	79bb      	ldrb	r3, [r7, #6]
 8019838:	b21b      	sxth	r3, r3
 801983a:	4313      	orrs	r3, r2
 801983c:	b21b      	sxth	r3, r3
 801983e:	b29a      	uxth	r2, r3
 8019840:	4ba5      	ldr	r3, [pc, #660]	; (8019ad8 <read_control_registers+0x5f8>)
 8019842:	849a      	strh	r2, [r3, #36]	; 0x24

	fm25v02_read(2*EVENT_ADDRESS_HIGH_REG, &status_reg_temp_h);
 8019844:	1dfb      	adds	r3, r7, #7
 8019846:	4619      	mov	r1, r3
 8019848:	f242 1046 	movw	r0, #8518	; 0x2146
 801984c:	f7fd f9ee 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*EVENT_ADDRESS_HIGH_REG+1, &status_reg_temp_l);
 8019850:	1dbb      	adds	r3, r7, #6
 8019852:	4619      	mov	r1, r3
 8019854:	f242 1047 	movw	r0, #8519	; 0x2147
 8019858:	f7fd f9e8 	bl	8016c2c <fm25v02_read>
	control_registers.event_address_high_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 801985c:	79fb      	ldrb	r3, [r7, #7]
 801985e:	021b      	lsls	r3, r3, #8
 8019860:	b21a      	sxth	r2, r3
 8019862:	79bb      	ldrb	r3, [r7, #6]
 8019864:	b21b      	sxth	r3, r3
 8019866:	4313      	orrs	r3, r2
 8019868:	b21b      	sxth	r3, r3
 801986a:	b29a      	uxth	r2, r3
 801986c:	4b9a      	ldr	r3, [pc, #616]	; (8019ad8 <read_control_registers+0x5f8>)
 801986e:	84da      	strh	r2, [r3, #38]	; 0x26

	fm25v02_read(2*EVENT_ADDRESS_LOW_REG, &status_reg_temp_h);
 8019870:	1dfb      	adds	r3, r7, #7
 8019872:	4619      	mov	r1, r3
 8019874:	f242 1048 	movw	r0, #8520	; 0x2148
 8019878:	f7fd f9d8 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*EVENT_ADDRESS_LOW_REG+1, &status_reg_temp_l);
 801987c:	1dbb      	adds	r3, r7, #6
 801987e:	4619      	mov	r1, r3
 8019880:	f242 1049 	movw	r0, #8521	; 0x2149
 8019884:	f7fd f9d2 	bl	8016c2c <fm25v02_read>
	control_registers.event_address_low_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8019888:	79fb      	ldrb	r3, [r7, #7]
 801988a:	021b      	lsls	r3, r3, #8
 801988c:	b21a      	sxth	r2, r3
 801988e:	79bb      	ldrb	r3, [r7, #6]
 8019890:	b21b      	sxth	r3, r3
 8019892:	4313      	orrs	r3, r2
 8019894:	b21b      	sxth	r3, r3
 8019896:	b29a      	uxth	r2, r3
 8019898:	4b8f      	ldr	r3, [pc, #572]	; (8019ad8 <read_control_registers+0x5f8>)
 801989a:	851a      	strh	r2, [r3, #40]	; 0x28

	fm25v02_read(2*MODEM_RING_TRY_LOAD_REG, &status_reg_temp_h);
 801989c:	1dfb      	adds	r3, r7, #7
 801989e:	4619      	mov	r1, r3
 80198a0:	f242 104a 	movw	r0, #8522	; 0x214a
 80198a4:	f7fd f9c2 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*MODEM_RING_TRY_LOAD_REG+1, &status_reg_temp_l);
 80198a8:	1dbb      	adds	r3, r7, #6
 80198aa:	4619      	mov	r1, r3
 80198ac:	f242 104b 	movw	r0, #8523	; 0x214b
 80198b0:	f7fd f9bc 	bl	8016c2c <fm25v02_read>
	control_registers.modem_ring_try_load_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80198b4:	79fb      	ldrb	r3, [r7, #7]
 80198b6:	021b      	lsls	r3, r3, #8
 80198b8:	b21a      	sxth	r2, r3
 80198ba:	79bb      	ldrb	r3, [r7, #6]
 80198bc:	b21b      	sxth	r3, r3
 80198be:	4313      	orrs	r3, r2
 80198c0:	b21b      	sxth	r3, r3
 80198c2:	b29a      	uxth	r2, r3
 80198c4:	4b84      	ldr	r3, [pc, #528]	; (8019ad8 <read_control_registers+0x5f8>)
 80198c6:	855a      	strh	r2, [r3, #42]	; 0x2a

	fm25v02_read(2*MODEM_RING_PAUSE_LOAD_REG, &status_reg_temp_h);
 80198c8:	1dfb      	adds	r3, r7, #7
 80198ca:	4619      	mov	r1, r3
 80198cc:	f242 104c 	movw	r0, #8524	; 0x214c
 80198d0:	f7fd f9ac 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*MODEM_RING_PAUSE_LOAD_REG+1, &status_reg_temp_l);
 80198d4:	1dbb      	adds	r3, r7, #6
 80198d6:	4619      	mov	r1, r3
 80198d8:	f242 104d 	movw	r0, #8525	; 0x214d
 80198dc:	f7fd f9a6 	bl	8016c2c <fm25v02_read>
	control_registers.modem_ring_pause_load_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80198e0:	79fb      	ldrb	r3, [r7, #7]
 80198e2:	021b      	lsls	r3, r3, #8
 80198e4:	b21a      	sxth	r2, r3
 80198e6:	79bb      	ldrb	r3, [r7, #6]
 80198e8:	b21b      	sxth	r3, r3
 80198ea:	4313      	orrs	r3, r2
 80198ec:	b21b      	sxth	r3, r3
 80198ee:	b29a      	uxth	r2, r3
 80198f0:	4b79      	ldr	r3, [pc, #484]	; (8019ad8 <read_control_registers+0x5f8>)
 80198f2:	859a      	strh	r2, [r3, #44]	; 0x2c

	fm25v02_read(2*MODEM_RING_PAUSE2_LOAD_REG, &status_reg_temp_h);
 80198f4:	1dfb      	adds	r3, r7, #7
 80198f6:	4619      	mov	r1, r3
 80198f8:	f242 104e 	movw	r0, #8526	; 0x214e
 80198fc:	f7fd f996 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*MODEM_RING_PAUSE2_LOAD_REG+1, &status_reg_temp_l);
 8019900:	1dbb      	adds	r3, r7, #6
 8019902:	4619      	mov	r1, r3
 8019904:	f242 104f 	movw	r0, #8527	; 0x214f
 8019908:	f7fd f990 	bl	8016c2c <fm25v02_read>
	control_registers.modem_ring_pause2_load_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 801990c:	79fb      	ldrb	r3, [r7, #7]
 801990e:	021b      	lsls	r3, r3, #8
 8019910:	b21a      	sxth	r2, r3
 8019912:	79bb      	ldrb	r3, [r7, #6]
 8019914:	b21b      	sxth	r3, r3
 8019916:	4313      	orrs	r3, r2
 8019918:	b21b      	sxth	r3, r3
 801991a:	b29a      	uxth	r2, r3
 801991c:	4b6e      	ldr	r3, [pc, #440]	; (8019ad8 <read_control_registers+0x5f8>)
 801991e:	85da      	strh	r2, [r3, #46]	; 0x2e

	fm25v02_read(2*RING_MINUTE_TIME_REG, &status_reg_temp_h);
 8019920:	1dfb      	adds	r3, r7, #7
 8019922:	4619      	mov	r1, r3
 8019924:	f242 1050 	movw	r0, #8528	; 0x2150
 8019928:	f7fd f980 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*RING_MINUTE_TIME_REG+1, &status_reg_temp_l);
 801992c:	1dbb      	adds	r3, r7, #6
 801992e:	4619      	mov	r1, r3
 8019930:	f242 1051 	movw	r0, #8529	; 0x2151
 8019934:	f7fd f97a 	bl	8016c2c <fm25v02_read>
	control_registers.ring_minute_time_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8019938:	79fb      	ldrb	r3, [r7, #7]
 801993a:	021b      	lsls	r3, r3, #8
 801993c:	b21a      	sxth	r2, r3
 801993e:	79bb      	ldrb	r3, [r7, #6]
 8019940:	b21b      	sxth	r3, r3
 8019942:	4313      	orrs	r3, r2
 8019944:	b21b      	sxth	r3, r3
 8019946:	b29a      	uxth	r2, r3
 8019948:	4b63      	ldr	r3, [pc, #396]	; (8019ad8 <read_control_registers+0x5f8>)
 801994a:	861a      	strh	r2, [r3, #48]	; 0x30

	fm25v02_read(2*RING_HOUR_TIME_REG, &status_reg_temp_h);
 801994c:	1dfb      	adds	r3, r7, #7
 801994e:	4619      	mov	r1, r3
 8019950:	f242 1052 	movw	r0, #8530	; 0x2152
 8019954:	f7fd f96a 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*RING_HOUR_TIME_REG+1, &status_reg_temp_l);
 8019958:	1dbb      	adds	r3, r7, #6
 801995a:	4619      	mov	r1, r3
 801995c:	f242 1053 	movw	r0, #8531	; 0x2153
 8019960:	f7fd f964 	bl	8016c2c <fm25v02_read>
	control_registers.ring_hour_time_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8019964:	79fb      	ldrb	r3, [r7, #7]
 8019966:	021b      	lsls	r3, r3, #8
 8019968:	b21a      	sxth	r2, r3
 801996a:	79bb      	ldrb	r3, [r7, #6]
 801996c:	b21b      	sxth	r3, r3
 801996e:	4313      	orrs	r3, r2
 8019970:	b21b      	sxth	r3, r3
 8019972:	b29a      	uxth	r2, r3
 8019974:	4b58      	ldr	r3, [pc, #352]	; (8019ad8 <read_control_registers+0x5f8>)
 8019976:	865a      	strh	r2, [r3, #50]	; 0x32

	fm25v02_read(2*ID_HIGH_REG, &status_reg_temp_h);
 8019978:	1dfb      	adds	r3, r7, #7
 801997a:	4619      	mov	r1, r3
 801997c:	f242 1056 	movw	r0, #8534	; 0x2156
 8019980:	f7fd f954 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*ID_HIGH_REG+1, &status_reg_temp_l);
 8019984:	1dbb      	adds	r3, r7, #6
 8019986:	4619      	mov	r1, r3
 8019988:	f242 1057 	movw	r0, #8535	; 0x2157
 801998c:	f7fd f94e 	bl	8016c2c <fm25v02_read>
	control_registers.id_high_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8019990:	79fb      	ldrb	r3, [r7, #7]
 8019992:	021b      	lsls	r3, r3, #8
 8019994:	b21a      	sxth	r2, r3
 8019996:	79bb      	ldrb	r3, [r7, #6]
 8019998:	b21b      	sxth	r3, r3
 801999a:	4313      	orrs	r3, r2
 801999c:	b21b      	sxth	r3, r3
 801999e:	b29a      	uxth	r2, r3
 80199a0:	4b4d      	ldr	r3, [pc, #308]	; (8019ad8 <read_control_registers+0x5f8>)
 80199a2:	869a      	strh	r2, [r3, #52]	; 0x34

	fm25v02_read(2*ID_LOW_REG, &status_reg_temp_h);
 80199a4:	1dfb      	adds	r3, r7, #7
 80199a6:	4619      	mov	r1, r3
 80199a8:	f242 1058 	movw	r0, #8536	; 0x2158
 80199ac:	f7fd f93e 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*ID_LOW_REG+1, &status_reg_temp_l);
 80199b0:	1dbb      	adds	r3, r7, #6
 80199b2:	4619      	mov	r1, r3
 80199b4:	f242 1059 	movw	r0, #8537	; 0x2159
 80199b8:	f7fd f938 	bl	8016c2c <fm25v02_read>
	control_registers.id_low_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80199bc:	79fb      	ldrb	r3, [r7, #7]
 80199be:	021b      	lsls	r3, r3, #8
 80199c0:	b21a      	sxth	r2, r3
 80199c2:	79bb      	ldrb	r3, [r7, #6]
 80199c4:	b21b      	sxth	r3, r3
 80199c6:	4313      	orrs	r3, r2
 80199c8:	b21b      	sxth	r3, r3
 80199ca:	b29a      	uxth	r2, r3
 80199cc:	4b42      	ldr	r3, [pc, #264]	; (8019ad8 <read_control_registers+0x5f8>)
 80199ce:	86da      	strh	r2, [r3, #54]	; 0x36

	fm25v02_read(2*RESET_CONTROL_REG, &status_reg_temp_h);
 80199d0:	1dfb      	adds	r3, r7, #7
 80199d2:	4619      	mov	r1, r3
 80199d4:	f242 105a 	movw	r0, #8538	; 0x215a
 80199d8:	f7fd f928 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*RESET_CONTROL_REG+1, &status_reg_temp_l);
 80199dc:	1dbb      	adds	r3, r7, #6
 80199de:	4619      	mov	r1, r3
 80199e0:	f242 105b 	movw	r0, #8539	; 0x215b
 80199e4:	f7fd f922 	bl	8016c2c <fm25v02_read>
	control_registers.reset_control_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 80199e8:	79fb      	ldrb	r3, [r7, #7]
 80199ea:	021b      	lsls	r3, r3, #8
 80199ec:	b21a      	sxth	r2, r3
 80199ee:	79bb      	ldrb	r3, [r7, #6]
 80199f0:	b21b      	sxth	r3, r3
 80199f2:	4313      	orrs	r3, r2
 80199f4:	b21b      	sxth	r3, r3
 80199f6:	b29a      	uxth	r2, r3
 80199f8:	4b37      	ldr	r3, [pc, #220]	; (8019ad8 <read_control_registers+0x5f8>)
 80199fa:	871a      	strh	r2, [r3, #56]	; 0x38

	fm25v02_read(2*METER_POLLING_REG, &status_reg_temp_h);
 80199fc:	1dfb      	adds	r3, r7, #7
 80199fe:	4619      	mov	r1, r3
 8019a00:	f242 105c 	movw	r0, #8540	; 0x215c
 8019a04:	f7fd f912 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*METER_POLLING_REG+1, &status_reg_temp_l);
 8019a08:	1dbb      	adds	r3, r7, #6
 8019a0a:	4619      	mov	r1, r3
 8019a0c:	f242 105d 	movw	r0, #8541	; 0x215d
 8019a10:	f7fd f90c 	bl	8016c2c <fm25v02_read>
	control_registers.meter_polling_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8019a14:	79fb      	ldrb	r3, [r7, #7]
 8019a16:	021b      	lsls	r3, r3, #8
 8019a18:	b21a      	sxth	r2, r3
 8019a1a:	79bb      	ldrb	r3, [r7, #6]
 8019a1c:	b21b      	sxth	r3, r3
 8019a1e:	4313      	orrs	r3, r2
 8019a20:	b21b      	sxth	r3, r3
 8019a22:	b29a      	uxth	r2, r3
 8019a24:	4b2c      	ldr	r3, [pc, #176]	; (8019ad8 <read_control_registers+0x5f8>)
 8019a26:	875a      	strh	r2, [r3, #58]	; 0x3a

	fm25v02_read(2*IP_1_REG, &status_reg_temp_h);
 8019a28:	1dfb      	adds	r3, r7, #7
 8019a2a:	4619      	mov	r1, r3
 8019a2c:	f242 105e 	movw	r0, #8542	; 0x215e
 8019a30:	f7fd f8fc 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*IP_1_REG+1, &status_reg_temp_l);
 8019a34:	1dbb      	adds	r3, r7, #6
 8019a36:	4619      	mov	r1, r3
 8019a38:	f242 105f 	movw	r0, #8543	; 0x215f
 8019a3c:	f7fd f8f6 	bl	8016c2c <fm25v02_read>
	control_registers.ip1_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8019a40:	79fb      	ldrb	r3, [r7, #7]
 8019a42:	021b      	lsls	r3, r3, #8
 8019a44:	b21a      	sxth	r2, r3
 8019a46:	79bb      	ldrb	r3, [r7, #6]
 8019a48:	b21b      	sxth	r3, r3
 8019a4a:	4313      	orrs	r3, r2
 8019a4c:	b21b      	sxth	r3, r3
 8019a4e:	b29a      	uxth	r2, r3
 8019a50:	4b21      	ldr	r3, [pc, #132]	; (8019ad8 <read_control_registers+0x5f8>)
 8019a52:	879a      	strh	r2, [r3, #60]	; 0x3c

	fm25v02_read(2*IP_2_REG, &status_reg_temp_h);
 8019a54:	1dfb      	adds	r3, r7, #7
 8019a56:	4619      	mov	r1, r3
 8019a58:	f242 1060 	movw	r0, #8544	; 0x2160
 8019a5c:	f7fd f8e6 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*IP_2_REG+1, &status_reg_temp_l);
 8019a60:	1dbb      	adds	r3, r7, #6
 8019a62:	4619      	mov	r1, r3
 8019a64:	f242 1061 	movw	r0, #8545	; 0x2161
 8019a68:	f7fd f8e0 	bl	8016c2c <fm25v02_read>
	control_registers.ip2_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8019a6c:	79fb      	ldrb	r3, [r7, #7]
 8019a6e:	021b      	lsls	r3, r3, #8
 8019a70:	b21a      	sxth	r2, r3
 8019a72:	79bb      	ldrb	r3, [r7, #6]
 8019a74:	b21b      	sxth	r3, r3
 8019a76:	4313      	orrs	r3, r2
 8019a78:	b21b      	sxth	r3, r3
 8019a7a:	b29a      	uxth	r2, r3
 8019a7c:	4b16      	ldr	r3, [pc, #88]	; (8019ad8 <read_control_registers+0x5f8>)
 8019a7e:	87da      	strh	r2, [r3, #62]	; 0x3e

	fm25v02_read(2*IP_3_REG, &status_reg_temp_h);
 8019a80:	1dfb      	adds	r3, r7, #7
 8019a82:	4619      	mov	r1, r3
 8019a84:	f242 1062 	movw	r0, #8546	; 0x2162
 8019a88:	f7fd f8d0 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*IP_3_REG+1, &status_reg_temp_l);
 8019a8c:	1dbb      	adds	r3, r7, #6
 8019a8e:	4619      	mov	r1, r3
 8019a90:	f242 1063 	movw	r0, #8547	; 0x2163
 8019a94:	f7fd f8ca 	bl	8016c2c <fm25v02_read>
	control_registers.ip3_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8019a98:	79fb      	ldrb	r3, [r7, #7]
 8019a9a:	021b      	lsls	r3, r3, #8
 8019a9c:	b21a      	sxth	r2, r3
 8019a9e:	79bb      	ldrb	r3, [r7, #6]
 8019aa0:	b21b      	sxth	r3, r3
 8019aa2:	4313      	orrs	r3, r2
 8019aa4:	b21b      	sxth	r3, r3
 8019aa6:	b29a      	uxth	r2, r3
 8019aa8:	4b0b      	ldr	r3, [pc, #44]	; (8019ad8 <read_control_registers+0x5f8>)
 8019aaa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

	fm25v02_read(2*IP_4_REG, &status_reg_temp_h);
 8019aae:	1dfb      	adds	r3, r7, #7
 8019ab0:	4619      	mov	r1, r3
 8019ab2:	f242 1064 	movw	r0, #8548	; 0x2164
 8019ab6:	f7fd f8b9 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*IP_4_REG+1, &status_reg_temp_l);
 8019aba:	1dbb      	adds	r3, r7, #6
 8019abc:	4619      	mov	r1, r3
 8019abe:	f242 1065 	movw	r0, #8549	; 0x2165
 8019ac2:	f7fd f8b3 	bl	8016c2c <fm25v02_read>
	control_registers.ip4_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8019ac6:	79fb      	ldrb	r3, [r7, #7]
 8019ac8:	021b      	lsls	r3, r3, #8
 8019aca:	b21a      	sxth	r2, r3
 8019acc:	79bb      	ldrb	r3, [r7, #6]
 8019ace:	b21b      	sxth	r3, r3
 8019ad0:	4313      	orrs	r3, r2
 8019ad2:	b21b      	sxth	r3, r3
 8019ad4:	e002      	b.n	8019adc <read_control_registers+0x5fc>
 8019ad6:	bf00      	nop
 8019ad8:	2000a234 	.word	0x2000a234
 8019adc:	b29a      	uxth	r2, r3
 8019ade:	4bc3      	ldr	r3, [pc, #780]	; (8019dec <read_control_registers+0x90c>)
 8019ae0:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	fm25v02_read(2*PORT_HIGH_REG, &status_reg_temp_h);
 8019ae4:	1dfb      	adds	r3, r7, #7
 8019ae6:	4619      	mov	r1, r3
 8019ae8:	f242 1066 	movw	r0, #8550	; 0x2166
 8019aec:	f7fd f89e 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*PORT_HIGH_REG+1, &status_reg_temp_l);
 8019af0:	1dbb      	adds	r3, r7, #6
 8019af2:	4619      	mov	r1, r3
 8019af4:	f242 1067 	movw	r0, #8551	; 0x2167
 8019af8:	f7fd f898 	bl	8016c2c <fm25v02_read>
	control_registers.port_high_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8019afc:	79fb      	ldrb	r3, [r7, #7]
 8019afe:	021b      	lsls	r3, r3, #8
 8019b00:	b21a      	sxth	r2, r3
 8019b02:	79bb      	ldrb	r3, [r7, #6]
 8019b04:	b21b      	sxth	r3, r3
 8019b06:	4313      	orrs	r3, r2
 8019b08:	b21b      	sxth	r3, r3
 8019b0a:	b29a      	uxth	r2, r3
 8019b0c:	4bb7      	ldr	r3, [pc, #732]	; (8019dec <read_control_registers+0x90c>)
 8019b0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

	fm25v02_read(2*PORT_LOW_REG, &status_reg_temp_h);
 8019b12:	1dfb      	adds	r3, r7, #7
 8019b14:	4619      	mov	r1, r3
 8019b16:	f242 1068 	movw	r0, #8552	; 0x2168
 8019b1a:	f7fd f887 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*PORT_LOW_REG+1, &status_reg_temp_l);
 8019b1e:	1dbb      	adds	r3, r7, #6
 8019b20:	4619      	mov	r1, r3
 8019b22:	f242 1069 	movw	r0, #8553	; 0x2169
 8019b26:	f7fd f881 	bl	8016c2c <fm25v02_read>
	control_registers.port_low_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8019b2a:	79fb      	ldrb	r3, [r7, #7]
 8019b2c:	021b      	lsls	r3, r3, #8
 8019b2e:	b21a      	sxth	r2, r3
 8019b30:	79bb      	ldrb	r3, [r7, #6]
 8019b32:	b21b      	sxth	r3, r3
 8019b34:	4313      	orrs	r3, r2
 8019b36:	b21b      	sxth	r3, r3
 8019b38:	b29a      	uxth	r2, r3
 8019b3a:	4bac      	ldr	r3, [pc, #688]	; (8019dec <read_control_registers+0x90c>)
 8019b3c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

	fm25v02_read(2*METER_ID_HIGH_REG, &status_reg_temp_h);
 8019b40:	1dfb      	adds	r3, r7, #7
 8019b42:	4619      	mov	r1, r3
 8019b44:	f242 106a 	movw	r0, #8554	; 0x216a
 8019b48:	f7fd f870 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*METER_ID_HIGH_REG+1, &status_reg_temp_l);
 8019b4c:	1dbb      	adds	r3, r7, #6
 8019b4e:	4619      	mov	r1, r3
 8019b50:	f242 106b 	movw	r0, #8555	; 0x216b
 8019b54:	f7fd f86a 	bl	8016c2c <fm25v02_read>
	control_registers.meter_id_high_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8019b58:	79fb      	ldrb	r3, [r7, #7]
 8019b5a:	021b      	lsls	r3, r3, #8
 8019b5c:	b21a      	sxth	r2, r3
 8019b5e:	79bb      	ldrb	r3, [r7, #6]
 8019b60:	b21b      	sxth	r3, r3
 8019b62:	4313      	orrs	r3, r2
 8019b64:	b21b      	sxth	r3, r3
 8019b66:	b29a      	uxth	r2, r3
 8019b68:	4ba0      	ldr	r3, [pc, #640]	; (8019dec <read_control_registers+0x90c>)
 8019b6a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48

	fm25v02_read(2*METER_ID_LOW_REG, &status_reg_temp_h);
 8019b6e:	1dfb      	adds	r3, r7, #7
 8019b70:	4619      	mov	r1, r3
 8019b72:	f242 106c 	movw	r0, #8556	; 0x216c
 8019b76:	f7fd f859 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*METER_ID_LOW_REG+1, &status_reg_temp_l);
 8019b7a:	1dbb      	adds	r3, r7, #6
 8019b7c:	4619      	mov	r1, r3
 8019b7e:	f242 106d 	movw	r0, #8557	; 0x216d
 8019b82:	f7fd f853 	bl	8016c2c <fm25v02_read>
	control_registers.meter_id_low_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8019b86:	79fb      	ldrb	r3, [r7, #7]
 8019b88:	021b      	lsls	r3, r3, #8
 8019b8a:	b21a      	sxth	r2, r3
 8019b8c:	79bb      	ldrb	r3, [r7, #6]
 8019b8e:	b21b      	sxth	r3, r3
 8019b90:	4313      	orrs	r3, r2
 8019b92:	b21b      	sxth	r3, r3
 8019b94:	b29a      	uxth	r2, r3
 8019b96:	4b95      	ldr	r3, [pc, #596]	; (8019dec <read_control_registers+0x90c>)
 8019b98:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

	fm25v02_read(2*GPRS_CALL_REG, &status_reg_temp_h);
 8019b9c:	1dfb      	adds	r3, r7, #7
 8019b9e:	4619      	mov	r1, r3
 8019ba0:	f242 106e 	movw	r0, #8558	; 0x216e
 8019ba4:	f7fd f842 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*GPRS_CALL_REG+1, &status_reg_temp_l);
 8019ba8:	1dbb      	adds	r3, r7, #6
 8019baa:	4619      	mov	r1, r3
 8019bac:	f242 106f 	movw	r0, #8559	; 0x216f
 8019bb0:	f7fd f83c 	bl	8016c2c <fm25v02_read>
	control_registers.gprs_call_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8019bb4:	79fb      	ldrb	r3, [r7, #7]
 8019bb6:	021b      	lsls	r3, r3, #8
 8019bb8:	b21a      	sxth	r2, r3
 8019bba:	79bb      	ldrb	r3, [r7, #6]
 8019bbc:	b21b      	sxth	r3, r3
 8019bbe:	4313      	orrs	r3, r2
 8019bc0:	b21b      	sxth	r3, r3
 8019bc2:	b29a      	uxth	r2, r3
 8019bc4:	4b89      	ldr	r3, [pc, #548]	; (8019dec <read_control_registers+0x90c>)
 8019bc6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

	fm25v02_read(2*MUTE_REG, &status_reg_temp_h);
 8019bca:	1dfb      	adds	r3, r7, #7
 8019bcc:	4619      	mov	r1, r3
 8019bce:	f242 1072 	movw	r0, #8562	; 0x2172
 8019bd2:	f7fd f82b 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*MUTE_REG+1, &status_reg_temp_l);
 8019bd6:	1dbb      	adds	r3, r7, #6
 8019bd8:	4619      	mov	r1, r3
 8019bda:	f242 1073 	movw	r0, #8563	; 0x2173
 8019bde:	f7fd f825 	bl	8016c2c <fm25v02_read>
	control_registers.mute_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8019be2:	79fb      	ldrb	r3, [r7, #7]
 8019be4:	021b      	lsls	r3, r3, #8
 8019be6:	b21a      	sxth	r2, r3
 8019be8:	79bb      	ldrb	r3, [r7, #6]
 8019bea:	b21b      	sxth	r3, r3
 8019bec:	4313      	orrs	r3, r2
 8019bee:	b21b      	sxth	r3, r3
 8019bf0:	b29a      	uxth	r2, r3
 8019bf2:	4b7e      	ldr	r3, [pc, #504]	; (8019dec <read_control_registers+0x90c>)
 8019bf4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	fm25v02_read(2*DELAY_ON_SENSOR_REG, &status_reg_temp_h);
 8019bf8:	1dfb      	adds	r3, r7, #7
 8019bfa:	4619      	mov	r1, r3
 8019bfc:	f242 1074 	movw	r0, #8564	; 0x2174
 8019c00:	f7fd f814 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*DELAY_ON_SENSOR_REG+1, &status_reg_temp_l);
 8019c04:	1dbb      	adds	r3, r7, #6
 8019c06:	4619      	mov	r1, r3
 8019c08:	f242 1075 	movw	r0, #8565	; 0x2175
 8019c0c:	f7fd f80e 	bl	8016c2c <fm25v02_read>
	control_registers.delay_on_sensor_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8019c10:	79fb      	ldrb	r3, [r7, #7]
 8019c12:	021b      	lsls	r3, r3, #8
 8019c14:	b21a      	sxth	r2, r3
 8019c16:	79bb      	ldrb	r3, [r7, #6]
 8019c18:	b21b      	sxth	r3, r3
 8019c1a:	4313      	orrs	r3, r2
 8019c1c:	b21b      	sxth	r3, r3
 8019c1e:	b29a      	uxth	r2, r3
 8019c20:	4b72      	ldr	r3, [pc, #456]	; (8019dec <read_control_registers+0x90c>)
 8019c22:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

	fm25v02_read(2*DELAY_OFF_SENSOR_REG, &status_reg_temp_h);
 8019c26:	1dfb      	adds	r3, r7, #7
 8019c28:	4619      	mov	r1, r3
 8019c2a:	f242 1076 	movw	r0, #8566	; 0x2176
 8019c2e:	f7fc fffd 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*DELAY_OFF_SENSOR_REG+1, &status_reg_temp_l);
 8019c32:	1dbb      	adds	r3, r7, #6
 8019c34:	4619      	mov	r1, r3
 8019c36:	f242 1077 	movw	r0, #8567	; 0x2177
 8019c3a:	f7fc fff7 	bl	8016c2c <fm25v02_read>
	control_registers.delay_off_sensor_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8019c3e:	79fb      	ldrb	r3, [r7, #7]
 8019c40:	021b      	lsls	r3, r3, #8
 8019c42:	b21a      	sxth	r2, r3
 8019c44:	79bb      	ldrb	r3, [r7, #6]
 8019c46:	b21b      	sxth	r3, r3
 8019c48:	4313      	orrs	r3, r2
 8019c4a:	b21b      	sxth	r3, r3
 8019c4c:	b29a      	uxth	r2, r3
 8019c4e:	4b67      	ldr	r3, [pc, #412]	; (8019dec <read_control_registers+0x90c>)
 8019c50:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

	fm25v02_read(2*LIGHTING_THRESHOLD_ON_REG, &status_reg_temp_h);
 8019c54:	1dfb      	adds	r3, r7, #7
 8019c56:	4619      	mov	r1, r3
 8019c58:	f242 1078 	movw	r0, #8568	; 0x2178
 8019c5c:	f7fc ffe6 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*LIGHTING_THRESHOLD_ON_REG+1, &status_reg_temp_l);
 8019c60:	1dbb      	adds	r3, r7, #6
 8019c62:	4619      	mov	r1, r3
 8019c64:	f242 1079 	movw	r0, #8569	; 0x2179
 8019c68:	f7fc ffe0 	bl	8016c2c <fm25v02_read>
	control_registers.lighting_threshold_on_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8019c6c:	79fb      	ldrb	r3, [r7, #7]
 8019c6e:	021b      	lsls	r3, r3, #8
 8019c70:	b21a      	sxth	r2, r3
 8019c72:	79bb      	ldrb	r3, [r7, #6]
 8019c74:	b21b      	sxth	r3, r3
 8019c76:	4313      	orrs	r3, r2
 8019c78:	b21b      	sxth	r3, r3
 8019c7a:	b29a      	uxth	r2, r3
 8019c7c:	4b5b      	ldr	r3, [pc, #364]	; (8019dec <read_control_registers+0x90c>)
 8019c7e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

	fm25v02_read(2*LIGHTING_THRESHOLD_OFF_REG, &status_reg_temp_h);
 8019c82:	1dfb      	adds	r3, r7, #7
 8019c84:	4619      	mov	r1, r3
 8019c86:	f242 107a 	movw	r0, #8570	; 0x217a
 8019c8a:	f7fc ffcf 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*LIGHTING_THRESHOLD_OFF_REG+1, &status_reg_temp_l);
 8019c8e:	1dbb      	adds	r3, r7, #6
 8019c90:	4619      	mov	r1, r3
 8019c92:	f242 107b 	movw	r0, #8571	; 0x217b
 8019c96:	f7fc ffc9 	bl	8016c2c <fm25v02_read>
	control_registers.lighting_threshold_off_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8019c9a:	79fb      	ldrb	r3, [r7, #7]
 8019c9c:	021b      	lsls	r3, r3, #8
 8019c9e:	b21a      	sxth	r2, r3
 8019ca0:	79bb      	ldrb	r3, [r7, #6]
 8019ca2:	b21b      	sxth	r3, r3
 8019ca4:	4313      	orrs	r3, r2
 8019ca6:	b21b      	sxth	r3, r3
 8019ca8:	b29a      	uxth	r2, r3
 8019caa:	4b50      	ldr	r3, [pc, #320]	; (8019dec <read_control_registers+0x90c>)
 8019cac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

	fm25v02_read(2*LIGHT_CONTROL_REG, &status_reg_temp_h);
 8019cb0:	1dfb      	adds	r3, r7, #7
 8019cb2:	4619      	mov	r1, r3
 8019cb4:	f242 1082 	movw	r0, #8578	; 0x2182
 8019cb8:	f7fc ffb8 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*LIGHT_CONTROL_REG+1, &status_reg_temp_l);
 8019cbc:	1dbb      	adds	r3, r7, #6
 8019cbe:	4619      	mov	r1, r3
 8019cc0:	f242 1083 	movw	r0, #8579	; 0x2183
 8019cc4:	f7fc ffb2 	bl	8016c2c <fm25v02_read>
	control_registers.light_control_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8019cc8:	79fb      	ldrb	r3, [r7, #7]
 8019cca:	021b      	lsls	r3, r3, #8
 8019ccc:	b21a      	sxth	r2, r3
 8019cce:	79bb      	ldrb	r3, [r7, #6]
 8019cd0:	b21b      	sxth	r3, r3
 8019cd2:	4313      	orrs	r3, r2
 8019cd4:	b21b      	sxth	r3, r3
 8019cd6:	b29a      	uxth	r2, r3
 8019cd8:	4b44      	ldr	r3, [pc, #272]	; (8019dec <read_control_registers+0x90c>)
 8019cda:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

	fm25v02_read(2*LIGHTING_ALARM_RESET_REG, &status_reg_temp_h);
 8019cde:	1dfb      	adds	r3, r7, #7
 8019ce0:	4619      	mov	r1, r3
 8019ce2:	f242 1084 	movw	r0, #8580	; 0x2184
 8019ce6:	f7fc ffa1 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*LIGHTING_ALARM_RESET_REG+1, &status_reg_temp_l);
 8019cea:	1dbb      	adds	r3, r7, #6
 8019cec:	4619      	mov	r1, r3
 8019cee:	f242 1085 	movw	r0, #8581	; 0x2185
 8019cf2:	f7fc ff9b 	bl	8016c2c <fm25v02_read>
	control_registers.lighting_alarm_reset_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8019cf6:	79fb      	ldrb	r3, [r7, #7]
 8019cf8:	021b      	lsls	r3, r3, #8
 8019cfa:	b21a      	sxth	r2, r3
 8019cfc:	79bb      	ldrb	r3, [r7, #6]
 8019cfe:	b21b      	sxth	r3, r3
 8019d00:	4313      	orrs	r3, r2
 8019d02:	b21b      	sxth	r3, r3
 8019d04:	b29a      	uxth	r2, r3
 8019d06:	4b39      	ldr	r3, [pc, #228]	; (8019dec <read_control_registers+0x90c>)
 8019d08:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

	fm25v02_read(2*CURRENT_MEASUREMENT_ACCURACY_REG, &status_reg_temp_h);
 8019d0c:	1dfb      	adds	r3, r7, #7
 8019d0e:	4619      	mov	r1, r3
 8019d10:	f242 1086 	movw	r0, #8582	; 0x2186
 8019d14:	f7fc ff8a 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*CURRENT_MEASUREMENT_ACCURACY_REG+1, &status_reg_temp_l);
 8019d18:	1dbb      	adds	r3, r7, #6
 8019d1a:	4619      	mov	r1, r3
 8019d1c:	f242 1087 	movw	r0, #8583	; 0x2187
 8019d20:	f7fc ff84 	bl	8016c2c <fm25v02_read>
	control_registers.current_measurement_accuracy_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8019d24:	79fb      	ldrb	r3, [r7, #7]
 8019d26:	021b      	lsls	r3, r3, #8
 8019d28:	b21a      	sxth	r2, r3
 8019d2a:	79bb      	ldrb	r3, [r7, #6]
 8019d2c:	b21b      	sxth	r3, r3
 8019d2e:	4313      	orrs	r3, r2
 8019d30:	b21b      	sxth	r3, r3
 8019d32:	b29a      	uxth	r2, r3
 8019d34:	4b2d      	ldr	r3, [pc, #180]	; (8019dec <read_control_registers+0x90c>)
 8019d36:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

	fm25v02_read(2*MAX_CURRENT_PHASE_A, &status_reg_temp_h);
 8019d3a:	1dfb      	adds	r3, r7, #7
 8019d3c:	4619      	mov	r1, r3
 8019d3e:	f242 1088 	movw	r0, #8584	; 0x2188
 8019d42:	f7fc ff73 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*MAX_CURRENT_PHASE_A+1, &status_reg_temp_l);
 8019d46:	1dbb      	adds	r3, r7, #6
 8019d48:	4619      	mov	r1, r3
 8019d4a:	f242 1089 	movw	r0, #8585	; 0x2189
 8019d4e:	f7fc ff6d 	bl	8016c2c <fm25v02_read>
	control_registers.max_current_phase_a = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8019d52:	79fb      	ldrb	r3, [r7, #7]
 8019d54:	021b      	lsls	r3, r3, #8
 8019d56:	b21a      	sxth	r2, r3
 8019d58:	79bb      	ldrb	r3, [r7, #6]
 8019d5a:	b21b      	sxth	r3, r3
 8019d5c:	4313      	orrs	r3, r2
 8019d5e:	b21b      	sxth	r3, r3
 8019d60:	b29a      	uxth	r2, r3
 8019d62:	4b22      	ldr	r3, [pc, #136]	; (8019dec <read_control_registers+0x90c>)
 8019d64:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

	fm25v02_read(2*MAX_CURRENT_PHASE_B, &status_reg_temp_h);
 8019d68:	1dfb      	adds	r3, r7, #7
 8019d6a:	4619      	mov	r1, r3
 8019d6c:	f242 108a 	movw	r0, #8586	; 0x218a
 8019d70:	f7fc ff5c 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*MAX_CURRENT_PHASE_B+1, &status_reg_temp_l);
 8019d74:	1dbb      	adds	r3, r7, #6
 8019d76:	4619      	mov	r1, r3
 8019d78:	f242 108b 	movw	r0, #8587	; 0x218b
 8019d7c:	f7fc ff56 	bl	8016c2c <fm25v02_read>
	control_registers.max_current_phase_b = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8019d80:	79fb      	ldrb	r3, [r7, #7]
 8019d82:	021b      	lsls	r3, r3, #8
 8019d84:	b21a      	sxth	r2, r3
 8019d86:	79bb      	ldrb	r3, [r7, #6]
 8019d88:	b21b      	sxth	r3, r3
 8019d8a:	4313      	orrs	r3, r2
 8019d8c:	b21b      	sxth	r3, r3
 8019d8e:	b29a      	uxth	r2, r3
 8019d90:	4b16      	ldr	r3, [pc, #88]	; (8019dec <read_control_registers+0x90c>)
 8019d92:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

	fm25v02_read(2*MAX_CURRENT_PHASE_C, &status_reg_temp_h);
 8019d96:	1dfb      	adds	r3, r7, #7
 8019d98:	4619      	mov	r1, r3
 8019d9a:	f242 108c 	movw	r0, #8588	; 0x218c
 8019d9e:	f7fc ff45 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*MAX_CURRENT_PHASE_C+1, &status_reg_temp_l);
 8019da2:	1dbb      	adds	r3, r7, #6
 8019da4:	4619      	mov	r1, r3
 8019da6:	f242 108d 	movw	r0, #8589	; 0x218d
 8019daa:	f7fc ff3f 	bl	8016c2c <fm25v02_read>
	control_registers.max_current_phase_c = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8019dae:	79fb      	ldrb	r3, [r7, #7]
 8019db0:	021b      	lsls	r3, r3, #8
 8019db2:	b21a      	sxth	r2, r3
 8019db4:	79bb      	ldrb	r3, [r7, #6]
 8019db6:	b21b      	sxth	r3, r3
 8019db8:	4313      	orrs	r3, r2
 8019dba:	b21b      	sxth	r3, r3
 8019dbc:	b29a      	uxth	r2, r3
 8019dbe:	4b0b      	ldr	r3, [pc, #44]	; (8019dec <read_control_registers+0x90c>)
 8019dc0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

	fm25v02_read(2*LIGHTING_SWITCHING_REG, &status_reg_temp_h);
 8019dc4:	1dfb      	adds	r3, r7, #7
 8019dc6:	4619      	mov	r1, r3
 8019dc8:	f242 108e 	movw	r0, #8590	; 0x218e
 8019dcc:	f7fc ff2e 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*LIGHTING_SWITCHING_REG+1, &status_reg_temp_l);
 8019dd0:	1dbb      	adds	r3, r7, #6
 8019dd2:	4619      	mov	r1, r3
 8019dd4:	f242 108f 	movw	r0, #8591	; 0x218f
 8019dd8:	f7fc ff28 	bl	8016c2c <fm25v02_read>
	control_registers.lighting_switching_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8019ddc:	79fb      	ldrb	r3, [r7, #7]
 8019dde:	021b      	lsls	r3, r3, #8
 8019de0:	b21a      	sxth	r2, r3
 8019de2:	79bb      	ldrb	r3, [r7, #6]
 8019de4:	b21b      	sxth	r3, r3
 8019de6:	4313      	orrs	r3, r2
 8019de8:	b21b      	sxth	r3, r3
 8019dea:	e001      	b.n	8019df0 <read_control_registers+0x910>
 8019dec:	2000a234 	.word	0x2000a234
 8019df0:	b29a      	uxth	r2, r3
 8019df2:	4b1d      	ldr	r3, [pc, #116]	; (8019e68 <read_control_registers+0x988>)
 8019df4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

	fm25v02_read(2*ALARM_SWITCHING_REG, &status_reg_temp_h);
 8019df8:	1dfb      	adds	r3, r7, #7
 8019dfa:	4619      	mov	r1, r3
 8019dfc:	f242 1090 	movw	r0, #8592	; 0x2190
 8019e00:	f7fc ff14 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*ALARM_SWITCHING_REG+1, &status_reg_temp_l);
 8019e04:	1dbb      	adds	r3, r7, #6
 8019e06:	4619      	mov	r1, r3
 8019e08:	f242 1091 	movw	r0, #8593	; 0x2191
 8019e0c:	f7fc ff0e 	bl	8016c2c <fm25v02_read>
	control_registers.alarm_switching_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8019e10:	79fb      	ldrb	r3, [r7, #7]
 8019e12:	021b      	lsls	r3, r3, #8
 8019e14:	b21a      	sxth	r2, r3
 8019e16:	79bb      	ldrb	r3, [r7, #6]
 8019e18:	b21b      	sxth	r3, r3
 8019e1a:	4313      	orrs	r3, r2
 8019e1c:	b21b      	sxth	r3, r3
 8019e1e:	b29a      	uxth	r2, r3
 8019e20:	4b11      	ldr	r3, [pc, #68]	; (8019e68 <read_control_registers+0x988>)
 8019e22:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

	fm25v02_read(2*OVERCURRENT_TIMELEFT_REG, &status_reg_temp_h);
 8019e26:	1dfb      	adds	r3, r7, #7
 8019e28:	4619      	mov	r1, r3
 8019e2a:	f242 1094 	movw	r0, #8596	; 0x2194
 8019e2e:	f7fc fefd 	bl	8016c2c <fm25v02_read>
	fm25v02_read(2*OVERCURRENT_TIMELEFT_REG+1, &status_reg_temp_l);
 8019e32:	1dbb      	adds	r3, r7, #6
 8019e34:	4619      	mov	r1, r3
 8019e36:	f242 1095 	movw	r0, #8597	; 0x2195
 8019e3a:	f7fc fef7 	bl	8016c2c <fm25v02_read>
	control_registers.overcurrent_timeleft_reg = (((uint16_t)status_reg_temp_h)<<8)|status_reg_temp_l;
 8019e3e:	79fb      	ldrb	r3, [r7, #7]
 8019e40:	021b      	lsls	r3, r3, #8
 8019e42:	b21a      	sxth	r2, r3
 8019e44:	79bb      	ldrb	r3, [r7, #6]
 8019e46:	b21b      	sxth	r3, r3
 8019e48:	4313      	orrs	r3, r2
 8019e4a:	b21b      	sxth	r3, r3
 8019e4c:	b29a      	uxth	r2, r3
 8019e4e:	4b06      	ldr	r3, [pc, #24]	; (8019e68 <read_control_registers+0x988>)
 8019e50:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

	osMutexRelease(Fm25v02MutexHandle);
 8019e54:	4b05      	ldr	r3, [pc, #20]	; (8019e6c <read_control_registers+0x98c>)
 8019e56:	681b      	ldr	r3, [r3, #0]
 8019e58:	4618      	mov	r0, r3
 8019e5a:	f7ee fdad 	bl	80089b8 <osMutexRelease>

}
 8019e5e:	bf00      	nop
 8019e60:	3708      	adds	r7, #8
 8019e62:	46bd      	mov	sp, r7
 8019e64:	bd80      	pop	{r7, pc}
 8019e66:	bf00      	nop
 8019e68:	2000a234 	.word	0x2000a234
 8019e6c:	20009af8 	.word	0x20009af8

08019e70 <CRC16>:



//--------------------- Процедура расчета CRC16 -------------------------------------

 unsigned int CRC16( unsigned char * pucFrame, unsigned int usLen ){
 8019e70:	b480      	push	{r7}
 8019e72:	b085      	sub	sp, #20
 8019e74:	af00      	add	r7, sp, #0
 8019e76:	6078      	str	r0, [r7, #4]
 8019e78:	6039      	str	r1, [r7, #0]
  unsigned char MB_Slave_ucCRCHi = 0xFF;
 8019e7a:	23ff      	movs	r3, #255	; 0xff
 8019e7c:	73fb      	strb	r3, [r7, #15]
  unsigned char MB_Slave_ucCRCLo = 0xFF;
 8019e7e:	23ff      	movs	r3, #255	; 0xff
 8019e80:	73bb      	strb	r3, [r7, #14]
  int iIndex;
  //
  while( usLen-- ){
 8019e82:	e013      	b.n	8019eac <CRC16+0x3c>
    iIndex = MB_Slave_ucCRCLo ^ *( pucFrame++ );
 8019e84:	687b      	ldr	r3, [r7, #4]
 8019e86:	1c5a      	adds	r2, r3, #1
 8019e88:	607a      	str	r2, [r7, #4]
 8019e8a:	781a      	ldrb	r2, [r3, #0]
 8019e8c:	7bbb      	ldrb	r3, [r7, #14]
 8019e8e:	4053      	eors	r3, r2
 8019e90:	b2db      	uxtb	r3, r3
 8019e92:	60bb      	str	r3, [r7, #8]
    MB_Slave_ucCRCLo = MB_Slave_ucCRCHi ^ MB_Slave_aucCRCHi[iIndex];
 8019e94:	4a0d      	ldr	r2, [pc, #52]	; (8019ecc <CRC16+0x5c>)
 8019e96:	68bb      	ldr	r3, [r7, #8]
 8019e98:	4413      	add	r3, r2
 8019e9a:	781a      	ldrb	r2, [r3, #0]
 8019e9c:	7bfb      	ldrb	r3, [r7, #15]
 8019e9e:	4053      	eors	r3, r2
 8019ea0:	73bb      	strb	r3, [r7, #14]
    MB_Slave_ucCRCHi = MB_Slave_aucCRCLo[iIndex];
 8019ea2:	4a0b      	ldr	r2, [pc, #44]	; (8019ed0 <CRC16+0x60>)
 8019ea4:	68bb      	ldr	r3, [r7, #8]
 8019ea6:	4413      	add	r3, r2
 8019ea8:	781b      	ldrb	r3, [r3, #0]
 8019eaa:	73fb      	strb	r3, [r7, #15]
  while( usLen-- ){
 8019eac:	683b      	ldr	r3, [r7, #0]
 8019eae:	1e5a      	subs	r2, r3, #1
 8019eb0:	603a      	str	r2, [r7, #0]
 8019eb2:	2b00      	cmp	r3, #0
 8019eb4:	d1e6      	bne.n	8019e84 <CRC16+0x14>
  }
  return MB_Slave_ucCRCHi << 8 | MB_Slave_ucCRCLo;
 8019eb6:	7bfb      	ldrb	r3, [r7, #15]
 8019eb8:	021a      	lsls	r2, r3, #8
 8019eba:	7bbb      	ldrb	r3, [r7, #14]
 8019ebc:	4313      	orrs	r3, r2
}
 8019ebe:	4618      	mov	r0, r3
 8019ec0:	3714      	adds	r7, #20
 8019ec2:	46bd      	mov	sp, r7
 8019ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ec8:	4770      	bx	lr
 8019eca:	bf00      	nop
 8019ecc:	0801c194 	.word	0x0801c194
 8019ed0:	0801c294 	.word	0x0801c294

08019ed4 <TSL2561_setPowerUp>:
 *      Author: Andriy
 */
#include "tsl2561.h"

bool TSL2561_setPowerUp(void)
{
 8019ed4:	b580      	push	{r7, lr}
 8019ed6:	af00      	add	r7, sp, #0
	// Write 0x03 to command byte (power on)
	return(TSL2561_WriteByte(TSL2561_REG_CONTROL,0x03));
 8019ed8:	2103      	movs	r1, #3
 8019eda:	2000      	movs	r0, #0
 8019edc:	f000 fa0e 	bl	801a2fc <TSL2561_WriteByte>
 8019ee0:	4603      	mov	r3, r0
}
 8019ee2:	4618      	mov	r0, r3
 8019ee4:	bd80      	pop	{r7, pc}

08019ee6 <TSL2561_setTiming>:
	// If time = 1, integration will be 101ms
	// If time = 2, integration will be 402ms
	// If time = 3, use manual start / stop
	// Returns true (1) if successful, false (0) if there was an I2C error
	// (Also see getError() below)
{
 8019ee6:	b580      	push	{r7, lr}
 8019ee8:	b084      	sub	sp, #16
 8019eea:	af00      	add	r7, sp, #0
 8019eec:	4603      	mov	r3, r0
 8019eee:	460a      	mov	r2, r1
 8019ef0:	71fb      	strb	r3, [r7, #7]
 8019ef2:	4613      	mov	r3, r2
 8019ef4:	71bb      	strb	r3, [r7, #6]
	uint8_t timing;

	// Get timing byte
	if (TSL2561_ReadByte(TSL2561_REG_TIMING, &timing))
 8019ef6:	f107 030f 	add.w	r3, r7, #15
 8019efa:	4619      	mov	r1, r3
 8019efc:	2001      	movs	r0, #1
 8019efe:	f000 fa29 	bl	801a354 <TSL2561_ReadByte>
 8019f02:	4603      	mov	r3, r0
 8019f04:	2b00      	cmp	r3, #0
 8019f06:	d027      	beq.n	8019f58 <TSL2561_setTiming+0x72>
	{
		// Set gain (0 or 1)
		if (gain)
 8019f08:	79fb      	ldrb	r3, [r7, #7]
 8019f0a:	2b00      	cmp	r3, #0
 8019f0c:	d005      	beq.n	8019f1a <TSL2561_setTiming+0x34>
			timing |= 0x10;
 8019f0e:	7bfb      	ldrb	r3, [r7, #15]
 8019f10:	f043 0310 	orr.w	r3, r3, #16
 8019f14:	b2db      	uxtb	r3, r3
 8019f16:	73fb      	strb	r3, [r7, #15]
 8019f18:	e004      	b.n	8019f24 <TSL2561_setTiming+0x3e>
		else
			timing &= ~0x10;
 8019f1a:	7bfb      	ldrb	r3, [r7, #15]
 8019f1c:	f023 0310 	bic.w	r3, r3, #16
 8019f20:	b2db      	uxtb	r3, r3
 8019f22:	73fb      	strb	r3, [r7, #15]

		// Set integration time (0 to 3)
		timing &= ~0x03;
 8019f24:	7bfb      	ldrb	r3, [r7, #15]
 8019f26:	f023 0303 	bic.w	r3, r3, #3
 8019f2a:	b2db      	uxtb	r3, r3
 8019f2c:	73fb      	strb	r3, [r7, #15]
		timing |= (time & 0x03);
 8019f2e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8019f32:	f003 0303 	and.w	r3, r3, #3
 8019f36:	b25a      	sxtb	r2, r3
 8019f38:	7bfb      	ldrb	r3, [r7, #15]
 8019f3a:	b25b      	sxtb	r3, r3
 8019f3c:	4313      	orrs	r3, r2
 8019f3e:	b25b      	sxtb	r3, r3
 8019f40:	b2db      	uxtb	r3, r3
 8019f42:	73fb      	strb	r3, [r7, #15]

		// Write modified timing byte back to device
		if (TSL2561_WriteByte(TSL2561_REG_TIMING, timing))
 8019f44:	7bfb      	ldrb	r3, [r7, #15]
 8019f46:	4619      	mov	r1, r3
 8019f48:	2001      	movs	r0, #1
 8019f4a:	f000 f9d7 	bl	801a2fc <TSL2561_WriteByte>
 8019f4e:	4603      	mov	r3, r0
 8019f50:	2b00      	cmp	r3, #0
 8019f52:	d001      	beq.n	8019f58 <TSL2561_setTiming+0x72>
			return true;
 8019f54:	2301      	movs	r3, #1
 8019f56:	e000      	b.n	8019f5a <TSL2561_setTiming+0x74>
	}
	return false;
 8019f58:	2300      	movs	r3, #0
}
 8019f5a:	4618      	mov	r0, r3
 8019f5c:	3710      	adds	r7, #16
 8019f5e:	46bd      	mov	sp, r7
 8019f60:	bd80      	pop	{r7, pc}

08019f62 <TSL2561_setTiming_ms>:
	// If time = 2, integration will be 402ms
	// If time = 3, use manual start / stop (ms = 0)
	// ms will be set to integration time
	// Returns true (1) if successful, false (0) if there was an I2C error
	// (Also see getError() below)
{
 8019f62:	b580      	push	{r7, lr}
 8019f64:	b082      	sub	sp, #8
 8019f66:	af00      	add	r7, sp, #0
 8019f68:	4603      	mov	r3, r0
 8019f6a:	603a      	str	r2, [r7, #0]
 8019f6c:	71fb      	strb	r3, [r7, #7]
 8019f6e:	460b      	mov	r3, r1
 8019f70:	71bb      	strb	r3, [r7, #6]
	// Calculate ms for user
	switch (time)
 8019f72:	79bb      	ldrb	r3, [r7, #6]
 8019f74:	2b02      	cmp	r3, #2
 8019f76:	d00e      	beq.n	8019f96 <TSL2561_setTiming_ms+0x34>
 8019f78:	2b02      	cmp	r3, #2
 8019f7a:	dc11      	bgt.n	8019fa0 <TSL2561_setTiming_ms+0x3e>
 8019f7c:	2b00      	cmp	r3, #0
 8019f7e:	d002      	beq.n	8019f86 <TSL2561_setTiming_ms+0x24>
 8019f80:	2b01      	cmp	r3, #1
 8019f82:	d004      	beq.n	8019f8e <TSL2561_setTiming_ms+0x2c>
 8019f84:	e00c      	b.n	8019fa0 <TSL2561_setTiming_ms+0x3e>
	{
		case 0:  *ms = 14; break;
 8019f86:	683b      	ldr	r3, [r7, #0]
 8019f88:	220e      	movs	r2, #14
 8019f8a:	601a      	str	r2, [r3, #0]
 8019f8c:	e00b      	b.n	8019fa6 <TSL2561_setTiming_ms+0x44>
		case 1:  *ms = 101; break;
 8019f8e:	683b      	ldr	r3, [r7, #0]
 8019f90:	2265      	movs	r2, #101	; 0x65
 8019f92:	601a      	str	r2, [r3, #0]
 8019f94:	e007      	b.n	8019fa6 <TSL2561_setTiming_ms+0x44>
		case 2:  *ms = 402; break;
 8019f96:	683b      	ldr	r3, [r7, #0]
 8019f98:	f44f 72c9 	mov.w	r2, #402	; 0x192
 8019f9c:	601a      	str	r2, [r3, #0]
 8019f9e:	e002      	b.n	8019fa6 <TSL2561_setTiming_ms+0x44>
		default: *ms = 0;
 8019fa0:	683b      	ldr	r3, [r7, #0]
 8019fa2:	2200      	movs	r2, #0
 8019fa4:	601a      	str	r2, [r3, #0]
	}
	// Set integration using base function
	return(TSL2561_setTiming(gain, time));
 8019fa6:	79ba      	ldrb	r2, [r7, #6]
 8019fa8:	79fb      	ldrb	r3, [r7, #7]
 8019faa:	4611      	mov	r1, r2
 8019fac:	4618      	mov	r0, r3
 8019fae:	f7ff ff9a 	bl	8019ee6 <TSL2561_setTiming>
 8019fb2:	4603      	mov	r3, r0
}
 8019fb4:	4618      	mov	r0, r3
 8019fb6:	3708      	adds	r7, #8
 8019fb8:	46bd      	mov	sp, r7
 8019fba:	bd80      	pop	{r7, pc}

08019fbc <TSL2561_getData>:
bool TSL2561_getData(unsigned int *data0, unsigned int *data1)
	// Retrieve raw integration results
	// data0 and data1 will be set to integration results
	// Returns true (1) if successful, false (0) if there was an I2C error
	// (Also see getError() below)
{
 8019fbc:	b580      	push	{r7, lr}
 8019fbe:	b082      	sub	sp, #8
 8019fc0:	af00      	add	r7, sp, #0
 8019fc2:	6078      	str	r0, [r7, #4]
 8019fc4:	6039      	str	r1, [r7, #0]
	// Get data0 and data1 out of result registers
	return TSL2561_readUInt(TSL2561_REG_DATA_0, data0) && TSL2561_readUInt(TSL2561_REG_DATA_1, data1);
 8019fc6:	6879      	ldr	r1, [r7, #4]
 8019fc8:	200c      	movs	r0, #12
 8019fca:	f000 f9f7 	bl	801a3bc <TSL2561_readUInt>
 8019fce:	4603      	mov	r3, r0
 8019fd0:	2b00      	cmp	r3, #0
 8019fd2:	d008      	beq.n	8019fe6 <TSL2561_getData+0x2a>
 8019fd4:	6839      	ldr	r1, [r7, #0]
 8019fd6:	200e      	movs	r0, #14
 8019fd8:	f000 f9f0 	bl	801a3bc <TSL2561_readUInt>
 8019fdc:	4603      	mov	r3, r0
 8019fde:	2b00      	cmp	r3, #0
 8019fe0:	d001      	beq.n	8019fe6 <TSL2561_getData+0x2a>
 8019fe2:	2301      	movs	r3, #1
 8019fe4:	e000      	b.n	8019fe8 <TSL2561_getData+0x2c>
 8019fe6:	2300      	movs	r3, #0
 8019fe8:	f003 0301 	and.w	r3, r3, #1
 8019fec:	b2db      	uxtb	r3, r3
}
 8019fee:	4618      	mov	r0, r3
 8019ff0:	3708      	adds	r7, #8
 8019ff2:	46bd      	mov	sp, r7
 8019ff4:	bd80      	pop	{r7, pc}
	...

08019ff8 <TSL2561_getLux>:
	// ms: integration time in ms, from setTiming() or from manual integration
	// CH0, CH1: results from getData()
	// lux will be set to resulting lux calculation
	// returns true (1) if calculation was successful
	// RETURNS false (0) AND lux = 0.0 IF EITHER SENSOR WAS SATURATED (0XFFFF)
{
 8019ff8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8019ffc:	b08a      	sub	sp, #40	; 0x28
 8019ffe:	af00      	add	r7, sp, #0
 801a000:	60b9      	str	r1, [r7, #8]
 801a002:	607a      	str	r2, [r7, #4]
 801a004:	603b      	str	r3, [r7, #0]
 801a006:	4603      	mov	r3, r0
 801a008:	73fb      	strb	r3, [r7, #15]
	double ratio, d0, d1;

	// Determine if either sensor saturated (0xFFFF)
	// If so, abandon ship (calculation will not be accurate)
	if ((CH0 == 0xFFFF) || (CH1 == 0xFFFF))
 801a00a:	687b      	ldr	r3, [r7, #4]
 801a00c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a010:	4293      	cmp	r3, r2
 801a012:	d004      	beq.n	801a01e <TSL2561_getLux+0x26>
 801a014:	683b      	ldr	r3, [r7, #0]
 801a016:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a01a:	4293      	cmp	r3, r2
 801a01c:	d108      	bne.n	801a030 <TSL2561_getLux+0x38>
	{
		*lux = 0.0;
 801a01e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801a020:	f04f 0200 	mov.w	r2, #0
 801a024:	f04f 0300 	mov.w	r3, #0
 801a028:	e9c1 2300 	strd	r2, r3, [r1]
		return false;
 801a02c:	2300      	movs	r3, #0
 801a02e:	e114      	b.n	801a25a <TSL2561_getLux+0x262>
	}

	// Convert from unsigned integer to floating point
	d0 = CH0; d1 = CH1;
 801a030:	6878      	ldr	r0, [r7, #4]
 801a032:	f7e6 fa67 	bl	8000504 <__aeabi_ui2d>
 801a036:	4602      	mov	r2, r0
 801a038:	460b      	mov	r3, r1
 801a03a:	e9c7 2308 	strd	r2, r3, [r7, #32]
 801a03e:	6838      	ldr	r0, [r7, #0]
 801a040:	f7e6 fa60 	bl	8000504 <__aeabi_ui2d>
 801a044:	4602      	mov	r2, r0
 801a046:	460b      	mov	r3, r1
 801a048:	e9c7 2306 	strd	r2, r3, [r7, #24]

	// We will need the ratio for subsequent calculations
	ratio = d1 / d0;
 801a04c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801a050:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801a054:	f7e6 fbfa 	bl	800084c <__aeabi_ddiv>
 801a058:	4602      	mov	r2, r0
 801a05a:	460b      	mov	r3, r1
 801a05c:	e9c7 2304 	strd	r2, r3, [r7, #16]

	// Normalize for integration time
	d0 *= (402.0/ms);
 801a060:	68b8      	ldr	r0, [r7, #8]
 801a062:	f7e6 fa4f 	bl	8000504 <__aeabi_ui2d>
 801a066:	4602      	mov	r2, r0
 801a068:	460b      	mov	r3, r1
 801a06a:	a199      	add	r1, pc, #612	; (adr r1, 801a2d0 <TSL2561_getLux+0x2d8>)
 801a06c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a070:	f7e6 fbec 	bl	800084c <__aeabi_ddiv>
 801a074:	4602      	mov	r2, r0
 801a076:	460b      	mov	r3, r1
 801a078:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801a07c:	f7e6 fabc 	bl	80005f8 <__aeabi_dmul>
 801a080:	4602      	mov	r2, r0
 801a082:	460b      	mov	r3, r1
 801a084:	e9c7 2308 	strd	r2, r3, [r7, #32]
	d1 *= (402.0/ms);
 801a088:	68b8      	ldr	r0, [r7, #8]
 801a08a:	f7e6 fa3b 	bl	8000504 <__aeabi_ui2d>
 801a08e:	4602      	mov	r2, r0
 801a090:	460b      	mov	r3, r1
 801a092:	a18f      	add	r1, pc, #572	; (adr r1, 801a2d0 <TSL2561_getLux+0x2d8>)
 801a094:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a098:	f7e6 fbd8 	bl	800084c <__aeabi_ddiv>
 801a09c:	4602      	mov	r2, r0
 801a09e:	460b      	mov	r3, r1
 801a0a0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801a0a4:	f7e6 faa8 	bl	80005f8 <__aeabi_dmul>
 801a0a8:	4602      	mov	r2, r0
 801a0aa:	460b      	mov	r3, r1
 801a0ac:	e9c7 2306 	strd	r2, r3, [r7, #24]

	// Normalize for gain
	if (!gain)
 801a0b0:	7bfb      	ldrb	r3, [r7, #15]
 801a0b2:	2b00      	cmp	r3, #0
 801a0b4:	d115      	bne.n	801a0e2 <TSL2561_getLux+0xea>
	{
		d0 *= 16;
 801a0b6:	f04f 0200 	mov.w	r2, #0
 801a0ba:	4b83      	ldr	r3, [pc, #524]	; (801a2c8 <TSL2561_getLux+0x2d0>)
 801a0bc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801a0c0:	f7e6 fa9a 	bl	80005f8 <__aeabi_dmul>
 801a0c4:	4602      	mov	r2, r0
 801a0c6:	460b      	mov	r3, r1
 801a0c8:	e9c7 2308 	strd	r2, r3, [r7, #32]
		d1 *= 16;
 801a0cc:	f04f 0200 	mov.w	r2, #0
 801a0d0:	4b7d      	ldr	r3, [pc, #500]	; (801a2c8 <TSL2561_getLux+0x2d0>)
 801a0d2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801a0d6:	f7e6 fa8f 	bl	80005f8 <__aeabi_dmul>
 801a0da:	4602      	mov	r2, r0
 801a0dc:	460b      	mov	r3, r1
 801a0de:	e9c7 2306 	strd	r2, r3, [r7, #24]
	}

	// Determine lux per datasheet equations:

	if (ratio < 0.5)
 801a0e2:	f04f 0200 	mov.w	r2, #0
 801a0e6:	4b79      	ldr	r3, [pc, #484]	; (801a2cc <TSL2561_getLux+0x2d4>)
 801a0e8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801a0ec:	f7e6 fcf6 	bl	8000adc <__aeabi_dcmplt>
 801a0f0:	4603      	mov	r3, r0
 801a0f2:	2b00      	cmp	r3, #0
 801a0f4:	d02e      	beq.n	801a154 <TSL2561_getLux+0x15c>
	{
		*lux = 0.0304 * d0 - 0.062 * d0 * pow(ratio,1.4);
 801a0f6:	a35c      	add	r3, pc, #368	; (adr r3, 801a268 <TSL2561_getLux+0x270>)
 801a0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a0fc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801a100:	f7e6 fa7a 	bl	80005f8 <__aeabi_dmul>
 801a104:	4602      	mov	r2, r0
 801a106:	460b      	mov	r3, r1
 801a108:	4614      	mov	r4, r2
 801a10a:	461d      	mov	r5, r3
 801a10c:	a358      	add	r3, pc, #352	; (adr r3, 801a270 <TSL2561_getLux+0x278>)
 801a10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a112:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801a116:	f7e6 fa6f 	bl	80005f8 <__aeabi_dmul>
 801a11a:	4602      	mov	r2, r0
 801a11c:	460b      	mov	r3, r1
 801a11e:	4690      	mov	r8, r2
 801a120:	4699      	mov	r9, r3
 801a122:	ed9f 1b55 	vldr	d1, [pc, #340]	; 801a278 <TSL2561_getLux+0x280>
 801a126:	ed97 0b04 	vldr	d0, [r7, #16]
 801a12a:	f000 fe6b 	bl	801ae04 <pow>
 801a12e:	ec53 2b10 	vmov	r2, r3, d0
 801a132:	4640      	mov	r0, r8
 801a134:	4649      	mov	r1, r9
 801a136:	f7e6 fa5f 	bl	80005f8 <__aeabi_dmul>
 801a13a:	4602      	mov	r2, r0
 801a13c:	460b      	mov	r3, r1
 801a13e:	4620      	mov	r0, r4
 801a140:	4629      	mov	r1, r5
 801a142:	f7e6 f8a1 	bl	8000288 <__aeabi_dsub>
 801a146:	4602      	mov	r2, r0
 801a148:	460b      	mov	r3, r1
 801a14a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801a14c:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
 801a150:	2301      	movs	r3, #1
 801a152:	e082      	b.n	801a25a <TSL2561_getLux+0x262>
	}

	if (ratio < 0.61)
 801a154:	a34a      	add	r3, pc, #296	; (adr r3, 801a280 <TSL2561_getLux+0x288>)
 801a156:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a15a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801a15e:	f7e6 fcbd 	bl	8000adc <__aeabi_dcmplt>
 801a162:	4603      	mov	r3, r0
 801a164:	2b00      	cmp	r3, #0
 801a166:	d01e      	beq.n	801a1a6 <TSL2561_getLux+0x1ae>
	{
		*lux = 0.0224 * d0 - 0.031 * d1;
 801a168:	a347      	add	r3, pc, #284	; (adr r3, 801a288 <TSL2561_getLux+0x290>)
 801a16a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a16e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801a172:	f7e6 fa41 	bl	80005f8 <__aeabi_dmul>
 801a176:	4602      	mov	r2, r0
 801a178:	460b      	mov	r3, r1
 801a17a:	4614      	mov	r4, r2
 801a17c:	461d      	mov	r5, r3
 801a17e:	a344      	add	r3, pc, #272	; (adr r3, 801a290 <TSL2561_getLux+0x298>)
 801a180:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a184:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801a188:	f7e6 fa36 	bl	80005f8 <__aeabi_dmul>
 801a18c:	4602      	mov	r2, r0
 801a18e:	460b      	mov	r3, r1
 801a190:	4620      	mov	r0, r4
 801a192:	4629      	mov	r1, r5
 801a194:	f7e6 f878 	bl	8000288 <__aeabi_dsub>
 801a198:	4602      	mov	r2, r0
 801a19a:	460b      	mov	r3, r1
 801a19c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801a19e:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
 801a1a2:	2301      	movs	r3, #1
 801a1a4:	e059      	b.n	801a25a <TSL2561_getLux+0x262>
	}

	if (ratio < 0.80)
 801a1a6:	a33c      	add	r3, pc, #240	; (adr r3, 801a298 <TSL2561_getLux+0x2a0>)
 801a1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801a1b0:	f7e6 fc94 	bl	8000adc <__aeabi_dcmplt>
 801a1b4:	4603      	mov	r3, r0
 801a1b6:	2b00      	cmp	r3, #0
 801a1b8:	d01e      	beq.n	801a1f8 <TSL2561_getLux+0x200>
	{
		*lux = 0.0128 * d0 - 0.0153 * d1;
 801a1ba:	a339      	add	r3, pc, #228	; (adr r3, 801a2a0 <TSL2561_getLux+0x2a8>)
 801a1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1c0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801a1c4:	f7e6 fa18 	bl	80005f8 <__aeabi_dmul>
 801a1c8:	4602      	mov	r2, r0
 801a1ca:	460b      	mov	r3, r1
 801a1cc:	4614      	mov	r4, r2
 801a1ce:	461d      	mov	r5, r3
 801a1d0:	a335      	add	r3, pc, #212	; (adr r3, 801a2a8 <TSL2561_getLux+0x2b0>)
 801a1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1d6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801a1da:	f7e6 fa0d 	bl	80005f8 <__aeabi_dmul>
 801a1de:	4602      	mov	r2, r0
 801a1e0:	460b      	mov	r3, r1
 801a1e2:	4620      	mov	r0, r4
 801a1e4:	4629      	mov	r1, r5
 801a1e6:	f7e6 f84f 	bl	8000288 <__aeabi_dsub>
 801a1ea:	4602      	mov	r2, r0
 801a1ec:	460b      	mov	r3, r1
 801a1ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801a1f0:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
 801a1f4:	2301      	movs	r3, #1
 801a1f6:	e030      	b.n	801a25a <TSL2561_getLux+0x262>
	}

	if (ratio < 1.30)
 801a1f8:	a32d      	add	r3, pc, #180	; (adr r3, 801a2b0 <TSL2561_getLux+0x2b8>)
 801a1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a1fe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 801a202:	f7e6 fc6b 	bl	8000adc <__aeabi_dcmplt>
 801a206:	4603      	mov	r3, r0
 801a208:	2b00      	cmp	r3, #0
 801a20a:	d01e      	beq.n	801a24a <TSL2561_getLux+0x252>
	{
		*lux = 0.00146 * d0 - 0.00112 * d1;
 801a20c:	a32a      	add	r3, pc, #168	; (adr r3, 801a2b8 <TSL2561_getLux+0x2c0>)
 801a20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a212:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 801a216:	f7e6 f9ef 	bl	80005f8 <__aeabi_dmul>
 801a21a:	4602      	mov	r2, r0
 801a21c:	460b      	mov	r3, r1
 801a21e:	4614      	mov	r4, r2
 801a220:	461d      	mov	r5, r3
 801a222:	a327      	add	r3, pc, #156	; (adr r3, 801a2c0 <TSL2561_getLux+0x2c8>)
 801a224:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a228:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 801a22c:	f7e6 f9e4 	bl	80005f8 <__aeabi_dmul>
 801a230:	4602      	mov	r2, r0
 801a232:	460b      	mov	r3, r1
 801a234:	4620      	mov	r0, r4
 801a236:	4629      	mov	r1, r5
 801a238:	f7e6 f826 	bl	8000288 <__aeabi_dsub>
 801a23c:	4602      	mov	r2, r0
 801a23e:	460b      	mov	r3, r1
 801a240:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801a242:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
 801a246:	2301      	movs	r3, #1
 801a248:	e007      	b.n	801a25a <TSL2561_getLux+0x262>
	}

	// if (ratio > 1.30)
	*lux = 0.0;
 801a24a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801a24c:	f04f 0200 	mov.w	r2, #0
 801a250:	f04f 0300 	mov.w	r3, #0
 801a254:	e9c1 2300 	strd	r2, r3, [r1]
	return true;
 801a258:	2301      	movs	r3, #1
}
 801a25a:	4618      	mov	r0, r3
 801a25c:	3728      	adds	r7, #40	; 0x28
 801a25e:	46bd      	mov	sp, r7
 801a260:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 801a264:	f3af 8000 	nop.w
 801a268:	77318fc5 	.word	0x77318fc5
 801a26c:	3f9f212d 	.word	0x3f9f212d
 801a270:	c8b43958 	.word	0xc8b43958
 801a274:	3fafbe76 	.word	0x3fafbe76
 801a278:	66666666 	.word	0x66666666
 801a27c:	3ff66666 	.word	0x3ff66666
 801a280:	b851eb85 	.word	0xb851eb85
 801a284:	3fe3851e 	.word	0x3fe3851e
 801a288:	8db8bac7 	.word	0x8db8bac7
 801a28c:	3f96f006 	.word	0x3f96f006
 801a290:	c8b43958 	.word	0xc8b43958
 801a294:	3f9fbe76 	.word	0x3f9fbe76
 801a298:	9999999a 	.word	0x9999999a
 801a29c:	3fe99999 	.word	0x3fe99999
 801a2a0:	eb1c432d 	.word	0xeb1c432d
 801a2a4:	3f8a36e2 	.word	0x3f8a36e2
 801a2a8:	3d07c84b 	.word	0x3d07c84b
 801a2ac:	3f8f559b 	.word	0x3f8f559b
 801a2b0:	cccccccd 	.word	0xcccccccd
 801a2b4:	3ff4cccc 	.word	0x3ff4cccc
 801a2b8:	102363b2 	.word	0x102363b2
 801a2bc:	3f57ebaf 	.word	0x3f57ebaf
 801a2c0:	d7c6fbd2 	.word	0xd7c6fbd2
 801a2c4:	3f52599e 	.word	0x3f52599e
 801a2c8:	40300000 	.word	0x40300000
 801a2cc:	3fe00000 	.word	0x3fe00000
 801a2d0:	00000000 	.word	0x00000000
 801a2d4:	40792000 	.word	0x40792000

0801a2d8 <TSL2561_getID>:
bool TSL2561_getID(unsigned char *ID)
	// Retrieves part and revision code from TSL2561
	// Sets ID to part ID (see datasheet)
	// Returns true (1) if successful, false (0) if there was an I2C error
	// (Also see getError() below)
{
 801a2d8:	b580      	push	{r7, lr}
 801a2da:	b082      	sub	sp, #8
 801a2dc:	af00      	add	r7, sp, #0
 801a2de:	6078      	str	r0, [r7, #4]
	// Get ID byte from ID register
	if (TSL2561_ReadByte(TSL2561_REG_ID, ID))
 801a2e0:	6879      	ldr	r1, [r7, #4]
 801a2e2:	200a      	movs	r0, #10
 801a2e4:	f000 f836 	bl	801a354 <TSL2561_ReadByte>
 801a2e8:	4603      	mov	r3, r0
 801a2ea:	2b00      	cmp	r3, #0
 801a2ec:	d001      	beq.n	801a2f2 <TSL2561_getID+0x1a>
	{
		return true;
 801a2ee:	2301      	movs	r3, #1
 801a2f0:	e000      	b.n	801a2f4 <TSL2561_getID+0x1c>
	}

	return false;
 801a2f2:	2300      	movs	r3, #0
}
 801a2f4:	4618      	mov	r0, r3
 801a2f6:	3708      	adds	r7, #8
 801a2f8:	46bd      	mov	sp, r7
 801a2fa:	bd80      	pop	{r7, pc}

0801a2fc <TSL2561_WriteByte>:

bool TSL2561_WriteByte(uint8_t regAdr, uint8_t value)
{
 801a2fc:	b580      	push	{r7, lr}
 801a2fe:	b086      	sub	sp, #24
 801a300:	af02      	add	r7, sp, #8
 801a302:	4603      	mov	r3, r0
 801a304:	460a      	mov	r2, r1
 801a306:	71fb      	strb	r3, [r7, #7]
 801a308:	4613      	mov	r3, r2
 801a30a:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2] = {0, 0};
 801a30c:	2300      	movs	r3, #0
 801a30e:	81bb      	strh	r3, [r7, #12]

	data[0] = ((regAdr & 0x0F) | TSL2561_CMD);
 801a310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a314:	f003 030f 	and.w	r3, r3, #15
 801a318:	b25b      	sxtb	r3, r3
 801a31a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801a31e:	b25b      	sxtb	r3, r3
 801a320:	b2db      	uxtb	r3, r3
 801a322:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 801a324:	79bb      	ldrb	r3, [r7, #6]
 801a326:	737b      	strb	r3, [r7, #13]

	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) TSL2561_ADDR, data, 2, 1000) == HAL_OK)
 801a328:	f107 020c 	add.w	r2, r7, #12
 801a32c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801a330:	9300      	str	r3, [sp, #0]
 801a332:	2302      	movs	r3, #2
 801a334:	2172      	movs	r1, #114	; 0x72
 801a336:	4806      	ldr	r0, [pc, #24]	; (801a350 <TSL2561_WriteByte+0x54>)
 801a338:	f7e9 ff3a 	bl	80041b0 <HAL_I2C_Master_Transmit>
 801a33c:	4603      	mov	r3, r0
 801a33e:	2b00      	cmp	r3, #0
 801a340:	d101      	bne.n	801a346 <TSL2561_WriteByte+0x4a>
	{
		return true;
 801a342:	2301      	movs	r3, #1
 801a344:	e000      	b.n	801a348 <TSL2561_WriteByte+0x4c>
	}
	else
	{
		return false;
 801a346:	2300      	movs	r3, #0
	}
}
 801a348:	4618      	mov	r0, r3
 801a34a:	3710      	adds	r7, #16
 801a34c:	46bd      	mov	sp, r7
 801a34e:	bd80      	pop	{r7, pc}
 801a350:	20008280 	.word	0x20008280

0801a354 <TSL2561_ReadByte>:

bool TSL2561_ReadByte(uint8_t regAdr, uint8_t *value)
{
 801a354:	b580      	push	{r7, lr}
 801a356:	b086      	sub	sp, #24
 801a358:	af02      	add	r7, sp, #8
 801a35a:	4603      	mov	r3, r0
 801a35c:	6039      	str	r1, [r7, #0]
 801a35e:	71fb      	strb	r3, [r7, #7]
	uint8_t data = ((regAdr & 0x0F) | TSL2561_CMD);
 801a360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a364:	f003 030f 	and.w	r3, r3, #15
 801a368:	b25b      	sxtb	r3, r3
 801a36a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801a36e:	b25b      	sxtb	r3, r3
 801a370:	b2db      	uxtb	r3, r3
 801a372:	73fb      	strb	r3, [r7, #15]

	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) TSL2561_ADDR, &data, 1, 1000) == HAL_OK)
 801a374:	f107 020f 	add.w	r2, r7, #15
 801a378:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801a37c:	9300      	str	r3, [sp, #0]
 801a37e:	2301      	movs	r3, #1
 801a380:	2172      	movs	r1, #114	; 0x72
 801a382:	480d      	ldr	r0, [pc, #52]	; (801a3b8 <TSL2561_ReadByte+0x64>)
 801a384:	f7e9 ff14 	bl	80041b0 <HAL_I2C_Master_Transmit>
 801a388:	4603      	mov	r3, r0
 801a38a:	2b00      	cmp	r3, #0
 801a38c:	d10f      	bne.n	801a3ae <TSL2561_ReadByte+0x5a>
	{
		if(HAL_I2C_Master_Receive(&hi2c1, (uint16_t) TSL2561_ADDR, value, 1, 1000) == HAL_OK)
 801a38e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801a392:	9300      	str	r3, [sp, #0]
 801a394:	2301      	movs	r3, #1
 801a396:	683a      	ldr	r2, [r7, #0]
 801a398:	2172      	movs	r1, #114	; 0x72
 801a39a:	4807      	ldr	r0, [pc, #28]	; (801a3b8 <TSL2561_ReadByte+0x64>)
 801a39c:	f7ea f806 	bl	80043ac <HAL_I2C_Master_Receive>
 801a3a0:	4603      	mov	r3, r0
 801a3a2:	2b00      	cmp	r3, #0
 801a3a4:	d101      	bne.n	801a3aa <TSL2561_ReadByte+0x56>
		{
			return true;
 801a3a6:	2301      	movs	r3, #1
 801a3a8:	e002      	b.n	801a3b0 <TSL2561_ReadByte+0x5c>
		}
		else
		{
			return false;
 801a3aa:	2300      	movs	r3, #0
 801a3ac:	e000      	b.n	801a3b0 <TSL2561_ReadByte+0x5c>
		}
	}
	else
	{
		return false;
 801a3ae:	2300      	movs	r3, #0
	}
}
 801a3b0:	4618      	mov	r0, r3
 801a3b2:	3710      	adds	r7, #16
 801a3b4:	46bd      	mov	sp, r7
 801a3b6:	bd80      	pop	{r7, pc}
 801a3b8:	20008280 	.word	0x20008280

0801a3bc <TSL2561_readUInt>:
	// Reads an unsigned integer (16 bits) from a TSL2561 address (low byte first)
	// Address: TSL2561 address (0 to 15), low byte first
	// Value will be set to stored unsigned integer
	// Returns true (1) if successful, false (0) if there was an I2C error
	// (Also see getError() above)
{
 801a3bc:	b580      	push	{r7, lr}
 801a3be:	b086      	sub	sp, #24
 801a3c0:	af02      	add	r7, sp, #8
 801a3c2:	4603      	mov	r3, r0
 801a3c4:	6039      	str	r1, [r7, #0]
 801a3c6:	71fb      	strb	r3, [r7, #7]
	char high, low;

	// Set up command byte for read
	uint8_t data = ((address & 0x0F) | TSL2561_CMD);
 801a3c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a3cc:	f003 030f 	and.w	r3, r3, #15
 801a3d0:	b25b      	sxtb	r3, r3
 801a3d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801a3d6:	b25b      	sxtb	r3, r3
 801a3d8:	b2db      	uxtb	r3, r3
 801a3da:	737b      	strb	r3, [r7, #13]
	uint8_t tmpValue[2] = {0, 0};
 801a3dc:	2300      	movs	r3, #0
 801a3de:	813b      	strh	r3, [r7, #8]

	if(HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) TSL2561_ADDR, &data, 1, 1000) == HAL_OK)
 801a3e0:	f107 020d 	add.w	r2, r7, #13
 801a3e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801a3e8:	9300      	str	r3, [sp, #0]
 801a3ea:	2301      	movs	r3, #1
 801a3ec:	2172      	movs	r1, #114	; 0x72
 801a3ee:	4813      	ldr	r0, [pc, #76]	; (801a43c <TSL2561_readUInt+0x80>)
 801a3f0:	f7e9 fede 	bl	80041b0 <HAL_I2C_Master_Transmit>
 801a3f4:	4603      	mov	r3, r0
 801a3f6:	2b00      	cmp	r3, #0
 801a3f8:	d11b      	bne.n	801a432 <TSL2561_readUInt+0x76>
	{
		if(HAL_I2C_Master_Receive(&hi2c1, (uint16_t) TSL2561_ADDR, tmpValue, 2, 1000) == HAL_OK)
 801a3fa:	f107 0208 	add.w	r2, r7, #8
 801a3fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801a402:	9300      	str	r3, [sp, #0]
 801a404:	2302      	movs	r3, #2
 801a406:	2172      	movs	r1, #114	; 0x72
 801a408:	480c      	ldr	r0, [pc, #48]	; (801a43c <TSL2561_readUInt+0x80>)
 801a40a:	f7e9 ffcf 	bl	80043ac <HAL_I2C_Master_Receive>
 801a40e:	4603      	mov	r3, r0
 801a410:	2b00      	cmp	r3, #0
 801a412:	d10c      	bne.n	801a42e <TSL2561_readUInt+0x72>
		{
			low = tmpValue[0];
 801a414:	7a3b      	ldrb	r3, [r7, #8]
 801a416:	73fb      	strb	r3, [r7, #15]
			high = tmpValue[1];
 801a418:	7a7b      	ldrb	r3, [r7, #9]
 801a41a:	73bb      	strb	r3, [r7, #14]
			// Combine bytes into unsigned int
			*value = high << 8 |  low;
 801a41c:	7bbb      	ldrb	r3, [r7, #14]
 801a41e:	021a      	lsls	r2, r3, #8
 801a420:	7bfb      	ldrb	r3, [r7, #15]
 801a422:	4313      	orrs	r3, r2
 801a424:	461a      	mov	r2, r3
 801a426:	683b      	ldr	r3, [r7, #0]
 801a428:	601a      	str	r2, [r3, #0]
			return true;
 801a42a:	2301      	movs	r3, #1
 801a42c:	e002      	b.n	801a434 <TSL2561_readUInt+0x78>
		}
		else
		{
			return false;
 801a42e:	2300      	movs	r3, #0
 801a430:	e000      	b.n	801a434 <TSL2561_readUInt+0x78>
		}
	}
	else
	{
		return false;
 801a432:	2300      	movs	r3, #0
	}
}
 801a434:	4618      	mov	r0, r3
 801a436:	3710      	adds	r7, #16
 801a438:	46bd      	mov	sp, r7
 801a43a:	bd80      	pop	{r7, pc}
 801a43c:	20008280 	.word	0x20008280

0801a440 <__errno>:
 801a440:	4b01      	ldr	r3, [pc, #4]	; (801a448 <__errno+0x8>)
 801a442:	6818      	ldr	r0, [r3, #0]
 801a444:	4770      	bx	lr
 801a446:	bf00      	nop
 801a448:	20000074 	.word	0x20000074

0801a44c <__libc_init_array>:
 801a44c:	b570      	push	{r4, r5, r6, lr}
 801a44e:	4d0d      	ldr	r5, [pc, #52]	; (801a484 <__libc_init_array+0x38>)
 801a450:	4c0d      	ldr	r4, [pc, #52]	; (801a488 <__libc_init_array+0x3c>)
 801a452:	1b64      	subs	r4, r4, r5
 801a454:	10a4      	asrs	r4, r4, #2
 801a456:	2600      	movs	r6, #0
 801a458:	42a6      	cmp	r6, r4
 801a45a:	d109      	bne.n	801a470 <__libc_init_array+0x24>
 801a45c:	4d0b      	ldr	r5, [pc, #44]	; (801a48c <__libc_init_array+0x40>)
 801a45e:	4c0c      	ldr	r4, [pc, #48]	; (801a490 <__libc_init_array+0x44>)
 801a460:	f001 fc84 	bl	801bd6c <_init>
 801a464:	1b64      	subs	r4, r4, r5
 801a466:	10a4      	asrs	r4, r4, #2
 801a468:	2600      	movs	r6, #0
 801a46a:	42a6      	cmp	r6, r4
 801a46c:	d105      	bne.n	801a47a <__libc_init_array+0x2e>
 801a46e:	bd70      	pop	{r4, r5, r6, pc}
 801a470:	f855 3b04 	ldr.w	r3, [r5], #4
 801a474:	4798      	blx	r3
 801a476:	3601      	adds	r6, #1
 801a478:	e7ee      	b.n	801a458 <__libc_init_array+0xc>
 801a47a:	f855 3b04 	ldr.w	r3, [r5], #4
 801a47e:	4798      	blx	r3
 801a480:	3601      	adds	r6, #1
 801a482:	e7f2      	b.n	801a46a <__libc_init_array+0x1e>
 801a484:	0801c470 	.word	0x0801c470
 801a488:	0801c470 	.word	0x0801c470
 801a48c:	0801c470 	.word	0x0801c470
 801a490:	0801c474 	.word	0x0801c474

0801a494 <__retarget_lock_acquire_recursive>:
 801a494:	4770      	bx	lr

0801a496 <__retarget_lock_release_recursive>:
 801a496:	4770      	bx	lr

0801a498 <memcpy>:
 801a498:	440a      	add	r2, r1
 801a49a:	4291      	cmp	r1, r2
 801a49c:	f100 33ff 	add.w	r3, r0, #4294967295
 801a4a0:	d100      	bne.n	801a4a4 <memcpy+0xc>
 801a4a2:	4770      	bx	lr
 801a4a4:	b510      	push	{r4, lr}
 801a4a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a4aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a4ae:	4291      	cmp	r1, r2
 801a4b0:	d1f9      	bne.n	801a4a6 <memcpy+0xe>
 801a4b2:	bd10      	pop	{r4, pc}

0801a4b4 <memset>:
 801a4b4:	4402      	add	r2, r0
 801a4b6:	4603      	mov	r3, r0
 801a4b8:	4293      	cmp	r3, r2
 801a4ba:	d100      	bne.n	801a4be <memset+0xa>
 801a4bc:	4770      	bx	lr
 801a4be:	f803 1b01 	strb.w	r1, [r3], #1
 801a4c2:	e7f9      	b.n	801a4b8 <memset+0x4>

0801a4c4 <_malloc_r>:
 801a4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a4c6:	1ccd      	adds	r5, r1, #3
 801a4c8:	f025 0503 	bic.w	r5, r5, #3
 801a4cc:	3508      	adds	r5, #8
 801a4ce:	2d0c      	cmp	r5, #12
 801a4d0:	bf38      	it	cc
 801a4d2:	250c      	movcc	r5, #12
 801a4d4:	2d00      	cmp	r5, #0
 801a4d6:	4606      	mov	r6, r0
 801a4d8:	db01      	blt.n	801a4de <_malloc_r+0x1a>
 801a4da:	42a9      	cmp	r1, r5
 801a4dc:	d903      	bls.n	801a4e6 <_malloc_r+0x22>
 801a4de:	230c      	movs	r3, #12
 801a4e0:	6033      	str	r3, [r6, #0]
 801a4e2:	2000      	movs	r0, #0
 801a4e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a4e6:	f000 f8f9 	bl	801a6dc <__malloc_lock>
 801a4ea:	4921      	ldr	r1, [pc, #132]	; (801a570 <_malloc_r+0xac>)
 801a4ec:	680a      	ldr	r2, [r1, #0]
 801a4ee:	4614      	mov	r4, r2
 801a4f0:	b99c      	cbnz	r4, 801a51a <_malloc_r+0x56>
 801a4f2:	4f20      	ldr	r7, [pc, #128]	; (801a574 <_malloc_r+0xb0>)
 801a4f4:	683b      	ldr	r3, [r7, #0]
 801a4f6:	b923      	cbnz	r3, 801a502 <_malloc_r+0x3e>
 801a4f8:	4621      	mov	r1, r4
 801a4fa:	4630      	mov	r0, r6
 801a4fc:	f000 f8a6 	bl	801a64c <_sbrk_r>
 801a500:	6038      	str	r0, [r7, #0]
 801a502:	4629      	mov	r1, r5
 801a504:	4630      	mov	r0, r6
 801a506:	f000 f8a1 	bl	801a64c <_sbrk_r>
 801a50a:	1c43      	adds	r3, r0, #1
 801a50c:	d123      	bne.n	801a556 <_malloc_r+0x92>
 801a50e:	230c      	movs	r3, #12
 801a510:	6033      	str	r3, [r6, #0]
 801a512:	4630      	mov	r0, r6
 801a514:	f000 f8e8 	bl	801a6e8 <__malloc_unlock>
 801a518:	e7e3      	b.n	801a4e2 <_malloc_r+0x1e>
 801a51a:	6823      	ldr	r3, [r4, #0]
 801a51c:	1b5b      	subs	r3, r3, r5
 801a51e:	d417      	bmi.n	801a550 <_malloc_r+0x8c>
 801a520:	2b0b      	cmp	r3, #11
 801a522:	d903      	bls.n	801a52c <_malloc_r+0x68>
 801a524:	6023      	str	r3, [r4, #0]
 801a526:	441c      	add	r4, r3
 801a528:	6025      	str	r5, [r4, #0]
 801a52a:	e004      	b.n	801a536 <_malloc_r+0x72>
 801a52c:	6863      	ldr	r3, [r4, #4]
 801a52e:	42a2      	cmp	r2, r4
 801a530:	bf0c      	ite	eq
 801a532:	600b      	streq	r3, [r1, #0]
 801a534:	6053      	strne	r3, [r2, #4]
 801a536:	4630      	mov	r0, r6
 801a538:	f000 f8d6 	bl	801a6e8 <__malloc_unlock>
 801a53c:	f104 000b 	add.w	r0, r4, #11
 801a540:	1d23      	adds	r3, r4, #4
 801a542:	f020 0007 	bic.w	r0, r0, #7
 801a546:	1ac2      	subs	r2, r0, r3
 801a548:	d0cc      	beq.n	801a4e4 <_malloc_r+0x20>
 801a54a:	1a1b      	subs	r3, r3, r0
 801a54c:	50a3      	str	r3, [r4, r2]
 801a54e:	e7c9      	b.n	801a4e4 <_malloc_r+0x20>
 801a550:	4622      	mov	r2, r4
 801a552:	6864      	ldr	r4, [r4, #4]
 801a554:	e7cc      	b.n	801a4f0 <_malloc_r+0x2c>
 801a556:	1cc4      	adds	r4, r0, #3
 801a558:	f024 0403 	bic.w	r4, r4, #3
 801a55c:	42a0      	cmp	r0, r4
 801a55e:	d0e3      	beq.n	801a528 <_malloc_r+0x64>
 801a560:	1a21      	subs	r1, r4, r0
 801a562:	4630      	mov	r0, r6
 801a564:	f000 f872 	bl	801a64c <_sbrk_r>
 801a568:	3001      	adds	r0, #1
 801a56a:	d1dd      	bne.n	801a528 <_malloc_r+0x64>
 801a56c:	e7cf      	b.n	801a50e <_malloc_r+0x4a>
 801a56e:	bf00      	nop
 801a570:	2000800c 	.word	0x2000800c
 801a574:	20008010 	.word	0x20008010

0801a578 <cleanup_glue>:
 801a578:	b538      	push	{r3, r4, r5, lr}
 801a57a:	460c      	mov	r4, r1
 801a57c:	6809      	ldr	r1, [r1, #0]
 801a57e:	4605      	mov	r5, r0
 801a580:	b109      	cbz	r1, 801a586 <cleanup_glue+0xe>
 801a582:	f7ff fff9 	bl	801a578 <cleanup_glue>
 801a586:	4621      	mov	r1, r4
 801a588:	4628      	mov	r0, r5
 801a58a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a58e:	f000 b8b1 	b.w	801a6f4 <_free_r>
	...

0801a594 <_reclaim_reent>:
 801a594:	4b2c      	ldr	r3, [pc, #176]	; (801a648 <_reclaim_reent+0xb4>)
 801a596:	681b      	ldr	r3, [r3, #0]
 801a598:	4283      	cmp	r3, r0
 801a59a:	b570      	push	{r4, r5, r6, lr}
 801a59c:	4604      	mov	r4, r0
 801a59e:	d051      	beq.n	801a644 <_reclaim_reent+0xb0>
 801a5a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801a5a2:	b143      	cbz	r3, 801a5b6 <_reclaim_reent+0x22>
 801a5a4:	68db      	ldr	r3, [r3, #12]
 801a5a6:	2b00      	cmp	r3, #0
 801a5a8:	d14a      	bne.n	801a640 <_reclaim_reent+0xac>
 801a5aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a5ac:	6819      	ldr	r1, [r3, #0]
 801a5ae:	b111      	cbz	r1, 801a5b6 <_reclaim_reent+0x22>
 801a5b0:	4620      	mov	r0, r4
 801a5b2:	f000 f89f 	bl	801a6f4 <_free_r>
 801a5b6:	6961      	ldr	r1, [r4, #20]
 801a5b8:	b111      	cbz	r1, 801a5c0 <_reclaim_reent+0x2c>
 801a5ba:	4620      	mov	r0, r4
 801a5bc:	f000 f89a 	bl	801a6f4 <_free_r>
 801a5c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801a5c2:	b111      	cbz	r1, 801a5ca <_reclaim_reent+0x36>
 801a5c4:	4620      	mov	r0, r4
 801a5c6:	f000 f895 	bl	801a6f4 <_free_r>
 801a5ca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801a5cc:	b111      	cbz	r1, 801a5d4 <_reclaim_reent+0x40>
 801a5ce:	4620      	mov	r0, r4
 801a5d0:	f000 f890 	bl	801a6f4 <_free_r>
 801a5d4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801a5d6:	b111      	cbz	r1, 801a5de <_reclaim_reent+0x4a>
 801a5d8:	4620      	mov	r0, r4
 801a5da:	f000 f88b 	bl	801a6f4 <_free_r>
 801a5de:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801a5e0:	b111      	cbz	r1, 801a5e8 <_reclaim_reent+0x54>
 801a5e2:	4620      	mov	r0, r4
 801a5e4:	f000 f886 	bl	801a6f4 <_free_r>
 801a5e8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801a5ea:	b111      	cbz	r1, 801a5f2 <_reclaim_reent+0x5e>
 801a5ec:	4620      	mov	r0, r4
 801a5ee:	f000 f881 	bl	801a6f4 <_free_r>
 801a5f2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801a5f4:	b111      	cbz	r1, 801a5fc <_reclaim_reent+0x68>
 801a5f6:	4620      	mov	r0, r4
 801a5f8:	f000 f87c 	bl	801a6f4 <_free_r>
 801a5fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a5fe:	b111      	cbz	r1, 801a606 <_reclaim_reent+0x72>
 801a600:	4620      	mov	r0, r4
 801a602:	f000 f877 	bl	801a6f4 <_free_r>
 801a606:	69a3      	ldr	r3, [r4, #24]
 801a608:	b1e3      	cbz	r3, 801a644 <_reclaim_reent+0xb0>
 801a60a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801a60c:	4620      	mov	r0, r4
 801a60e:	4798      	blx	r3
 801a610:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801a612:	b1b9      	cbz	r1, 801a644 <_reclaim_reent+0xb0>
 801a614:	4620      	mov	r0, r4
 801a616:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a61a:	f7ff bfad 	b.w	801a578 <cleanup_glue>
 801a61e:	5949      	ldr	r1, [r1, r5]
 801a620:	b941      	cbnz	r1, 801a634 <_reclaim_reent+0xa0>
 801a622:	3504      	adds	r5, #4
 801a624:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a626:	2d80      	cmp	r5, #128	; 0x80
 801a628:	68d9      	ldr	r1, [r3, #12]
 801a62a:	d1f8      	bne.n	801a61e <_reclaim_reent+0x8a>
 801a62c:	4620      	mov	r0, r4
 801a62e:	f000 f861 	bl	801a6f4 <_free_r>
 801a632:	e7ba      	b.n	801a5aa <_reclaim_reent+0x16>
 801a634:	680e      	ldr	r6, [r1, #0]
 801a636:	4620      	mov	r0, r4
 801a638:	f000 f85c 	bl	801a6f4 <_free_r>
 801a63c:	4631      	mov	r1, r6
 801a63e:	e7ef      	b.n	801a620 <_reclaim_reent+0x8c>
 801a640:	2500      	movs	r5, #0
 801a642:	e7ef      	b.n	801a624 <_reclaim_reent+0x90>
 801a644:	bd70      	pop	{r4, r5, r6, pc}
 801a646:	bf00      	nop
 801a648:	20000074 	.word	0x20000074

0801a64c <_sbrk_r>:
 801a64c:	b538      	push	{r3, r4, r5, lr}
 801a64e:	4d06      	ldr	r5, [pc, #24]	; (801a668 <_sbrk_r+0x1c>)
 801a650:	2300      	movs	r3, #0
 801a652:	4604      	mov	r4, r0
 801a654:	4608      	mov	r0, r1
 801a656:	602b      	str	r3, [r5, #0]
 801a658:	f7e7 ff8e 	bl	8002578 <_sbrk>
 801a65c:	1c43      	adds	r3, r0, #1
 801a65e:	d102      	bne.n	801a666 <_sbrk_r+0x1a>
 801a660:	682b      	ldr	r3, [r5, #0]
 801a662:	b103      	cbz	r3, 801a666 <_sbrk_r+0x1a>
 801a664:	6023      	str	r3, [r4, #0]
 801a666:	bd38      	pop	{r3, r4, r5, pc}
 801a668:	2000a2a8 	.word	0x2000a2a8

0801a66c <siprintf>:
 801a66c:	b40e      	push	{r1, r2, r3}
 801a66e:	b500      	push	{lr}
 801a670:	b09c      	sub	sp, #112	; 0x70
 801a672:	ab1d      	add	r3, sp, #116	; 0x74
 801a674:	9002      	str	r0, [sp, #8]
 801a676:	9006      	str	r0, [sp, #24]
 801a678:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a67c:	4809      	ldr	r0, [pc, #36]	; (801a6a4 <siprintf+0x38>)
 801a67e:	9107      	str	r1, [sp, #28]
 801a680:	9104      	str	r1, [sp, #16]
 801a682:	4909      	ldr	r1, [pc, #36]	; (801a6a8 <siprintf+0x3c>)
 801a684:	f853 2b04 	ldr.w	r2, [r3], #4
 801a688:	9105      	str	r1, [sp, #20]
 801a68a:	6800      	ldr	r0, [r0, #0]
 801a68c:	9301      	str	r3, [sp, #4]
 801a68e:	a902      	add	r1, sp, #8
 801a690:	f000 f8dc 	bl	801a84c <_svfiprintf_r>
 801a694:	9b02      	ldr	r3, [sp, #8]
 801a696:	2200      	movs	r2, #0
 801a698:	701a      	strb	r2, [r3, #0]
 801a69a:	b01c      	add	sp, #112	; 0x70
 801a69c:	f85d eb04 	ldr.w	lr, [sp], #4
 801a6a0:	b003      	add	sp, #12
 801a6a2:	4770      	bx	lr
 801a6a4:	20000074 	.word	0x20000074
 801a6a8:	ffff0208 	.word	0xffff0208

0801a6ac <strstr>:
 801a6ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a6ae:	780c      	ldrb	r4, [r1, #0]
 801a6b0:	b164      	cbz	r4, 801a6cc <strstr+0x20>
 801a6b2:	4603      	mov	r3, r0
 801a6b4:	781a      	ldrb	r2, [r3, #0]
 801a6b6:	4618      	mov	r0, r3
 801a6b8:	1c5e      	adds	r6, r3, #1
 801a6ba:	b90a      	cbnz	r2, 801a6c0 <strstr+0x14>
 801a6bc:	4610      	mov	r0, r2
 801a6be:	e005      	b.n	801a6cc <strstr+0x20>
 801a6c0:	4294      	cmp	r4, r2
 801a6c2:	d108      	bne.n	801a6d6 <strstr+0x2a>
 801a6c4:	460d      	mov	r5, r1
 801a6c6:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 801a6ca:	b902      	cbnz	r2, 801a6ce <strstr+0x22>
 801a6cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a6ce:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 801a6d2:	4297      	cmp	r7, r2
 801a6d4:	d0f7      	beq.n	801a6c6 <strstr+0x1a>
 801a6d6:	4633      	mov	r3, r6
 801a6d8:	e7ec      	b.n	801a6b4 <strstr+0x8>
	...

0801a6dc <__malloc_lock>:
 801a6dc:	4801      	ldr	r0, [pc, #4]	; (801a6e4 <__malloc_lock+0x8>)
 801a6de:	f7ff bed9 	b.w	801a494 <__retarget_lock_acquire_recursive>
 801a6e2:	bf00      	nop
 801a6e4:	2000a2a2 	.word	0x2000a2a2

0801a6e8 <__malloc_unlock>:
 801a6e8:	4801      	ldr	r0, [pc, #4]	; (801a6f0 <__malloc_unlock+0x8>)
 801a6ea:	f7ff bed4 	b.w	801a496 <__retarget_lock_release_recursive>
 801a6ee:	bf00      	nop
 801a6f0:	2000a2a2 	.word	0x2000a2a2

0801a6f4 <_free_r>:
 801a6f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a6f6:	2900      	cmp	r1, #0
 801a6f8:	d048      	beq.n	801a78c <_free_r+0x98>
 801a6fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a6fe:	9001      	str	r0, [sp, #4]
 801a700:	2b00      	cmp	r3, #0
 801a702:	f1a1 0404 	sub.w	r4, r1, #4
 801a706:	bfb8      	it	lt
 801a708:	18e4      	addlt	r4, r4, r3
 801a70a:	f7ff ffe7 	bl	801a6dc <__malloc_lock>
 801a70e:	4a20      	ldr	r2, [pc, #128]	; (801a790 <_free_r+0x9c>)
 801a710:	9801      	ldr	r0, [sp, #4]
 801a712:	6813      	ldr	r3, [r2, #0]
 801a714:	4615      	mov	r5, r2
 801a716:	b933      	cbnz	r3, 801a726 <_free_r+0x32>
 801a718:	6063      	str	r3, [r4, #4]
 801a71a:	6014      	str	r4, [r2, #0]
 801a71c:	b003      	add	sp, #12
 801a71e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a722:	f7ff bfe1 	b.w	801a6e8 <__malloc_unlock>
 801a726:	42a3      	cmp	r3, r4
 801a728:	d90b      	bls.n	801a742 <_free_r+0x4e>
 801a72a:	6821      	ldr	r1, [r4, #0]
 801a72c:	1862      	adds	r2, r4, r1
 801a72e:	4293      	cmp	r3, r2
 801a730:	bf04      	itt	eq
 801a732:	681a      	ldreq	r2, [r3, #0]
 801a734:	685b      	ldreq	r3, [r3, #4]
 801a736:	6063      	str	r3, [r4, #4]
 801a738:	bf04      	itt	eq
 801a73a:	1852      	addeq	r2, r2, r1
 801a73c:	6022      	streq	r2, [r4, #0]
 801a73e:	602c      	str	r4, [r5, #0]
 801a740:	e7ec      	b.n	801a71c <_free_r+0x28>
 801a742:	461a      	mov	r2, r3
 801a744:	685b      	ldr	r3, [r3, #4]
 801a746:	b10b      	cbz	r3, 801a74c <_free_r+0x58>
 801a748:	42a3      	cmp	r3, r4
 801a74a:	d9fa      	bls.n	801a742 <_free_r+0x4e>
 801a74c:	6811      	ldr	r1, [r2, #0]
 801a74e:	1855      	adds	r5, r2, r1
 801a750:	42a5      	cmp	r5, r4
 801a752:	d10b      	bne.n	801a76c <_free_r+0x78>
 801a754:	6824      	ldr	r4, [r4, #0]
 801a756:	4421      	add	r1, r4
 801a758:	1854      	adds	r4, r2, r1
 801a75a:	42a3      	cmp	r3, r4
 801a75c:	6011      	str	r1, [r2, #0]
 801a75e:	d1dd      	bne.n	801a71c <_free_r+0x28>
 801a760:	681c      	ldr	r4, [r3, #0]
 801a762:	685b      	ldr	r3, [r3, #4]
 801a764:	6053      	str	r3, [r2, #4]
 801a766:	4421      	add	r1, r4
 801a768:	6011      	str	r1, [r2, #0]
 801a76a:	e7d7      	b.n	801a71c <_free_r+0x28>
 801a76c:	d902      	bls.n	801a774 <_free_r+0x80>
 801a76e:	230c      	movs	r3, #12
 801a770:	6003      	str	r3, [r0, #0]
 801a772:	e7d3      	b.n	801a71c <_free_r+0x28>
 801a774:	6825      	ldr	r5, [r4, #0]
 801a776:	1961      	adds	r1, r4, r5
 801a778:	428b      	cmp	r3, r1
 801a77a:	bf04      	itt	eq
 801a77c:	6819      	ldreq	r1, [r3, #0]
 801a77e:	685b      	ldreq	r3, [r3, #4]
 801a780:	6063      	str	r3, [r4, #4]
 801a782:	bf04      	itt	eq
 801a784:	1949      	addeq	r1, r1, r5
 801a786:	6021      	streq	r1, [r4, #0]
 801a788:	6054      	str	r4, [r2, #4]
 801a78a:	e7c7      	b.n	801a71c <_free_r+0x28>
 801a78c:	b003      	add	sp, #12
 801a78e:	bd30      	pop	{r4, r5, pc}
 801a790:	2000800c 	.word	0x2000800c

0801a794 <__ssputs_r>:
 801a794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a798:	688e      	ldr	r6, [r1, #8]
 801a79a:	429e      	cmp	r6, r3
 801a79c:	4682      	mov	sl, r0
 801a79e:	460c      	mov	r4, r1
 801a7a0:	4690      	mov	r8, r2
 801a7a2:	461f      	mov	r7, r3
 801a7a4:	d838      	bhi.n	801a818 <__ssputs_r+0x84>
 801a7a6:	898a      	ldrh	r2, [r1, #12]
 801a7a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a7ac:	d032      	beq.n	801a814 <__ssputs_r+0x80>
 801a7ae:	6825      	ldr	r5, [r4, #0]
 801a7b0:	6909      	ldr	r1, [r1, #16]
 801a7b2:	eba5 0901 	sub.w	r9, r5, r1
 801a7b6:	6965      	ldr	r5, [r4, #20]
 801a7b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a7bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a7c0:	3301      	adds	r3, #1
 801a7c2:	444b      	add	r3, r9
 801a7c4:	106d      	asrs	r5, r5, #1
 801a7c6:	429d      	cmp	r5, r3
 801a7c8:	bf38      	it	cc
 801a7ca:	461d      	movcc	r5, r3
 801a7cc:	0553      	lsls	r3, r2, #21
 801a7ce:	d531      	bpl.n	801a834 <__ssputs_r+0xa0>
 801a7d0:	4629      	mov	r1, r5
 801a7d2:	f7ff fe77 	bl	801a4c4 <_malloc_r>
 801a7d6:	4606      	mov	r6, r0
 801a7d8:	b950      	cbnz	r0, 801a7f0 <__ssputs_r+0x5c>
 801a7da:	230c      	movs	r3, #12
 801a7dc:	f8ca 3000 	str.w	r3, [sl]
 801a7e0:	89a3      	ldrh	r3, [r4, #12]
 801a7e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a7e6:	81a3      	strh	r3, [r4, #12]
 801a7e8:	f04f 30ff 	mov.w	r0, #4294967295
 801a7ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a7f0:	6921      	ldr	r1, [r4, #16]
 801a7f2:	464a      	mov	r2, r9
 801a7f4:	f7ff fe50 	bl	801a498 <memcpy>
 801a7f8:	89a3      	ldrh	r3, [r4, #12]
 801a7fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a7fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a802:	81a3      	strh	r3, [r4, #12]
 801a804:	6126      	str	r6, [r4, #16]
 801a806:	6165      	str	r5, [r4, #20]
 801a808:	444e      	add	r6, r9
 801a80a:	eba5 0509 	sub.w	r5, r5, r9
 801a80e:	6026      	str	r6, [r4, #0]
 801a810:	60a5      	str	r5, [r4, #8]
 801a812:	463e      	mov	r6, r7
 801a814:	42be      	cmp	r6, r7
 801a816:	d900      	bls.n	801a81a <__ssputs_r+0x86>
 801a818:	463e      	mov	r6, r7
 801a81a:	4632      	mov	r2, r6
 801a81c:	6820      	ldr	r0, [r4, #0]
 801a81e:	4641      	mov	r1, r8
 801a820:	f000 faa8 	bl	801ad74 <memmove>
 801a824:	68a3      	ldr	r3, [r4, #8]
 801a826:	6822      	ldr	r2, [r4, #0]
 801a828:	1b9b      	subs	r3, r3, r6
 801a82a:	4432      	add	r2, r6
 801a82c:	60a3      	str	r3, [r4, #8]
 801a82e:	6022      	str	r2, [r4, #0]
 801a830:	2000      	movs	r0, #0
 801a832:	e7db      	b.n	801a7ec <__ssputs_r+0x58>
 801a834:	462a      	mov	r2, r5
 801a836:	f000 fab7 	bl	801ada8 <_realloc_r>
 801a83a:	4606      	mov	r6, r0
 801a83c:	2800      	cmp	r0, #0
 801a83e:	d1e1      	bne.n	801a804 <__ssputs_r+0x70>
 801a840:	6921      	ldr	r1, [r4, #16]
 801a842:	4650      	mov	r0, sl
 801a844:	f7ff ff56 	bl	801a6f4 <_free_r>
 801a848:	e7c7      	b.n	801a7da <__ssputs_r+0x46>
	...

0801a84c <_svfiprintf_r>:
 801a84c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a850:	4698      	mov	r8, r3
 801a852:	898b      	ldrh	r3, [r1, #12]
 801a854:	061b      	lsls	r3, r3, #24
 801a856:	b09d      	sub	sp, #116	; 0x74
 801a858:	4607      	mov	r7, r0
 801a85a:	460d      	mov	r5, r1
 801a85c:	4614      	mov	r4, r2
 801a85e:	d50e      	bpl.n	801a87e <_svfiprintf_r+0x32>
 801a860:	690b      	ldr	r3, [r1, #16]
 801a862:	b963      	cbnz	r3, 801a87e <_svfiprintf_r+0x32>
 801a864:	2140      	movs	r1, #64	; 0x40
 801a866:	f7ff fe2d 	bl	801a4c4 <_malloc_r>
 801a86a:	6028      	str	r0, [r5, #0]
 801a86c:	6128      	str	r0, [r5, #16]
 801a86e:	b920      	cbnz	r0, 801a87a <_svfiprintf_r+0x2e>
 801a870:	230c      	movs	r3, #12
 801a872:	603b      	str	r3, [r7, #0]
 801a874:	f04f 30ff 	mov.w	r0, #4294967295
 801a878:	e0d1      	b.n	801aa1e <_svfiprintf_r+0x1d2>
 801a87a:	2340      	movs	r3, #64	; 0x40
 801a87c:	616b      	str	r3, [r5, #20]
 801a87e:	2300      	movs	r3, #0
 801a880:	9309      	str	r3, [sp, #36]	; 0x24
 801a882:	2320      	movs	r3, #32
 801a884:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a888:	f8cd 800c 	str.w	r8, [sp, #12]
 801a88c:	2330      	movs	r3, #48	; 0x30
 801a88e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801aa38 <_svfiprintf_r+0x1ec>
 801a892:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a896:	f04f 0901 	mov.w	r9, #1
 801a89a:	4623      	mov	r3, r4
 801a89c:	469a      	mov	sl, r3
 801a89e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a8a2:	b10a      	cbz	r2, 801a8a8 <_svfiprintf_r+0x5c>
 801a8a4:	2a25      	cmp	r2, #37	; 0x25
 801a8a6:	d1f9      	bne.n	801a89c <_svfiprintf_r+0x50>
 801a8a8:	ebba 0b04 	subs.w	fp, sl, r4
 801a8ac:	d00b      	beq.n	801a8c6 <_svfiprintf_r+0x7a>
 801a8ae:	465b      	mov	r3, fp
 801a8b0:	4622      	mov	r2, r4
 801a8b2:	4629      	mov	r1, r5
 801a8b4:	4638      	mov	r0, r7
 801a8b6:	f7ff ff6d 	bl	801a794 <__ssputs_r>
 801a8ba:	3001      	adds	r0, #1
 801a8bc:	f000 80aa 	beq.w	801aa14 <_svfiprintf_r+0x1c8>
 801a8c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a8c2:	445a      	add	r2, fp
 801a8c4:	9209      	str	r2, [sp, #36]	; 0x24
 801a8c6:	f89a 3000 	ldrb.w	r3, [sl]
 801a8ca:	2b00      	cmp	r3, #0
 801a8cc:	f000 80a2 	beq.w	801aa14 <_svfiprintf_r+0x1c8>
 801a8d0:	2300      	movs	r3, #0
 801a8d2:	f04f 32ff 	mov.w	r2, #4294967295
 801a8d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a8da:	f10a 0a01 	add.w	sl, sl, #1
 801a8de:	9304      	str	r3, [sp, #16]
 801a8e0:	9307      	str	r3, [sp, #28]
 801a8e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a8e6:	931a      	str	r3, [sp, #104]	; 0x68
 801a8e8:	4654      	mov	r4, sl
 801a8ea:	2205      	movs	r2, #5
 801a8ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a8f0:	4851      	ldr	r0, [pc, #324]	; (801aa38 <_svfiprintf_r+0x1ec>)
 801a8f2:	f7e5 fc75 	bl	80001e0 <memchr>
 801a8f6:	9a04      	ldr	r2, [sp, #16]
 801a8f8:	b9d8      	cbnz	r0, 801a932 <_svfiprintf_r+0xe6>
 801a8fa:	06d0      	lsls	r0, r2, #27
 801a8fc:	bf44      	itt	mi
 801a8fe:	2320      	movmi	r3, #32
 801a900:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a904:	0711      	lsls	r1, r2, #28
 801a906:	bf44      	itt	mi
 801a908:	232b      	movmi	r3, #43	; 0x2b
 801a90a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a90e:	f89a 3000 	ldrb.w	r3, [sl]
 801a912:	2b2a      	cmp	r3, #42	; 0x2a
 801a914:	d015      	beq.n	801a942 <_svfiprintf_r+0xf6>
 801a916:	9a07      	ldr	r2, [sp, #28]
 801a918:	4654      	mov	r4, sl
 801a91a:	2000      	movs	r0, #0
 801a91c:	f04f 0c0a 	mov.w	ip, #10
 801a920:	4621      	mov	r1, r4
 801a922:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a926:	3b30      	subs	r3, #48	; 0x30
 801a928:	2b09      	cmp	r3, #9
 801a92a:	d94e      	bls.n	801a9ca <_svfiprintf_r+0x17e>
 801a92c:	b1b0      	cbz	r0, 801a95c <_svfiprintf_r+0x110>
 801a92e:	9207      	str	r2, [sp, #28]
 801a930:	e014      	b.n	801a95c <_svfiprintf_r+0x110>
 801a932:	eba0 0308 	sub.w	r3, r0, r8
 801a936:	fa09 f303 	lsl.w	r3, r9, r3
 801a93a:	4313      	orrs	r3, r2
 801a93c:	9304      	str	r3, [sp, #16]
 801a93e:	46a2      	mov	sl, r4
 801a940:	e7d2      	b.n	801a8e8 <_svfiprintf_r+0x9c>
 801a942:	9b03      	ldr	r3, [sp, #12]
 801a944:	1d19      	adds	r1, r3, #4
 801a946:	681b      	ldr	r3, [r3, #0]
 801a948:	9103      	str	r1, [sp, #12]
 801a94a:	2b00      	cmp	r3, #0
 801a94c:	bfbb      	ittet	lt
 801a94e:	425b      	neglt	r3, r3
 801a950:	f042 0202 	orrlt.w	r2, r2, #2
 801a954:	9307      	strge	r3, [sp, #28]
 801a956:	9307      	strlt	r3, [sp, #28]
 801a958:	bfb8      	it	lt
 801a95a:	9204      	strlt	r2, [sp, #16]
 801a95c:	7823      	ldrb	r3, [r4, #0]
 801a95e:	2b2e      	cmp	r3, #46	; 0x2e
 801a960:	d10c      	bne.n	801a97c <_svfiprintf_r+0x130>
 801a962:	7863      	ldrb	r3, [r4, #1]
 801a964:	2b2a      	cmp	r3, #42	; 0x2a
 801a966:	d135      	bne.n	801a9d4 <_svfiprintf_r+0x188>
 801a968:	9b03      	ldr	r3, [sp, #12]
 801a96a:	1d1a      	adds	r2, r3, #4
 801a96c:	681b      	ldr	r3, [r3, #0]
 801a96e:	9203      	str	r2, [sp, #12]
 801a970:	2b00      	cmp	r3, #0
 801a972:	bfb8      	it	lt
 801a974:	f04f 33ff 	movlt.w	r3, #4294967295
 801a978:	3402      	adds	r4, #2
 801a97a:	9305      	str	r3, [sp, #20]
 801a97c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801aa48 <_svfiprintf_r+0x1fc>
 801a980:	7821      	ldrb	r1, [r4, #0]
 801a982:	2203      	movs	r2, #3
 801a984:	4650      	mov	r0, sl
 801a986:	f7e5 fc2b 	bl	80001e0 <memchr>
 801a98a:	b140      	cbz	r0, 801a99e <_svfiprintf_r+0x152>
 801a98c:	2340      	movs	r3, #64	; 0x40
 801a98e:	eba0 000a 	sub.w	r0, r0, sl
 801a992:	fa03 f000 	lsl.w	r0, r3, r0
 801a996:	9b04      	ldr	r3, [sp, #16]
 801a998:	4303      	orrs	r3, r0
 801a99a:	3401      	adds	r4, #1
 801a99c:	9304      	str	r3, [sp, #16]
 801a99e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a9a2:	4826      	ldr	r0, [pc, #152]	; (801aa3c <_svfiprintf_r+0x1f0>)
 801a9a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a9a8:	2206      	movs	r2, #6
 801a9aa:	f7e5 fc19 	bl	80001e0 <memchr>
 801a9ae:	2800      	cmp	r0, #0
 801a9b0:	d038      	beq.n	801aa24 <_svfiprintf_r+0x1d8>
 801a9b2:	4b23      	ldr	r3, [pc, #140]	; (801aa40 <_svfiprintf_r+0x1f4>)
 801a9b4:	bb1b      	cbnz	r3, 801a9fe <_svfiprintf_r+0x1b2>
 801a9b6:	9b03      	ldr	r3, [sp, #12]
 801a9b8:	3307      	adds	r3, #7
 801a9ba:	f023 0307 	bic.w	r3, r3, #7
 801a9be:	3308      	adds	r3, #8
 801a9c0:	9303      	str	r3, [sp, #12]
 801a9c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a9c4:	4433      	add	r3, r6
 801a9c6:	9309      	str	r3, [sp, #36]	; 0x24
 801a9c8:	e767      	b.n	801a89a <_svfiprintf_r+0x4e>
 801a9ca:	fb0c 3202 	mla	r2, ip, r2, r3
 801a9ce:	460c      	mov	r4, r1
 801a9d0:	2001      	movs	r0, #1
 801a9d2:	e7a5      	b.n	801a920 <_svfiprintf_r+0xd4>
 801a9d4:	2300      	movs	r3, #0
 801a9d6:	3401      	adds	r4, #1
 801a9d8:	9305      	str	r3, [sp, #20]
 801a9da:	4619      	mov	r1, r3
 801a9dc:	f04f 0c0a 	mov.w	ip, #10
 801a9e0:	4620      	mov	r0, r4
 801a9e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a9e6:	3a30      	subs	r2, #48	; 0x30
 801a9e8:	2a09      	cmp	r2, #9
 801a9ea:	d903      	bls.n	801a9f4 <_svfiprintf_r+0x1a8>
 801a9ec:	2b00      	cmp	r3, #0
 801a9ee:	d0c5      	beq.n	801a97c <_svfiprintf_r+0x130>
 801a9f0:	9105      	str	r1, [sp, #20]
 801a9f2:	e7c3      	b.n	801a97c <_svfiprintf_r+0x130>
 801a9f4:	fb0c 2101 	mla	r1, ip, r1, r2
 801a9f8:	4604      	mov	r4, r0
 801a9fa:	2301      	movs	r3, #1
 801a9fc:	e7f0      	b.n	801a9e0 <_svfiprintf_r+0x194>
 801a9fe:	ab03      	add	r3, sp, #12
 801aa00:	9300      	str	r3, [sp, #0]
 801aa02:	462a      	mov	r2, r5
 801aa04:	4b0f      	ldr	r3, [pc, #60]	; (801aa44 <_svfiprintf_r+0x1f8>)
 801aa06:	a904      	add	r1, sp, #16
 801aa08:	4638      	mov	r0, r7
 801aa0a:	f3af 8000 	nop.w
 801aa0e:	1c42      	adds	r2, r0, #1
 801aa10:	4606      	mov	r6, r0
 801aa12:	d1d6      	bne.n	801a9c2 <_svfiprintf_r+0x176>
 801aa14:	89ab      	ldrh	r3, [r5, #12]
 801aa16:	065b      	lsls	r3, r3, #25
 801aa18:	f53f af2c 	bmi.w	801a874 <_svfiprintf_r+0x28>
 801aa1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801aa1e:	b01d      	add	sp, #116	; 0x74
 801aa20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa24:	ab03      	add	r3, sp, #12
 801aa26:	9300      	str	r3, [sp, #0]
 801aa28:	462a      	mov	r2, r5
 801aa2a:	4b06      	ldr	r3, [pc, #24]	; (801aa44 <_svfiprintf_r+0x1f8>)
 801aa2c:	a904      	add	r1, sp, #16
 801aa2e:	4638      	mov	r0, r7
 801aa30:	f000 f87a 	bl	801ab28 <_printf_i>
 801aa34:	e7eb      	b.n	801aa0e <_svfiprintf_r+0x1c2>
 801aa36:	bf00      	nop
 801aa38:	0801c3f4 	.word	0x0801c3f4
 801aa3c:	0801c3fe 	.word	0x0801c3fe
 801aa40:	00000000 	.word	0x00000000
 801aa44:	0801a795 	.word	0x0801a795
 801aa48:	0801c3fa 	.word	0x0801c3fa

0801aa4c <_printf_common>:
 801aa4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aa50:	4616      	mov	r6, r2
 801aa52:	4699      	mov	r9, r3
 801aa54:	688a      	ldr	r2, [r1, #8]
 801aa56:	690b      	ldr	r3, [r1, #16]
 801aa58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801aa5c:	4293      	cmp	r3, r2
 801aa5e:	bfb8      	it	lt
 801aa60:	4613      	movlt	r3, r2
 801aa62:	6033      	str	r3, [r6, #0]
 801aa64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801aa68:	4607      	mov	r7, r0
 801aa6a:	460c      	mov	r4, r1
 801aa6c:	b10a      	cbz	r2, 801aa72 <_printf_common+0x26>
 801aa6e:	3301      	adds	r3, #1
 801aa70:	6033      	str	r3, [r6, #0]
 801aa72:	6823      	ldr	r3, [r4, #0]
 801aa74:	0699      	lsls	r1, r3, #26
 801aa76:	bf42      	ittt	mi
 801aa78:	6833      	ldrmi	r3, [r6, #0]
 801aa7a:	3302      	addmi	r3, #2
 801aa7c:	6033      	strmi	r3, [r6, #0]
 801aa7e:	6825      	ldr	r5, [r4, #0]
 801aa80:	f015 0506 	ands.w	r5, r5, #6
 801aa84:	d106      	bne.n	801aa94 <_printf_common+0x48>
 801aa86:	f104 0a19 	add.w	sl, r4, #25
 801aa8a:	68e3      	ldr	r3, [r4, #12]
 801aa8c:	6832      	ldr	r2, [r6, #0]
 801aa8e:	1a9b      	subs	r3, r3, r2
 801aa90:	42ab      	cmp	r3, r5
 801aa92:	dc26      	bgt.n	801aae2 <_printf_common+0x96>
 801aa94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801aa98:	1e13      	subs	r3, r2, #0
 801aa9a:	6822      	ldr	r2, [r4, #0]
 801aa9c:	bf18      	it	ne
 801aa9e:	2301      	movne	r3, #1
 801aaa0:	0692      	lsls	r2, r2, #26
 801aaa2:	d42b      	bmi.n	801aafc <_printf_common+0xb0>
 801aaa4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801aaa8:	4649      	mov	r1, r9
 801aaaa:	4638      	mov	r0, r7
 801aaac:	47c0      	blx	r8
 801aaae:	3001      	adds	r0, #1
 801aab0:	d01e      	beq.n	801aaf0 <_printf_common+0xa4>
 801aab2:	6823      	ldr	r3, [r4, #0]
 801aab4:	68e5      	ldr	r5, [r4, #12]
 801aab6:	6832      	ldr	r2, [r6, #0]
 801aab8:	f003 0306 	and.w	r3, r3, #6
 801aabc:	2b04      	cmp	r3, #4
 801aabe:	bf08      	it	eq
 801aac0:	1aad      	subeq	r5, r5, r2
 801aac2:	68a3      	ldr	r3, [r4, #8]
 801aac4:	6922      	ldr	r2, [r4, #16]
 801aac6:	bf0c      	ite	eq
 801aac8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801aacc:	2500      	movne	r5, #0
 801aace:	4293      	cmp	r3, r2
 801aad0:	bfc4      	itt	gt
 801aad2:	1a9b      	subgt	r3, r3, r2
 801aad4:	18ed      	addgt	r5, r5, r3
 801aad6:	2600      	movs	r6, #0
 801aad8:	341a      	adds	r4, #26
 801aada:	42b5      	cmp	r5, r6
 801aadc:	d11a      	bne.n	801ab14 <_printf_common+0xc8>
 801aade:	2000      	movs	r0, #0
 801aae0:	e008      	b.n	801aaf4 <_printf_common+0xa8>
 801aae2:	2301      	movs	r3, #1
 801aae4:	4652      	mov	r2, sl
 801aae6:	4649      	mov	r1, r9
 801aae8:	4638      	mov	r0, r7
 801aaea:	47c0      	blx	r8
 801aaec:	3001      	adds	r0, #1
 801aaee:	d103      	bne.n	801aaf8 <_printf_common+0xac>
 801aaf0:	f04f 30ff 	mov.w	r0, #4294967295
 801aaf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aaf8:	3501      	adds	r5, #1
 801aafa:	e7c6      	b.n	801aa8a <_printf_common+0x3e>
 801aafc:	18e1      	adds	r1, r4, r3
 801aafe:	1c5a      	adds	r2, r3, #1
 801ab00:	2030      	movs	r0, #48	; 0x30
 801ab02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801ab06:	4422      	add	r2, r4
 801ab08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801ab0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801ab10:	3302      	adds	r3, #2
 801ab12:	e7c7      	b.n	801aaa4 <_printf_common+0x58>
 801ab14:	2301      	movs	r3, #1
 801ab16:	4622      	mov	r2, r4
 801ab18:	4649      	mov	r1, r9
 801ab1a:	4638      	mov	r0, r7
 801ab1c:	47c0      	blx	r8
 801ab1e:	3001      	adds	r0, #1
 801ab20:	d0e6      	beq.n	801aaf0 <_printf_common+0xa4>
 801ab22:	3601      	adds	r6, #1
 801ab24:	e7d9      	b.n	801aada <_printf_common+0x8e>
	...

0801ab28 <_printf_i>:
 801ab28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ab2c:	460c      	mov	r4, r1
 801ab2e:	4691      	mov	r9, r2
 801ab30:	7e27      	ldrb	r7, [r4, #24]
 801ab32:	990c      	ldr	r1, [sp, #48]	; 0x30
 801ab34:	2f78      	cmp	r7, #120	; 0x78
 801ab36:	4680      	mov	r8, r0
 801ab38:	469a      	mov	sl, r3
 801ab3a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ab3e:	d807      	bhi.n	801ab50 <_printf_i+0x28>
 801ab40:	2f62      	cmp	r7, #98	; 0x62
 801ab42:	d80a      	bhi.n	801ab5a <_printf_i+0x32>
 801ab44:	2f00      	cmp	r7, #0
 801ab46:	f000 80d8 	beq.w	801acfa <_printf_i+0x1d2>
 801ab4a:	2f58      	cmp	r7, #88	; 0x58
 801ab4c:	f000 80a3 	beq.w	801ac96 <_printf_i+0x16e>
 801ab50:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801ab54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801ab58:	e03a      	b.n	801abd0 <_printf_i+0xa8>
 801ab5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801ab5e:	2b15      	cmp	r3, #21
 801ab60:	d8f6      	bhi.n	801ab50 <_printf_i+0x28>
 801ab62:	a001      	add	r0, pc, #4	; (adr r0, 801ab68 <_printf_i+0x40>)
 801ab64:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801ab68:	0801abc1 	.word	0x0801abc1
 801ab6c:	0801abd5 	.word	0x0801abd5
 801ab70:	0801ab51 	.word	0x0801ab51
 801ab74:	0801ab51 	.word	0x0801ab51
 801ab78:	0801ab51 	.word	0x0801ab51
 801ab7c:	0801ab51 	.word	0x0801ab51
 801ab80:	0801abd5 	.word	0x0801abd5
 801ab84:	0801ab51 	.word	0x0801ab51
 801ab88:	0801ab51 	.word	0x0801ab51
 801ab8c:	0801ab51 	.word	0x0801ab51
 801ab90:	0801ab51 	.word	0x0801ab51
 801ab94:	0801ace1 	.word	0x0801ace1
 801ab98:	0801ac05 	.word	0x0801ac05
 801ab9c:	0801acc3 	.word	0x0801acc3
 801aba0:	0801ab51 	.word	0x0801ab51
 801aba4:	0801ab51 	.word	0x0801ab51
 801aba8:	0801ad03 	.word	0x0801ad03
 801abac:	0801ab51 	.word	0x0801ab51
 801abb0:	0801ac05 	.word	0x0801ac05
 801abb4:	0801ab51 	.word	0x0801ab51
 801abb8:	0801ab51 	.word	0x0801ab51
 801abbc:	0801accb 	.word	0x0801accb
 801abc0:	680b      	ldr	r3, [r1, #0]
 801abc2:	1d1a      	adds	r2, r3, #4
 801abc4:	681b      	ldr	r3, [r3, #0]
 801abc6:	600a      	str	r2, [r1, #0]
 801abc8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801abcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801abd0:	2301      	movs	r3, #1
 801abd2:	e0a3      	b.n	801ad1c <_printf_i+0x1f4>
 801abd4:	6825      	ldr	r5, [r4, #0]
 801abd6:	6808      	ldr	r0, [r1, #0]
 801abd8:	062e      	lsls	r6, r5, #24
 801abda:	f100 0304 	add.w	r3, r0, #4
 801abde:	d50a      	bpl.n	801abf6 <_printf_i+0xce>
 801abe0:	6805      	ldr	r5, [r0, #0]
 801abe2:	600b      	str	r3, [r1, #0]
 801abe4:	2d00      	cmp	r5, #0
 801abe6:	da03      	bge.n	801abf0 <_printf_i+0xc8>
 801abe8:	232d      	movs	r3, #45	; 0x2d
 801abea:	426d      	negs	r5, r5
 801abec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801abf0:	485e      	ldr	r0, [pc, #376]	; (801ad6c <_printf_i+0x244>)
 801abf2:	230a      	movs	r3, #10
 801abf4:	e019      	b.n	801ac2a <_printf_i+0x102>
 801abf6:	f015 0f40 	tst.w	r5, #64	; 0x40
 801abfa:	6805      	ldr	r5, [r0, #0]
 801abfc:	600b      	str	r3, [r1, #0]
 801abfe:	bf18      	it	ne
 801ac00:	b22d      	sxthne	r5, r5
 801ac02:	e7ef      	b.n	801abe4 <_printf_i+0xbc>
 801ac04:	680b      	ldr	r3, [r1, #0]
 801ac06:	6825      	ldr	r5, [r4, #0]
 801ac08:	1d18      	adds	r0, r3, #4
 801ac0a:	6008      	str	r0, [r1, #0]
 801ac0c:	0628      	lsls	r0, r5, #24
 801ac0e:	d501      	bpl.n	801ac14 <_printf_i+0xec>
 801ac10:	681d      	ldr	r5, [r3, #0]
 801ac12:	e002      	b.n	801ac1a <_printf_i+0xf2>
 801ac14:	0669      	lsls	r1, r5, #25
 801ac16:	d5fb      	bpl.n	801ac10 <_printf_i+0xe8>
 801ac18:	881d      	ldrh	r5, [r3, #0]
 801ac1a:	4854      	ldr	r0, [pc, #336]	; (801ad6c <_printf_i+0x244>)
 801ac1c:	2f6f      	cmp	r7, #111	; 0x6f
 801ac1e:	bf0c      	ite	eq
 801ac20:	2308      	moveq	r3, #8
 801ac22:	230a      	movne	r3, #10
 801ac24:	2100      	movs	r1, #0
 801ac26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801ac2a:	6866      	ldr	r6, [r4, #4]
 801ac2c:	60a6      	str	r6, [r4, #8]
 801ac2e:	2e00      	cmp	r6, #0
 801ac30:	bfa2      	ittt	ge
 801ac32:	6821      	ldrge	r1, [r4, #0]
 801ac34:	f021 0104 	bicge.w	r1, r1, #4
 801ac38:	6021      	strge	r1, [r4, #0]
 801ac3a:	b90d      	cbnz	r5, 801ac40 <_printf_i+0x118>
 801ac3c:	2e00      	cmp	r6, #0
 801ac3e:	d04d      	beq.n	801acdc <_printf_i+0x1b4>
 801ac40:	4616      	mov	r6, r2
 801ac42:	fbb5 f1f3 	udiv	r1, r5, r3
 801ac46:	fb03 5711 	mls	r7, r3, r1, r5
 801ac4a:	5dc7      	ldrb	r7, [r0, r7]
 801ac4c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801ac50:	462f      	mov	r7, r5
 801ac52:	42bb      	cmp	r3, r7
 801ac54:	460d      	mov	r5, r1
 801ac56:	d9f4      	bls.n	801ac42 <_printf_i+0x11a>
 801ac58:	2b08      	cmp	r3, #8
 801ac5a:	d10b      	bne.n	801ac74 <_printf_i+0x14c>
 801ac5c:	6823      	ldr	r3, [r4, #0]
 801ac5e:	07df      	lsls	r7, r3, #31
 801ac60:	d508      	bpl.n	801ac74 <_printf_i+0x14c>
 801ac62:	6923      	ldr	r3, [r4, #16]
 801ac64:	6861      	ldr	r1, [r4, #4]
 801ac66:	4299      	cmp	r1, r3
 801ac68:	bfde      	ittt	le
 801ac6a:	2330      	movle	r3, #48	; 0x30
 801ac6c:	f806 3c01 	strble.w	r3, [r6, #-1]
 801ac70:	f106 36ff 	addle.w	r6, r6, #4294967295
 801ac74:	1b92      	subs	r2, r2, r6
 801ac76:	6122      	str	r2, [r4, #16]
 801ac78:	f8cd a000 	str.w	sl, [sp]
 801ac7c:	464b      	mov	r3, r9
 801ac7e:	aa03      	add	r2, sp, #12
 801ac80:	4621      	mov	r1, r4
 801ac82:	4640      	mov	r0, r8
 801ac84:	f7ff fee2 	bl	801aa4c <_printf_common>
 801ac88:	3001      	adds	r0, #1
 801ac8a:	d14c      	bne.n	801ad26 <_printf_i+0x1fe>
 801ac8c:	f04f 30ff 	mov.w	r0, #4294967295
 801ac90:	b004      	add	sp, #16
 801ac92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ac96:	4835      	ldr	r0, [pc, #212]	; (801ad6c <_printf_i+0x244>)
 801ac98:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801ac9c:	6823      	ldr	r3, [r4, #0]
 801ac9e:	680e      	ldr	r6, [r1, #0]
 801aca0:	061f      	lsls	r7, r3, #24
 801aca2:	f856 5b04 	ldr.w	r5, [r6], #4
 801aca6:	600e      	str	r6, [r1, #0]
 801aca8:	d514      	bpl.n	801acd4 <_printf_i+0x1ac>
 801acaa:	07d9      	lsls	r1, r3, #31
 801acac:	bf44      	itt	mi
 801acae:	f043 0320 	orrmi.w	r3, r3, #32
 801acb2:	6023      	strmi	r3, [r4, #0]
 801acb4:	b91d      	cbnz	r5, 801acbe <_printf_i+0x196>
 801acb6:	6823      	ldr	r3, [r4, #0]
 801acb8:	f023 0320 	bic.w	r3, r3, #32
 801acbc:	6023      	str	r3, [r4, #0]
 801acbe:	2310      	movs	r3, #16
 801acc0:	e7b0      	b.n	801ac24 <_printf_i+0xfc>
 801acc2:	6823      	ldr	r3, [r4, #0]
 801acc4:	f043 0320 	orr.w	r3, r3, #32
 801acc8:	6023      	str	r3, [r4, #0]
 801acca:	2378      	movs	r3, #120	; 0x78
 801accc:	4828      	ldr	r0, [pc, #160]	; (801ad70 <_printf_i+0x248>)
 801acce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801acd2:	e7e3      	b.n	801ac9c <_printf_i+0x174>
 801acd4:	065e      	lsls	r6, r3, #25
 801acd6:	bf48      	it	mi
 801acd8:	b2ad      	uxthmi	r5, r5
 801acda:	e7e6      	b.n	801acaa <_printf_i+0x182>
 801acdc:	4616      	mov	r6, r2
 801acde:	e7bb      	b.n	801ac58 <_printf_i+0x130>
 801ace0:	680b      	ldr	r3, [r1, #0]
 801ace2:	6826      	ldr	r6, [r4, #0]
 801ace4:	6960      	ldr	r0, [r4, #20]
 801ace6:	1d1d      	adds	r5, r3, #4
 801ace8:	600d      	str	r5, [r1, #0]
 801acea:	0635      	lsls	r5, r6, #24
 801acec:	681b      	ldr	r3, [r3, #0]
 801acee:	d501      	bpl.n	801acf4 <_printf_i+0x1cc>
 801acf0:	6018      	str	r0, [r3, #0]
 801acf2:	e002      	b.n	801acfa <_printf_i+0x1d2>
 801acf4:	0671      	lsls	r1, r6, #25
 801acf6:	d5fb      	bpl.n	801acf0 <_printf_i+0x1c8>
 801acf8:	8018      	strh	r0, [r3, #0]
 801acfa:	2300      	movs	r3, #0
 801acfc:	6123      	str	r3, [r4, #16]
 801acfe:	4616      	mov	r6, r2
 801ad00:	e7ba      	b.n	801ac78 <_printf_i+0x150>
 801ad02:	680b      	ldr	r3, [r1, #0]
 801ad04:	1d1a      	adds	r2, r3, #4
 801ad06:	600a      	str	r2, [r1, #0]
 801ad08:	681e      	ldr	r6, [r3, #0]
 801ad0a:	6862      	ldr	r2, [r4, #4]
 801ad0c:	2100      	movs	r1, #0
 801ad0e:	4630      	mov	r0, r6
 801ad10:	f7e5 fa66 	bl	80001e0 <memchr>
 801ad14:	b108      	cbz	r0, 801ad1a <_printf_i+0x1f2>
 801ad16:	1b80      	subs	r0, r0, r6
 801ad18:	6060      	str	r0, [r4, #4]
 801ad1a:	6863      	ldr	r3, [r4, #4]
 801ad1c:	6123      	str	r3, [r4, #16]
 801ad1e:	2300      	movs	r3, #0
 801ad20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ad24:	e7a8      	b.n	801ac78 <_printf_i+0x150>
 801ad26:	6923      	ldr	r3, [r4, #16]
 801ad28:	4632      	mov	r2, r6
 801ad2a:	4649      	mov	r1, r9
 801ad2c:	4640      	mov	r0, r8
 801ad2e:	47d0      	blx	sl
 801ad30:	3001      	adds	r0, #1
 801ad32:	d0ab      	beq.n	801ac8c <_printf_i+0x164>
 801ad34:	6823      	ldr	r3, [r4, #0]
 801ad36:	079b      	lsls	r3, r3, #30
 801ad38:	d413      	bmi.n	801ad62 <_printf_i+0x23a>
 801ad3a:	68e0      	ldr	r0, [r4, #12]
 801ad3c:	9b03      	ldr	r3, [sp, #12]
 801ad3e:	4298      	cmp	r0, r3
 801ad40:	bfb8      	it	lt
 801ad42:	4618      	movlt	r0, r3
 801ad44:	e7a4      	b.n	801ac90 <_printf_i+0x168>
 801ad46:	2301      	movs	r3, #1
 801ad48:	4632      	mov	r2, r6
 801ad4a:	4649      	mov	r1, r9
 801ad4c:	4640      	mov	r0, r8
 801ad4e:	47d0      	blx	sl
 801ad50:	3001      	adds	r0, #1
 801ad52:	d09b      	beq.n	801ac8c <_printf_i+0x164>
 801ad54:	3501      	adds	r5, #1
 801ad56:	68e3      	ldr	r3, [r4, #12]
 801ad58:	9903      	ldr	r1, [sp, #12]
 801ad5a:	1a5b      	subs	r3, r3, r1
 801ad5c:	42ab      	cmp	r3, r5
 801ad5e:	dcf2      	bgt.n	801ad46 <_printf_i+0x21e>
 801ad60:	e7eb      	b.n	801ad3a <_printf_i+0x212>
 801ad62:	2500      	movs	r5, #0
 801ad64:	f104 0619 	add.w	r6, r4, #25
 801ad68:	e7f5      	b.n	801ad56 <_printf_i+0x22e>
 801ad6a:	bf00      	nop
 801ad6c:	0801c405 	.word	0x0801c405
 801ad70:	0801c416 	.word	0x0801c416

0801ad74 <memmove>:
 801ad74:	4288      	cmp	r0, r1
 801ad76:	b510      	push	{r4, lr}
 801ad78:	eb01 0402 	add.w	r4, r1, r2
 801ad7c:	d902      	bls.n	801ad84 <memmove+0x10>
 801ad7e:	4284      	cmp	r4, r0
 801ad80:	4623      	mov	r3, r4
 801ad82:	d807      	bhi.n	801ad94 <memmove+0x20>
 801ad84:	1e43      	subs	r3, r0, #1
 801ad86:	42a1      	cmp	r1, r4
 801ad88:	d008      	beq.n	801ad9c <memmove+0x28>
 801ad8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ad8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ad92:	e7f8      	b.n	801ad86 <memmove+0x12>
 801ad94:	4402      	add	r2, r0
 801ad96:	4601      	mov	r1, r0
 801ad98:	428a      	cmp	r2, r1
 801ad9a:	d100      	bne.n	801ad9e <memmove+0x2a>
 801ad9c:	bd10      	pop	{r4, pc}
 801ad9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ada2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ada6:	e7f7      	b.n	801ad98 <memmove+0x24>

0801ada8 <_realloc_r>:
 801ada8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801adaa:	4607      	mov	r7, r0
 801adac:	4614      	mov	r4, r2
 801adae:	460e      	mov	r6, r1
 801adb0:	b921      	cbnz	r1, 801adbc <_realloc_r+0x14>
 801adb2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801adb6:	4611      	mov	r1, r2
 801adb8:	f7ff bb84 	b.w	801a4c4 <_malloc_r>
 801adbc:	b922      	cbnz	r2, 801adc8 <_realloc_r+0x20>
 801adbe:	f7ff fc99 	bl	801a6f4 <_free_r>
 801adc2:	4625      	mov	r5, r4
 801adc4:	4628      	mov	r0, r5
 801adc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801adc8:	f000 f814 	bl	801adf4 <_malloc_usable_size_r>
 801adcc:	42a0      	cmp	r0, r4
 801adce:	d20f      	bcs.n	801adf0 <_realloc_r+0x48>
 801add0:	4621      	mov	r1, r4
 801add2:	4638      	mov	r0, r7
 801add4:	f7ff fb76 	bl	801a4c4 <_malloc_r>
 801add8:	4605      	mov	r5, r0
 801adda:	2800      	cmp	r0, #0
 801addc:	d0f2      	beq.n	801adc4 <_realloc_r+0x1c>
 801adde:	4631      	mov	r1, r6
 801ade0:	4622      	mov	r2, r4
 801ade2:	f7ff fb59 	bl	801a498 <memcpy>
 801ade6:	4631      	mov	r1, r6
 801ade8:	4638      	mov	r0, r7
 801adea:	f7ff fc83 	bl	801a6f4 <_free_r>
 801adee:	e7e9      	b.n	801adc4 <_realloc_r+0x1c>
 801adf0:	4635      	mov	r5, r6
 801adf2:	e7e7      	b.n	801adc4 <_realloc_r+0x1c>

0801adf4 <_malloc_usable_size_r>:
 801adf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801adf8:	1f18      	subs	r0, r3, #4
 801adfa:	2b00      	cmp	r3, #0
 801adfc:	bfbc      	itt	lt
 801adfe:	580b      	ldrlt	r3, [r1, r0]
 801ae00:	18c0      	addlt	r0, r0, r3
 801ae02:	4770      	bx	lr

0801ae04 <pow>:
 801ae04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ae08:	ec59 8b10 	vmov	r8, r9, d0
 801ae0c:	ec57 6b11 	vmov	r6, r7, d1
 801ae10:	f000 f8a6 	bl	801af60 <__ieee754_pow>
 801ae14:	4b4e      	ldr	r3, [pc, #312]	; (801af50 <pow+0x14c>)
 801ae16:	f993 3000 	ldrsb.w	r3, [r3]
 801ae1a:	3301      	adds	r3, #1
 801ae1c:	ec55 4b10 	vmov	r4, r5, d0
 801ae20:	d015      	beq.n	801ae4e <pow+0x4a>
 801ae22:	4632      	mov	r2, r6
 801ae24:	463b      	mov	r3, r7
 801ae26:	4630      	mov	r0, r6
 801ae28:	4639      	mov	r1, r7
 801ae2a:	f7e5 fe7f 	bl	8000b2c <__aeabi_dcmpun>
 801ae2e:	b970      	cbnz	r0, 801ae4e <pow+0x4a>
 801ae30:	4642      	mov	r2, r8
 801ae32:	464b      	mov	r3, r9
 801ae34:	4640      	mov	r0, r8
 801ae36:	4649      	mov	r1, r9
 801ae38:	f7e5 fe78 	bl	8000b2c <__aeabi_dcmpun>
 801ae3c:	2200      	movs	r2, #0
 801ae3e:	2300      	movs	r3, #0
 801ae40:	b148      	cbz	r0, 801ae56 <pow+0x52>
 801ae42:	4630      	mov	r0, r6
 801ae44:	4639      	mov	r1, r7
 801ae46:	f7e5 fe3f 	bl	8000ac8 <__aeabi_dcmpeq>
 801ae4a:	2800      	cmp	r0, #0
 801ae4c:	d17d      	bne.n	801af4a <pow+0x146>
 801ae4e:	ec45 4b10 	vmov	d0, r4, r5
 801ae52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ae56:	4640      	mov	r0, r8
 801ae58:	4649      	mov	r1, r9
 801ae5a:	f7e5 fe35 	bl	8000ac8 <__aeabi_dcmpeq>
 801ae5e:	b1e0      	cbz	r0, 801ae9a <pow+0x96>
 801ae60:	2200      	movs	r2, #0
 801ae62:	2300      	movs	r3, #0
 801ae64:	4630      	mov	r0, r6
 801ae66:	4639      	mov	r1, r7
 801ae68:	f7e5 fe2e 	bl	8000ac8 <__aeabi_dcmpeq>
 801ae6c:	2800      	cmp	r0, #0
 801ae6e:	d16c      	bne.n	801af4a <pow+0x146>
 801ae70:	ec47 6b10 	vmov	d0, r6, r7
 801ae74:	f000 fe53 	bl	801bb1e <finite>
 801ae78:	2800      	cmp	r0, #0
 801ae7a:	d0e8      	beq.n	801ae4e <pow+0x4a>
 801ae7c:	2200      	movs	r2, #0
 801ae7e:	2300      	movs	r3, #0
 801ae80:	4630      	mov	r0, r6
 801ae82:	4639      	mov	r1, r7
 801ae84:	f7e5 fe2a 	bl	8000adc <__aeabi_dcmplt>
 801ae88:	2800      	cmp	r0, #0
 801ae8a:	d0e0      	beq.n	801ae4e <pow+0x4a>
 801ae8c:	f7ff fad8 	bl	801a440 <__errno>
 801ae90:	2321      	movs	r3, #33	; 0x21
 801ae92:	6003      	str	r3, [r0, #0]
 801ae94:	2400      	movs	r4, #0
 801ae96:	4d2f      	ldr	r5, [pc, #188]	; (801af54 <pow+0x150>)
 801ae98:	e7d9      	b.n	801ae4e <pow+0x4a>
 801ae9a:	ec45 4b10 	vmov	d0, r4, r5
 801ae9e:	f000 fe3e 	bl	801bb1e <finite>
 801aea2:	bbb8      	cbnz	r0, 801af14 <pow+0x110>
 801aea4:	ec49 8b10 	vmov	d0, r8, r9
 801aea8:	f000 fe39 	bl	801bb1e <finite>
 801aeac:	b390      	cbz	r0, 801af14 <pow+0x110>
 801aeae:	ec47 6b10 	vmov	d0, r6, r7
 801aeb2:	f000 fe34 	bl	801bb1e <finite>
 801aeb6:	b368      	cbz	r0, 801af14 <pow+0x110>
 801aeb8:	4622      	mov	r2, r4
 801aeba:	462b      	mov	r3, r5
 801aebc:	4620      	mov	r0, r4
 801aebe:	4629      	mov	r1, r5
 801aec0:	f7e5 fe34 	bl	8000b2c <__aeabi_dcmpun>
 801aec4:	b160      	cbz	r0, 801aee0 <pow+0xdc>
 801aec6:	f7ff fabb 	bl	801a440 <__errno>
 801aeca:	2321      	movs	r3, #33	; 0x21
 801aecc:	6003      	str	r3, [r0, #0]
 801aece:	2200      	movs	r2, #0
 801aed0:	2300      	movs	r3, #0
 801aed2:	4610      	mov	r0, r2
 801aed4:	4619      	mov	r1, r3
 801aed6:	f7e5 fcb9 	bl	800084c <__aeabi_ddiv>
 801aeda:	4604      	mov	r4, r0
 801aedc:	460d      	mov	r5, r1
 801aede:	e7b6      	b.n	801ae4e <pow+0x4a>
 801aee0:	f7ff faae 	bl	801a440 <__errno>
 801aee4:	2322      	movs	r3, #34	; 0x22
 801aee6:	6003      	str	r3, [r0, #0]
 801aee8:	2200      	movs	r2, #0
 801aeea:	2300      	movs	r3, #0
 801aeec:	4640      	mov	r0, r8
 801aeee:	4649      	mov	r1, r9
 801aef0:	f7e5 fdf4 	bl	8000adc <__aeabi_dcmplt>
 801aef4:	2400      	movs	r4, #0
 801aef6:	b158      	cbz	r0, 801af10 <pow+0x10c>
 801aef8:	ec47 6b10 	vmov	d0, r6, r7
 801aefc:	f000 fe24 	bl	801bb48 <rint>
 801af00:	4632      	mov	r2, r6
 801af02:	ec51 0b10 	vmov	r0, r1, d0
 801af06:	463b      	mov	r3, r7
 801af08:	f7e5 fdde 	bl	8000ac8 <__aeabi_dcmpeq>
 801af0c:	2800      	cmp	r0, #0
 801af0e:	d0c2      	beq.n	801ae96 <pow+0x92>
 801af10:	4d11      	ldr	r5, [pc, #68]	; (801af58 <pow+0x154>)
 801af12:	e79c      	b.n	801ae4e <pow+0x4a>
 801af14:	2200      	movs	r2, #0
 801af16:	2300      	movs	r3, #0
 801af18:	4620      	mov	r0, r4
 801af1a:	4629      	mov	r1, r5
 801af1c:	f7e5 fdd4 	bl	8000ac8 <__aeabi_dcmpeq>
 801af20:	2800      	cmp	r0, #0
 801af22:	d094      	beq.n	801ae4e <pow+0x4a>
 801af24:	ec49 8b10 	vmov	d0, r8, r9
 801af28:	f000 fdf9 	bl	801bb1e <finite>
 801af2c:	2800      	cmp	r0, #0
 801af2e:	d08e      	beq.n	801ae4e <pow+0x4a>
 801af30:	ec47 6b10 	vmov	d0, r6, r7
 801af34:	f000 fdf3 	bl	801bb1e <finite>
 801af38:	2800      	cmp	r0, #0
 801af3a:	d088      	beq.n	801ae4e <pow+0x4a>
 801af3c:	f7ff fa80 	bl	801a440 <__errno>
 801af40:	2322      	movs	r3, #34	; 0x22
 801af42:	6003      	str	r3, [r0, #0]
 801af44:	2400      	movs	r4, #0
 801af46:	2500      	movs	r5, #0
 801af48:	e781      	b.n	801ae4e <pow+0x4a>
 801af4a:	4d04      	ldr	r5, [pc, #16]	; (801af5c <pow+0x158>)
 801af4c:	2400      	movs	r4, #0
 801af4e:	e77e      	b.n	801ae4e <pow+0x4a>
 801af50:	200000d8 	.word	0x200000d8
 801af54:	fff00000 	.word	0xfff00000
 801af58:	7ff00000 	.word	0x7ff00000
 801af5c:	3ff00000 	.word	0x3ff00000

0801af60 <__ieee754_pow>:
 801af60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af64:	ed2d 8b06 	vpush	{d8-d10}
 801af68:	b08d      	sub	sp, #52	; 0x34
 801af6a:	ed8d 1b02 	vstr	d1, [sp, #8]
 801af6e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 801af72:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 801af76:	ea56 0100 	orrs.w	r1, r6, r0
 801af7a:	ec53 2b10 	vmov	r2, r3, d0
 801af7e:	f000 84d1 	beq.w	801b924 <__ieee754_pow+0x9c4>
 801af82:	497f      	ldr	r1, [pc, #508]	; (801b180 <__ieee754_pow+0x220>)
 801af84:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 801af88:	428c      	cmp	r4, r1
 801af8a:	ee10 8a10 	vmov	r8, s0
 801af8e:	4699      	mov	r9, r3
 801af90:	dc09      	bgt.n	801afa6 <__ieee754_pow+0x46>
 801af92:	d103      	bne.n	801af9c <__ieee754_pow+0x3c>
 801af94:	b97a      	cbnz	r2, 801afb6 <__ieee754_pow+0x56>
 801af96:	42a6      	cmp	r6, r4
 801af98:	dd02      	ble.n	801afa0 <__ieee754_pow+0x40>
 801af9a:	e00c      	b.n	801afb6 <__ieee754_pow+0x56>
 801af9c:	428e      	cmp	r6, r1
 801af9e:	dc02      	bgt.n	801afa6 <__ieee754_pow+0x46>
 801afa0:	428e      	cmp	r6, r1
 801afa2:	d110      	bne.n	801afc6 <__ieee754_pow+0x66>
 801afa4:	b178      	cbz	r0, 801afc6 <__ieee754_pow+0x66>
 801afa6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801afaa:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801afae:	ea54 0308 	orrs.w	r3, r4, r8
 801afb2:	f000 84b7 	beq.w	801b924 <__ieee754_pow+0x9c4>
 801afb6:	4873      	ldr	r0, [pc, #460]	; (801b184 <__ieee754_pow+0x224>)
 801afb8:	b00d      	add	sp, #52	; 0x34
 801afba:	ecbd 8b06 	vpop	{d8-d10}
 801afbe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801afc2:	f000 bdb9 	b.w	801bb38 <nan>
 801afc6:	f1b9 0f00 	cmp.w	r9, #0
 801afca:	da36      	bge.n	801b03a <__ieee754_pow+0xda>
 801afcc:	496e      	ldr	r1, [pc, #440]	; (801b188 <__ieee754_pow+0x228>)
 801afce:	428e      	cmp	r6, r1
 801afd0:	dc51      	bgt.n	801b076 <__ieee754_pow+0x116>
 801afd2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 801afd6:	428e      	cmp	r6, r1
 801afd8:	f340 84af 	ble.w	801b93a <__ieee754_pow+0x9da>
 801afdc:	1531      	asrs	r1, r6, #20
 801afde:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801afe2:	2914      	cmp	r1, #20
 801afe4:	dd0f      	ble.n	801b006 <__ieee754_pow+0xa6>
 801afe6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 801afea:	fa20 fc01 	lsr.w	ip, r0, r1
 801afee:	fa0c f101 	lsl.w	r1, ip, r1
 801aff2:	4281      	cmp	r1, r0
 801aff4:	f040 84a1 	bne.w	801b93a <__ieee754_pow+0x9da>
 801aff8:	f00c 0c01 	and.w	ip, ip, #1
 801affc:	f1cc 0102 	rsb	r1, ip, #2
 801b000:	9100      	str	r1, [sp, #0]
 801b002:	b180      	cbz	r0, 801b026 <__ieee754_pow+0xc6>
 801b004:	e059      	b.n	801b0ba <__ieee754_pow+0x15a>
 801b006:	2800      	cmp	r0, #0
 801b008:	d155      	bne.n	801b0b6 <__ieee754_pow+0x156>
 801b00a:	f1c1 0114 	rsb	r1, r1, #20
 801b00e:	fa46 fc01 	asr.w	ip, r6, r1
 801b012:	fa0c f101 	lsl.w	r1, ip, r1
 801b016:	42b1      	cmp	r1, r6
 801b018:	f040 848c 	bne.w	801b934 <__ieee754_pow+0x9d4>
 801b01c:	f00c 0c01 	and.w	ip, ip, #1
 801b020:	f1cc 0102 	rsb	r1, ip, #2
 801b024:	9100      	str	r1, [sp, #0]
 801b026:	4959      	ldr	r1, [pc, #356]	; (801b18c <__ieee754_pow+0x22c>)
 801b028:	428e      	cmp	r6, r1
 801b02a:	d12d      	bne.n	801b088 <__ieee754_pow+0x128>
 801b02c:	2f00      	cmp	r7, #0
 801b02e:	da79      	bge.n	801b124 <__ieee754_pow+0x1c4>
 801b030:	4956      	ldr	r1, [pc, #344]	; (801b18c <__ieee754_pow+0x22c>)
 801b032:	2000      	movs	r0, #0
 801b034:	f7e5 fc0a 	bl	800084c <__aeabi_ddiv>
 801b038:	e016      	b.n	801b068 <__ieee754_pow+0x108>
 801b03a:	2100      	movs	r1, #0
 801b03c:	9100      	str	r1, [sp, #0]
 801b03e:	2800      	cmp	r0, #0
 801b040:	d13b      	bne.n	801b0ba <__ieee754_pow+0x15a>
 801b042:	494f      	ldr	r1, [pc, #316]	; (801b180 <__ieee754_pow+0x220>)
 801b044:	428e      	cmp	r6, r1
 801b046:	d1ee      	bne.n	801b026 <__ieee754_pow+0xc6>
 801b048:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801b04c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801b050:	ea53 0308 	orrs.w	r3, r3, r8
 801b054:	f000 8466 	beq.w	801b924 <__ieee754_pow+0x9c4>
 801b058:	4b4d      	ldr	r3, [pc, #308]	; (801b190 <__ieee754_pow+0x230>)
 801b05a:	429c      	cmp	r4, r3
 801b05c:	dd0d      	ble.n	801b07a <__ieee754_pow+0x11a>
 801b05e:	2f00      	cmp	r7, #0
 801b060:	f280 8464 	bge.w	801b92c <__ieee754_pow+0x9cc>
 801b064:	2000      	movs	r0, #0
 801b066:	2100      	movs	r1, #0
 801b068:	ec41 0b10 	vmov	d0, r0, r1
 801b06c:	b00d      	add	sp, #52	; 0x34
 801b06e:	ecbd 8b06 	vpop	{d8-d10}
 801b072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b076:	2102      	movs	r1, #2
 801b078:	e7e0      	b.n	801b03c <__ieee754_pow+0xdc>
 801b07a:	2f00      	cmp	r7, #0
 801b07c:	daf2      	bge.n	801b064 <__ieee754_pow+0x104>
 801b07e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 801b082:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801b086:	e7ef      	b.n	801b068 <__ieee754_pow+0x108>
 801b088:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 801b08c:	d104      	bne.n	801b098 <__ieee754_pow+0x138>
 801b08e:	4610      	mov	r0, r2
 801b090:	4619      	mov	r1, r3
 801b092:	f7e5 fab1 	bl	80005f8 <__aeabi_dmul>
 801b096:	e7e7      	b.n	801b068 <__ieee754_pow+0x108>
 801b098:	493e      	ldr	r1, [pc, #248]	; (801b194 <__ieee754_pow+0x234>)
 801b09a:	428f      	cmp	r7, r1
 801b09c:	d10d      	bne.n	801b0ba <__ieee754_pow+0x15a>
 801b09e:	f1b9 0f00 	cmp.w	r9, #0
 801b0a2:	db0a      	blt.n	801b0ba <__ieee754_pow+0x15a>
 801b0a4:	ec43 2b10 	vmov	d0, r2, r3
 801b0a8:	b00d      	add	sp, #52	; 0x34
 801b0aa:	ecbd 8b06 	vpop	{d8-d10}
 801b0ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0b2:	f000 bc77 	b.w	801b9a4 <__ieee754_sqrt>
 801b0b6:	2100      	movs	r1, #0
 801b0b8:	9100      	str	r1, [sp, #0]
 801b0ba:	ec43 2b10 	vmov	d0, r2, r3
 801b0be:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801b0c2:	f000 fd23 	bl	801bb0c <fabs>
 801b0c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801b0ca:	ec51 0b10 	vmov	r0, r1, d0
 801b0ce:	f1b8 0f00 	cmp.w	r8, #0
 801b0d2:	d12a      	bne.n	801b12a <__ieee754_pow+0x1ca>
 801b0d4:	b12c      	cbz	r4, 801b0e2 <__ieee754_pow+0x182>
 801b0d6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 801b18c <__ieee754_pow+0x22c>
 801b0da:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 801b0de:	45e6      	cmp	lr, ip
 801b0e0:	d123      	bne.n	801b12a <__ieee754_pow+0x1ca>
 801b0e2:	2f00      	cmp	r7, #0
 801b0e4:	da05      	bge.n	801b0f2 <__ieee754_pow+0x192>
 801b0e6:	4602      	mov	r2, r0
 801b0e8:	460b      	mov	r3, r1
 801b0ea:	2000      	movs	r0, #0
 801b0ec:	4927      	ldr	r1, [pc, #156]	; (801b18c <__ieee754_pow+0x22c>)
 801b0ee:	f7e5 fbad 	bl	800084c <__aeabi_ddiv>
 801b0f2:	f1b9 0f00 	cmp.w	r9, #0
 801b0f6:	dab7      	bge.n	801b068 <__ieee754_pow+0x108>
 801b0f8:	9b00      	ldr	r3, [sp, #0]
 801b0fa:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801b0fe:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801b102:	4323      	orrs	r3, r4
 801b104:	d108      	bne.n	801b118 <__ieee754_pow+0x1b8>
 801b106:	4602      	mov	r2, r0
 801b108:	460b      	mov	r3, r1
 801b10a:	4610      	mov	r0, r2
 801b10c:	4619      	mov	r1, r3
 801b10e:	f7e5 f8bb 	bl	8000288 <__aeabi_dsub>
 801b112:	4602      	mov	r2, r0
 801b114:	460b      	mov	r3, r1
 801b116:	e78d      	b.n	801b034 <__ieee754_pow+0xd4>
 801b118:	9b00      	ldr	r3, [sp, #0]
 801b11a:	2b01      	cmp	r3, #1
 801b11c:	d1a4      	bne.n	801b068 <__ieee754_pow+0x108>
 801b11e:	4602      	mov	r2, r0
 801b120:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b124:	4610      	mov	r0, r2
 801b126:	4619      	mov	r1, r3
 801b128:	e79e      	b.n	801b068 <__ieee754_pow+0x108>
 801b12a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 801b12e:	f10c 35ff 	add.w	r5, ip, #4294967295
 801b132:	950a      	str	r5, [sp, #40]	; 0x28
 801b134:	9d00      	ldr	r5, [sp, #0]
 801b136:	46ac      	mov	ip, r5
 801b138:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801b13a:	ea5c 0505 	orrs.w	r5, ip, r5
 801b13e:	d0e4      	beq.n	801b10a <__ieee754_pow+0x1aa>
 801b140:	4b15      	ldr	r3, [pc, #84]	; (801b198 <__ieee754_pow+0x238>)
 801b142:	429e      	cmp	r6, r3
 801b144:	f340 80fc 	ble.w	801b340 <__ieee754_pow+0x3e0>
 801b148:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801b14c:	429e      	cmp	r6, r3
 801b14e:	4b10      	ldr	r3, [pc, #64]	; (801b190 <__ieee754_pow+0x230>)
 801b150:	dd07      	ble.n	801b162 <__ieee754_pow+0x202>
 801b152:	429c      	cmp	r4, r3
 801b154:	dc0a      	bgt.n	801b16c <__ieee754_pow+0x20c>
 801b156:	2f00      	cmp	r7, #0
 801b158:	da84      	bge.n	801b064 <__ieee754_pow+0x104>
 801b15a:	a307      	add	r3, pc, #28	; (adr r3, 801b178 <__ieee754_pow+0x218>)
 801b15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b160:	e795      	b.n	801b08e <__ieee754_pow+0x12e>
 801b162:	429c      	cmp	r4, r3
 801b164:	dbf7      	blt.n	801b156 <__ieee754_pow+0x1f6>
 801b166:	4b09      	ldr	r3, [pc, #36]	; (801b18c <__ieee754_pow+0x22c>)
 801b168:	429c      	cmp	r4, r3
 801b16a:	dd17      	ble.n	801b19c <__ieee754_pow+0x23c>
 801b16c:	2f00      	cmp	r7, #0
 801b16e:	dcf4      	bgt.n	801b15a <__ieee754_pow+0x1fa>
 801b170:	e778      	b.n	801b064 <__ieee754_pow+0x104>
 801b172:	bf00      	nop
 801b174:	f3af 8000 	nop.w
 801b178:	8800759c 	.word	0x8800759c
 801b17c:	7e37e43c 	.word	0x7e37e43c
 801b180:	7ff00000 	.word	0x7ff00000
 801b184:	0801c3f9 	.word	0x0801c3f9
 801b188:	433fffff 	.word	0x433fffff
 801b18c:	3ff00000 	.word	0x3ff00000
 801b190:	3fefffff 	.word	0x3fefffff
 801b194:	3fe00000 	.word	0x3fe00000
 801b198:	41e00000 	.word	0x41e00000
 801b19c:	4b64      	ldr	r3, [pc, #400]	; (801b330 <__ieee754_pow+0x3d0>)
 801b19e:	2200      	movs	r2, #0
 801b1a0:	f7e5 f872 	bl	8000288 <__aeabi_dsub>
 801b1a4:	a356      	add	r3, pc, #344	; (adr r3, 801b300 <__ieee754_pow+0x3a0>)
 801b1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1aa:	4604      	mov	r4, r0
 801b1ac:	460d      	mov	r5, r1
 801b1ae:	f7e5 fa23 	bl	80005f8 <__aeabi_dmul>
 801b1b2:	a355      	add	r3, pc, #340	; (adr r3, 801b308 <__ieee754_pow+0x3a8>)
 801b1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1b8:	4606      	mov	r6, r0
 801b1ba:	460f      	mov	r7, r1
 801b1bc:	4620      	mov	r0, r4
 801b1be:	4629      	mov	r1, r5
 801b1c0:	f7e5 fa1a 	bl	80005f8 <__aeabi_dmul>
 801b1c4:	4b5b      	ldr	r3, [pc, #364]	; (801b334 <__ieee754_pow+0x3d4>)
 801b1c6:	4682      	mov	sl, r0
 801b1c8:	468b      	mov	fp, r1
 801b1ca:	2200      	movs	r2, #0
 801b1cc:	4620      	mov	r0, r4
 801b1ce:	4629      	mov	r1, r5
 801b1d0:	f7e5 fa12 	bl	80005f8 <__aeabi_dmul>
 801b1d4:	4602      	mov	r2, r0
 801b1d6:	460b      	mov	r3, r1
 801b1d8:	a14d      	add	r1, pc, #308	; (adr r1, 801b310 <__ieee754_pow+0x3b0>)
 801b1da:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b1de:	f7e5 f853 	bl	8000288 <__aeabi_dsub>
 801b1e2:	4622      	mov	r2, r4
 801b1e4:	462b      	mov	r3, r5
 801b1e6:	f7e5 fa07 	bl	80005f8 <__aeabi_dmul>
 801b1ea:	4602      	mov	r2, r0
 801b1ec:	460b      	mov	r3, r1
 801b1ee:	2000      	movs	r0, #0
 801b1f0:	4951      	ldr	r1, [pc, #324]	; (801b338 <__ieee754_pow+0x3d8>)
 801b1f2:	f7e5 f849 	bl	8000288 <__aeabi_dsub>
 801b1f6:	4622      	mov	r2, r4
 801b1f8:	4680      	mov	r8, r0
 801b1fa:	4689      	mov	r9, r1
 801b1fc:	462b      	mov	r3, r5
 801b1fe:	4620      	mov	r0, r4
 801b200:	4629      	mov	r1, r5
 801b202:	f7e5 f9f9 	bl	80005f8 <__aeabi_dmul>
 801b206:	4602      	mov	r2, r0
 801b208:	460b      	mov	r3, r1
 801b20a:	4640      	mov	r0, r8
 801b20c:	4649      	mov	r1, r9
 801b20e:	f7e5 f9f3 	bl	80005f8 <__aeabi_dmul>
 801b212:	a341      	add	r3, pc, #260	; (adr r3, 801b318 <__ieee754_pow+0x3b8>)
 801b214:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b218:	f7e5 f9ee 	bl	80005f8 <__aeabi_dmul>
 801b21c:	4602      	mov	r2, r0
 801b21e:	460b      	mov	r3, r1
 801b220:	4650      	mov	r0, sl
 801b222:	4659      	mov	r1, fp
 801b224:	f7e5 f830 	bl	8000288 <__aeabi_dsub>
 801b228:	4602      	mov	r2, r0
 801b22a:	460b      	mov	r3, r1
 801b22c:	4680      	mov	r8, r0
 801b22e:	4689      	mov	r9, r1
 801b230:	4630      	mov	r0, r6
 801b232:	4639      	mov	r1, r7
 801b234:	f7e5 f82a 	bl	800028c <__adddf3>
 801b238:	2400      	movs	r4, #0
 801b23a:	4632      	mov	r2, r6
 801b23c:	463b      	mov	r3, r7
 801b23e:	4620      	mov	r0, r4
 801b240:	460d      	mov	r5, r1
 801b242:	f7e5 f821 	bl	8000288 <__aeabi_dsub>
 801b246:	4602      	mov	r2, r0
 801b248:	460b      	mov	r3, r1
 801b24a:	4640      	mov	r0, r8
 801b24c:	4649      	mov	r1, r9
 801b24e:	f7e5 f81b 	bl	8000288 <__aeabi_dsub>
 801b252:	9b00      	ldr	r3, [sp, #0]
 801b254:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801b256:	3b01      	subs	r3, #1
 801b258:	4313      	orrs	r3, r2
 801b25a:	4682      	mov	sl, r0
 801b25c:	468b      	mov	fp, r1
 801b25e:	f040 81f1 	bne.w	801b644 <__ieee754_pow+0x6e4>
 801b262:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 801b320 <__ieee754_pow+0x3c0>
 801b266:	eeb0 8a47 	vmov.f32	s16, s14
 801b26a:	eef0 8a67 	vmov.f32	s17, s15
 801b26e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801b272:	2600      	movs	r6, #0
 801b274:	4632      	mov	r2, r6
 801b276:	463b      	mov	r3, r7
 801b278:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b27c:	f7e5 f804 	bl	8000288 <__aeabi_dsub>
 801b280:	4622      	mov	r2, r4
 801b282:	462b      	mov	r3, r5
 801b284:	f7e5 f9b8 	bl	80005f8 <__aeabi_dmul>
 801b288:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801b28c:	4680      	mov	r8, r0
 801b28e:	4689      	mov	r9, r1
 801b290:	4650      	mov	r0, sl
 801b292:	4659      	mov	r1, fp
 801b294:	f7e5 f9b0 	bl	80005f8 <__aeabi_dmul>
 801b298:	4602      	mov	r2, r0
 801b29a:	460b      	mov	r3, r1
 801b29c:	4640      	mov	r0, r8
 801b29e:	4649      	mov	r1, r9
 801b2a0:	f7e4 fff4 	bl	800028c <__adddf3>
 801b2a4:	4632      	mov	r2, r6
 801b2a6:	463b      	mov	r3, r7
 801b2a8:	4680      	mov	r8, r0
 801b2aa:	4689      	mov	r9, r1
 801b2ac:	4620      	mov	r0, r4
 801b2ae:	4629      	mov	r1, r5
 801b2b0:	f7e5 f9a2 	bl	80005f8 <__aeabi_dmul>
 801b2b4:	460b      	mov	r3, r1
 801b2b6:	4604      	mov	r4, r0
 801b2b8:	460d      	mov	r5, r1
 801b2ba:	4602      	mov	r2, r0
 801b2bc:	4649      	mov	r1, r9
 801b2be:	4640      	mov	r0, r8
 801b2c0:	f7e4 ffe4 	bl	800028c <__adddf3>
 801b2c4:	4b1d      	ldr	r3, [pc, #116]	; (801b33c <__ieee754_pow+0x3dc>)
 801b2c6:	4299      	cmp	r1, r3
 801b2c8:	ec45 4b19 	vmov	d9, r4, r5
 801b2cc:	4606      	mov	r6, r0
 801b2ce:	460f      	mov	r7, r1
 801b2d0:	468b      	mov	fp, r1
 801b2d2:	f340 82fe 	ble.w	801b8d2 <__ieee754_pow+0x972>
 801b2d6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801b2da:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801b2de:	4303      	orrs	r3, r0
 801b2e0:	f000 81f0 	beq.w	801b6c4 <__ieee754_pow+0x764>
 801b2e4:	a310      	add	r3, pc, #64	; (adr r3, 801b328 <__ieee754_pow+0x3c8>)
 801b2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2ea:	ec51 0b18 	vmov	r0, r1, d8
 801b2ee:	f7e5 f983 	bl	80005f8 <__aeabi_dmul>
 801b2f2:	a30d      	add	r3, pc, #52	; (adr r3, 801b328 <__ieee754_pow+0x3c8>)
 801b2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b2f8:	e6cb      	b.n	801b092 <__ieee754_pow+0x132>
 801b2fa:	bf00      	nop
 801b2fc:	f3af 8000 	nop.w
 801b300:	60000000 	.word	0x60000000
 801b304:	3ff71547 	.word	0x3ff71547
 801b308:	f85ddf44 	.word	0xf85ddf44
 801b30c:	3e54ae0b 	.word	0x3e54ae0b
 801b310:	55555555 	.word	0x55555555
 801b314:	3fd55555 	.word	0x3fd55555
 801b318:	652b82fe 	.word	0x652b82fe
 801b31c:	3ff71547 	.word	0x3ff71547
 801b320:	00000000 	.word	0x00000000
 801b324:	bff00000 	.word	0xbff00000
 801b328:	8800759c 	.word	0x8800759c
 801b32c:	7e37e43c 	.word	0x7e37e43c
 801b330:	3ff00000 	.word	0x3ff00000
 801b334:	3fd00000 	.word	0x3fd00000
 801b338:	3fe00000 	.word	0x3fe00000
 801b33c:	408fffff 	.word	0x408fffff
 801b340:	4bd7      	ldr	r3, [pc, #860]	; (801b6a0 <__ieee754_pow+0x740>)
 801b342:	ea03 0309 	and.w	r3, r3, r9
 801b346:	2200      	movs	r2, #0
 801b348:	b92b      	cbnz	r3, 801b356 <__ieee754_pow+0x3f6>
 801b34a:	4bd6      	ldr	r3, [pc, #856]	; (801b6a4 <__ieee754_pow+0x744>)
 801b34c:	f7e5 f954 	bl	80005f8 <__aeabi_dmul>
 801b350:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801b354:	460c      	mov	r4, r1
 801b356:	1523      	asrs	r3, r4, #20
 801b358:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801b35c:	4413      	add	r3, r2
 801b35e:	9309      	str	r3, [sp, #36]	; 0x24
 801b360:	4bd1      	ldr	r3, [pc, #836]	; (801b6a8 <__ieee754_pow+0x748>)
 801b362:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801b366:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801b36a:	429c      	cmp	r4, r3
 801b36c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801b370:	dd08      	ble.n	801b384 <__ieee754_pow+0x424>
 801b372:	4bce      	ldr	r3, [pc, #824]	; (801b6ac <__ieee754_pow+0x74c>)
 801b374:	429c      	cmp	r4, r3
 801b376:	f340 8163 	ble.w	801b640 <__ieee754_pow+0x6e0>
 801b37a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b37c:	3301      	adds	r3, #1
 801b37e:	9309      	str	r3, [sp, #36]	; 0x24
 801b380:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801b384:	2400      	movs	r4, #0
 801b386:	00e3      	lsls	r3, r4, #3
 801b388:	930b      	str	r3, [sp, #44]	; 0x2c
 801b38a:	4bc9      	ldr	r3, [pc, #804]	; (801b6b0 <__ieee754_pow+0x750>)
 801b38c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801b390:	ed93 7b00 	vldr	d7, [r3]
 801b394:	4629      	mov	r1, r5
 801b396:	ec53 2b17 	vmov	r2, r3, d7
 801b39a:	eeb0 8a47 	vmov.f32	s16, s14
 801b39e:	eef0 8a67 	vmov.f32	s17, s15
 801b3a2:	4682      	mov	sl, r0
 801b3a4:	f7e4 ff70 	bl	8000288 <__aeabi_dsub>
 801b3a8:	4652      	mov	r2, sl
 801b3aa:	4606      	mov	r6, r0
 801b3ac:	460f      	mov	r7, r1
 801b3ae:	462b      	mov	r3, r5
 801b3b0:	ec51 0b18 	vmov	r0, r1, d8
 801b3b4:	f7e4 ff6a 	bl	800028c <__adddf3>
 801b3b8:	4602      	mov	r2, r0
 801b3ba:	460b      	mov	r3, r1
 801b3bc:	2000      	movs	r0, #0
 801b3be:	49bd      	ldr	r1, [pc, #756]	; (801b6b4 <__ieee754_pow+0x754>)
 801b3c0:	f7e5 fa44 	bl	800084c <__aeabi_ddiv>
 801b3c4:	ec41 0b19 	vmov	d9, r0, r1
 801b3c8:	4602      	mov	r2, r0
 801b3ca:	460b      	mov	r3, r1
 801b3cc:	4630      	mov	r0, r6
 801b3ce:	4639      	mov	r1, r7
 801b3d0:	f7e5 f912 	bl	80005f8 <__aeabi_dmul>
 801b3d4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801b3d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801b3dc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801b3e0:	2300      	movs	r3, #0
 801b3e2:	9304      	str	r3, [sp, #16]
 801b3e4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801b3e8:	46ab      	mov	fp, r5
 801b3ea:	106d      	asrs	r5, r5, #1
 801b3ec:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801b3f0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801b3f4:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801b3f8:	2200      	movs	r2, #0
 801b3fa:	4640      	mov	r0, r8
 801b3fc:	4649      	mov	r1, r9
 801b3fe:	4614      	mov	r4, r2
 801b400:	461d      	mov	r5, r3
 801b402:	f7e5 f8f9 	bl	80005f8 <__aeabi_dmul>
 801b406:	4602      	mov	r2, r0
 801b408:	460b      	mov	r3, r1
 801b40a:	4630      	mov	r0, r6
 801b40c:	4639      	mov	r1, r7
 801b40e:	f7e4 ff3b 	bl	8000288 <__aeabi_dsub>
 801b412:	ec53 2b18 	vmov	r2, r3, d8
 801b416:	4606      	mov	r6, r0
 801b418:	460f      	mov	r7, r1
 801b41a:	4620      	mov	r0, r4
 801b41c:	4629      	mov	r1, r5
 801b41e:	f7e4 ff33 	bl	8000288 <__aeabi_dsub>
 801b422:	4602      	mov	r2, r0
 801b424:	460b      	mov	r3, r1
 801b426:	4650      	mov	r0, sl
 801b428:	4659      	mov	r1, fp
 801b42a:	f7e4 ff2d 	bl	8000288 <__aeabi_dsub>
 801b42e:	4642      	mov	r2, r8
 801b430:	464b      	mov	r3, r9
 801b432:	f7e5 f8e1 	bl	80005f8 <__aeabi_dmul>
 801b436:	4602      	mov	r2, r0
 801b438:	460b      	mov	r3, r1
 801b43a:	4630      	mov	r0, r6
 801b43c:	4639      	mov	r1, r7
 801b43e:	f7e4 ff23 	bl	8000288 <__aeabi_dsub>
 801b442:	ec53 2b19 	vmov	r2, r3, d9
 801b446:	f7e5 f8d7 	bl	80005f8 <__aeabi_dmul>
 801b44a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801b44e:	ec41 0b18 	vmov	d8, r0, r1
 801b452:	4610      	mov	r0, r2
 801b454:	4619      	mov	r1, r3
 801b456:	f7e5 f8cf 	bl	80005f8 <__aeabi_dmul>
 801b45a:	a37d      	add	r3, pc, #500	; (adr r3, 801b650 <__ieee754_pow+0x6f0>)
 801b45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b460:	4604      	mov	r4, r0
 801b462:	460d      	mov	r5, r1
 801b464:	f7e5 f8c8 	bl	80005f8 <__aeabi_dmul>
 801b468:	a37b      	add	r3, pc, #492	; (adr r3, 801b658 <__ieee754_pow+0x6f8>)
 801b46a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b46e:	f7e4 ff0d 	bl	800028c <__adddf3>
 801b472:	4622      	mov	r2, r4
 801b474:	462b      	mov	r3, r5
 801b476:	f7e5 f8bf 	bl	80005f8 <__aeabi_dmul>
 801b47a:	a379      	add	r3, pc, #484	; (adr r3, 801b660 <__ieee754_pow+0x700>)
 801b47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b480:	f7e4 ff04 	bl	800028c <__adddf3>
 801b484:	4622      	mov	r2, r4
 801b486:	462b      	mov	r3, r5
 801b488:	f7e5 f8b6 	bl	80005f8 <__aeabi_dmul>
 801b48c:	a376      	add	r3, pc, #472	; (adr r3, 801b668 <__ieee754_pow+0x708>)
 801b48e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b492:	f7e4 fefb 	bl	800028c <__adddf3>
 801b496:	4622      	mov	r2, r4
 801b498:	462b      	mov	r3, r5
 801b49a:	f7e5 f8ad 	bl	80005f8 <__aeabi_dmul>
 801b49e:	a374      	add	r3, pc, #464	; (adr r3, 801b670 <__ieee754_pow+0x710>)
 801b4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4a4:	f7e4 fef2 	bl	800028c <__adddf3>
 801b4a8:	4622      	mov	r2, r4
 801b4aa:	462b      	mov	r3, r5
 801b4ac:	f7e5 f8a4 	bl	80005f8 <__aeabi_dmul>
 801b4b0:	a371      	add	r3, pc, #452	; (adr r3, 801b678 <__ieee754_pow+0x718>)
 801b4b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4b6:	f7e4 fee9 	bl	800028c <__adddf3>
 801b4ba:	4622      	mov	r2, r4
 801b4bc:	4606      	mov	r6, r0
 801b4be:	460f      	mov	r7, r1
 801b4c0:	462b      	mov	r3, r5
 801b4c2:	4620      	mov	r0, r4
 801b4c4:	4629      	mov	r1, r5
 801b4c6:	f7e5 f897 	bl	80005f8 <__aeabi_dmul>
 801b4ca:	4602      	mov	r2, r0
 801b4cc:	460b      	mov	r3, r1
 801b4ce:	4630      	mov	r0, r6
 801b4d0:	4639      	mov	r1, r7
 801b4d2:	f7e5 f891 	bl	80005f8 <__aeabi_dmul>
 801b4d6:	4642      	mov	r2, r8
 801b4d8:	4604      	mov	r4, r0
 801b4da:	460d      	mov	r5, r1
 801b4dc:	464b      	mov	r3, r9
 801b4de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b4e2:	f7e4 fed3 	bl	800028c <__adddf3>
 801b4e6:	ec53 2b18 	vmov	r2, r3, d8
 801b4ea:	f7e5 f885 	bl	80005f8 <__aeabi_dmul>
 801b4ee:	4622      	mov	r2, r4
 801b4f0:	462b      	mov	r3, r5
 801b4f2:	f7e4 fecb 	bl	800028c <__adddf3>
 801b4f6:	4642      	mov	r2, r8
 801b4f8:	4682      	mov	sl, r0
 801b4fa:	468b      	mov	fp, r1
 801b4fc:	464b      	mov	r3, r9
 801b4fe:	4640      	mov	r0, r8
 801b500:	4649      	mov	r1, r9
 801b502:	f7e5 f879 	bl	80005f8 <__aeabi_dmul>
 801b506:	4b6c      	ldr	r3, [pc, #432]	; (801b6b8 <__ieee754_pow+0x758>)
 801b508:	2200      	movs	r2, #0
 801b50a:	4606      	mov	r6, r0
 801b50c:	460f      	mov	r7, r1
 801b50e:	f7e4 febd 	bl	800028c <__adddf3>
 801b512:	4652      	mov	r2, sl
 801b514:	465b      	mov	r3, fp
 801b516:	f7e4 feb9 	bl	800028c <__adddf3>
 801b51a:	9c04      	ldr	r4, [sp, #16]
 801b51c:	460d      	mov	r5, r1
 801b51e:	4622      	mov	r2, r4
 801b520:	460b      	mov	r3, r1
 801b522:	4640      	mov	r0, r8
 801b524:	4649      	mov	r1, r9
 801b526:	f7e5 f867 	bl	80005f8 <__aeabi_dmul>
 801b52a:	4b63      	ldr	r3, [pc, #396]	; (801b6b8 <__ieee754_pow+0x758>)
 801b52c:	4680      	mov	r8, r0
 801b52e:	4689      	mov	r9, r1
 801b530:	2200      	movs	r2, #0
 801b532:	4620      	mov	r0, r4
 801b534:	4629      	mov	r1, r5
 801b536:	f7e4 fea7 	bl	8000288 <__aeabi_dsub>
 801b53a:	4632      	mov	r2, r6
 801b53c:	463b      	mov	r3, r7
 801b53e:	f7e4 fea3 	bl	8000288 <__aeabi_dsub>
 801b542:	4602      	mov	r2, r0
 801b544:	460b      	mov	r3, r1
 801b546:	4650      	mov	r0, sl
 801b548:	4659      	mov	r1, fp
 801b54a:	f7e4 fe9d 	bl	8000288 <__aeabi_dsub>
 801b54e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801b552:	f7e5 f851 	bl	80005f8 <__aeabi_dmul>
 801b556:	4622      	mov	r2, r4
 801b558:	4606      	mov	r6, r0
 801b55a:	460f      	mov	r7, r1
 801b55c:	462b      	mov	r3, r5
 801b55e:	ec51 0b18 	vmov	r0, r1, d8
 801b562:	f7e5 f849 	bl	80005f8 <__aeabi_dmul>
 801b566:	4602      	mov	r2, r0
 801b568:	460b      	mov	r3, r1
 801b56a:	4630      	mov	r0, r6
 801b56c:	4639      	mov	r1, r7
 801b56e:	f7e4 fe8d 	bl	800028c <__adddf3>
 801b572:	4606      	mov	r6, r0
 801b574:	460f      	mov	r7, r1
 801b576:	4602      	mov	r2, r0
 801b578:	460b      	mov	r3, r1
 801b57a:	4640      	mov	r0, r8
 801b57c:	4649      	mov	r1, r9
 801b57e:	f7e4 fe85 	bl	800028c <__adddf3>
 801b582:	9c04      	ldr	r4, [sp, #16]
 801b584:	a33e      	add	r3, pc, #248	; (adr r3, 801b680 <__ieee754_pow+0x720>)
 801b586:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b58a:	4620      	mov	r0, r4
 801b58c:	460d      	mov	r5, r1
 801b58e:	f7e5 f833 	bl	80005f8 <__aeabi_dmul>
 801b592:	4642      	mov	r2, r8
 801b594:	ec41 0b18 	vmov	d8, r0, r1
 801b598:	464b      	mov	r3, r9
 801b59a:	4620      	mov	r0, r4
 801b59c:	4629      	mov	r1, r5
 801b59e:	f7e4 fe73 	bl	8000288 <__aeabi_dsub>
 801b5a2:	4602      	mov	r2, r0
 801b5a4:	460b      	mov	r3, r1
 801b5a6:	4630      	mov	r0, r6
 801b5a8:	4639      	mov	r1, r7
 801b5aa:	f7e4 fe6d 	bl	8000288 <__aeabi_dsub>
 801b5ae:	a336      	add	r3, pc, #216	; (adr r3, 801b688 <__ieee754_pow+0x728>)
 801b5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5b4:	f7e5 f820 	bl	80005f8 <__aeabi_dmul>
 801b5b8:	a335      	add	r3, pc, #212	; (adr r3, 801b690 <__ieee754_pow+0x730>)
 801b5ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5be:	4606      	mov	r6, r0
 801b5c0:	460f      	mov	r7, r1
 801b5c2:	4620      	mov	r0, r4
 801b5c4:	4629      	mov	r1, r5
 801b5c6:	f7e5 f817 	bl	80005f8 <__aeabi_dmul>
 801b5ca:	4602      	mov	r2, r0
 801b5cc:	460b      	mov	r3, r1
 801b5ce:	4630      	mov	r0, r6
 801b5d0:	4639      	mov	r1, r7
 801b5d2:	f7e4 fe5b 	bl	800028c <__adddf3>
 801b5d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b5d8:	4b38      	ldr	r3, [pc, #224]	; (801b6bc <__ieee754_pow+0x75c>)
 801b5da:	4413      	add	r3, r2
 801b5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b5e0:	f7e4 fe54 	bl	800028c <__adddf3>
 801b5e4:	4682      	mov	sl, r0
 801b5e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b5e8:	468b      	mov	fp, r1
 801b5ea:	f7e4 ff9b 	bl	8000524 <__aeabi_i2d>
 801b5ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b5f0:	4b33      	ldr	r3, [pc, #204]	; (801b6c0 <__ieee754_pow+0x760>)
 801b5f2:	4413      	add	r3, r2
 801b5f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 801b5f8:	4606      	mov	r6, r0
 801b5fa:	460f      	mov	r7, r1
 801b5fc:	4652      	mov	r2, sl
 801b5fe:	465b      	mov	r3, fp
 801b600:	ec51 0b18 	vmov	r0, r1, d8
 801b604:	f7e4 fe42 	bl	800028c <__adddf3>
 801b608:	4642      	mov	r2, r8
 801b60a:	464b      	mov	r3, r9
 801b60c:	f7e4 fe3e 	bl	800028c <__adddf3>
 801b610:	4632      	mov	r2, r6
 801b612:	463b      	mov	r3, r7
 801b614:	f7e4 fe3a 	bl	800028c <__adddf3>
 801b618:	9c04      	ldr	r4, [sp, #16]
 801b61a:	4632      	mov	r2, r6
 801b61c:	463b      	mov	r3, r7
 801b61e:	4620      	mov	r0, r4
 801b620:	460d      	mov	r5, r1
 801b622:	f7e4 fe31 	bl	8000288 <__aeabi_dsub>
 801b626:	4642      	mov	r2, r8
 801b628:	464b      	mov	r3, r9
 801b62a:	f7e4 fe2d 	bl	8000288 <__aeabi_dsub>
 801b62e:	ec53 2b18 	vmov	r2, r3, d8
 801b632:	f7e4 fe29 	bl	8000288 <__aeabi_dsub>
 801b636:	4602      	mov	r2, r0
 801b638:	460b      	mov	r3, r1
 801b63a:	4650      	mov	r0, sl
 801b63c:	4659      	mov	r1, fp
 801b63e:	e606      	b.n	801b24e <__ieee754_pow+0x2ee>
 801b640:	2401      	movs	r4, #1
 801b642:	e6a0      	b.n	801b386 <__ieee754_pow+0x426>
 801b644:	ed9f 7b14 	vldr	d7, [pc, #80]	; 801b698 <__ieee754_pow+0x738>
 801b648:	e60d      	b.n	801b266 <__ieee754_pow+0x306>
 801b64a:	bf00      	nop
 801b64c:	f3af 8000 	nop.w
 801b650:	4a454eef 	.word	0x4a454eef
 801b654:	3fca7e28 	.word	0x3fca7e28
 801b658:	93c9db65 	.word	0x93c9db65
 801b65c:	3fcd864a 	.word	0x3fcd864a
 801b660:	a91d4101 	.word	0xa91d4101
 801b664:	3fd17460 	.word	0x3fd17460
 801b668:	518f264d 	.word	0x518f264d
 801b66c:	3fd55555 	.word	0x3fd55555
 801b670:	db6fabff 	.word	0xdb6fabff
 801b674:	3fdb6db6 	.word	0x3fdb6db6
 801b678:	33333303 	.word	0x33333303
 801b67c:	3fe33333 	.word	0x3fe33333
 801b680:	e0000000 	.word	0xe0000000
 801b684:	3feec709 	.word	0x3feec709
 801b688:	dc3a03fd 	.word	0xdc3a03fd
 801b68c:	3feec709 	.word	0x3feec709
 801b690:	145b01f5 	.word	0x145b01f5
 801b694:	be3e2fe0 	.word	0xbe3e2fe0
 801b698:	00000000 	.word	0x00000000
 801b69c:	3ff00000 	.word	0x3ff00000
 801b6a0:	7ff00000 	.word	0x7ff00000
 801b6a4:	43400000 	.word	0x43400000
 801b6a8:	0003988e 	.word	0x0003988e
 801b6ac:	000bb679 	.word	0x000bb679
 801b6b0:	0801c428 	.word	0x0801c428
 801b6b4:	3ff00000 	.word	0x3ff00000
 801b6b8:	40080000 	.word	0x40080000
 801b6bc:	0801c448 	.word	0x0801c448
 801b6c0:	0801c438 	.word	0x0801c438
 801b6c4:	a3b5      	add	r3, pc, #724	; (adr r3, 801b99c <__ieee754_pow+0xa3c>)
 801b6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6ca:	4640      	mov	r0, r8
 801b6cc:	4649      	mov	r1, r9
 801b6ce:	f7e4 fddd 	bl	800028c <__adddf3>
 801b6d2:	4622      	mov	r2, r4
 801b6d4:	ec41 0b1a 	vmov	d10, r0, r1
 801b6d8:	462b      	mov	r3, r5
 801b6da:	4630      	mov	r0, r6
 801b6dc:	4639      	mov	r1, r7
 801b6de:	f7e4 fdd3 	bl	8000288 <__aeabi_dsub>
 801b6e2:	4602      	mov	r2, r0
 801b6e4:	460b      	mov	r3, r1
 801b6e6:	ec51 0b1a 	vmov	r0, r1, d10
 801b6ea:	f7e5 fa15 	bl	8000b18 <__aeabi_dcmpgt>
 801b6ee:	2800      	cmp	r0, #0
 801b6f0:	f47f adf8 	bne.w	801b2e4 <__ieee754_pow+0x384>
 801b6f4:	4aa4      	ldr	r2, [pc, #656]	; (801b988 <__ieee754_pow+0xa28>)
 801b6f6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801b6fa:	4293      	cmp	r3, r2
 801b6fc:	f340 810b 	ble.w	801b916 <__ieee754_pow+0x9b6>
 801b700:	151b      	asrs	r3, r3, #20
 801b702:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801b706:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801b70a:	fa4a f303 	asr.w	r3, sl, r3
 801b70e:	445b      	add	r3, fp
 801b710:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801b714:	4e9d      	ldr	r6, [pc, #628]	; (801b98c <__ieee754_pow+0xa2c>)
 801b716:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801b71a:	4116      	asrs	r6, r2
 801b71c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801b720:	2000      	movs	r0, #0
 801b722:	ea23 0106 	bic.w	r1, r3, r6
 801b726:	f1c2 0214 	rsb	r2, r2, #20
 801b72a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801b72e:	fa4a fa02 	asr.w	sl, sl, r2
 801b732:	f1bb 0f00 	cmp.w	fp, #0
 801b736:	4602      	mov	r2, r0
 801b738:	460b      	mov	r3, r1
 801b73a:	4620      	mov	r0, r4
 801b73c:	4629      	mov	r1, r5
 801b73e:	bfb8      	it	lt
 801b740:	f1ca 0a00 	rsblt	sl, sl, #0
 801b744:	f7e4 fda0 	bl	8000288 <__aeabi_dsub>
 801b748:	ec41 0b19 	vmov	d9, r0, r1
 801b74c:	4642      	mov	r2, r8
 801b74e:	464b      	mov	r3, r9
 801b750:	ec51 0b19 	vmov	r0, r1, d9
 801b754:	f7e4 fd9a 	bl	800028c <__adddf3>
 801b758:	2400      	movs	r4, #0
 801b75a:	a379      	add	r3, pc, #484	; (adr r3, 801b940 <__ieee754_pow+0x9e0>)
 801b75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b760:	4620      	mov	r0, r4
 801b762:	460d      	mov	r5, r1
 801b764:	f7e4 ff48 	bl	80005f8 <__aeabi_dmul>
 801b768:	ec53 2b19 	vmov	r2, r3, d9
 801b76c:	4606      	mov	r6, r0
 801b76e:	460f      	mov	r7, r1
 801b770:	4620      	mov	r0, r4
 801b772:	4629      	mov	r1, r5
 801b774:	f7e4 fd88 	bl	8000288 <__aeabi_dsub>
 801b778:	4602      	mov	r2, r0
 801b77a:	460b      	mov	r3, r1
 801b77c:	4640      	mov	r0, r8
 801b77e:	4649      	mov	r1, r9
 801b780:	f7e4 fd82 	bl	8000288 <__aeabi_dsub>
 801b784:	a370      	add	r3, pc, #448	; (adr r3, 801b948 <__ieee754_pow+0x9e8>)
 801b786:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b78a:	f7e4 ff35 	bl	80005f8 <__aeabi_dmul>
 801b78e:	a370      	add	r3, pc, #448	; (adr r3, 801b950 <__ieee754_pow+0x9f0>)
 801b790:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b794:	4680      	mov	r8, r0
 801b796:	4689      	mov	r9, r1
 801b798:	4620      	mov	r0, r4
 801b79a:	4629      	mov	r1, r5
 801b79c:	f7e4 ff2c 	bl	80005f8 <__aeabi_dmul>
 801b7a0:	4602      	mov	r2, r0
 801b7a2:	460b      	mov	r3, r1
 801b7a4:	4640      	mov	r0, r8
 801b7a6:	4649      	mov	r1, r9
 801b7a8:	f7e4 fd70 	bl	800028c <__adddf3>
 801b7ac:	4604      	mov	r4, r0
 801b7ae:	460d      	mov	r5, r1
 801b7b0:	4602      	mov	r2, r0
 801b7b2:	460b      	mov	r3, r1
 801b7b4:	4630      	mov	r0, r6
 801b7b6:	4639      	mov	r1, r7
 801b7b8:	f7e4 fd68 	bl	800028c <__adddf3>
 801b7bc:	4632      	mov	r2, r6
 801b7be:	463b      	mov	r3, r7
 801b7c0:	4680      	mov	r8, r0
 801b7c2:	4689      	mov	r9, r1
 801b7c4:	f7e4 fd60 	bl	8000288 <__aeabi_dsub>
 801b7c8:	4602      	mov	r2, r0
 801b7ca:	460b      	mov	r3, r1
 801b7cc:	4620      	mov	r0, r4
 801b7ce:	4629      	mov	r1, r5
 801b7d0:	f7e4 fd5a 	bl	8000288 <__aeabi_dsub>
 801b7d4:	4642      	mov	r2, r8
 801b7d6:	4606      	mov	r6, r0
 801b7d8:	460f      	mov	r7, r1
 801b7da:	464b      	mov	r3, r9
 801b7dc:	4640      	mov	r0, r8
 801b7de:	4649      	mov	r1, r9
 801b7e0:	f7e4 ff0a 	bl	80005f8 <__aeabi_dmul>
 801b7e4:	a35c      	add	r3, pc, #368	; (adr r3, 801b958 <__ieee754_pow+0x9f8>)
 801b7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b7ea:	4604      	mov	r4, r0
 801b7ec:	460d      	mov	r5, r1
 801b7ee:	f7e4 ff03 	bl	80005f8 <__aeabi_dmul>
 801b7f2:	a35b      	add	r3, pc, #364	; (adr r3, 801b960 <__ieee754_pow+0xa00>)
 801b7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b7f8:	f7e4 fd46 	bl	8000288 <__aeabi_dsub>
 801b7fc:	4622      	mov	r2, r4
 801b7fe:	462b      	mov	r3, r5
 801b800:	f7e4 fefa 	bl	80005f8 <__aeabi_dmul>
 801b804:	a358      	add	r3, pc, #352	; (adr r3, 801b968 <__ieee754_pow+0xa08>)
 801b806:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b80a:	f7e4 fd3f 	bl	800028c <__adddf3>
 801b80e:	4622      	mov	r2, r4
 801b810:	462b      	mov	r3, r5
 801b812:	f7e4 fef1 	bl	80005f8 <__aeabi_dmul>
 801b816:	a356      	add	r3, pc, #344	; (adr r3, 801b970 <__ieee754_pow+0xa10>)
 801b818:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b81c:	f7e4 fd34 	bl	8000288 <__aeabi_dsub>
 801b820:	4622      	mov	r2, r4
 801b822:	462b      	mov	r3, r5
 801b824:	f7e4 fee8 	bl	80005f8 <__aeabi_dmul>
 801b828:	a353      	add	r3, pc, #332	; (adr r3, 801b978 <__ieee754_pow+0xa18>)
 801b82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b82e:	f7e4 fd2d 	bl	800028c <__adddf3>
 801b832:	4622      	mov	r2, r4
 801b834:	462b      	mov	r3, r5
 801b836:	f7e4 fedf 	bl	80005f8 <__aeabi_dmul>
 801b83a:	4602      	mov	r2, r0
 801b83c:	460b      	mov	r3, r1
 801b83e:	4640      	mov	r0, r8
 801b840:	4649      	mov	r1, r9
 801b842:	f7e4 fd21 	bl	8000288 <__aeabi_dsub>
 801b846:	4604      	mov	r4, r0
 801b848:	460d      	mov	r5, r1
 801b84a:	4602      	mov	r2, r0
 801b84c:	460b      	mov	r3, r1
 801b84e:	4640      	mov	r0, r8
 801b850:	4649      	mov	r1, r9
 801b852:	f7e4 fed1 	bl	80005f8 <__aeabi_dmul>
 801b856:	2200      	movs	r2, #0
 801b858:	ec41 0b19 	vmov	d9, r0, r1
 801b85c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b860:	4620      	mov	r0, r4
 801b862:	4629      	mov	r1, r5
 801b864:	f7e4 fd10 	bl	8000288 <__aeabi_dsub>
 801b868:	4602      	mov	r2, r0
 801b86a:	460b      	mov	r3, r1
 801b86c:	ec51 0b19 	vmov	r0, r1, d9
 801b870:	f7e4 ffec 	bl	800084c <__aeabi_ddiv>
 801b874:	4632      	mov	r2, r6
 801b876:	4604      	mov	r4, r0
 801b878:	460d      	mov	r5, r1
 801b87a:	463b      	mov	r3, r7
 801b87c:	4640      	mov	r0, r8
 801b87e:	4649      	mov	r1, r9
 801b880:	f7e4 feba 	bl	80005f8 <__aeabi_dmul>
 801b884:	4632      	mov	r2, r6
 801b886:	463b      	mov	r3, r7
 801b888:	f7e4 fd00 	bl	800028c <__adddf3>
 801b88c:	4602      	mov	r2, r0
 801b88e:	460b      	mov	r3, r1
 801b890:	4620      	mov	r0, r4
 801b892:	4629      	mov	r1, r5
 801b894:	f7e4 fcf8 	bl	8000288 <__aeabi_dsub>
 801b898:	4642      	mov	r2, r8
 801b89a:	464b      	mov	r3, r9
 801b89c:	f7e4 fcf4 	bl	8000288 <__aeabi_dsub>
 801b8a0:	460b      	mov	r3, r1
 801b8a2:	4602      	mov	r2, r0
 801b8a4:	493a      	ldr	r1, [pc, #232]	; (801b990 <__ieee754_pow+0xa30>)
 801b8a6:	2000      	movs	r0, #0
 801b8a8:	f7e4 fcee 	bl	8000288 <__aeabi_dsub>
 801b8ac:	e9cd 0100 	strd	r0, r1, [sp]
 801b8b0:	9b01      	ldr	r3, [sp, #4]
 801b8b2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801b8b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801b8ba:	da2f      	bge.n	801b91c <__ieee754_pow+0x9bc>
 801b8bc:	4650      	mov	r0, sl
 801b8be:	ed9d 0b00 	vldr	d0, [sp]
 801b8c2:	f000 f9cd 	bl	801bc60 <scalbn>
 801b8c6:	ec51 0b10 	vmov	r0, r1, d0
 801b8ca:	ec53 2b18 	vmov	r2, r3, d8
 801b8ce:	f7ff bbe0 	b.w	801b092 <__ieee754_pow+0x132>
 801b8d2:	4b30      	ldr	r3, [pc, #192]	; (801b994 <__ieee754_pow+0xa34>)
 801b8d4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801b8d8:	429e      	cmp	r6, r3
 801b8da:	f77f af0b 	ble.w	801b6f4 <__ieee754_pow+0x794>
 801b8de:	4b2e      	ldr	r3, [pc, #184]	; (801b998 <__ieee754_pow+0xa38>)
 801b8e0:	440b      	add	r3, r1
 801b8e2:	4303      	orrs	r3, r0
 801b8e4:	d00b      	beq.n	801b8fe <__ieee754_pow+0x99e>
 801b8e6:	a326      	add	r3, pc, #152	; (adr r3, 801b980 <__ieee754_pow+0xa20>)
 801b8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8ec:	ec51 0b18 	vmov	r0, r1, d8
 801b8f0:	f7e4 fe82 	bl	80005f8 <__aeabi_dmul>
 801b8f4:	a322      	add	r3, pc, #136	; (adr r3, 801b980 <__ieee754_pow+0xa20>)
 801b8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8fa:	f7ff bbca 	b.w	801b092 <__ieee754_pow+0x132>
 801b8fe:	4622      	mov	r2, r4
 801b900:	462b      	mov	r3, r5
 801b902:	f7e4 fcc1 	bl	8000288 <__aeabi_dsub>
 801b906:	4642      	mov	r2, r8
 801b908:	464b      	mov	r3, r9
 801b90a:	f7e5 f8fb 	bl	8000b04 <__aeabi_dcmpge>
 801b90e:	2800      	cmp	r0, #0
 801b910:	f43f aef0 	beq.w	801b6f4 <__ieee754_pow+0x794>
 801b914:	e7e7      	b.n	801b8e6 <__ieee754_pow+0x986>
 801b916:	f04f 0a00 	mov.w	sl, #0
 801b91a:	e717      	b.n	801b74c <__ieee754_pow+0x7ec>
 801b91c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b920:	4619      	mov	r1, r3
 801b922:	e7d2      	b.n	801b8ca <__ieee754_pow+0x96a>
 801b924:	491a      	ldr	r1, [pc, #104]	; (801b990 <__ieee754_pow+0xa30>)
 801b926:	2000      	movs	r0, #0
 801b928:	f7ff bb9e 	b.w	801b068 <__ieee754_pow+0x108>
 801b92c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b930:	f7ff bb9a 	b.w	801b068 <__ieee754_pow+0x108>
 801b934:	9000      	str	r0, [sp, #0]
 801b936:	f7ff bb76 	b.w	801b026 <__ieee754_pow+0xc6>
 801b93a:	2100      	movs	r1, #0
 801b93c:	f7ff bb60 	b.w	801b000 <__ieee754_pow+0xa0>
 801b940:	00000000 	.word	0x00000000
 801b944:	3fe62e43 	.word	0x3fe62e43
 801b948:	fefa39ef 	.word	0xfefa39ef
 801b94c:	3fe62e42 	.word	0x3fe62e42
 801b950:	0ca86c39 	.word	0x0ca86c39
 801b954:	be205c61 	.word	0xbe205c61
 801b958:	72bea4d0 	.word	0x72bea4d0
 801b95c:	3e663769 	.word	0x3e663769
 801b960:	c5d26bf1 	.word	0xc5d26bf1
 801b964:	3ebbbd41 	.word	0x3ebbbd41
 801b968:	af25de2c 	.word	0xaf25de2c
 801b96c:	3f11566a 	.word	0x3f11566a
 801b970:	16bebd93 	.word	0x16bebd93
 801b974:	3f66c16c 	.word	0x3f66c16c
 801b978:	5555553e 	.word	0x5555553e
 801b97c:	3fc55555 	.word	0x3fc55555
 801b980:	c2f8f359 	.word	0xc2f8f359
 801b984:	01a56e1f 	.word	0x01a56e1f
 801b988:	3fe00000 	.word	0x3fe00000
 801b98c:	000fffff 	.word	0x000fffff
 801b990:	3ff00000 	.word	0x3ff00000
 801b994:	4090cbff 	.word	0x4090cbff
 801b998:	3f6f3400 	.word	0x3f6f3400
 801b99c:	652b82fe 	.word	0x652b82fe
 801b9a0:	3c971547 	.word	0x3c971547

0801b9a4 <__ieee754_sqrt>:
 801b9a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b9a8:	ec55 4b10 	vmov	r4, r5, d0
 801b9ac:	4e56      	ldr	r6, [pc, #344]	; (801bb08 <__ieee754_sqrt+0x164>)
 801b9ae:	43ae      	bics	r6, r5
 801b9b0:	ee10 0a10 	vmov	r0, s0
 801b9b4:	ee10 3a10 	vmov	r3, s0
 801b9b8:	4629      	mov	r1, r5
 801b9ba:	462a      	mov	r2, r5
 801b9bc:	d110      	bne.n	801b9e0 <__ieee754_sqrt+0x3c>
 801b9be:	ee10 2a10 	vmov	r2, s0
 801b9c2:	462b      	mov	r3, r5
 801b9c4:	f7e4 fe18 	bl	80005f8 <__aeabi_dmul>
 801b9c8:	4602      	mov	r2, r0
 801b9ca:	460b      	mov	r3, r1
 801b9cc:	4620      	mov	r0, r4
 801b9ce:	4629      	mov	r1, r5
 801b9d0:	f7e4 fc5c 	bl	800028c <__adddf3>
 801b9d4:	4604      	mov	r4, r0
 801b9d6:	460d      	mov	r5, r1
 801b9d8:	ec45 4b10 	vmov	d0, r4, r5
 801b9dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b9e0:	2d00      	cmp	r5, #0
 801b9e2:	dc10      	bgt.n	801ba06 <__ieee754_sqrt+0x62>
 801b9e4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801b9e8:	4330      	orrs	r0, r6
 801b9ea:	d0f5      	beq.n	801b9d8 <__ieee754_sqrt+0x34>
 801b9ec:	b15d      	cbz	r5, 801ba06 <__ieee754_sqrt+0x62>
 801b9ee:	ee10 2a10 	vmov	r2, s0
 801b9f2:	462b      	mov	r3, r5
 801b9f4:	ee10 0a10 	vmov	r0, s0
 801b9f8:	f7e4 fc46 	bl	8000288 <__aeabi_dsub>
 801b9fc:	4602      	mov	r2, r0
 801b9fe:	460b      	mov	r3, r1
 801ba00:	f7e4 ff24 	bl	800084c <__aeabi_ddiv>
 801ba04:	e7e6      	b.n	801b9d4 <__ieee754_sqrt+0x30>
 801ba06:	1509      	asrs	r1, r1, #20
 801ba08:	d076      	beq.n	801baf8 <__ieee754_sqrt+0x154>
 801ba0a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801ba0e:	07ce      	lsls	r6, r1, #31
 801ba10:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801ba14:	bf5e      	ittt	pl
 801ba16:	0fda      	lsrpl	r2, r3, #31
 801ba18:	005b      	lslpl	r3, r3, #1
 801ba1a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801ba1e:	0fda      	lsrs	r2, r3, #31
 801ba20:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801ba24:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801ba28:	2000      	movs	r0, #0
 801ba2a:	106d      	asrs	r5, r5, #1
 801ba2c:	005b      	lsls	r3, r3, #1
 801ba2e:	f04f 0e16 	mov.w	lr, #22
 801ba32:	4684      	mov	ip, r0
 801ba34:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801ba38:	eb0c 0401 	add.w	r4, ip, r1
 801ba3c:	4294      	cmp	r4, r2
 801ba3e:	bfde      	ittt	le
 801ba40:	1b12      	suble	r2, r2, r4
 801ba42:	eb04 0c01 	addle.w	ip, r4, r1
 801ba46:	1840      	addle	r0, r0, r1
 801ba48:	0052      	lsls	r2, r2, #1
 801ba4a:	f1be 0e01 	subs.w	lr, lr, #1
 801ba4e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801ba52:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801ba56:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801ba5a:	d1ed      	bne.n	801ba38 <__ieee754_sqrt+0x94>
 801ba5c:	4671      	mov	r1, lr
 801ba5e:	2720      	movs	r7, #32
 801ba60:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801ba64:	4562      	cmp	r2, ip
 801ba66:	eb04 060e 	add.w	r6, r4, lr
 801ba6a:	dc02      	bgt.n	801ba72 <__ieee754_sqrt+0xce>
 801ba6c:	d113      	bne.n	801ba96 <__ieee754_sqrt+0xf2>
 801ba6e:	429e      	cmp	r6, r3
 801ba70:	d811      	bhi.n	801ba96 <__ieee754_sqrt+0xf2>
 801ba72:	2e00      	cmp	r6, #0
 801ba74:	eb06 0e04 	add.w	lr, r6, r4
 801ba78:	da43      	bge.n	801bb02 <__ieee754_sqrt+0x15e>
 801ba7a:	f1be 0f00 	cmp.w	lr, #0
 801ba7e:	db40      	blt.n	801bb02 <__ieee754_sqrt+0x15e>
 801ba80:	f10c 0801 	add.w	r8, ip, #1
 801ba84:	eba2 020c 	sub.w	r2, r2, ip
 801ba88:	429e      	cmp	r6, r3
 801ba8a:	bf88      	it	hi
 801ba8c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801ba90:	1b9b      	subs	r3, r3, r6
 801ba92:	4421      	add	r1, r4
 801ba94:	46c4      	mov	ip, r8
 801ba96:	0052      	lsls	r2, r2, #1
 801ba98:	3f01      	subs	r7, #1
 801ba9a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801ba9e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801baa2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801baa6:	d1dd      	bne.n	801ba64 <__ieee754_sqrt+0xc0>
 801baa8:	4313      	orrs	r3, r2
 801baaa:	d006      	beq.n	801baba <__ieee754_sqrt+0x116>
 801baac:	1c4c      	adds	r4, r1, #1
 801baae:	bf13      	iteet	ne
 801bab0:	3101      	addne	r1, #1
 801bab2:	3001      	addeq	r0, #1
 801bab4:	4639      	moveq	r1, r7
 801bab6:	f021 0101 	bicne.w	r1, r1, #1
 801baba:	1043      	asrs	r3, r0, #1
 801babc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801bac0:	0849      	lsrs	r1, r1, #1
 801bac2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801bac6:	07c2      	lsls	r2, r0, #31
 801bac8:	bf48      	it	mi
 801baca:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801bace:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801bad2:	460c      	mov	r4, r1
 801bad4:	463d      	mov	r5, r7
 801bad6:	e77f      	b.n	801b9d8 <__ieee754_sqrt+0x34>
 801bad8:	0ada      	lsrs	r2, r3, #11
 801bada:	3815      	subs	r0, #21
 801badc:	055b      	lsls	r3, r3, #21
 801bade:	2a00      	cmp	r2, #0
 801bae0:	d0fa      	beq.n	801bad8 <__ieee754_sqrt+0x134>
 801bae2:	02d7      	lsls	r7, r2, #11
 801bae4:	d50a      	bpl.n	801bafc <__ieee754_sqrt+0x158>
 801bae6:	f1c1 0420 	rsb	r4, r1, #32
 801baea:	fa23 f404 	lsr.w	r4, r3, r4
 801baee:	1e4d      	subs	r5, r1, #1
 801baf0:	408b      	lsls	r3, r1
 801baf2:	4322      	orrs	r2, r4
 801baf4:	1b41      	subs	r1, r0, r5
 801baf6:	e788      	b.n	801ba0a <__ieee754_sqrt+0x66>
 801baf8:	4608      	mov	r0, r1
 801bafa:	e7f0      	b.n	801bade <__ieee754_sqrt+0x13a>
 801bafc:	0052      	lsls	r2, r2, #1
 801bafe:	3101      	adds	r1, #1
 801bb00:	e7ef      	b.n	801bae2 <__ieee754_sqrt+0x13e>
 801bb02:	46e0      	mov	r8, ip
 801bb04:	e7be      	b.n	801ba84 <__ieee754_sqrt+0xe0>
 801bb06:	bf00      	nop
 801bb08:	7ff00000 	.word	0x7ff00000

0801bb0c <fabs>:
 801bb0c:	ec51 0b10 	vmov	r0, r1, d0
 801bb10:	ee10 2a10 	vmov	r2, s0
 801bb14:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801bb18:	ec43 2b10 	vmov	d0, r2, r3
 801bb1c:	4770      	bx	lr

0801bb1e <finite>:
 801bb1e:	b082      	sub	sp, #8
 801bb20:	ed8d 0b00 	vstr	d0, [sp]
 801bb24:	9801      	ldr	r0, [sp, #4]
 801bb26:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801bb2a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801bb2e:	0fc0      	lsrs	r0, r0, #31
 801bb30:	b002      	add	sp, #8
 801bb32:	4770      	bx	lr
 801bb34:	0000      	movs	r0, r0
	...

0801bb38 <nan>:
 801bb38:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801bb40 <nan+0x8>
 801bb3c:	4770      	bx	lr
 801bb3e:	bf00      	nop
 801bb40:	00000000 	.word	0x00000000
 801bb44:	7ff80000 	.word	0x7ff80000

0801bb48 <rint>:
 801bb48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801bb4a:	ec51 0b10 	vmov	r0, r1, d0
 801bb4e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801bb52:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801bb56:	2e13      	cmp	r6, #19
 801bb58:	ee10 4a10 	vmov	r4, s0
 801bb5c:	460b      	mov	r3, r1
 801bb5e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801bb62:	dc58      	bgt.n	801bc16 <rint+0xce>
 801bb64:	2e00      	cmp	r6, #0
 801bb66:	da2b      	bge.n	801bbc0 <rint+0x78>
 801bb68:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801bb6c:	4302      	orrs	r2, r0
 801bb6e:	d023      	beq.n	801bbb8 <rint+0x70>
 801bb70:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801bb74:	4302      	orrs	r2, r0
 801bb76:	4254      	negs	r4, r2
 801bb78:	4314      	orrs	r4, r2
 801bb7a:	0c4b      	lsrs	r3, r1, #17
 801bb7c:	0b24      	lsrs	r4, r4, #12
 801bb7e:	045b      	lsls	r3, r3, #17
 801bb80:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801bb84:	ea44 0103 	orr.w	r1, r4, r3
 801bb88:	4b32      	ldr	r3, [pc, #200]	; (801bc54 <rint+0x10c>)
 801bb8a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801bb8e:	e9d3 6700 	ldrd	r6, r7, [r3]
 801bb92:	4602      	mov	r2, r0
 801bb94:	460b      	mov	r3, r1
 801bb96:	4630      	mov	r0, r6
 801bb98:	4639      	mov	r1, r7
 801bb9a:	f7e4 fb77 	bl	800028c <__adddf3>
 801bb9e:	e9cd 0100 	strd	r0, r1, [sp]
 801bba2:	463b      	mov	r3, r7
 801bba4:	e9dd 0100 	ldrd	r0, r1, [sp]
 801bba8:	4632      	mov	r2, r6
 801bbaa:	f7e4 fb6d 	bl	8000288 <__aeabi_dsub>
 801bbae:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801bbb2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801bbb6:	4639      	mov	r1, r7
 801bbb8:	ec41 0b10 	vmov	d0, r0, r1
 801bbbc:	b003      	add	sp, #12
 801bbbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bbc0:	4a25      	ldr	r2, [pc, #148]	; (801bc58 <rint+0x110>)
 801bbc2:	4132      	asrs	r2, r6
 801bbc4:	ea01 0702 	and.w	r7, r1, r2
 801bbc8:	4307      	orrs	r7, r0
 801bbca:	d0f5      	beq.n	801bbb8 <rint+0x70>
 801bbcc:	0851      	lsrs	r1, r2, #1
 801bbce:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 801bbd2:	4314      	orrs	r4, r2
 801bbd4:	d00c      	beq.n	801bbf0 <rint+0xa8>
 801bbd6:	ea23 0201 	bic.w	r2, r3, r1
 801bbda:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801bbde:	2e13      	cmp	r6, #19
 801bbe0:	fa43 f606 	asr.w	r6, r3, r6
 801bbe4:	bf0c      	ite	eq
 801bbe6:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801bbea:	2400      	movne	r4, #0
 801bbec:	ea42 0306 	orr.w	r3, r2, r6
 801bbf0:	4918      	ldr	r1, [pc, #96]	; (801bc54 <rint+0x10c>)
 801bbf2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801bbf6:	4622      	mov	r2, r4
 801bbf8:	e9d5 4500 	ldrd	r4, r5, [r5]
 801bbfc:	4620      	mov	r0, r4
 801bbfe:	4629      	mov	r1, r5
 801bc00:	f7e4 fb44 	bl	800028c <__adddf3>
 801bc04:	e9cd 0100 	strd	r0, r1, [sp]
 801bc08:	e9dd 0100 	ldrd	r0, r1, [sp]
 801bc0c:	4622      	mov	r2, r4
 801bc0e:	462b      	mov	r3, r5
 801bc10:	f7e4 fb3a 	bl	8000288 <__aeabi_dsub>
 801bc14:	e7d0      	b.n	801bbb8 <rint+0x70>
 801bc16:	2e33      	cmp	r6, #51	; 0x33
 801bc18:	dd07      	ble.n	801bc2a <rint+0xe2>
 801bc1a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801bc1e:	d1cb      	bne.n	801bbb8 <rint+0x70>
 801bc20:	ee10 2a10 	vmov	r2, s0
 801bc24:	f7e4 fb32 	bl	800028c <__adddf3>
 801bc28:	e7c6      	b.n	801bbb8 <rint+0x70>
 801bc2a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801bc2e:	f04f 36ff 	mov.w	r6, #4294967295
 801bc32:	40d6      	lsrs	r6, r2
 801bc34:	4230      	tst	r0, r6
 801bc36:	d0bf      	beq.n	801bbb8 <rint+0x70>
 801bc38:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 801bc3c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 801bc40:	bf1f      	itttt	ne
 801bc42:	ea24 0101 	bicne.w	r1, r4, r1
 801bc46:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801bc4a:	fa44 f202 	asrne.w	r2, r4, r2
 801bc4e:	ea41 0402 	orrne.w	r4, r1, r2
 801bc52:	e7cd      	b.n	801bbf0 <rint+0xa8>
 801bc54:	0801c458 	.word	0x0801c458
 801bc58:	000fffff 	.word	0x000fffff
 801bc5c:	00000000 	.word	0x00000000

0801bc60 <scalbn>:
 801bc60:	b570      	push	{r4, r5, r6, lr}
 801bc62:	ec55 4b10 	vmov	r4, r5, d0
 801bc66:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801bc6a:	4606      	mov	r6, r0
 801bc6c:	462b      	mov	r3, r5
 801bc6e:	b99a      	cbnz	r2, 801bc98 <scalbn+0x38>
 801bc70:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801bc74:	4323      	orrs	r3, r4
 801bc76:	d036      	beq.n	801bce6 <scalbn+0x86>
 801bc78:	4b39      	ldr	r3, [pc, #228]	; (801bd60 <scalbn+0x100>)
 801bc7a:	4629      	mov	r1, r5
 801bc7c:	ee10 0a10 	vmov	r0, s0
 801bc80:	2200      	movs	r2, #0
 801bc82:	f7e4 fcb9 	bl	80005f8 <__aeabi_dmul>
 801bc86:	4b37      	ldr	r3, [pc, #220]	; (801bd64 <scalbn+0x104>)
 801bc88:	429e      	cmp	r6, r3
 801bc8a:	4604      	mov	r4, r0
 801bc8c:	460d      	mov	r5, r1
 801bc8e:	da10      	bge.n	801bcb2 <scalbn+0x52>
 801bc90:	a32b      	add	r3, pc, #172	; (adr r3, 801bd40 <scalbn+0xe0>)
 801bc92:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc96:	e03a      	b.n	801bd0e <scalbn+0xae>
 801bc98:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801bc9c:	428a      	cmp	r2, r1
 801bc9e:	d10c      	bne.n	801bcba <scalbn+0x5a>
 801bca0:	ee10 2a10 	vmov	r2, s0
 801bca4:	4620      	mov	r0, r4
 801bca6:	4629      	mov	r1, r5
 801bca8:	f7e4 faf0 	bl	800028c <__adddf3>
 801bcac:	4604      	mov	r4, r0
 801bcae:	460d      	mov	r5, r1
 801bcb0:	e019      	b.n	801bce6 <scalbn+0x86>
 801bcb2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801bcb6:	460b      	mov	r3, r1
 801bcb8:	3a36      	subs	r2, #54	; 0x36
 801bcba:	4432      	add	r2, r6
 801bcbc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801bcc0:	428a      	cmp	r2, r1
 801bcc2:	dd08      	ble.n	801bcd6 <scalbn+0x76>
 801bcc4:	2d00      	cmp	r5, #0
 801bcc6:	a120      	add	r1, pc, #128	; (adr r1, 801bd48 <scalbn+0xe8>)
 801bcc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bccc:	da1c      	bge.n	801bd08 <scalbn+0xa8>
 801bcce:	a120      	add	r1, pc, #128	; (adr r1, 801bd50 <scalbn+0xf0>)
 801bcd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bcd4:	e018      	b.n	801bd08 <scalbn+0xa8>
 801bcd6:	2a00      	cmp	r2, #0
 801bcd8:	dd08      	ble.n	801bcec <scalbn+0x8c>
 801bcda:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801bcde:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801bce2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801bce6:	ec45 4b10 	vmov	d0, r4, r5
 801bcea:	bd70      	pop	{r4, r5, r6, pc}
 801bcec:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801bcf0:	da19      	bge.n	801bd26 <scalbn+0xc6>
 801bcf2:	f24c 3350 	movw	r3, #50000	; 0xc350
 801bcf6:	429e      	cmp	r6, r3
 801bcf8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801bcfc:	dd0a      	ble.n	801bd14 <scalbn+0xb4>
 801bcfe:	a112      	add	r1, pc, #72	; (adr r1, 801bd48 <scalbn+0xe8>)
 801bd00:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bd04:	2b00      	cmp	r3, #0
 801bd06:	d1e2      	bne.n	801bcce <scalbn+0x6e>
 801bd08:	a30f      	add	r3, pc, #60	; (adr r3, 801bd48 <scalbn+0xe8>)
 801bd0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd0e:	f7e4 fc73 	bl	80005f8 <__aeabi_dmul>
 801bd12:	e7cb      	b.n	801bcac <scalbn+0x4c>
 801bd14:	a10a      	add	r1, pc, #40	; (adr r1, 801bd40 <scalbn+0xe0>)
 801bd16:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bd1a:	2b00      	cmp	r3, #0
 801bd1c:	d0b8      	beq.n	801bc90 <scalbn+0x30>
 801bd1e:	a10e      	add	r1, pc, #56	; (adr r1, 801bd58 <scalbn+0xf8>)
 801bd20:	e9d1 0100 	ldrd	r0, r1, [r1]
 801bd24:	e7b4      	b.n	801bc90 <scalbn+0x30>
 801bd26:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801bd2a:	3236      	adds	r2, #54	; 0x36
 801bd2c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801bd30:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801bd34:	4620      	mov	r0, r4
 801bd36:	4b0c      	ldr	r3, [pc, #48]	; (801bd68 <scalbn+0x108>)
 801bd38:	2200      	movs	r2, #0
 801bd3a:	e7e8      	b.n	801bd0e <scalbn+0xae>
 801bd3c:	f3af 8000 	nop.w
 801bd40:	c2f8f359 	.word	0xc2f8f359
 801bd44:	01a56e1f 	.word	0x01a56e1f
 801bd48:	8800759c 	.word	0x8800759c
 801bd4c:	7e37e43c 	.word	0x7e37e43c
 801bd50:	8800759c 	.word	0x8800759c
 801bd54:	fe37e43c 	.word	0xfe37e43c
 801bd58:	c2f8f359 	.word	0xc2f8f359
 801bd5c:	81a56e1f 	.word	0x81a56e1f
 801bd60:	43500000 	.word	0x43500000
 801bd64:	ffff3cb0 	.word	0xffff3cb0
 801bd68:	3c900000 	.word	0x3c900000

0801bd6c <_init>:
 801bd6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bd6e:	bf00      	nop
 801bd70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bd72:	bc08      	pop	{r3}
 801bd74:	469e      	mov	lr, r3
 801bd76:	4770      	bx	lr

0801bd78 <_fini>:
 801bd78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bd7a:	bf00      	nop
 801bd7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bd7e:	bc08      	pop	{r3}
 801bd80:	469e      	mov	lr, r3
 801bd82:	4770      	bx	lr
